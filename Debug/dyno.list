
dyno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c7a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0801c938  0801c938  0002c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d20c  0801d20c  0002d20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d214  0801d214  0002d214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d218  0801d218  0002d218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007fc  20000000  0801d21c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000307fc  2**0
                  CONTENTS
  8 .bss          00006854  200007fc  200007fc  000307fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000700  20007050  20007050  000307fc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000307fc  2**0
                  CONTENTS, READONLY
 11 .debug_info   000471bb  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009508  00000000  00000000  000779e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001f51a  00000000  00000000  00080eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  000a0410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001400b  00000000  00000000  000a0c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c350  00000000  00000000  000b4ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000c0ff3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000744c  00000000  00000000  000c1070  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000440  00000000  00000000  000c84c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007fc 	.word	0x200007fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c91c 	.word	0x0801c91c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000800 	.word	0x20000800
 80001cc:	0801c91c 	.word	0x0801c91c

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b500      	push	{lr}
 80001d2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80001de:	485d      	ldr	r0, [pc, #372]	; (8000354 <MX_ADC1_Init+0x184>)
 80001e0:	4a5d      	ldr	r2, [pc, #372]	; (8000358 <MX_ADC1_Init+0x188>)
 80001e2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80001e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001e8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ea:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80001ec:	2201      	movs	r2, #1
 80001ee:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f0:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f8:	4958      	ldr	r1, [pc, #352]	; (800035c <MX_ADC1_Init+0x18c>)
 80001fa:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 12;
 80001fe:	210c      	movs	r1, #12
 8000200:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000202:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000206:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000208:	f001 fa41 	bl	800168e <HAL_ADC_Init>
 800020c:	2800      	cmp	r0, #0
 800020e:	d179      	bne.n	8000304 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000210:	2300      	movs	r3, #0
 8000212:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000214:	2301      	movs	r3, #1
 8000216:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000218:	2304      	movs	r3, #4
 800021a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800021c:	4669      	mov	r1, sp
 800021e:	484d      	ldr	r0, [pc, #308]	; (8000354 <MX_ADC1_Init+0x184>)
 8000220:	f001 fe78 	bl	8001f14 <HAL_ADC_ConfigChannel>
 8000224:	2800      	cmp	r0, #0
 8000226:	d170      	bne.n	800030a <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000228:	2301      	movs	r3, #1
 800022a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800022c:	2302      	movs	r3, #2
 800022e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000230:	4669      	mov	r1, sp
 8000232:	4848      	ldr	r0, [pc, #288]	; (8000354 <MX_ADC1_Init+0x184>)
 8000234:	f001 fe6e 	bl	8001f14 <HAL_ADC_ConfigChannel>
 8000238:	2800      	cmp	r0, #0
 800023a:	d169      	bne.n	8000310 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000240:	2303      	movs	r3, #3
 8000242:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000244:	4669      	mov	r1, sp
 8000246:	4843      	ldr	r0, [pc, #268]	; (8000354 <MX_ADC1_Init+0x184>)
 8000248:	f001 fe64 	bl	8001f14 <HAL_ADC_ConfigChannel>
 800024c:	2800      	cmp	r0, #0
 800024e:	d162      	bne.n	8000316 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000250:	2303      	movs	r3, #3
 8000252:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000254:	2304      	movs	r3, #4
 8000256:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000258:	4669      	mov	r1, sp
 800025a:	483e      	ldr	r0, [pc, #248]	; (8000354 <MX_ADC1_Init+0x184>)
 800025c:	f001 fe5a 	bl	8001f14 <HAL_ADC_ConfigChannel>
 8000260:	2800      	cmp	r0, #0
 8000262:	d15b      	bne.n	800031c <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000264:	2306      	movs	r3, #6
 8000266:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8000268:	2305      	movs	r3, #5
 800026a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026c:	4669      	mov	r1, sp
 800026e:	4839      	ldr	r0, [pc, #228]	; (8000354 <MX_ADC1_Init+0x184>)
 8000270:	f001 fe50 	bl	8001f14 <HAL_ADC_ConfigChannel>
 8000274:	2800      	cmp	r0, #0
 8000276:	d154      	bne.n	8000322 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000278:	2307      	movs	r3, #7
 800027a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 800027c:	2306      	movs	r3, #6
 800027e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	4669      	mov	r1, sp
 8000282:	4834      	ldr	r0, [pc, #208]	; (8000354 <MX_ADC1_Init+0x184>)
 8000284:	f001 fe46 	bl	8001f14 <HAL_ADC_ConfigChannel>
 8000288:	2800      	cmp	r0, #0
 800028a:	d14d      	bne.n	8000328 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800028c:	2308      	movs	r3, #8
 800028e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000290:	2307      	movs	r3, #7
 8000292:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	4669      	mov	r1, sp
 8000296:	482f      	ldr	r0, [pc, #188]	; (8000354 <MX_ADC1_Init+0x184>)
 8000298:	f001 fe3c 	bl	8001f14 <HAL_ADC_ConfigChannel>
 800029c:	2800      	cmp	r0, #0
 800029e:	d146      	bne.n	800032e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80002a0:	2309      	movs	r3, #9
 80002a2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 80002a4:	2308      	movs	r3, #8
 80002a6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a8:	4669      	mov	r1, sp
 80002aa:	482a      	ldr	r0, [pc, #168]	; (8000354 <MX_ADC1_Init+0x184>)
 80002ac:	f001 fe32 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d13f      	bne.n	8000334 <MX_ADC1_Init+0x164>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002b4:	230a      	movs	r3, #10
 80002b6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80002b8:	2309      	movs	r3, #9
 80002ba:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002bc:	4669      	mov	r1, sp
 80002be:	4825      	ldr	r0, [pc, #148]	; (8000354 <MX_ADC1_Init+0x184>)
 80002c0:	f001 fe28 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d138      	bne.n	800033a <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002c8:	230b      	movs	r3, #11
 80002ca:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80002cc:	230a      	movs	r3, #10
 80002ce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d0:	4669      	mov	r1, sp
 80002d2:	4820      	ldr	r0, [pc, #128]	; (8000354 <MX_ADC1_Init+0x184>)
 80002d4:	f001 fe1e 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80002d8:	bb90      	cbnz	r0, 8000340 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002da:	230c      	movs	r3, #12
 80002dc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80002de:	230b      	movs	r3, #11
 80002e0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	4669      	mov	r1, sp
 80002e4:	481b      	ldr	r0, [pc, #108]	; (8000354 <MX_ADC1_Init+0x184>)
 80002e6:	f001 fe15 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80002ea:	bb60      	cbnz	r0, 8000346 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80002ec:	230d      	movs	r3, #13
 80002ee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80002f0:	230c      	movs	r3, #12
 80002f2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f4:	4669      	mov	r1, sp
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <MX_ADC1_Init+0x184>)
 80002f8:	f001 fe0c 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80002fc:	bb30      	cbnz	r0, 800034c <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
  }

}
 80002fe:	b005      	add	sp, #20
 8000300:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000304:	f000 fc28 	bl	8000b58 <Error_Handler>
 8000308:	e782      	b.n	8000210 <MX_ADC1_Init+0x40>
    Error_Handler();
 800030a:	f000 fc25 	bl	8000b58 <Error_Handler>
 800030e:	e78b      	b.n	8000228 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000310:	f000 fc22 	bl	8000b58 <Error_Handler>
 8000314:	e792      	b.n	800023c <MX_ADC1_Init+0x6c>
    Error_Handler();
 8000316:	f000 fc1f 	bl	8000b58 <Error_Handler>
 800031a:	e799      	b.n	8000250 <MX_ADC1_Init+0x80>
    Error_Handler();
 800031c:	f000 fc1c 	bl	8000b58 <Error_Handler>
 8000320:	e7a0      	b.n	8000264 <MX_ADC1_Init+0x94>
    Error_Handler();
 8000322:	f000 fc19 	bl	8000b58 <Error_Handler>
 8000326:	e7a7      	b.n	8000278 <MX_ADC1_Init+0xa8>
    Error_Handler();
 8000328:	f000 fc16 	bl	8000b58 <Error_Handler>
 800032c:	e7ae      	b.n	800028c <MX_ADC1_Init+0xbc>
    Error_Handler();
 800032e:	f000 fc13 	bl	8000b58 <Error_Handler>
 8000332:	e7b5      	b.n	80002a0 <MX_ADC1_Init+0xd0>
    Error_Handler();
 8000334:	f000 fc10 	bl	8000b58 <Error_Handler>
 8000338:	e7bc      	b.n	80002b4 <MX_ADC1_Init+0xe4>
    Error_Handler();
 800033a:	f000 fc0d 	bl	8000b58 <Error_Handler>
 800033e:	e7c3      	b.n	80002c8 <MX_ADC1_Init+0xf8>
    Error_Handler();
 8000340:	f000 fc0a 	bl	8000b58 <Error_Handler>
 8000344:	e7c9      	b.n	80002da <MX_ADC1_Init+0x10a>
    Error_Handler();
 8000346:	f000 fc07 	bl	8000b58 <Error_Handler>
 800034a:	e7cf      	b.n	80002ec <MX_ADC1_Init+0x11c>
    Error_Handler();
 800034c:	f000 fc04 	bl	8000b58 <Error_Handler>
}
 8000350:	e7d5      	b.n	80002fe <MX_ADC1_Init+0x12e>
 8000352:	bf00      	nop
 8000354:	20005b78 	.word	0x20005b78
 8000358:	40012000 	.word	0x40012000
 800035c:	0f000001 	.word	0x0f000001

08000360 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000364:	2300      	movs	r3, #0
 8000366:	9305      	str	r3, [sp, #20]
 8000368:	9306      	str	r3, [sp, #24]
 800036a:	9307      	str	r3, [sp, #28]
 800036c:	9308      	str	r3, [sp, #32]
 800036e:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8000370:	6802      	ldr	r2, [r0, #0]
 8000372:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000376:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800037a:	429a      	cmp	r2, r3
 800037c:	d001      	beq.n	8000382 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800037e:	b00a      	add	sp, #40	; 0x28
 8000380:	bd70      	pop	{r4, r5, r6, pc}
 8000382:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000384:	2500      	movs	r5, #0
 8000386:	9501      	str	r5, [sp, #4]
 8000388:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800038c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800038e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000392:	645a      	str	r2, [r3, #68]	; 0x44
 8000394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000396:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800039a:	9201      	str	r2, [sp, #4]
 800039c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	9502      	str	r5, [sp, #8]
 80003a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003a2:	f042 0204 	orr.w	r2, r2, #4
 80003a6:	631a      	str	r2, [r3, #48]	; 0x30
 80003a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003aa:	f002 0204 	and.w	r2, r2, #4
 80003ae:	9202      	str	r2, [sp, #8]
 80003b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	9503      	str	r5, [sp, #12]
 80003b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b6:	f042 0201 	orr.w	r2, r2, #1
 80003ba:	631a      	str	r2, [r3, #48]	; 0x30
 80003bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003be:	f002 0201 	and.w	r2, r2, #1
 80003c2:	9203      	str	r2, [sp, #12]
 80003c4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	9504      	str	r5, [sp, #16]
 80003c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003ca:	f042 0202 	orr.w	r2, r2, #2
 80003ce:	631a      	str	r2, [r3, #48]	; 0x30
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	f003 0302 	and.w	r3, r3, #2
 80003d6:	9304      	str	r3, [sp, #16]
 80003d8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003da:	230f      	movs	r3, #15
 80003dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003de:	2603      	movs	r6, #3
 80003e0:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e2:	a905      	add	r1, sp, #20
 80003e4:	4817      	ldr	r0, [pc, #92]	; (8000444 <HAL_ADC_MspInit+0xe4>)
 80003e6:	f005 fba9 	bl	8005b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003ea:	23cf      	movs	r3, #207	; 0xcf
 80003ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ee:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	a905      	add	r1, sp, #20
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <HAL_ADC_MspInit+0xe8>)
 80003f6:	f005 fba1 	bl	8005b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003fa:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	a905      	add	r1, sp, #20
 8000402:	4812      	ldr	r0, [pc, #72]	; (800044c <HAL_ADC_MspInit+0xec>)
 8000404:	f005 fb9a 	bl	8005b3c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000408:	4811      	ldr	r0, [pc, #68]	; (8000450 <HAL_ADC_MspInit+0xf0>)
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_ADC_MspInit+0xf4>)
 800040c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800040e:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000410:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000412:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000418:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800041a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800041e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000424:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800042a:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800042c:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800042e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000430:	f003 fb7b 	bl	8003b2a <HAL_DMA_Init>
 8000434:	b918      	cbnz	r0, 800043e <HAL_ADC_MspInit+0xde>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_ADC_MspInit+0xf0>)
 8000438:	63a3      	str	r3, [r4, #56]	; 0x38
 800043a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800043c:	e79f      	b.n	800037e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800043e:	f000 fb8b 	bl	8000b58 <Error_Handler>
 8000442:	e7f8      	b.n	8000436 <HAL_ADC_MspInit+0xd6>
 8000444:	40020800 	.word	0x40020800
 8000448:	40020000 	.word	0x40020000
 800044c:	40020400 	.word	0x40020400
 8000450:	20005bd8 	.word	0x20005bd8
 8000454:	40026410 	.word	0x40026410

08000458 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 8000458:	6802      	ldr	r2, [r0, #0]
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_ADC_MspDeInit+0x38>)
 800045c:	429a      	cmp	r2, r3
 800045e:	d000      	beq.n	8000462 <HAL_ADC_MspDeInit+0xa>
 8000460:	4770      	bx	lr
{
 8000462:	b510      	push	{r4, lr}
 8000464:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <HAL_ADC_MspDeInit+0x3c>)
 8000468:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800046a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800046e:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8000470:	210f      	movs	r1, #15
 8000472:	4809      	ldr	r0, [pc, #36]	; (8000498 <HAL_ADC_MspDeInit+0x40>)
 8000474:	f005 fc50 	bl	8005d18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000478:	21cf      	movs	r1, #207	; 0xcf
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <HAL_ADC_MspDeInit+0x44>)
 800047c:	f005 fc4c 	bl	8005d18 <HAL_GPIO_DeInit>
                          |GPIO_PIN_6|GPIO_PIN_7);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8000480:	2103      	movs	r1, #3
 8000482:	4807      	ldr	r0, [pc, #28]	; (80004a0 <HAL_ADC_MspDeInit+0x48>)
 8000484:	f005 fc48 	bl	8005d18 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8000488:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800048a:	f003 fbb7 	bl	8003bfc <HAL_DMA_DeInit>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	40012000 	.word	0x40012000
 8000494:	40023800 	.word	0x40023800
 8000498:	40020800 	.word	0x40020800
 800049c:	40020000 	.word	0x40020000
 80004a0:	40020400 	.word	0x40020400

080004a4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004a4:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80004a6:	480b      	ldr	r0, [pc, #44]	; (80004d4 <MX_CAN1_Init+0x30>)
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_CAN1_Init+0x34>)
 80004aa:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80004ac:	2310      	movs	r3, #16
 80004ae:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004b4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004b6:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004b8:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004ba:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004bc:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004be:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004c0:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004c2:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004c4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004c6:	f002 fa3c 	bl	8002942 <HAL_CAN_Init>
 80004ca:	b900      	cbnz	r0, 80004ce <MX_CAN1_Init+0x2a>
 80004cc:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80004ce:	f000 fb43 	bl	8000b58 <Error_Handler>
  }

}
 80004d2:	e7fb      	b.n	80004cc <MX_CAN1_Init+0x28>
 80004d4:	20005c38 	.word	0x20005c38
 80004d8:	40006400 	.word	0x40006400

080004dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80004dc:	b500      	push	{lr}
 80004de:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	2300      	movs	r3, #0
 80004e2:	9303      	str	r3, [sp, #12]
 80004e4:	9304      	str	r3, [sp, #16]
 80004e6:	9305      	str	r3, [sp, #20]
 80004e8:	9306      	str	r3, [sp, #24]
 80004ea:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 80004ec:	6802      	ldr	r2, [r0, #0]
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_CAN_MspInit+0x64>)
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d002      	beq.n	80004fa <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004f4:	b009      	add	sp, #36	; 0x24
 80004f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004fa:	2100      	movs	r1, #0
 80004fc:	9101      	str	r1, [sp, #4]
 80004fe:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000504:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000508:	641a      	str	r2, [r3, #64]	; 0x40
 800050a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	9102      	str	r1, [sp, #8]
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	f042 0208 	orr.w	r2, r2, #8
 800051c:	631a      	str	r2, [r3, #48]	; 0x30
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	9302      	str	r3, [sp, #8]
 8000526:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000528:	2303      	movs	r3, #3
 800052a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2202      	movs	r2, #2
 800052e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000530:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000532:	2309      	movs	r3, #9
 8000534:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000536:	a903      	add	r1, sp, #12
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <HAL_CAN_MspInit+0x68>)
 800053a:	f005 faff 	bl	8005b3c <HAL_GPIO_Init>
}
 800053e:	e7d9      	b.n	80004f4 <HAL_CAN_MspInit+0x18>
 8000540:	40006400 	.word	0x40006400
 8000544:	40020c00 	.word	0x40020c00

08000548 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000548:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 800054a:	6802      	ldr	r2, [r0, #0]
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_CAN_MspDeInit+0x20>)
 800054e:	429a      	cmp	r2, r3
 8000550:	d000      	beq.n	8000554 <HAL_CAN_MspDeInit+0xc>
 8000552:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <HAL_CAN_MspDeInit+0x24>)
 8000556:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000558:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800055e:	2103      	movs	r1, #3
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <HAL_CAN_MspDeInit+0x28>)
 8000562:	f005 fbd9 	bl	8005d18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
} 
 8000566:	e7f4      	b.n	8000552 <HAL_CAN_MspDeInit+0xa>
 8000568:	40006400 	.word	0x40006400
 800056c:	40023800 	.word	0x40023800
 8000570:	40020c00 	.word	0x40020c00

08000574 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000574:	b500      	push	{lr}
 8000576:	b083      	sub	sp, #12
  DAC_ChannelConfTypeDef sConfig = {0};
 8000578:	2300      	movs	r3, #0
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800057e:	4810      	ldr	r0, [pc, #64]	; (80005c0 <MX_DAC_Init+0x4c>)
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_DAC_Init+0x50>)
 8000582:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000584:	f003 f859 	bl	800363a <HAL_DAC_Init>
 8000588:	b980      	cbnz	r0, 80005ac <MX_DAC_Init+0x38>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800058a:	2200      	movs	r2, #0
 800058c:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800058e:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000590:	4669      	mov	r1, sp
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <MX_DAC_Init+0x4c>)
 8000594:	f003 f9a4 	bl	80038e0 <HAL_DAC_ConfigChannel>
 8000598:	b958      	cbnz	r0, 80005b2 <MX_DAC_Init+0x3e>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800059a:	2210      	movs	r2, #16
 800059c:	4669      	mov	r1, sp
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <MX_DAC_Init+0x4c>)
 80005a0:	f003 f99e 	bl	80038e0 <HAL_DAC_ConfigChannel>
 80005a4:	b940      	cbnz	r0, 80005b8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
  }

}
 80005a6:	b003      	add	sp, #12
 80005a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005ac:	f000 fad4 	bl	8000b58 <Error_Handler>
 80005b0:	e7eb      	b.n	800058a <MX_DAC_Init+0x16>
    Error_Handler();
 80005b2:	f000 fad1 	bl	8000b58 <Error_Handler>
 80005b6:	e7f0      	b.n	800059a <MX_DAC_Init+0x26>
    Error_Handler();
 80005b8:	f000 face 	bl	8000b58 <Error_Handler>
}
 80005bc:	e7f3      	b.n	80005a6 <MX_DAC_Init+0x32>
 80005be:	bf00      	nop
 80005c0:	20005c60 	.word	0x20005c60
 80005c4:	40007400 	.word	0x40007400

080005c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	9303      	str	r3, [sp, #12]
 80005d0:	9304      	str	r3, [sp, #16]
 80005d2:	9305      	str	r3, [sp, #20]
 80005d4:	9306      	str	r3, [sp, #24]
 80005d6:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC)
 80005d8:	6802      	ldr	r2, [r0, #0]
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_DAC_MspInit+0x6c>)
 80005dc:	429a      	cmp	r2, r3
 80005de:	d001      	beq.n	80005e4 <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005e0:	b008      	add	sp, #32
 80005e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80005e4:	2400      	movs	r4, #0
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80005f2:	641a      	str	r2, [r3, #64]	; 0x40
 80005f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	9402      	str	r4, [sp, #8]
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f042 0201 	orr.w	r2, r2, #1
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000612:	2330      	movs	r3, #48	; 0x30
 8000614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000616:	2303      	movs	r3, #3
 8000618:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	a903      	add	r1, sp, #12
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <HAL_DAC_MspInit+0x70>)
 800061e:	f005 fa8d 	bl	8005b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000622:	4622      	mov	r2, r4
 8000624:	4621      	mov	r1, r4
 8000626:	2036      	movs	r0, #54	; 0x36
 8000628:	f002 feae 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800062c:	2036      	movs	r0, #54	; 0x36
 800062e:	f002 fedd 	bl	80033ec <HAL_NVIC_EnableIRQ>
}
 8000632:	e7d5      	b.n	80005e0 <HAL_DAC_MspInit+0x18>
 8000634:	40007400 	.word	0x40007400
 8000638:	40020000 	.word	0x40020000

0800063c <HAL_DAC_MspDeInit>:

void HAL_DAC_MspDeInit(DAC_HandleTypeDef* dacHandle)
{
 800063c:	b508      	push	{r3, lr}

  if(dacHandle->Instance==DAC)
 800063e:	6802      	ldr	r2, [r0, #0]
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_DAC_MspDeInit+0x28>)
 8000642:	429a      	cmp	r2, r3
 8000644:	d000      	beq.n	8000648 <HAL_DAC_MspDeInit+0xc>
 8000646:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_DAC_MspDeInit+0x2c>)
 800064a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800064c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8000652:	2130      	movs	r1, #48	; 0x30
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_DAC_MspDeInit+0x30>)
 8000656:	f005 fb5f 	bl	8005d18 <HAL_GPIO_DeInit>

    /* DAC interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 800065a:	2036      	movs	r0, #54	; 0x36
 800065c:	f002 fed4 	bl	8003408 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }
} 
 8000660:	e7f1      	b.n	8000646 <HAL_DAC_MspDeInit+0xa>
 8000662:	bf00      	nop
 8000664:	40007400 	.word	0x40007400
 8000668:	40023800 	.word	0x40023800
 800066c:	40020000 	.word	0x40020000

08000670 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000670:	b500      	push	{lr}
 8000672:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000674:	2200      	movs	r2, #0
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_DMA_Init+0x30>)
 800067a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800067c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000680:	6319      	str	r1, [r3, #48]	; 0x30
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800068c:	2105      	movs	r1, #5
 800068e:	2038      	movs	r0, #56	; 0x38
 8000690:	f002 fe7a 	bl	8003388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000694:	2038      	movs	r0, #56	; 0x38
 8000696:	f002 fea9 	bl	80033ec <HAL_NVIC_EnableIRQ>

}
 800069a:	b003      	add	sp, #12
 800069c:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a0:	40023800 	.word	0x40023800

080006a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 80006a4:	b510      	push	{r4, lr}
 80006a6:	b082      	sub	sp, #8
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006a8:	f017 f91c 	bl	80178e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

	bmp280_init_default_params(&bmp280.params);
 80006ac:	4c27      	ldr	r4, [pc, #156]	; (800074c <StartDefaultTask+0xa8>)
 80006ae:	4620      	mov	r0, r4
 80006b0:	f016 f9d5 	bl	8016a5e <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80006b4:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 80006b8:	2376      	movs	r3, #118	; 0x76
 80006ba:	8483      	strh	r3, [r0, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <StartDefaultTask+0xac>)
 80006be:	6283      	str	r3, [r0, #40]	; 0x28

	if(!bmp280_init(&bmp280, &bmp280.params))
 80006c0:	4621      	mov	r1, r4
 80006c2:	f016 f9d5 	bl	8016a70 <bmp280_init>
 80006c6:	b900      	cbnz	r0, 80006ca <StartDefaultTask+0x26>
	{
		__asm__("bkpt");
 80006c8:	be00      	bkpt	0x0000
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADCBuffer, 12);
 80006ca:	220c      	movs	r2, #12
 80006cc:	4921      	ldr	r1, [pc, #132]	; (8000754 <StartDefaultTask+0xb0>)
 80006ce:	4822      	ldr	r0, [pc, #136]	; (8000758 <StartDefaultTask+0xb4>)
 80006d0:	f001 fa3a 	bl	8001b48 <HAL_ADC_Start_DMA>
	osTimerStart(heartBeatTimerHandle, 1000U);
 80006d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <StartDefaultTask+0xb8>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f010 ff86 	bl	80115ec <osTimerStart>
	osTimerStart(hubWatchDogTimerHandle, HUB_WATCH_DOG_INTERVAL_MS);
 80006e0:	210a      	movs	r1, #10
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <StartDefaultTask+0xbc>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	f010 ff81 	bl	80115ec <osTimerStart>

	TIM1->SR &= ~0;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <StartDefaultTask+0xc0>)
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	611a      	str	r2, [r3, #16]
	TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 80006f0:	6a1a      	ldr	r2, [r3, #32]
 80006f2:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80006f6:	f042 0211 	orr.w	r2, r2, #17
 80006fa:	621a      	str	r2, [r3, #32]
	TIM1->DIER |= (TIM_DIER_CC1IE | TIM_DIER_CC2IE | TIM_DIER_CC3IE | TIM_DIER_CC4IE | TIM_DIER_UIE);
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	f042 021f 	orr.w	r2, r2, #31
 8000702:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	601a      	str	r2, [r3, #0]

	TIM2->CR1 |= TIM_CR1_CEN;
 800070c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
	TIM5->CR1 |= TIM_CR1_CEN;
 8000718:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800071c:	6813      	ldr	r3, [r2, #0]
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]
	TIM8->CR1 |= TIM_CR1_CEN;
 8000724:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000728:	6813      	ldr	r3, [r2, #0]
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]

	stepperRel(0, 100, 10000 * ALPHA * 100, 10000 * ALPHA * 100, 1000 * ALPHA * 100);
 8000730:	f640 4345 	movw	r3, #3141	; 0xc45
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	f647 23b7 	movw	r3, #31415	; 0x7ab7
 800073a:	461a      	mov	r2, r3
 800073c:	2164      	movs	r1, #100	; 0x64
 800073e:	2000      	movs	r0, #0
 8000740:	f016 ff21 	bl	8017586 <stepperRel>

  for(;;)
  {
    osDelay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f010 fe8d 	bl	8011464 <osDelay>
 800074a:	e7fb      	b.n	8000744 <StartDefaultTask+0xa0>
 800074c:	2000639c 	.word	0x2000639c
 8000750:	20005c8c 	.word	0x20005c8c
 8000754:	20005bc0 	.word	0x20005bc0
 8000758:	20005b78 	.word	0x20005b78
 800075c:	20005c74 	.word	0x20005c74
 8000760:	20005c80 	.word	0x20005c80
 8000764:	40010000 	.word	0x40010000

08000768 <configureTimerForRunTimeStats>:
{
 8000768:	4770      	bx	lr

0800076a <getRunTimeCounterValue>:
}
 800076a:	2000      	movs	r0, #0
 800076c:	4770      	bx	lr

0800076e <vApplicationStackOverflowHook>:
{
 800076e:	4770      	bx	lr

08000770 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000770:	b510      	push	{r4, lr}
  heartBeatTimerHandle = osTimerNew(heartBeat, osTimerPeriodic, NULL, &heartBeatTimer_attributes);
 8000772:	4c1a      	ldr	r4, [pc, #104]	; (80007dc <MX_FREERTOS_Init+0x6c>)
 8000774:	4623      	mov	r3, r4
 8000776:	2200      	movs	r2, #0
 8000778:	2101      	movs	r1, #1
 800077a:	4819      	ldr	r0, [pc, #100]	; (80007e0 <MX_FREERTOS_Init+0x70>)
 800077c:	f010 febc 	bl	80114f8 <osTimerNew>
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_FREERTOS_Init+0x74>)
 8000782:	6018      	str	r0, [r3, #0]
  envelopeTimeoutTimerHandle = osTimerNew(envelopeTimeout, osTimerOnce, NULL, &envelopeTimeoutTimer_attributes);
 8000784:	f104 0310 	add.w	r3, r4, #16
 8000788:	2200      	movs	r2, #0
 800078a:	4611      	mov	r1, r2
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <MX_FREERTOS_Init+0x78>)
 800078e:	f010 feb3 	bl	80114f8 <osTimerNew>
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_FREERTOS_Init+0x7c>)
 8000794:	6018      	str	r0, [r3, #0]
  hubWatchDogTimerHandle = osTimerNew(hubWatchDog, osTimerPeriodic, NULL, &hubWatchDogTimer_attributes);
 8000796:	f104 0320 	add.w	r3, r4, #32
 800079a:	2200      	movs	r2, #0
 800079c:	2101      	movs	r1, #1
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_FREERTOS_Init+0x80>)
 80007a0:	f010 feaa 	bl	80114f8 <osTimerNew>
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_FREERTOS_Init+0x84>)
 80007a6:	6018      	str	r0, [r3, #0]
  DefaultHandle = osThreadNew(StartDefaultTask, NULL, &Default_attributes);
 80007a8:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_FREERTOS_Init+0x88>)
 80007b0:	f010 fb00 	bl	8010db4 <osThreadNew>
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_FREERTOS_Init+0x8c>)
 80007b6:	6018      	str	r0, [r3, #0]
  analogHandle = osThreadNew(analogTask, NULL, &analog_attributes);
 80007b8:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80007bc:	2100      	movs	r1, #0
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <MX_FREERTOS_Init+0x90>)
 80007c0:	f010 faf8 	bl	8010db4 <osThreadNew>
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_FREERTOS_Init+0x94>)
 80007c6:	6018      	str	r0, [r3, #0]
  communicationHandle = osThreadNew(communicationTask, NULL, &communication_attributes);
 80007c8:	f104 0278 	add.w	r2, r4, #120	; 0x78
 80007cc:	2100      	movs	r1, #0
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <MX_FREERTOS_Init+0x98>)
 80007d0:	f010 faf0 	bl	8010db4 <osThreadNew>
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_FREERTOS_Init+0x9c>)
 80007d6:	6018      	str	r0, [r3, #0]
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	0801c938 	.word	0x0801c938
 80007e0:	080167dd 	.word	0x080167dd
 80007e4:	20005c74 	.word	0x20005c74
 80007e8:	080167c9 	.word	0x080167c9
 80007ec:	20005c78 	.word	0x20005c78
 80007f0:	0801705d 	.word	0x0801705d
 80007f4:	20005c80 	.word	0x20005c80
 80007f8:	080006a5 	.word	0x080006a5
 80007fc:	20005c7c 	.word	0x20005c7c
 8000800:	080163e1 	.word	0x080163e1
 8000804:	20005c88 	.word	0x20005c88
 8000808:	08016501 	.word	0x08016501
 800080c:	20005c84 	.word	0x20005c84

08000810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	2400      	movs	r4, #0
 8000816:	9407      	str	r4, [sp, #28]
 8000818:	9408      	str	r4, [sp, #32]
 800081a:	9409      	str	r4, [sp, #36]	; 0x24
 800081c:	940a      	str	r4, [sp, #40]	; 0x28
 800081e:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	9401      	str	r4, [sp, #4]
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000826:	f042 0204 	orr.w	r2, r2, #4
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
 800082c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082e:	f002 0204 	and.w	r2, r2, #4
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	9402      	str	r4, [sp, #8]
 8000838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800083e:	631a      	str	r2, [r3, #48]	; 0x30
 8000840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000842:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	9403      	str	r4, [sp, #12]
 800084c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084e:	f042 0201 	orr.w	r2, r2, #1
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
 8000854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000856:	f002 0201 	and.w	r2, r2, #1
 800085a:	9203      	str	r2, [sp, #12]
 800085c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	9404      	str	r4, [sp, #16]
 8000860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000862:	f042 0202 	orr.w	r2, r2, #2
 8000866:	631a      	str	r2, [r3, #48]	; 0x30
 8000868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086a:	f002 0202 	and.w	r2, r2, #2
 800086e:	9204      	str	r2, [sp, #16]
 8000870:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	9405      	str	r4, [sp, #20]
 8000874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000876:	f042 0210 	orr.w	r2, r2, #16
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
 800087c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800087e:	f002 0210 	and.w	r2, r2, #16
 8000882:	9205      	str	r2, [sp, #20]
 8000884:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	9406      	str	r4, [sp, #24]
 8000888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088a:	f042 0208 	orr.w	r2, r2, #8
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	9306      	str	r3, [sp, #24]
 8000898:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15|HX711_1_SCK_Pin|HX711_2_SCK_Pin 
 800089a:	4d18      	ldr	r5, [pc, #96]	; (80008fc <MX_GPIO_Init+0xec>)
 800089c:	2201      	movs	r2, #1
 800089e:	f249 013c 	movw	r1, #36924	; 0x903c
 80008a2:	4628      	mov	r0, r5
 80008a4:	f005 fad9 	bl	8005e5a <HAL_GPIO_WritePin>
                          |HX711_3_SCK_Pin|HX711_4_SCK_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HX711_3_DO_Pin|HX711_4_DO_Pin|HX711_1_DO_Pin|HX711_2_DO_Pin;
 80008a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80008ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_GPIO_Init+0xf0>)
 80008b0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	a907      	add	r1, sp, #28
 80008b6:	4628      	mov	r0, r5
 80008b8:	f005 f940 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80008bc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80008c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2601      	movs	r6, #1
 80008c4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	a907      	add	r1, sp, #28
 80008cc:	4628      	mov	r0, r5
 80008ce:	f005 f935 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HX711_1_SCK_Pin|HX711_2_SCK_Pin|HX711_3_SCK_Pin|HX711_4_SCK_Pin;
 80008d2:	233c      	movs	r3, #60	; 0x3c
 80008d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	a907      	add	r1, sp, #28
 80008de:	4628      	mov	r0, r5
 80008e0:	f005 f92c 	bl	8005b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008e4:	4622      	mov	r2, r4
 80008e6:	4621      	mov	r1, r4
 80008e8:	2017      	movs	r0, #23
 80008ea:	f002 fd4d 	bl	8003388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ee:	2017      	movs	r0, #23
 80008f0:	f002 fd7c 	bl	80033ec <HAL_NVIC_EnableIRQ>

}
 80008f4:	b00c      	add	sp, #48	; 0x30
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	10210000 	.word	0x10210000

08000904 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000904:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <MX_I2C1_Init+0x30>)
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_I2C1_Init+0x34>)
 800090a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_I2C1_Init+0x38>)
 800090e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000910:	2300      	movs	r3, #0
 8000912:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000922:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	f006 f813 	bl	800694e <HAL_I2C_Init>
 8000928:	b900      	cbnz	r0, 800092c <MX_I2C1_Init+0x28>
 800092a:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800092c:	f000 f914 	bl	8000b58 <Error_Handler>
  }

}
 8000930:	e7fb      	b.n	800092a <MX_I2C1_Init+0x26>
 8000932:	bf00      	nop
 8000934:	20005c8c 	.word	0x20005c8c
 8000938:	40005400 	.word	0x40005400
 800093c:	00061a80 	.word	0x00061a80

08000940 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000940:	b530      	push	{r4, r5, lr}
 8000942:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	9303      	str	r3, [sp, #12]
 8000948:	9304      	str	r3, [sp, #16]
 800094a:	9305      	str	r3, [sp, #20]
 800094c:	9306      	str	r3, [sp, #24]
 800094e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000950:	6802      	ldr	r2, [r0, #0]
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_I2C_MspInit+0x68>)
 8000954:	429a      	cmp	r2, r3
 8000956:	d001      	beq.n	800095c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000958:	b009      	add	sp, #36	; 0x24
 800095a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	2500      	movs	r5, #0
 800095e:	9501      	str	r5, [sp, #4]
 8000960:	4c12      	ldr	r4, [pc, #72]	; (80009ac <HAL_I2C_MspInit+0x6c>)
 8000962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6323      	str	r3, [r4, #48]	; 0x30
 800096a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000974:	23c0      	movs	r3, #192	; 0xc0
 8000976:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097c:	2301      	movs	r3, #1
 800097e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000984:	2304      	movs	r3, #4
 8000986:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	a903      	add	r1, sp, #12
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_I2C_MspInit+0x70>)
 800098c:	f005 f8d6 	bl	8005b3c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000990:	9502      	str	r5, [sp, #8]
 8000992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000998:	6423      	str	r3, [r4, #64]	; 0x40
 800099a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	9b02      	ldr	r3, [sp, #8]
}
 80009a4:	e7d8      	b.n	8000958 <HAL_I2C_MspInit+0x18>
 80009a6:	bf00      	nop
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400

080009b4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b4:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C1)
 80009b6:	6802      	ldr	r2, [r0, #0]
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_I2C_MspDeInit+0x20>)
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d000      	beq.n	80009c0 <HAL_I2C_MspDeInit+0xc>
 80009be:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <HAL_I2C_MspDeInit+0x24>)
 80009c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80009ca:	21c0      	movs	r1, #192	; 0xc0
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <HAL_I2C_MspDeInit+0x28>)
 80009ce:	f005 f9a3 	bl	8005d18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 80009d2:	e7f4      	b.n	80009be <HAL_I2C_MspDeInit+0xa>
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e4:	2230      	movs	r2, #48	; 0x30
 80009e6:	2100      	movs	r1, #0
 80009e8:	a808      	add	r0, sp, #32
 80009ea:	f018 fb80 	bl	80190ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ee:	2400      	movs	r4, #0
 80009f0:	9403      	str	r4, [sp, #12]
 80009f2:	9404      	str	r4, [sp, #16]
 80009f4:	9405      	str	r4, [sp, #20]
 80009f6:	9406      	str	r4, [sp, #24]
 80009f8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	9401      	str	r4, [sp, #4]
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <SystemClock_Config+0x90>)
 80009fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	9402      	str	r4, [sp, #8]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <SystemClock_Config+0x94>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2502      	movs	r5, #2
 8000a32:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a38:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a3e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a42:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a46:	2307      	movs	r3, #7
 8000a48:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	a808      	add	r0, sp, #32
 8000a4c:	f00a f8f4 	bl	800ac38 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a64:	2105      	movs	r1, #5
 8000a66:	a803      	add	r0, sp, #12
 8000a68:	f00a fba0 	bl	800b1ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000a6c:	b015      	add	sp, #84	; 0x54
 8000a6e:	bd30      	pop	{r4, r5, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <main>:
{
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	b084      	sub	sp, #16
	hx[0].gain = 1; // 128 port A
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <main+0xb4>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	611a      	str	r2, [r3, #16]
	hx[0].offset = 0;
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
	hx[0].gpioSck = GPIOD;
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <main+0xb8>)
 8000a88:	601a      	str	r2, [r3, #0]
	hx[0].pinSck = HX711_1_SCK_Pin;
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	8119      	strh	r1, [r3, #8]
	hx[0].gpioData = GPIOD;
 8000a8e:	605a      	str	r2, [r3, #4]
	hx[0].pinData = HX711_1_DO_Pin;
 8000a90:	2240      	movs	r2, #64	; 0x40
 8000a92:	815a      	strh	r2, [r3, #10]
	HAL_DBGMCU_EnableDBGStandbyMode();
 8000a94:	f000 fd32 	bl	80014fc <HAL_DBGMCU_EnableDBGStandbyMode>
	HAL_DBGMCU_EnableDBGStopMode();
 8000a98:	f000 fd20 	bl	80014dc <HAL_DBGMCU_EnableDBGStopMode>
	DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <main+0xbc>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	60da      	str	r2, [r3, #12]
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM2_STOP;
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	f042 0201 	orr.w	r2, r2, #1
 8000aac:	609a      	str	r2, [r3, #8]
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM5_STOP;
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	f042 0208 	orr.w	r2, r2, #8
 8000ab4:	609a      	str	r2, [r3, #8]
	for (i = sizeof(config_t); i > 0; i--)
 8000ab6:	2364      	movs	r3, #100	; 0x64
	d = (uint8_t *) &config;
 8000ab8:	491f      	ldr	r1, [pc, #124]	; (8000b38 <main+0xc0>)
	s = (uint8_t *) &DefaultConfig;
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <main+0xc4>)
	for (i = sizeof(config_t); i > 0; i--)
 8000abc:	e005      	b.n	8000aca <main+0x52>
		*d++ = *s++;
 8000abe:	7810      	ldrb	r0, [r2, #0]
 8000ac0:	7008      	strb	r0, [r1, #0]
	for (i = sizeof(config_t); i > 0; i--)
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
		*d++ = *s++;
 8000ac6:	3101      	adds	r1, #1
 8000ac8:	3201      	adds	r2, #1
	for (i = sizeof(config_t); i > 0; i--)
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f7      	bne.n	8000abe <main+0x46>
  HAL_Init();
 8000ace:	f000 fc73 	bl	80013b8 <HAL_Init>
  SystemClock_Config();
 8000ad2:	f7ff ff85 	bl	80009e0 <SystemClock_Config>
  MX_GPIO_Init();
 8000ad6:	f7ff fe9b 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ada:	f7ff fdc9 	bl	8000670 <MX_DMA_Init>
  MX_DAC_Init();
 8000ade:	f7ff fd49 	bl	8000574 <MX_DAC_Init>
  MX_TIM5_Init();
 8000ae2:	f000 fa63 	bl	8000fac <MX_TIM5_Init>
  MX_ADC1_Init();
 8000ae6:	f7ff fb73 	bl	80001d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000aea:	f000 f9b9 	bl	8000e60 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000aee:	f7ff fcd9 	bl	80004a4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000af2:	f7ff ff07 	bl	8000904 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000af6:	f000 fac9 	bl	800108c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000afa:	f000 fa1f 	bl	8000f3c <MX_TIM2_Init>
  HX711_Init(hx[0]);
 8000afe:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <main+0xb4>)
 8000b00:	f104 0310 	add.w	r3, r4, #16
 8000b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000b0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b0e:	f016 fc2d 	bl	801736c <HX711_Init>
  osKernelInitialize();
 8000b12:	f010 f80d 	bl	8010b30 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000b16:	f7ff fe2b 	bl	8000770 <MX_FREERTOS_Init>
  osKernelStart();
 8000b1a:	f010 f855 	bl	8010bc8 <osKernelStart>
  osKernelInitialize();
 8000b1e:	f010 f807 	bl	8010b30 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000b22:	f7ff fe25 	bl	8000770 <MX_FREERTOS_Init>
  osKernelStart();
 8000b26:	f010 f84f 	bl	8010bc8 <osKernelStart>
 8000b2a:	e7fe      	b.n	8000b2a <main+0xb2>
 8000b2c:	2000644c 	.word	0x2000644c
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	e0042000 	.word	0xe0042000
 8000b38:	200063a4 	.word	0x200063a4
 8000b3c:	0801c9f4 	.word	0x0801c9f4

08000b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b42:	6802      	ldr	r2, [r0, #0]
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d000      	beq.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0xc>
 8000b4a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000b4c:	f000 fc4e 	bl	80013ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b50:	e7fb      	b.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b500      	push	{lr}
 8000b5e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	2200      	movs	r2, #0
 8000b62:	9200      	str	r2, [sp, #0]
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x40>)
 8000b66:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b68:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000b6c:	6459      	str	r1, [r3, #68]	; 0x44
 8000b6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b70:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000b74:	9100      	str	r1, [sp, #0]
 8000b76:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000b7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000b80:	6419      	str	r1, [r3, #64]	; 0x40
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f002 fbf9 	bl	8003388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	b003      	add	sp, #12
 8000b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f002 fbed 	bl	8003388 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000bae:	2036      	movs	r0, #54	; 0x36
 8000bb0:	f002 fc1c 	bl	80033ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	9401      	str	r4, [sp, #4]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bbc:	f042 0210 	orr.w	r2, r2, #16
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	a902      	add	r1, sp, #8
 8000bce:	a803      	add	r0, sp, #12
 8000bd0:	f00a fc28 	bl	800b424 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bd4:	f00a fba0 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 8000bd8:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <HAL_InitTick+0x70>)
 8000bdc:	fba0 2303 	umull	r2, r3, r0, r3
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <HAL_InitTick+0x74>)
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_InitTick+0x78>)
 8000be8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bee:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bf0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8000bf2:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bf6:	f00b fd2f 	bl	800c658 <HAL_TIM_Base_Init>
 8000bfa:	b110      	cbz	r0, 8000c02 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	b008      	add	sp, #32
 8000c00:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <HAL_InitTick+0x74>)
 8000c04:	f00a ff84 	bl	800bb10 <HAL_TIM_Base_Start_IT>
 8000c08:	e7f9      	b.n	8000bfe <HAL_InitTick+0x5e>
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20005d68 	.word	0x20005d68
 8000c18:	40001000 	.word	0x40001000

08000c1c <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);                                                  
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_SuspendTick+0x10>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68d3      	ldr	r3, [r2, #12]
 8000c22:	f023 0301 	bic.w	r3, r3, #1
 8000c26:	60d3      	str	r3, [r2, #12]
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20005d68 	.word	0x20005d68

08000c30 <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_ResumeTick+0x10>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68d3      	ldr	r3, [r2, #12]
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	60d3      	str	r3, [r2, #12]
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20005d68 	.word	0x20005d68

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	4770      	bx	lr

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler>

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	4770      	bx	lr

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c54:	f002 fe14 	bl	8003880 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM6_DAC_IRQHandler+0x14>)
 8000c5a:	f00b fbae 	bl	800c3ba <HAL_TIM_IRQHandler>
 8000c5e:	bd08      	pop	{r3, pc}
 8000c60:	20005c60 	.word	0x20005c60
 8000c64:	20005d68 	.word	0x20005d68

08000c68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c6a:	4802      	ldr	r0, [pc, #8]	; (8000c74 <DMA2_Stream0_IRQHandler+0xc>)
 8000c6c:	f003 f942 	bl	8003ef4 <HAL_DMA_IRQHandler>
 8000c70:	bd08      	pop	{r3, pc}
 8000c72:	bf00      	nop
 8000c74:	20005bd8 	.word	0x20005bd8

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <OTG_FS_IRQHandler+0xc>)
 8000c7c:	f009 fa44 	bl	800a108 <HAL_PCD_IRQHandler>
 8000c80:	bd08      	pop	{r3, pc}
 8000c82:	bf00      	nop
 8000c84:	20006c38 	.word	0x20006c38

08000c88 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000c88:	4770      	bx	lr

08000c8a <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4770      	bx	lr

08000c8e <_kill>:

int _kill(int pid, int sig)
{
 8000c8e:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c90:	f017 ffda 	bl	8018c48 <__errno>
 8000c94:	2316      	movs	r3, #22
 8000c96:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	bd08      	pop	{r3, pc}

08000c9e <_exit>:

void _exit (int status)
{
 8000c9e:	b508      	push	{r3, lr}
	_kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca4:	f7ff fff3 	bl	8000c8e <_kill>
 8000ca8:	e7fe      	b.n	8000ca8 <_exit+0xa>

08000caa <_read>:
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cac:	460d      	mov	r5, r1
 8000cae:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e005      	b.n	8000cc0 <_read+0x16>
	{
		*ptr++ = __io_getchar();
 8000cb4:	1c6e      	adds	r6, r5, #1
 8000cb6:	f3af 8000 	nop.w
 8000cba:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8000cbe:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	42bc      	cmp	r4, r7
 8000cc2:	dbf7      	blt.n	8000cb4 <_read+0xa>
	}

return len;
}
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2400      	movs	r4, #0
 8000cce:	e005      	b.n	8000cdc <_read+0x32>
	{
		__io_putchar(*ptr++);
 8000cd0:	1c4d      	adds	r5, r1, #1
 8000cd2:	7808      	ldrb	r0, [r1, #0]
 8000cd4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8000cda:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	42b4      	cmp	r4, r6
 8000cde:	dbf7      	blt.n	8000cd0 <_read+0x26>
	}
	return len;
}
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}

08000ce4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000ce4:	b508      	push	{r3, lr}
 8000ce6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <_sbrk+0x34>)
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	b142      	cbz	r2, 8000d00 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <_sbrk+0x34>)
 8000cf0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000cf2:	4403      	add	r3, r0
 8000cf4:	466a      	mov	r2, sp
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d806      	bhi.n	8000d08 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <_sbrk+0x34>)
 8000cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000cfe:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <_sbrk+0x38>)
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x34>)
 8000d04:	6011      	str	r1, [r2, #0]
 8000d06:	e7f2      	b.n	8000cee <_sbrk+0xa>
		errno = ENOMEM;
 8000d08:	f017 ff9e 	bl	8018c48 <__errno>
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	bd08      	pop	{r3, pc}
 8000d16:	bf00      	nop
 8000d18:	20000818 	.word	0x20000818
 8000d1c:	20007050 	.word	0x20007050

08000d20 <_close>:

int _close(int file)
{
	return -1;
}
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4770      	bx	lr

08000d30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000d30:	2001      	movs	r0, #1
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	4770      	bx	lr

08000d38 <_open>:

int _open(char *path, int flags, ...)
{
 8000d38:	b40e      	push	{r1, r2, r3}
	/* Pretend like we always fail */
	return -1;
}
 8000d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3e:	b003      	add	sp, #12
 8000d40:	4770      	bx	lr

08000d42 <_wait>:

int _wait(int *status)
{
 8000d42:	b508      	push	{r3, lr}
	errno = ECHILD;
 8000d44:	f017 ff80 	bl	8018c48 <__errno>
 8000d48:	230a      	movs	r3, #10
 8000d4a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	bd08      	pop	{r3, pc}

08000d52 <_unlink>:

int _unlink(char *name)
{
 8000d52:	b508      	push	{r3, lr}
	errno = ENOENT;
 8000d54:	f017 ff78 	bl	8018c48 <__errno>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	bd08      	pop	{r3, pc}

08000d62 <_times>:

int _times(struct tms *buf)
{
	return -1;
}
 8000d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d66:	4770      	bx	lr

08000d68 <_stat>:

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000d6e:	2000      	movs	r0, #0
 8000d70:	4770      	bx	lr

08000d72 <_link>:

int _link(char *old, char *new)
{
 8000d72:	b508      	push	{r3, lr}
	errno = EMLINK;
 8000d74:	f017 ff68 	bl	8018c48 <__errno>
 8000d78:	231f      	movs	r3, #31
 8000d7a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	bd08      	pop	{r3, pc}

08000d82 <_fork>:

int _fork(void)
{
 8000d82:	b508      	push	{r3, lr}
	errno = EAGAIN;
 8000d84:	f017 ff60 	bl	8018c48 <__errno>
 8000d88:	230b      	movs	r3, #11
 8000d8a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	bd08      	pop	{r3, pc}

08000d92 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8000d92:	b508      	push	{r3, lr}
	errno = ENOMEM;
 8000d94:	f017 ff58 	bl	8018c48 <__errno>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	bd08      	pop	{r3, pc}
 8000da2:	bf00      	nop

08000da4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SystemInit+0x18>)
 8000da6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000daa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d014      	beq.n	8000df6 <SystemCoreClockUpdate+0x36>
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d016      	beq.n	8000dfe <SystemCoreClockUpdate+0x3e>
 8000dd0:	b11b      	cbz	r3, 8000dda <SystemCoreClockUpdate+0x1a>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
      break;
    default:
      SystemCoreClock = HSI_VALUE;
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <SystemCoreClockUpdate+0x90>)
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <SystemCoreClockUpdate+0x94>)
 8000dd6:	601a      	str	r2, [r3, #0]
      break;
 8000dd8:	e002      	b.n	8000de0 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 8000dda:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <SystemCoreClockUpdate+0x90>)
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <SystemCoreClockUpdate+0x94>)
 8000dde:	601a      	str	r2, [r3, #0]
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <SystemCoreClockUpdate+0x98>)
 8000dea:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <SystemCoreClockUpdate+0x94>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	40cb      	lsrs	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <SystemCoreClockUpdate+0x9c>)
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <SystemCoreClockUpdate+0x94>)
 8000dfa:	601a      	str	r2, [r3, #0]
      break;
 8000dfc:	e7f0      	b.n	8000de0 <SystemCoreClockUpdate+0x20>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000e00:	685a      	ldr	r2, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if (pllsource != 0)
 8000e08:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000e0c:	d013      	beq.n	8000e36 <SystemCoreClockUpdate+0x76>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <SystemCoreClockUpdate+0x9c>)
 8000e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000e1c:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000e22:	6852      	ldr	r2, [r2, #4]
 8000e24:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000e28:	3201      	adds	r2, #1
 8000e2a:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8000e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <SystemCoreClockUpdate+0x94>)
 8000e32:	6013      	str	r3, [r2, #0]
      break;
 8000e34:	e7d4      	b.n	8000de0 <SystemCoreClockUpdate+0x20>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <SystemCoreClockUpdate+0x90>)
 8000e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <SystemCoreClockUpdate+0x8c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000e44:	fb03 f302 	mul.w	r3, r3, r2
 8000e48:	e7ea      	b.n	8000e20 <SystemCoreClockUpdate+0x60>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	00f42400 	.word	0x00f42400
 8000e54:	20000008 	.word	0x20000008
 8000e58:	0801c9d4 	.word	0x0801c9d4
 8000e5c:	007a1200 	.word	0x007a1200

08000e60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e60:	b500      	push	{lr}
 8000e62:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e64:	2300      	movs	r3, #0
 8000e66:	9306      	str	r3, [sp, #24]
 8000e68:	9307      	str	r3, [sp, #28]
 8000e6a:	9308      	str	r3, [sp, #32]
 8000e6c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6e:	9304      	str	r3, [sp, #16]
 8000e70:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	9303      	str	r3, [sp, #12]

  htim1.Instance = TIM1;
 8000e7a:	482e      	ldr	r0, [pc, #184]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <MX_TIM1_Init+0xd8>)
 8000e7e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 15;
 8000e80:	220f      	movs	r2, #15
 8000e82:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0xffff;
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e92:	f00b fbe1 	bl	800c658 <HAL_TIM_Base_Init>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d134      	bne.n	8000f04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	a90a      	add	r1, sp, #40	; 0x28
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000ea6:	f00b ff28 	bl	800ccfa <HAL_TIM_ConfigClockSource>
 8000eaa:	bb70      	cbnz	r0, 8000f0a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000eac:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000eae:	f00b fc1e 	bl	800c6ee <HAL_TIM_IC_Init>
 8000eb2:	bb68      	cbnz	r0, 8000f10 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eba:	a904      	add	r1, sp, #16
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000ebe:	f00d fe19 	bl	800eaf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	bb40      	cbnz	r0, 8000f16 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ecc:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8000ece:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	4669      	mov	r1, sp
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000ed4:	f00b fdba 	bl	800ca4c <HAL_TIM_IC_ConfigChannel>
 8000ed8:	bb00      	cbnz	r0, 8000f1c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eda:	2204      	movs	r2, #4
 8000edc:	4669      	mov	r1, sp
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000ee0:	f00b fdb4 	bl	800ca4c <HAL_TIM_IC_ConfigChannel>
 8000ee4:	b9e8      	cbnz	r0, 8000f22 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	4669      	mov	r1, sp
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000eec:	f00b fdae 	bl	800ca4c <HAL_TIM_IC_ConfigChannel>
 8000ef0:	b9d0      	cbnz	r0, 8000f28 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4669      	mov	r1, sp
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <MX_TIM1_Init+0xd4>)
 8000ef8:	f00b fda8 	bl	800ca4c <HAL_TIM_IC_ConfigChannel>
 8000efc:	b9b8      	cbnz	r0, 8000f2e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
  }

}
 8000efe:	b00b      	add	sp, #44	; 0x2c
 8000f00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f04:	f7ff fe28 	bl	8000b58 <Error_Handler>
 8000f08:	e7c7      	b.n	8000e9a <MX_TIM1_Init+0x3a>
    Error_Handler();
 8000f0a:	f7ff fe25 	bl	8000b58 <Error_Handler>
 8000f0e:	e7cd      	b.n	8000eac <MX_TIM1_Init+0x4c>
    Error_Handler();
 8000f10:	f7ff fe22 	bl	8000b58 <Error_Handler>
 8000f14:	e7ce      	b.n	8000eb4 <MX_TIM1_Init+0x54>
    Error_Handler();
 8000f16:	f7ff fe1f 	bl	8000b58 <Error_Handler>
 8000f1a:	e7d3      	b.n	8000ec4 <MX_TIM1_Init+0x64>
    Error_Handler();
 8000f1c:	f7ff fe1c 	bl	8000b58 <Error_Handler>
 8000f20:	e7db      	b.n	8000eda <MX_TIM1_Init+0x7a>
    Error_Handler();
 8000f22:	f7ff fe19 	bl	8000b58 <Error_Handler>
 8000f26:	e7de      	b.n	8000ee6 <MX_TIM1_Init+0x86>
    Error_Handler();
 8000f28:	f7ff fe16 	bl	8000b58 <Error_Handler>
 8000f2c:	e7e1      	b.n	8000ef2 <MX_TIM1_Init+0x92>
    Error_Handler();
 8000f2e:	f7ff fe13 	bl	8000b58 <Error_Handler>
}
 8000f32:	e7e4      	b.n	8000efe <MX_TIM1_Init+0x9e>
 8000f34:	20005e28 	.word	0x20005e28
 8000f38:	40010000 	.word	0x40010000

08000f3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f3c:	b500      	push	{lr}
 8000f3e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f40:	2300      	movs	r3, #0
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	9303      	str	r3, [sp, #12]
 8000f46:	9304      	str	r3, [sp, #16]
 8000f48:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	9301      	str	r3, [sp, #4]

  htim2.Instance = TIM2;
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <MX_TIM2_Init+0x6c>)
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f54:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 167;
 8000f56:	22a7      	movs	r2, #167	; 0xa7
 8000f58:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xffffffff;
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f60:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f66:	f00b fb77 	bl	800c658 <HAL_TIM_Base_Init>
 8000f6a:	b998      	cbnz	r0, 8000f94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	a906      	add	r1, sp, #24
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_TIM2_Init+0x6c>)
 8000f78:	f00b febf 	bl	800ccfa <HAL_TIM_ConfigClockSource>
 8000f7c:	b968      	cbnz	r0, 8000f9a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f84:	4669      	mov	r1, sp
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <MX_TIM2_Init+0x6c>)
 8000f88:	f00d fdb4 	bl	800eaf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	b940      	cbnz	r0, 8000fa0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
  }

}
 8000f8e:	b007      	add	sp, #28
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f94:	f7ff fde0 	bl	8000b58 <Error_Handler>
 8000f98:	e7e8      	b.n	8000f6c <MX_TIM2_Init+0x30>
    Error_Handler();
 8000f9a:	f7ff fddd 	bl	8000b58 <Error_Handler>
 8000f9e:	e7ee      	b.n	8000f7e <MX_TIM2_Init+0x42>
    Error_Handler();
 8000fa0:	f7ff fdda 	bl	8000b58 <Error_Handler>
}
 8000fa4:	e7f3      	b.n	8000f8e <MX_TIM2_Init+0x52>
 8000fa6:	bf00      	nop
 8000fa8:	20005e68 	.word	0x20005e68

08000fac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fac:	b500      	push	{lr}
 8000fae:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8000fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8000fb8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	9308      	str	r3, [sp, #32]
 8000fbc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	9303      	str	r3, [sp, #12]
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	9305      	str	r3, [sp, #20]
 8000fc8:	9306      	str	r3, [sp, #24]
 8000fca:	9307      	str	r3, [sp, #28]

  htim5.Instance = TIM5;
 8000fcc:	482d      	ldr	r0, [pc, #180]	; (8001084 <MX_TIM5_Init+0xd8>)
 8000fce:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <MX_TIM5_Init+0xdc>)
 8000fd0:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 7;
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0xffffffff;
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fdc:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fe2:	f00b fb39 	bl	800c658 <HAL_TIM_Base_Init>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d134      	bne.n	8001054 <MX_TIM5_Init+0xa8>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	a90e      	add	r1, sp, #56	; 0x38
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ff4:	4823      	ldr	r0, [pc, #140]	; (8001084 <MX_TIM5_Init+0xd8>)
 8000ff6:	f00b fe80 	bl	800ccfa <HAL_TIM_ConfigClockSource>
 8000ffa:	bb70      	cbnz	r0, 800105a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_TIM5_Init+0xd8>)
 8000ffe:	f00b fb44 	bl	800c68a <HAL_TIM_OC_Init>
 8001002:	bb68      	cbnz	r0, 8001060 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800100a:	a908      	add	r1, sp, #32
 800100c:	481d      	ldr	r0, [pc, #116]	; (8001084 <MX_TIM5_Init+0xd8>)
 800100e:	f00d fd71 	bl	800eaf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	bb40      	cbnz	r0, 8001066 <MX_TIM5_Init+0xba>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001014:	2200      	movs	r2, #0
 8001016:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8001018:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	a901      	add	r1, sp, #4
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <MX_TIM5_Init+0xd8>)
 8001022:	f00b fc29 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 8001026:	bb08      	cbnz	r0, 800106c <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	2204      	movs	r2, #4
 800102a:	eb0d 0102 	add.w	r1, sp, r2
 800102e:	4815      	ldr	r0, [pc, #84]	; (8001084 <MX_TIM5_Init+0xd8>)
 8001030:	f00b fc22 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 8001034:	b9e8      	cbnz	r0, 8001072 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001036:	2208      	movs	r2, #8
 8001038:	a901      	add	r1, sp, #4
 800103a:	4812      	ldr	r0, [pc, #72]	; (8001084 <MX_TIM5_Init+0xd8>)
 800103c:	f00b fc1c 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 8001040:	b9d0      	cbnz	r0, 8001078 <MX_TIM5_Init+0xcc>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001042:	220c      	movs	r2, #12
 8001044:	a901      	add	r1, sp, #4
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <MX_TIM5_Init+0xd8>)
 8001048:	f00b fc16 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 800104c:	b9b8      	cbnz	r0, 800107e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
  }

}
 800104e:	b00f      	add	sp, #60	; 0x3c
 8001050:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001054:	f7ff fd80 	bl	8000b58 <Error_Handler>
 8001058:	e7c7      	b.n	8000fea <MX_TIM5_Init+0x3e>
    Error_Handler();
 800105a:	f7ff fd7d 	bl	8000b58 <Error_Handler>
 800105e:	e7cd      	b.n	8000ffc <MX_TIM5_Init+0x50>
    Error_Handler();
 8001060:	f7ff fd7a 	bl	8000b58 <Error_Handler>
 8001064:	e7ce      	b.n	8001004 <MX_TIM5_Init+0x58>
    Error_Handler();
 8001066:	f7ff fd77 	bl	8000b58 <Error_Handler>
 800106a:	e7d3      	b.n	8001014 <MX_TIM5_Init+0x68>
    Error_Handler();
 800106c:	f7ff fd74 	bl	8000b58 <Error_Handler>
 8001070:	e7da      	b.n	8001028 <MX_TIM5_Init+0x7c>
    Error_Handler();
 8001072:	f7ff fd71 	bl	8000b58 <Error_Handler>
 8001076:	e7de      	b.n	8001036 <MX_TIM5_Init+0x8a>
    Error_Handler();
 8001078:	f7ff fd6e 	bl	8000b58 <Error_Handler>
 800107c:	e7e1      	b.n	8001042 <MX_TIM5_Init+0x96>
    Error_Handler();
 800107e:	f7ff fd6b 	bl	8000b58 <Error_Handler>
}
 8001082:	e7e4      	b.n	800104e <MX_TIM5_Init+0xa2>
 8001084:	20005de8 	.word	0x20005de8
 8001088:	40000c00 	.word	0x40000c00

0800108c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800108c:	b510      	push	{r4, lr}
 800108e:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001090:	2400      	movs	r4, #0
 8001092:	9412      	str	r4, [sp, #72]	; 0x48
 8001094:	9413      	str	r4, [sp, #76]	; 0x4c
 8001096:	9414      	str	r4, [sp, #80]	; 0x50
 8001098:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	9410      	str	r4, [sp, #64]	; 0x40
 800109c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	9409      	str	r4, [sp, #36]	; 0x24
 80010a0:	940a      	str	r4, [sp, #40]	; 0x28
 80010a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80010a4:	940c      	str	r4, [sp, #48]	; 0x30
 80010a6:	940d      	str	r4, [sp, #52]	; 0x34
 80010a8:	940e      	str	r4, [sp, #56]	; 0x38
 80010aa:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ac:	2220      	movs	r2, #32
 80010ae:	4621      	mov	r1, r4
 80010b0:	a801      	add	r0, sp, #4
 80010b2:	f018 f81c 	bl	80190ee <memset>

  htim8.Instance = TIM8;
 80010b6:	4839      	ldr	r0, [pc, #228]	; (800119c <MX_TIM8_Init+0x110>)
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <MX_TIM8_Init+0x114>)
 80010ba:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 167;
 80010bc:	23a7      	movs	r3, #167	; 0xa7
 80010be:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 0xffff;
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ca:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010ce:	f00b fac3 	bl	800c658 <HAL_TIM_Base_Init>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d147      	bne.n	8001166 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	a916      	add	r1, sp, #88	; 0x58
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010e0:	482e      	ldr	r0, [pc, #184]	; (800119c <MX_TIM8_Init+0x110>)
 80010e2:	f00b fe0a 	bl	800ccfa <HAL_TIM_ConfigClockSource>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d140      	bne.n	800116c <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80010ea:	482c      	ldr	r0, [pc, #176]	; (800119c <MX_TIM8_Init+0x110>)
 80010ec:	f00b facd 	bl	800c68a <HAL_TIM_OC_Init>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d13e      	bne.n	8001172 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010fa:	a910      	add	r1, sp, #64	; 0x40
 80010fc:	4827      	ldr	r0, [pc, #156]	; (800119c <MX_TIM8_Init+0x110>)
 80010fe:	f00d fcf9 	bl	800eaf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	2800      	cmp	r0, #0
 8001104:	d138      	bne.n	8001178 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001106:	2200      	movs	r2, #0
 8001108:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800110a:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110e:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001112:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001114:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	a909      	add	r1, sp, #36	; 0x24
 8001118:	4820      	ldr	r0, [pc, #128]	; (800119c <MX_TIM8_Init+0x110>)
 800111a:	f00b fbad 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 800111e:	bb70      	cbnz	r0, 800117e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001120:	2204      	movs	r2, #4
 8001122:	a909      	add	r1, sp, #36	; 0x24
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <MX_TIM8_Init+0x110>)
 8001126:	f00b fba7 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 800112a:	bb58      	cbnz	r0, 8001184 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112c:	2208      	movs	r2, #8
 800112e:	a909      	add	r1, sp, #36	; 0x24
 8001130:	481a      	ldr	r0, [pc, #104]	; (800119c <MX_TIM8_Init+0x110>)
 8001132:	f00b fba1 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 8001136:	bb40      	cbnz	r0, 800118a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001138:	220c      	movs	r2, #12
 800113a:	a909      	add	r1, sp, #36	; 0x24
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_TIM8_Init+0x110>)
 800113e:	f00b fb9b 	bl	800c878 <HAL_TIM_OC_ConfigChannel>
 8001142:	bb28      	cbnz	r0, 8001190 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001148:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001150:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001154:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001156:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001158:	a901      	add	r1, sp, #4
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_TIM8_Init+0x110>)
 800115c:	f00d fd0e 	bl	800eb7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001160:	b9c8      	cbnz	r0, 8001196 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
  }

}
 8001162:	b016      	add	sp, #88	; 0x58
 8001164:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001166:	f7ff fcf7 	bl	8000b58 <Error_Handler>
 800116a:	e7b4      	b.n	80010d6 <MX_TIM8_Init+0x4a>
    Error_Handler();
 800116c:	f7ff fcf4 	bl	8000b58 <Error_Handler>
 8001170:	e7bb      	b.n	80010ea <MX_TIM8_Init+0x5e>
    Error_Handler();
 8001172:	f7ff fcf1 	bl	8000b58 <Error_Handler>
 8001176:	e7bd      	b.n	80010f4 <MX_TIM8_Init+0x68>
    Error_Handler();
 8001178:	f7ff fcee 	bl	8000b58 <Error_Handler>
 800117c:	e7c3      	b.n	8001106 <MX_TIM8_Init+0x7a>
    Error_Handler();
 800117e:	f7ff fceb 	bl	8000b58 <Error_Handler>
 8001182:	e7cd      	b.n	8001120 <MX_TIM8_Init+0x94>
    Error_Handler();
 8001184:	f7ff fce8 	bl	8000b58 <Error_Handler>
 8001188:	e7d0      	b.n	800112c <MX_TIM8_Init+0xa0>
    Error_Handler();
 800118a:	f7ff fce5 	bl	8000b58 <Error_Handler>
 800118e:	e7d3      	b.n	8001138 <MX_TIM8_Init+0xac>
    Error_Handler();
 8001190:	f7ff fce2 	bl	8000b58 <Error_Handler>
 8001194:	e7d6      	b.n	8001144 <MX_TIM8_Init+0xb8>
    Error_Handler();
 8001196:	f7ff fcdf 	bl	8000b58 <Error_Handler>
}
 800119a:	e7e2      	b.n	8001162 <MX_TIM8_Init+0xd6>
 800119c:	20005da8 	.word	0x20005da8
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a4:	b530      	push	{r4, r5, lr}
 80011a6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	2300      	movs	r3, #0
 80011aa:	9305      	str	r3, [sp, #20]
 80011ac:	9306      	str	r3, [sp, #24]
 80011ae:	9307      	str	r3, [sp, #28]
 80011b0:	9308      	str	r3, [sp, #32]
 80011b2:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 80011b4:	6803      	ldr	r3, [r0, #0]
 80011b6:	4a3a      	ldr	r2, [pc, #232]	; (80012a0 <HAL_TIM_Base_MspInit+0xfc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00a      	beq.n	80011d2 <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d039      	beq.n	8001236 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80011c2:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <HAL_TIM_Base_MspInit+0x100>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d043      	beq.n	8001250 <HAL_TIM_Base_MspInit+0xac>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80011c8:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <HAL_TIM_Base_MspInit+0x104>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d054      	beq.n	8001278 <HAL_TIM_Base_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80011ce:	b00b      	add	sp, #44	; 0x2c
 80011d0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	2400      	movs	r4, #0
 80011d4:	9400      	str	r4, [sp, #0]
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <HAL_TIM_Base_MspInit+0x108>)
 80011d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
 80011e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011e2:	f002 0201 	and.w	r2, r2, #1
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	9401      	str	r4, [sp, #4]
 80011ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HUB_TRIG_1_Pin|HUB_TRIG_2_Pin|HUB_TRIG_3_Pin|HUB_TRIG_4_Pin;
 80011fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001202:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2502      	movs	r5, #2
 8001206:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001208:	2301      	movs	r3, #1
 800120a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120c:	a905      	add	r1, sp, #20
 800120e:	4828      	ldr	r0, [pc, #160]	; (80012b0 <HAL_TIM_Base_MspInit+0x10c>)
 8001210:	f004 fc94 	bl	8005b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8001214:	4622      	mov	r2, r4
 8001216:	4629      	mov	r1, r5
 8001218:	2019      	movs	r0, #25
 800121a:	f002 f8b5 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800121e:	2019      	movs	r0, #25
 8001220:	f002 f8e4 	bl	80033ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001224:	4622      	mov	r2, r4
 8001226:	4629      	mov	r1, r5
 8001228:	201b      	movs	r0, #27
 800122a:	f002 f8ad 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800122e:	201b      	movs	r0, #27
 8001230:	f002 f8dc 	bl	80033ec <HAL_NVIC_EnableIRQ>
 8001234:	e7cb      	b.n	80011ce <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_TIM_Base_MspInit+0x108>)
 800123c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9b02      	ldr	r3, [sp, #8]
 800124e:	e7be      	b.n	80011ce <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001250:	2200      	movs	r2, #0
 8001252:	9203      	str	r2, [sp, #12]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_TIM_Base_MspInit+0x108>)
 8001256:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001258:	f041 0108 	orr.w	r1, r1, #8
 800125c:	6419      	str	r1, [r3, #64]	; 0x40
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8001268:	2102      	movs	r1, #2
 800126a:	2032      	movs	r0, #50	; 0x32
 800126c:	f002 f88c 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f002 f8bb 	bl	80033ec <HAL_NVIC_EnableIRQ>
 8001276:	e7aa      	b.n	80011ce <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001278:	2100      	movs	r1, #0
 800127a:	9104      	str	r1, [sp, #16]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_TIM_Base_MspInit+0x108>)
 800127e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001280:	f042 0202 	orr.w	r2, r2, #2
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	9304      	str	r3, [sp, #16]
 800128e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001290:	460a      	mov	r2, r1
 8001292:	202e      	movs	r0, #46	; 0x2e
 8001294:	f002 f878 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001298:	202e      	movs	r0, #46	; 0x2e
 800129a:	f002 f8a7 	bl	80033ec <HAL_NVIC_EnableIRQ>
}
 800129e:	e796      	b.n	80011ce <HAL_TIM_Base_MspInit+0x2a>
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40000c00 	.word	0x40000c00
 80012a8:	40010400 	.word	0x40010400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b4:	b508      	push	{r3, lr}

  if(tim_baseHandle->Instance==TIM1)
 80012b6:	6803      	ldr	r3, [r0, #0]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_TIM_Base_MspDeInit+0x78>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d009      	beq.n	80012d2 <HAL_TIM_Base_MspDeInit+0x1e>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80012be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c2:	d018      	beq.n	80012f6 <HAL_TIM_Base_MspDeInit+0x42>
    __HAL_RCC_TIM2_CLK_DISABLE();
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <HAL_TIM_Base_MspDeInit+0x7c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01b      	beq.n	8001302 <HAL_TIM_Base_MspDeInit+0x4e>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_TIM_Base_MspDeInit+0x80>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d022      	beq.n	8001316 <HAL_TIM_Base_MspDeInit+0x62>
 80012d0:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM1_CLK_DISABLE();
 80012d2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80012d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOE, HUB_TRIG_1_Pin|HUB_TRIG_2_Pin|HUB_TRIG_3_Pin|HUB_TRIG_4_Pin);
 80012de:	f44f 41d4 	mov.w	r1, #27136	; 0x6a00
 80012e2:	4815      	ldr	r0, [pc, #84]	; (8001338 <HAL_TIM_Base_MspDeInit+0x84>)
 80012e4:	f004 fd18 	bl	8005d18 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80012e8:	2019      	movs	r0, #25
 80012ea:	f002 f88d 	bl	8003408 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 80012ee:	201b      	movs	r0, #27
 80012f0:	f002 f88a 	bl	8003408 <HAL_NVIC_DisableIRQ>
 80012f4:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM2_CLK_DISABLE();
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_TIM_Base_MspDeInit+0x88>)
 80012f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM5_CLK_DISABLE();
 8001302:	f502 320b 	add.w	r2, r2, #142336	; 0x22c00
 8001306:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001308:	f023 0308 	bic.w	r3, r3, #8
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800130e:	2032      	movs	r0, #50	; 0x32
 8001310:	f002 f87a 	bl	8003408 <HAL_NVIC_DisableIRQ>
 8001314:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN TIM8_MspDeInit 0 */

  /* USER CODE END TIM8_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM8_CLK_DISABLE();
 8001316:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800131a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800131c:	f023 0302 	bic.w	r3, r3, #2
 8001320:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM8 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM8_CC_IRQn);
 8001322:	202e      	movs	r0, #46	; 0x2e
 8001324:	f002 f870 	bl	8003408 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM8_MspDeInit 1 */

  /* USER CODE END TIM8_MspDeInit 1 */
  }
} 
 8001328:	e7d2      	b.n	80012d0 <HAL_TIM_Base_MspDeInit+0x1c>
 800132a:	bf00      	nop
 800132c:	40010000 	.word	0x40010000
 8001330:	40000c00 	.word	0x40000c00
 8001334:	40010400 	.word	0x40010400
 8001338:	40021000 	.word	0x40021000
 800133c:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001340:	4770      	bx	lr

08001342 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001342:	4770      	bx	lr

08001344 <HAL_DeInit>:
{
 8001344:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_DeInit+0x28>)
 8001348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800134c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800134e:	2400      	movs	r4, #0
 8001350:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001354:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8001356:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001358:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 800135a:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800135c:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 800135e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001360:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8001362:	f7ff ffee 	bl	8001342 <HAL_MspDeInit>
}
 8001366:	4620      	mov	r0, r4
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_DeInit+0x6c>)
 8001376:	7818      	ldrb	r0, [r3, #0]
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_DeInit+0x70>)
 8001382:	6810      	ldr	r0, [r2, #0]
 8001384:	fbb0 f0f3 	udiv	r0, r0, r3
 8001388:	f002 f864 	bl	8003454 <HAL_SYSTICK_Config>
 800138c:	b968      	cbnz	r0, 80013aa <HAL_DeInit+0x66>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	2c0f      	cmp	r4, #15
 8001390:	d901      	bls.n	8001396 <HAL_DeInit+0x52>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001394:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001396:	2200      	movs	r2, #0
 8001398:	4621      	mov	r1, r4
 800139a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800139e:	f001 fff3 	bl	8003388 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_DeInit+0x6c>)
 80013a4:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
 80013ac:	bd10      	pop	{r4, pc}
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_Init>:
{
 80013b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x30>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f001 ffc5 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fbe0 	bl	8000ba0 <HAL_InitTick>
  HAL_MspInit();
 80013e0:	f7ff fbbc 	bl	8000b5c <HAL_MspInit>
}
 80013e4:	2000      	movs	r0, #0
 80013e6:	bd08      	pop	{r3, pc}
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x10>)
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_IncTick+0x14>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	440b      	add	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20005ea8 	.word	0x20005ea8
 8001400:	2000000c 	.word	0x2000000c

08001404 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001404:	4b01      	ldr	r3, [pc, #4]	; (800140c <HAL_GetTick+0x8>)
 8001406:	6818      	ldr	r0, [r3, #0]
}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20005ea8 	.word	0x20005ea8

08001410 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <HAL_GetTickPrio+0x8>)
 8001412:	6858      	ldr	r0, [r3, #4]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800141c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_SetTickFreq+0x24>)
 8001420:	781c      	ldrb	r4, [r3, #0]
 8001422:	4284      	cmp	r4, r0
 8001424:	d009      	beq.n	800143a <HAL_SetTickFreq+0x1e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8001426:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001428:	6858      	ldr	r0, [r3, #4]
 800142a:	f7ff fbb9 	bl	8000ba0 <HAL_InitTick>

    if (status != HAL_OK)
 800142e:	4603      	mov	r3, r0
 8001430:	b108      	cbz	r0, 8001436 <HAL_SetTickFreq+0x1a>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8001432:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_SetTickFreq+0x24>)
 8001434:	7014      	strb	r4, [r2, #0]
    }
  }

  return status;
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e7fb      	b.n	8001436 <HAL_SetTickFreq+0x1a>
 800143e:	bf00      	nop
 8001440:	2000000c 	.word	0x2000000c

08001444 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8001444:	4b01      	ldr	r3, [pc, #4]	; (800144c <HAL_GetTickFreq+0x8>)
 8001446:	7818      	ldrb	r0, [r3, #0]
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffd6 	bl	8001404 <HAL_GetTick>
 8001458:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800145e:	d002      	beq.n	8001466 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_Delay+0x24>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001466:	f7ff ffcd 	bl	8001404 <HAL_GetTick>
 800146a:	1b40      	subs	r0, r0, r5
 800146c:	4284      	cmp	r4, r0
 800146e:	d8fa      	bhi.n	8001466 <HAL_Delay+0x16>
  {
  }
}
 8001470:	bd38      	pop	{r3, r4, r5, pc}
 8001472:	bf00      	nop
 8001474:	2000000c 	.word	0x2000000c
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001478:	4a02      	ldr	r2, [pc, #8]	; (8001484 <HAL_Delay+0x34>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f023 0302 	bic.w	r3, r3, #2
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4770      	bx	lr
 8001484:	e000e010 	.word	0xe000e010
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001488:	4a02      	ldr	r2, [pc, #8]	; (8001494 <HAL_Delay+0x44>)
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4770      	bx	lr
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001498:	4800      	ldr	r0, [pc, #0]	; (800149c <HAL_GetHalVersion+0x4>)
 800149a:	4770      	bx	lr
 800149c:	01070700 	.word	0x01070700

080014a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 80014a0:	4b01      	ldr	r3, [pc, #4]	; (80014a8 <HAL_GetREVID+0x8>)
 80014a2:	6818      	ldr	r0, [r3, #0]
}
 80014a4:	0c00      	lsrs	r0, r0, #16
 80014a6:	4770      	bx	lr
 80014a8:	e0042000 	.word	0xe0042000

080014ac <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetDEVID+0xc>)
 80014ae:	6818      	ldr	r0, [r3, #0]
}
 80014b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e0042000 	.word	0xe0042000

080014bc <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80014bc:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80014be:	6853      	ldr	r3, [r2, #4]
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
 80014c6:	4770      	bx	lr
 80014c8:	e0042000 	.word	0xe0042000

080014cc <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80014cc:	4a02      	ldr	r2, [pc, #8]	; (80014d8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80014ce:	6853      	ldr	r3, [r2, #4]
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
 80014d6:	4770      	bx	lr
 80014d8:	e0042000 	.word	0xe0042000

080014dc <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80014dc:	4a02      	ldr	r2, [pc, #8]	; (80014e8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80014de:	6853      	ldr	r3, [r2, #4]
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4770      	bx	lr
 80014e8:	e0042000 	.word	0xe0042000

080014ec <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80014ee:	6853      	ldr	r3, [r2, #4]
 80014f0:	f023 0302 	bic.w	r3, r3, #2
 80014f4:	6053      	str	r3, [r2, #4]
 80014f6:	4770      	bx	lr
 80014f8:	e0042000 	.word	0xe0042000

080014fc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80014fc:	4a02      	ldr	r2, [pc, #8]	; (8001508 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80014fe:	6853      	ldr	r3, [r2, #4]
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6053      	str	r3, [r2, #4]
 8001506:	4770      	bx	lr
 8001508:	e0042000 	.word	0xe0042000

0800150c <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800150e:	6853      	ldr	r3, [r2, #4]
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6053      	str	r3, [r2, #4]
 8001516:	4770      	bx	lr
 8001518:	e0042000 	.word	0xe0042000

0800151c <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 800151c:	2201      	movs	r2, #1
 800151e:	4b01      	ldr	r3, [pc, #4]	; (8001524 <HAL_EnableCompensationCell+0x8>)
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4770      	bx	lr
 8001524:	42270400 	.word	0x42270400

08001528 <HAL_DisableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8001528:	2200      	movs	r2, #0
 800152a:	4b01      	ldr	r3, [pc, #4]	; (8001530 <HAL_DisableCompensationCell+0x8>)
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	4770      	bx	lr
 8001530:	42270400 	.word	0x42270400

08001534 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8001534:	4b01      	ldr	r3, [pc, #4]	; (800153c <HAL_GetUIDw0+0x8>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	1fff7a10 	.word	0x1fff7a10

08001540 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <HAL_GetUIDw1+0x8>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	1fff7a14 	.word	0x1fff7a14

0800154c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_GetUIDw2+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	1fff7a18 	.word	0x1fff7a18

08001558 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <ADC_Init+0x12c>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001560:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	6841      	ldr	r1, [r0, #4]
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800156a:	6802      	ldr	r2, [r0, #0]
 800156c:	6853      	ldr	r3, [r2, #4]
 800156e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001572:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001574:	6802      	ldr	r2, [r0, #0]
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	6901      	ldr	r1, [r0, #16]
 800157a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800157e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001580:	6802      	ldr	r2, [r0, #0]
 8001582:	6853      	ldr	r3, [r2, #4]
 8001584:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001588:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	6853      	ldr	r3, [r2, #4]
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	430b      	orrs	r3, r1
 8001592:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001594:	6802      	ldr	r2, [r0, #0]
 8001596:	6893      	ldr	r3, [r2, #8]
 8001598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800159c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800159e:	6802      	ldr	r2, [r0, #0]
 80015a0:	6893      	ldr	r3, [r2, #8]
 80015a2:	68c1      	ldr	r1, [r0, #12]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <ADC_Init+0x130>)
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d04b      	beq.n	8001648 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b0:	6802      	ldr	r2, [r0, #0]
 80015b2:	6893      	ldr	r3, [r2, #8]
 80015b4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80015b8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015ba:	6802      	ldr	r2, [r0, #0]
 80015bc:	6893      	ldr	r3, [r2, #8]
 80015be:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	6893      	ldr	r3, [r2, #8]
 80015c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80015cc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ce:	6802      	ldr	r2, [r0, #0]
 80015d0:	6893      	ldr	r3, [r2, #8]
 80015d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	6893      	ldr	r3, [r2, #8]
 80015dc:	f023 0302 	bic.w	r3, r3, #2
 80015e0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	6802      	ldr	r2, [r0, #0]
 80015e4:	6893      	ldr	r3, [r2, #8]
 80015e6:	7e01      	ldrb	r1, [r0, #24]
 80015e8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80015ec:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d133      	bne.n	800165e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f6:	6802      	ldr	r2, [r0, #0]
 80015f8:	6853      	ldr	r3, [r2, #4]
 80015fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015fe:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001600:	6802      	ldr	r2, [r0, #0]
 8001602:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001604:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001608:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800160a:	6801      	ldr	r1, [r0, #0]
 800160c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800160e:	69c2      	ldr	r2, [r0, #28]
 8001610:	3a01      	subs	r2, #1
 8001612:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001616:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6893      	ldr	r3, [r2, #8]
 800161c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001620:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001622:	6802      	ldr	r2, [r0, #0]
 8001624:	6893      	ldr	r3, [r2, #8]
 8001626:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800162a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800162e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001630:	6802      	ldr	r2, [r0, #0]
 8001632:	6893      	ldr	r3, [r2, #8]
 8001634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001638:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800163a:	6802      	ldr	r2, [r0, #0]
 800163c:	6893      	ldr	r3, [r2, #8]
 800163e:	6941      	ldr	r1, [r0, #20]
 8001640:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001644:	6093      	str	r3, [r2, #8]
 8001646:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001648:	6802      	ldr	r2, [r0, #0]
 800164a:	6893      	ldr	r3, [r2, #8]
 800164c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001650:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001652:	6802      	ldr	r2, [r0, #0]
 8001654:	6893      	ldr	r3, [r2, #8]
 8001656:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800165a:	6093      	str	r3, [r2, #8]
 800165c:	e7bc      	b.n	80015d8 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800165e:	6802      	ldr	r2, [r0, #0]
 8001660:	6853      	ldr	r3, [r2, #4]
 8001662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001666:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001668:	6802      	ldr	r2, [r0, #0]
 800166a:	6853      	ldr	r3, [r2, #4]
 800166c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001670:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001672:	6801      	ldr	r1, [r0, #0]
 8001674:	684b      	ldr	r3, [r1, #4]
 8001676:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001678:	3a01      	subs	r2, #1
 800167a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e7be      	b.n	8001600 <ADC_Init+0xa8>
 8001682:	bf00      	nop
 8001684:	40012300 	.word	0x40012300
 8001688:	0f000001 	.word	0x0f000001
{
 800168c:	4770      	bx	lr

0800168e <HAL_ADC_Init>:
  if(hadc == NULL)
 800168e:	b338      	cbz	r0, 80016e0 <HAL_ADC_Init+0x52>
{
 8001690:	b510      	push	{r4, lr}
 8001692:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001694:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001696:	b143      	cbz	r3, 80016aa <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800169a:	f013 0f10 	tst.w	r3, #16
 800169e:	d00b      	beq.n	80016b8 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80016a2:	2300      	movs	r3, #0
 80016a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80016a8:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80016aa:	f7fe fe59 	bl	8000360 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80016ae:	2300      	movs	r3, #0
 80016b0:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80016b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80016b6:	e7ef      	b.n	8001698 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80016b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016be:	f023 0302 	bic.w	r3, r3, #2
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ff45 	bl	8001558 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	2000      	movs	r0, #0
 80016d0:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d4:	f023 0303 	bic.w	r3, r3, #3
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6423      	str	r3, [r4, #64]	; 0x40
 80016de:	e7e0      	b.n	80016a2 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
 80016e2:	4770      	bx	lr
{
 80016e4:	4770      	bx	lr

080016e6 <HAL_ADC_DeInit>:
  if(hadc == NULL)
 80016e6:	b1c8      	cbz	r0, 800171c <HAL_ADC_DeInit+0x36>
{
 80016e8:	b510      	push	{r4, lr}
 80016ea:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80016ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_ADC_DISABLE(hadc);
 80016f4:	6802      	ldr	r2, [r0, #0]
 80016f6:	6893      	ldr	r3, [r2, #8]
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016fe:	6803      	ldr	r3, [r0, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f013 0f01 	tst.w	r3, #1
 8001706:	d003      	beq.n	8001710 <HAL_ADC_DeInit+0x2a>
  __HAL_UNLOCK(hadc);
 8001708:	2000      	movs	r0, #0
 800170a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800170e:	bd10      	pop	{r4, pc}
  HAL_ADC_MspDeInit(hadc);
 8001710:	f7fe fea2 	bl	8000458 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001714:	2300      	movs	r3, #0
 8001716:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->State = HAL_ADC_STATE_RESET;
 8001718:	6423      	str	r3, [r4, #64]	; 0x40
 800171a:	e7f5      	b.n	8001708 <HAL_ADC_DeInit+0x22>
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_Start>:
{
 8001720:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001726:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d07d      	beq.n	800182a <HAL_ADC_Start+0x10a>
 800172e:	2301      	movs	r3, #1
 8001730:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001734:	6803      	ldr	r3, [r0, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	f012 0f01 	tst.w	r2, #1
 800173c:	d113      	bne.n	8001766 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_ADC_Start+0x120>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a3e      	ldr	r2, [pc, #248]	; (8001844 <HAL_ADC_Start+0x124>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001756:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001758:	e002      	b.n	8001760 <HAL_ADC_Start+0x40>
      counter--;
 800175a:	9b01      	ldr	r3, [sp, #4]
 800175c:	3b01      	subs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001766:	6802      	ldr	r2, [r0, #0]
 8001768:	6893      	ldr	r3, [r2, #8]
 800176a:	f013 0f01 	tst.w	r3, #1
 800176e:	d05f      	beq.n	8001830 <HAL_ADC_Start+0x110>
    ADC_STATE_CLR_SET(hadc->State,
 8001770:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001772:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001780:	6853      	ldr	r3, [r2, #4]
 8001782:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001786:	d005      	beq.n	8001794 <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001788:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800178a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001792:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001794:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001796:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800179a:	d01b      	beq.n	80017d4 <HAL_ADC_Start+0xb4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800179c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800179e:	f023 0306 	bic.w	r3, r3, #6
 80017a2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80017a4:	2300      	movs	r3, #0
 80017a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017aa:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80017ae:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_ADC_Start+0x128>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f013 0f1f 	tst.w	r3, #31
 80017b8:	d127      	bne.n	800180a <HAL_ADC_Start+0xea>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	4a23      	ldr	r2, [pc, #140]	; (800184c <HAL_ADC_Start+0x12c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_ADC_Start+0xd6>
 80017c2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_ADC_Start+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017ca:	4a21      	ldr	r2, [pc, #132]	; (8001850 <HAL_ADC_Start+0x130>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00b      	beq.n	80017e8 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
 80017d2:	e02b      	b.n	800182c <HAL_ADC_Start+0x10c>
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	2300      	movs	r3, #0
 80017d6:	6443      	str	r3, [r0, #68]	; 0x44
 80017d8:	e7e4      	b.n	80017a4 <HAL_ADC_Start+0x84>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017da:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80017de:	6852      	ldr	r2, [r2, #4]
 80017e0:	f012 0f1f 	tst.w	r2, #31
 80017e4:	d007      	beq.n	80017f6 <HAL_ADC_Start+0xd6>
 80017e6:	e7f0      	b.n	80017ca <HAL_ADC_Start+0xaa>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017e8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80017ec:	6852      	ldr	r2, [r2, #4]
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2a0f      	cmp	r2, #15
 80017f4:	d81e      	bhi.n	8001834 <HAL_ADC_Start+0x114>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80017fc:	d11c      	bne.n	8001838 <HAL_ADC_Start+0x118>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001806:	2000      	movs	r0, #0
 8001808:	e010      	b.n	800182c <HAL_ADC_Start+0x10c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800180a:	6803      	ldr	r3, [r0, #0]
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_ADC_Start+0x12c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d001      	beq.n	8001816 <HAL_ADC_Start+0xf6>
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e00a      	b.n	800182c <HAL_ADC_Start+0x10c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800181c:	d10e      	bne.n	800183c <HAL_ADC_Start+0x11c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001826:	2000      	movs	r0, #0
 8001828:	e000      	b.n	800182c <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 800182a:	2002      	movs	r0, #2
}
 800182c:	b002      	add	sp, #8
 800182e:	4770      	bx	lr
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
 8001832:	e7fb      	b.n	800182c <HAL_ADC_Start+0x10c>
 8001834:	2000      	movs	r0, #0
 8001836:	e7f9      	b.n	800182c <HAL_ADC_Start+0x10c>
 8001838:	2000      	movs	r0, #0
 800183a:	e7f7      	b.n	800182c <HAL_ADC_Start+0x10c>
 800183c:	2000      	movs	r0, #0
 800183e:	e7f5      	b.n	800182c <HAL_ADC_Start+0x10c>
 8001840:	20000008 	.word	0x20000008
 8001844:	431bde83 	.word	0x431bde83
 8001848:	40012300 	.word	0x40012300
 800184c:	40012000 	.word	0x40012000
 8001850:	40012200 	.word	0x40012200

08001854 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001858:	2b01      	cmp	r3, #1
 800185a:	d019      	beq.n	8001890 <HAL_ADC_Stop+0x3c>
 800185c:	2301      	movs	r3, #1
 800185e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	6893      	ldr	r3, [r2, #8]
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800186c:	6803      	ldr	r3, [r0, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f013 0f01 	tst.w	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001878:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001886:	2300      	movs	r3, #0
 8001888:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800188c:	4618      	mov	r0, r3
 800188e:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001890:	2002      	movs	r0, #2
}
 8001892:	4770      	bx	lr

08001894 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001894:	6803      	ldr	r3, [r0, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800189c:	d003      	beq.n	80018a6 <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800189e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018a4:	d11c      	bne.n	80018e0 <HAL_ADC_PollForConversion+0x4c>
{
 80018a6:	b570      	push	{r4, r5, r6, lr}
 80018a8:	460d      	mov	r5, r1
 80018aa:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80018ac:	f7ff fdaa 	bl	8001404 <HAL_GetTick>
 80018b0:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f012 0f02 	tst.w	r2, #2
 80018ba:	d11a      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80018bc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80018c0:	d0f7      	beq.n	80018b2 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018c2:	b125      	cbz	r5, 80018ce <HAL_ADC_PollForConversion+0x3a>
 80018c4:	f7ff fd9e 	bl	8001404 <HAL_GetTick>
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	4285      	cmp	r5, r0
 80018cc:	d2f1      	bcs.n	80018b2 <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80018d6:	2300      	movs	r3, #0
 80018d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80018dc:	2003      	movs	r0, #3
 80018de:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80018e8:	2300      	movs	r3, #0
 80018ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	4770      	bx	lr
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018f2:	f06f 0212 	mvn.w	r2, #18
 80018f6:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001908:	d117      	bne.n	800193a <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190a:	7e22      	ldrb	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800190c:	b9ba      	cbnz	r2, 800193e <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001914:	d003      	beq.n	800191e <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001916:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001918:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800191c:	d111      	bne.n	8001942 <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800191e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001924:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001928:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800192c:	d10b      	bne.n	8001946 <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800192e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8001936:	2000      	movs	r0, #0
 8001938:	bd70      	pop	{r4, r5, r6, pc}
 800193a:	2000      	movs	r0, #0
 800193c:	bd70      	pop	{r4, r5, r6, pc}
 800193e:	2000      	movs	r0, #0
 8001940:	bd70      	pop	{r4, r5, r6, pc}
 8001942:	2000      	movs	r0, #0
 8001944:	bd70      	pop	{r4, r5, r6, pc}
 8001946:	2000      	movs	r0, #0
}
 8001948:	bd70      	pop	{r4, r5, r6, pc}

0800194a <HAL_ADC_PollForEvent>:
{
 800194a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194c:	4604      	mov	r4, r0
 800194e:	460d      	mov	r5, r1
 8001950:	4616      	mov	r6, r2
  tickstart = HAL_GetTick();
 8001952:	f7ff fd57 	bl	8001404 <HAL_GetTick>
 8001956:	4607      	mov	r7, r0
  while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	ea35 0202 	bics.w	r2, r5, r2
 8001960:	d011      	beq.n	8001986 <HAL_ADC_PollForEvent+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8001962:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001966:	d0f7      	beq.n	8001958 <HAL_ADC_PollForEvent+0xe>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001968:	b126      	cbz	r6, 8001974 <HAL_ADC_PollForEvent+0x2a>
 800196a:	f7ff fd4b 	bl	8001404 <HAL_GetTick>
 800196e:	1bc0      	subs	r0, r0, r7
 8001970:	4286      	cmp	r6, r0
 8001972:	d2f1      	bcs.n	8001958 <HAL_ADC_PollForEvent+0xe>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800197c:	2300      	movs	r3, #0
 800197e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
 8001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(EventType == ADC_AWD_EVENT)
 8001986:	2d01      	cmp	r5, #1
 8001988:	d00c      	beq.n	80019a4 <HAL_ADC_PollForEvent+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800198a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800198c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001990:	6422      	str	r2, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001992:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001994:	f042 0202 	orr.w	r2, r2, #2
 8001998:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800199a:	f06f 0220 	mvn.w	r2, #32
 800199e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
}
 80019a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019aa:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019ac:	f06f 0201 	mvn.w	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80019b2:	2000      	movs	r0, #0
 80019b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019b6 <HAL_ADC_Start_IT>:
{
 80019b6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80019bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f000 8085 	beq.w	8001ad0 <HAL_ADC_Start_IT+0x11a>
 80019c6:	2301      	movs	r3, #1
 80019c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	f012 0f01 	tst.w	r2, #1
 80019d4:	d113      	bne.n	80019fe <HAL_ADC_Start_IT+0x48>
    __HAL_ADC_ENABLE(hadc);
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_ADC_Start_IT+0x132>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a42      	ldr	r2, [pc, #264]	; (8001aec <HAL_ADC_Start_IT+0x136>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019ee:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_Start_IT+0x42>
      counter--;
 80019f2:	9b01      	ldr	r3, [sp, #4]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_Start_IT+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fe:	6802      	ldr	r2, [r0, #0]
 8001a00:	6893      	ldr	r3, [r2, #8]
 8001a02:	f013 0f01 	tst.w	r3, #1
 8001a06:	d066      	beq.n	8001ad6 <HAL_ADC_Start_IT+0x120>
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a18:	6853      	ldr	r3, [r2, #4]
 8001a1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a1e:	d005      	beq.n	8001a2c <HAL_ADC_Start_IT+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2a:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a32:	d022      	beq.n	8001a7a <HAL_ADC_Start_IT+0xc4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a36:	f023 0306 	bic.w	r3, r3, #6
 8001a3a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a42:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001a46:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a48:	6802      	ldr	r2, [r0, #0]
 8001a4a:	6853      	ldr	r3, [r2, #4]
 8001a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_ADC_Start_IT+0x13a>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f013 0f1f 	tst.w	r3, #31
 8001a5e:	d127      	bne.n	8001ab0 <HAL_ADC_Start_IT+0xfa>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a60:	6803      	ldr	r3, [r0, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <HAL_ADC_Start_IT+0x13e>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d019      	beq.n	8001a9c <HAL_ADC_Start_IT+0xe6>
 8001a68:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_ADC_Start_IT+0xca>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <HAL_ADC_Start_IT+0x142>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00b      	beq.n	8001a8e <HAL_ADC_Start_IT+0xd8>
  return HAL_OK;
 8001a76:	2000      	movs	r0, #0
 8001a78:	e02b      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	6443      	str	r3, [r0, #68]	; 0x44
 8001a7e:	e7dd      	b.n	8001a3c <HAL_ADC_Start_IT+0x86>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a80:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001a84:	6852      	ldr	r2, [r2, #4]
 8001a86:	f012 0f1f 	tst.w	r2, #31
 8001a8a:	d007      	beq.n	8001a9c <HAL_ADC_Start_IT+0xe6>
 8001a8c:	e7f0      	b.n	8001a70 <HAL_ADC_Start_IT+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a8e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001a92:	6852      	ldr	r2, [r2, #4]
 8001a94:	f002 021f 	and.w	r2, r2, #31
 8001a98:	2a0f      	cmp	r2, #15
 8001a9a:	d81e      	bhi.n	8001ada <HAL_ADC_Start_IT+0x124>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001aa2:	d11c      	bne.n	8001ade <HAL_ADC_Start_IT+0x128>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001aac:	2000      	movs	r0, #0
 8001aae:	e010      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_ADC_Start_IT+0x13e>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d001      	beq.n	8001abc <HAL_ADC_Start_IT+0x106>
  return HAL_OK;
 8001ab8:	2000      	movs	r0, #0
 8001aba:	e00a      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_ADC_Start_IT+0x12c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001acc:	2000      	movs	r0, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
  __HAL_LOCK(hadc);
 8001ad0:	2002      	movs	r0, #2
}
 8001ad2:	b002      	add	sp, #8
 8001ad4:	4770      	bx	lr
  return HAL_OK;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7fb      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
 8001ada:	2000      	movs	r0, #0
 8001adc:	e7f9      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7f7      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e7f5      	b.n	8001ad2 <HAL_ADC_Start_IT+0x11c>
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	40012300 	.word	0x40012300
 8001af4:	40012000 	.word	0x40012000
 8001af8:	40012200 	.word	0x40012200

08001afc <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8001afc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d01f      	beq.n	8001b44 <HAL_ADC_Stop_IT+0x48>
 8001b04:	2301      	movs	r3, #1
 8001b06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8001b0a:	6802      	ldr	r2, [r0, #0]
 8001b0c:	6893      	ldr	r3, [r2, #8]
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b14:	6803      	ldr	r3, [r0, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	f012 0f01 	tst.w	r2, #1
 8001b1c:	d10d      	bne.n	8001b3a <HAL_ADC_Stop_IT+0x3e>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b24:	f022 0220 	bic.w	r2, r2, #32
 8001b28:	605a      	str	r2, [r3, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b40:	4618      	mov	r0, r3
 8001b42:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001b44:	2002      	movs	r0, #2
}
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_Start_DMA>:
{
 8001b48:	b530      	push	{r4, r5, lr}
 8001b4a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f000 809b 	beq.w	8001c90 <HAL_ADC_Start_DMA+0x148>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b60:	6803      	ldr	r3, [r0, #0]
 8001b62:	689c      	ldr	r4, [r3, #8]
 8001b64:	f014 0f01 	tst.w	r4, #1
 8001b68:	d113      	bne.n	8001b92 <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8001b6a:	689c      	ldr	r4, [r3, #8]
 8001b6c:	f044 0401 	orr.w	r4, r4, #1
 8001b70:	609c      	str	r4, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b72:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <HAL_ADC_Start_DMA+0x160>)
 8001b74:	681c      	ldr	r4, [r3, #0]
 8001b76:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_ADC_Start_DMA+0x164>)
 8001b78:	fba3 3404 	umull	r3, r4, r3, r4
 8001b7c:	0ca4      	lsrs	r4, r4, #18
 8001b7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001b82:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Start_DMA+0x44>
      counter--;
 8001b86:	9c01      	ldr	r4, [sp, #4]
 8001b88:	3c01      	subs	r4, #1
 8001b8a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001b8c:	9c01      	ldr	r4, [sp, #4]
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b92:	6803      	ldr	r3, [r0, #0]
 8001b94:	689c      	ldr	r4, [r3, #8]
 8001b96:	f014 0f01 	tst.w	r4, #1
 8001b9a:	d07c      	beq.n	8001c96 <HAL_ADC_Start_DMA+0x14e>
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b9e:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8001ba2:	f024 0401 	bic.w	r4, r4, #1
 8001ba6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001baa:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001bb2:	d005      	beq.n	8001bc0 <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bbe:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001bc6:	d038      	beq.n	8001c3a <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bca:	f023 0306 	bic.w	r3, r3, #6
 8001bce:	6443      	str	r3, [r0, #68]	; 0x44
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bda:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001bdc:	4834      	ldr	r0, [pc, #208]	; (8001cb0 <HAL_ADC_Start_DMA+0x168>)
 8001bde:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001be0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001be2:	4834      	ldr	r0, [pc, #208]	; (8001cb4 <HAL_ADC_Start_DMA+0x16c>)
 8001be4:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001be8:	4833      	ldr	r0, [pc, #204]	; (8001cb8 <HAL_ADC_Start_DMA+0x170>)
 8001bea:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bec:	6822      	ldr	r2, [r4, #0]
 8001bee:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001bf2:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bf4:	6825      	ldr	r5, [r4, #0]
 8001bf6:	6868      	ldr	r0, [r5, #4]
 8001bf8:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8001bfc:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bfe:	6825      	ldr	r5, [r4, #0]
 8001c00:	68a8      	ldr	r0, [r5, #8]
 8001c02:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001c06:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001c10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c12:	f002 f84a 	bl	8003caa <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_ADC_Start_DMA+0x174>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f013 0f1f 	tst.w	r3, #31
 8001c1e:	d127      	bne.n	8001c70 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_ADC_Start_DMA+0x178>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d019      	beq.n	8001c5c <HAL_ADC_Start_DMA+0x114>
 8001c28:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_ADC_Start_DMA+0x17c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00b      	beq.n	8001c4e <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	e02b      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6443      	str	r3, [r0, #68]	; 0x44
 8001c3e:	e7c7      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c40:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	f012 0f1f 	tst.w	r2, #31
 8001c4a:	d007      	beq.n	8001c5c <HAL_ADC_Start_DMA+0x114>
 8001c4c:	e7f0      	b.n	8001c30 <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c4e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001c52:	6852      	ldr	r2, [r2, #4]
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2a0f      	cmp	r2, #15
 8001c5a:	d81e      	bhi.n	8001c9a <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001c62:	d11c      	bne.n	8001c9e <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	e010      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_ADC_Start_DMA+0x178>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d001      	beq.n	8001c7c <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
 8001c7a:	e00a      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001c82:	d10e      	bne.n	8001ca2 <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
  __HAL_LOCK(hadc);
 8001c90:	2002      	movs	r0, #2
}
 8001c92:	b003      	add	sp, #12
 8001c94:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7fb      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e7f9      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e7f7      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e7f5      	b.n	8001c92 <HAL_ADC_Start_DMA+0x14a>
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	08001ea3 	.word	0x08001ea3
 8001cb4:	08001d31 	.word	0x08001d31
 8001cb8:	08001e8d 	.word	0x08001e8d
 8001cbc:	40012300 	.word	0x40012300
 8001cc0:	40012000 	.word	0x40012000
 8001cc4:	40012200 	.word	0x40012200

08001cc8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8001cc8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d028      	beq.n	8001d22 <HAL_ADC_Stop_DMA+0x5a>
{
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8001cda:	6802      	ldr	r2, [r0, #0]
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ce4:	6803      	ldr	r3, [r0, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	f012 0f01 	tst.w	r2, #1
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_Stop_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cee:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001cf6:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfe:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d00:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001d02:	f002 f807 	bl	8003d14 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d0e:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6423      	str	r3, [r4, #64]	; 0x40
 8001d20:	e7e6      	b.n	8001cf0 <HAL_ADC_Stop_DMA+0x28>
  __HAL_LOCK(hadc);
 8001d22:	2002      	movs	r0, #2
 8001d24:	4770      	bx	lr

08001d26 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001d26:	6803      	ldr	r3, [r0, #0]
 8001d28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ConvCpltCallback>:
{
 8001d2c:	4770      	bx	lr

08001d2e <HAL_ADC_ConvHalfCpltCallback>:
{
 8001d2e:	4770      	bx	lr

08001d30 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d30:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001d34:	f7ff fffb 	bl	8001d2e <HAL_ADC_ConvHalfCpltCallback>
 8001d38:	bd08      	pop	{r3, pc}

08001d3a <HAL_ADC_LevelOutOfWindowCallback>:
{
 8001d3a:	4770      	bx	lr

08001d3c <HAL_ADC_ErrorCallback>:
{
 8001d3c:	4770      	bx	lr

08001d3e <HAL_ADC_IRQHandler>:
{
 8001d3e:	b538      	push	{r3, r4, r5, lr}
 8001d40:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001d42:	6802      	ldr	r2, [r0, #0]
 8001d44:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001d46:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 8001d48:	f011 0f02 	tst.w	r1, #2
 8001d4c:	d02f      	beq.n	8001dae <HAL_ADC_IRQHandler+0x70>
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	b363      	cbz	r3, 8001dae <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d56:	f013 0f10 	tst.w	r3, #16
 8001d5a:	d103      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d64:	6893      	ldr	r3, [r2, #8]
 8001d66:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001d6a:	d119      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d6c:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6e:	b9bb      	cbnz	r3, 8001da0 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d72:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8001d76:	d003      	beq.n	8001d80 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d78:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d7e:	d10f      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d80:	6853      	ldr	r3, [r2, #4]
 8001d82:	f023 0320 	bic.w	r3, r3, #32
 8001d86:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d96:	d103      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ffc3 	bl	8001d2c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f06f 0212 	mvn.w	r2, #18
 8001dac:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 8001db8:	f011 0f04 	tst.w	r1, #4
 8001dbc:	d036      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xee>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d034      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001dc4:	f012 0f10 	tst.w	r2, #16
 8001dc8:	d103      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd0:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001dd8:	d121      	bne.n	8001e1e <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ddc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001de0:	d003      	beq.n	8001dea <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001de2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001de4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001de8:	d119      	bne.n	8001e1e <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dea:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001df0:	d115      	bne.n	8001e1e <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001df2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001df4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001df8:	d111      	bne.n	8001e1e <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dfa:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dfc:	b97a      	cbnz	r2, 8001e1e <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e14:	d103      	bne.n	8001e1e <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f000 fc5a 	bl	80026d8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f06f 020c 	mvn.w	r2, #12
 8001e2a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e30:	6853      	ldr	r3, [r2, #4]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 8001e36:	f011 0f01 	tst.w	r1, #1
 8001e3a:	d004      	beq.n	8001e46 <HAL_ADC_IRQHandler+0x108>
 8001e3c:	b11b      	cbz	r3, 8001e46 <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f013 0f01 	tst.w	r3, #1
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e4a:	6853      	ldr	r3, [r2, #4]
 8001e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 8001e50:	f011 0f20 	tst.w	r1, #32
 8001e54:	d000      	beq.n	8001e58 <HAL_ADC_IRQHandler+0x11a>
 8001e56:	b963      	cbnz	r3, 8001e72 <HAL_ADC_IRQHandler+0x134>
 8001e58:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff ff69 	bl	8001d3a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f06f 0201 	mvn.w	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e7e9      	b.n	8001e46 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e7a:	f06f 0520 	mvn.w	r5, #32
 8001e7e:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ff5b 	bl	8001d3c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	601d      	str	r5, [r3, #0]
}
 8001e8a:	e7e5      	b.n	8001e58 <HAL_ADC_IRQHandler+0x11a>

08001e8c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e8c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e9c:	f7ff ff4e 	bl	8001d3c <HAL_ADC_ErrorCallback>
 8001ea0:	bd08      	pop	{r3, pc}

08001ea2 <ADC_DMAConvCplt>:
{
 8001ea2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001eac:	d126      	bne.n	8001efc <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	6891      	ldr	r1, [r2, #8]
 8001eba:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001ebe:	d119      	bne.n	8001ef4 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec0:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec2:	b9b9      	cbnz	r1, 8001ef4 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ec4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec6:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001eca:	d003      	beq.n	8001ed4 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ecc:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ece:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001ed2:	d10f      	bne.n	8001ef4 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ed4:	6851      	ldr	r1, [r2, #4]
 8001ed6:	f021 0120 	bic.w	r1, r1, #32
 8001eda:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001eea:	d103      	bne.n	8001ef4 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff19 	bl	8001d2c <HAL_ADC_ConvCpltCallback>
 8001efa:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efe:	f012 0f10 	tst.w	r2, #16
 8001f02:	d103      	bne.n	8001f0c <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	4798      	blx	r3
 8001f0a:	bd08      	pop	{r3, pc}
      HAL_ADC_ErrorCallback(hadc);
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff15 	bl	8001d3c <HAL_ADC_ErrorCallback>
 8001f12:	bd08      	pop	{r3, pc}

08001f14 <HAL_ADC_ConfigChannel>:
{
 8001f14:	b430      	push	{r4, r5}
 8001f16:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001f1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	f000 80b7 	beq.w	8002094 <HAL_ADC_ConfigChannel+0x180>
 8001f26:	2301      	movs	r3, #1
 8001f28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f2c:	680b      	ldr	r3, [r1, #0]
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d93e      	bls.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f32:	6805      	ldr	r5, [r0, #0]
 8001f34:	68ea      	ldr	r2, [r5, #12]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	2407      	movs	r4, #7
 8001f40:	fa04 f303 	lsl.w	r3, r4, r3
 8001f44:	ea22 0303 	bic.w	r3, r2, r3
 8001f48:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f4a:	6805      	ldr	r5, [r0, #0]
 8001f4c:	68ea      	ldr	r2, [r5, #12]
 8001f4e:	688c      	ldr	r4, [r1, #8]
 8001f50:	880b      	ldrh	r3, [r1, #0]
 8001f52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f56:	3b1e      	subs	r3, #30
 8001f58:	fa04 f303 	lsl.w	r3, r4, r3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8001f60:	684b      	ldr	r3, [r1, #4]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d83a      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f66:	6805      	ldr	r5, [r0, #0]
 8001f68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f6e:	3b05      	subs	r3, #5
 8001f70:	241f      	movs	r4, #31
 8001f72:	fa04 f303 	lsl.w	r3, r4, r3
 8001f76:	ea22 0303 	bic.w	r3, r2, r3
 8001f7a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f7c:	6805      	ldr	r5, [r0, #0]
 8001f7e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f80:	684b      	ldr	r3, [r1, #4]
 8001f82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f86:	3b05      	subs	r3, #5
 8001f88:	880c      	ldrh	r4, [r1, #0]
 8001f8a:	fa04 f303 	lsl.w	r3, r4, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f92:	6802      	ldr	r2, [r0, #0]
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_ADC_ConfigChannel+0x184>)
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d050      	beq.n	800203c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f9a:	6802      	ldr	r2, [r0, #0]
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_ADC_ConfigChannel+0x184>)
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d055      	beq.n	800204e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001fa8:	4618      	mov	r0, r3
}
 8001faa:	b002      	add	sp, #8
 8001fac:	bc30      	pop	{r4, r5}
 8001fae:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fb0:	6805      	ldr	r5, [r0, #0]
 8001fb2:	692a      	ldr	r2, [r5, #16]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fba:	2407      	movs	r4, #7
 8001fbc:	fa04 f303 	lsl.w	r3, r4, r3
 8001fc0:	ea22 0303 	bic.w	r3, r2, r3
 8001fc4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc6:	6805      	ldr	r5, [r0, #0]
 8001fc8:	692a      	ldr	r2, [r5, #16]
 8001fca:	688c      	ldr	r4, [r1, #8]
 8001fcc:	880b      	ldrh	r3, [r1, #0]
 8001fce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fd2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	612b      	str	r3, [r5, #16]
 8001fda:	e7c1      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d816      	bhi.n	800200e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	6805      	ldr	r5, [r0, #0]
 8001fe2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fe8:	3b23      	subs	r3, #35	; 0x23
 8001fea:	241f      	movs	r4, #31
 8001fec:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff0:	ea22 0303 	bic.w	r3, r2, r3
 8001ff4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ff6:	6805      	ldr	r5, [r0, #0]
 8001ff8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001ffa:	684b      	ldr	r3, [r1, #4]
 8001ffc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002000:	3b23      	subs	r3, #35	; 0x23
 8002002:	880c      	ldrh	r4, [r1, #0]
 8002004:	fa04 f303 	lsl.w	r3, r4, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	632b      	str	r3, [r5, #48]	; 0x30
 800200c:	e7c1      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800200e:	6805      	ldr	r5, [r0, #0]
 8002010:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002012:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002016:	3b41      	subs	r3, #65	; 0x41
 8002018:	241f      	movs	r4, #31
 800201a:	fa04 f303 	lsl.w	r3, r4, r3
 800201e:	ea22 0303 	bic.w	r3, r2, r3
 8002022:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002024:	6805      	ldr	r5, [r0, #0]
 8002026:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002028:	684b      	ldr	r3, [r1, #4]
 800202a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800202e:	3b41      	subs	r3, #65	; 0x41
 8002030:	880c      	ldrh	r4, [r1, #0]
 8002032:	fa04 f303 	lsl.w	r3, r4, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	62eb      	str	r3, [r5, #44]	; 0x2c
 800203a:	e7aa      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800203c:	680b      	ldr	r3, [r1, #0]
 800203e:	2b12      	cmp	r3, #18
 8002040:	d1ab      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_ADC_ConfigChannel+0x188>)
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204a:	6053      	str	r3, [r2, #4]
 800204c:	e7a5      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800204e:	680b      	ldr	r3, [r1, #0]
 8002050:	3b10      	subs	r3, #16
 8002052:	2b01      	cmp	r3, #1
 8002054:	d8a5      	bhi.n	8001fa2 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_ADC_ConfigChannel+0x188>)
 8002058:	6853      	ldr	r3, [r2, #4]
 800205a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002060:	680b      	ldr	r3, [r1, #0]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d19d      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_ADC_ConfigChannel+0x18c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800206e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002072:	f202 3283 	addw	r2, r2, #899	; 0x383
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002080:	005a      	lsls	r2, r3, #1
 8002082:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8002086:	9b01      	ldr	r3, [sp, #4]
 8002088:	3b01      	subs	r3, #1
 800208a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x172>
 8002092:	e786      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002094:	2002      	movs	r0, #2
 8002096:	e788      	b.n	8001faa <HAL_ADC_ConfigChannel+0x96>
 8002098:	40012000 	.word	0x40012000
 800209c:	40012300 	.word	0x40012300
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 80020a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d034      	beq.n	8002116 <HAL_ADC_AnalogWDGConfig+0x72>
{
 80020ac:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80020ae:	2301      	movs	r3, #1
 80020b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if(AnalogWDGConfig->ITMode == ENABLE)
 80020b4:	7c0b      	ldrb	r3, [r1, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d027      	beq.n	800210a <HAL_ADC_AnalogWDGConfig+0x66>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6853      	ldr	r3, [r2, #4]
 80020be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80020c4:	6802      	ldr	r2, [r0, #0]
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020d0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80020d2:	6802      	ldr	r2, [r0, #0]
 80020d4:	6853      	ldr	r3, [r2, #4]
 80020d6:	680c      	ldr	r4, [r1, #0]
 80020d8:	4323      	orrs	r3, r4
 80020da:	6053      	str	r3, [r2, #4]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	684a      	ldr	r2, [r1, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	688a      	ldr	r2, [r1, #8]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6853      	ldr	r3, [r2, #4]
 80020ec:	f023 031f 	bic.w	r3, r3, #31
 80020f0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	6854      	ldr	r4, [r2, #4]
 80020f6:	898b      	ldrh	r3, [r1, #12]
 80020f8:	4323      	orrs	r3, r4
 80020fa:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 80020fc:	2300      	movs	r3, #0
 80020fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002102:	4618      	mov	r0, r3
}
 8002104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002108:	4770      	bx	lr
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	6853      	ldr	r3, [r2, #4]
 800210e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002112:	6053      	str	r3, [r2, #4]
 8002114:	e7d6      	b.n	80020c4 <HAL_ADC_AnalogWDGConfig+0x20>
  __HAL_LOCK(hadc);
 8002116:	2002      	movs	r0, #2
 8002118:	4770      	bx	lr

0800211a <HAL_ADC_GetState>:
  return hadc->State;
 800211a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800211c:	4770      	bx	lr

0800211e <HAL_ADC_GetError>:
  return hadc->ErrorCode;
 800211e:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop

08002124 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8002124:	b508      	push	{r3, lr}
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002126:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	6403      	str	r3, [r0, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800212c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6443      	str	r3, [r0, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8002134:	f7ff fe02 	bl	8001d3c <HAL_ADC_ErrorCallback>
 8002138:	bd08      	pop	{r3, pc}

0800213a <ADC_MultiModeDMAHalfConvCplt>:
{
 800213a:	b508      	push	{r3, lr}
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 800213c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800213e:	f7ff fdf6 	bl	8001d2e <HAL_ADC_ConvHalfCpltCallback>
 8002142:	bd08      	pop	{r3, pc}

08002144 <ADC_MultiModeDMAConvCplt>:
{
 8002144:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002146:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800214e:	d126      	bne.n	800219e <ADC_MultiModeDMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	6891      	ldr	r1, [r2, #8]
 800215c:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002160:	d119      	bne.n	8002196 <ADC_MultiModeDMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002162:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002164:	b9b9      	cbnz	r1, 8002196 <ADC_MultiModeDMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002166:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002168:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800216c:	d003      	beq.n	8002176 <ADC_MultiModeDMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002170:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8002174:	d10f      	bne.n	8002196 <ADC_MultiModeDMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002176:	6851      	ldr	r1, [r2, #4]
 8002178:	f021 0120 	bic.w	r1, r1, #32
 800217c:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800217e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002188:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800218c:	d103      	bne.n	8002196 <ADC_MultiModeDMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fdc8 	bl	8001d2c <HAL_ADC_ConvCpltCallback>
 800219c:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4798      	blx	r3
 80021a4:	bd08      	pop	{r3, pc}

080021a6 <HAL_ADCEx_InjectedStart>:
{
 80021a6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80021ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d05c      	beq.n	800226e <HAL_ADCEx_InjectedStart+0xc8>
 80021b4:	2301      	movs	r3, #1
 80021b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	f012 0f01 	tst.w	r2, #1
 80021c2:	d113      	bne.n	80021ec <HAL_ADCEx_InjectedStart+0x46>
    __HAL_ADC_ENABLE(hadc);
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_ADCEx_InjectedStart+0xe2>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	; (800228c <HAL_ADCEx_InjectedStart+0xe6>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021dc:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80021de:	e002      	b.n	80021e6 <HAL_ADCEx_InjectedStart+0x40>
      counter--;
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80021e6:	9b01      	ldr	r3, [sp, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <HAL_ADCEx_InjectedStart+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6893      	ldr	r3, [r2, #8]
 80021f0:	f013 0f01 	tst.w	r3, #1
 80021f4:	d03e      	beq.n	8002274 <HAL_ADCEx_InjectedStart+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002204:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002206:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002208:	f413 7f80 	tst.w	r3, #256	; 0x100
 800220c:	d101      	bne.n	8002212 <HAL_ADCEx_InjectedStart+0x6c>
      ADC_CLEAR_ERRORCODE(hadc);
 800220e:	2300      	movs	r3, #0
 8002210:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002212:	2300      	movs	r3, #0
 8002214:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002218:	f06f 0304 	mvn.w	r3, #4
 800221c:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_ADCEx_InjectedStart+0xea>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f013 0f1f 	tst.w	r3, #31
 8002226:	d10e      	bne.n	8002246 <HAL_ADCEx_InjectedStart+0xa0>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002228:	6802      	ldr	r2, [r0, #0]
 800222a:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800222c:	6853      	ldr	r3, [r2, #4]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(tmp1 && tmp2)
 8002232:	f411 1f40 	tst.w	r1, #3145728	; 0x300000
 8002236:	d11f      	bne.n	8002278 <HAL_ADCEx_InjectedStart+0xd2>
 8002238:	bb03      	cbnz	r3, 800227c <HAL_ADCEx_InjectedStart+0xd6>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800223a:	6893      	ldr	r3, [r2, #8]
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002240:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8002242:	2000      	movs	r0, #0
 8002244:	e014      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002246:	6803      	ldr	r3, [r0, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002254:	480f      	ldr	r0, [pc, #60]	; (8002294 <HAL_ADCEx_InjectedStart+0xee>)
 8002256:	4283      	cmp	r3, r0
 8002258:	d001      	beq.n	800225e <HAL_ADCEx_InjectedStart+0xb8>
  return HAL_OK;
 800225a:	2000      	movs	r0, #0
 800225c:	e008      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800225e:	b97a      	cbnz	r2, 8002280 <HAL_ADCEx_InjectedStart+0xda>
 8002260:	b981      	cbnz	r1, 8002284 <HAL_ADCEx_InjectedStart+0xde>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002268:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800226a:	2000      	movs	r0, #0
 800226c:	e000      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
  __HAL_LOCK(hadc);
 800226e:	2002      	movs	r0, #2
}
 8002270:	b002      	add	sp, #8
 8002272:	4770      	bx	lr
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
 8002276:	e7fb      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
 8002278:	2000      	movs	r0, #0
 800227a:	e7f9      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
 800227c:	2000      	movs	r0, #0
 800227e:	e7f7      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
 8002280:	2000      	movs	r0, #0
 8002282:	e7f5      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
 8002284:	2000      	movs	r0, #0
 8002286:	e7f3      	b.n	8002270 <HAL_ADCEx_InjectedStart+0xca>
 8002288:	20000008 	.word	0x20000008
 800228c:	431bde83 	.word	0x431bde83
 8002290:	40012300 	.word	0x40012300
 8002294:	40012000 	.word	0x40012000

08002298 <HAL_ADCEx_InjectedStart_IT>:
{
 8002298:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800229e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d061      	beq.n	800236a <HAL_ADCEx_InjectedStart_IT+0xd2>
 80022a6:	2301      	movs	r3, #1
 80022a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ac:	6803      	ldr	r3, [r0, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	f012 0f01 	tst.w	r2, #1
 80022b4:	d113      	bne.n	80022de <HAL_ADCEx_InjectedStart_IT+0x46>
    __HAL_ADC_ENABLE(hadc);
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_ADCEx_InjectedStart_IT+0xec>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_ADCEx_InjectedStart_IT+0xf0>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022ce:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80022d0:	e002      	b.n	80022d8 <HAL_ADCEx_InjectedStart_IT+0x40>
      counter--;
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f9      	bne.n	80022d2 <HAL_ADCEx_InjectedStart_IT+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	6893      	ldr	r3, [r2, #8]
 80022e2:	f013 0f01 	tst.w	r3, #1
 80022e6:	d043      	beq.n	8002370 <HAL_ADCEx_InjectedStart_IT+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 80022e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f6:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022fe:	d101      	bne.n	8002304 <HAL_ADCEx_InjectedStart_IT+0x6c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002300:	2300      	movs	r3, #0
 8002302:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002304:	2300      	movs	r3, #0
 8002306:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800230a:	f06f 0304 	mvn.w	r3, #4
 800230e:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002310:	6802      	ldr	r2, [r0, #0]
 8002312:	6853      	ldr	r3, [r2, #4]
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_ADCEx_InjectedStart_IT+0xf4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f013 0f1f 	tst.w	r3, #31
 8002322:	d10e      	bne.n	8002342 <HAL_ADCEx_InjectedStart_IT+0xaa>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002324:	6802      	ldr	r2, [r0, #0]
 8002326:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002328:	6853      	ldr	r3, [r2, #4]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(tmp1 && tmp2)
 800232e:	f411 1f40 	tst.w	r1, #3145728	; 0x300000
 8002332:	d11f      	bne.n	8002374 <HAL_ADCEx_InjectedStart_IT+0xdc>
 8002334:	bb03      	cbnz	r3, 8002378 <HAL_ADCEx_InjectedStart_IT+0xe0>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002336:	6893      	ldr	r3, [r2, #8]
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 800233e:	2000      	movs	r0, #0
 8002340:	e014      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002342:	6803      	ldr	r3, [r0, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002350:	480f      	ldr	r0, [pc, #60]	; (8002390 <HAL_ADCEx_InjectedStart_IT+0xf8>)
 8002352:	4283      	cmp	r3, r0
 8002354:	d001      	beq.n	800235a <HAL_ADCEx_InjectedStart_IT+0xc2>
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
 8002358:	e008      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800235a:	b97a      	cbnz	r2, 800237c <HAL_ADCEx_InjectedStart_IT+0xe4>
 800235c:	b981      	cbnz	r1, 8002380 <HAL_ADCEx_InjectedStart_IT+0xe8>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	e000      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
  __HAL_LOCK(hadc);
 800236a:	2002      	movs	r0, #2
}
 800236c:	b002      	add	sp, #8
 800236e:	4770      	bx	lr
  return HAL_OK;
 8002370:	2000      	movs	r0, #0
 8002372:	e7fb      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
 8002374:	2000      	movs	r0, #0
 8002376:	e7f9      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
 8002378:	2000      	movs	r0, #0
 800237a:	e7f7      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
 800237c:	2000      	movs	r0, #0
 800237e:	e7f5      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
 8002380:	2000      	movs	r0, #0
 8002382:	e7f3      	b.n	800236c <HAL_ADCEx_InjectedStart_IT+0xd4>
 8002384:	20000008 	.word	0x20000008
 8002388:	431bde83 	.word	0x431bde83
 800238c:	40012300 	.word	0x40012300
 8002390:	40012000 	.word	0x40012000

08002394 <HAL_ADCEx_InjectedStop>:
{
 8002394:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002396:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800239a:	2a01      	cmp	r2, #1
 800239c:	d029      	beq.n	80023f2 <HAL_ADCEx_InjectedStop+0x5e>
 800239e:	2201      	movs	r2, #1
 80023a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80023a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80023aa:	d117      	bne.n	80023dc <HAL_ADCEx_InjectedStop+0x48>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6851      	ldr	r1, [r2, #4]
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80023b0:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80023b4:	d112      	bne.n	80023dc <HAL_ADCEx_InjectedStop+0x48>
    __HAL_ADC_DISABLE(hadc);
 80023b6:	6891      	ldr	r1, [r2, #8]
 80023b8:	f021 0101 	bic.w	r1, r1, #1
 80023bc:	6091      	str	r1, [r2, #8]
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023be:	6802      	ldr	r2, [r0, #0]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	f012 0f01 	tst.w	r2, #1
 80023c6:	d112      	bne.n	80023ee <HAL_ADCEx_InjectedStop+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80023c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023ca:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2000      	movs	r0, #0
 80023da:	e004      	b.n	80023e6 <HAL_ADCEx_InjectedStop+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	f042 0220 	orr.w	r2, r2, #32
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmp_hal_status;
 80023ec:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2000      	movs	r0, #0
 80023f0:	e7f9      	b.n	80023e6 <HAL_ADCEx_InjectedStop+0x52>
  __HAL_LOCK(hadc);
 80023f2:	2002      	movs	r0, #2
}
 80023f4:	4770      	bx	lr

080023f6 <HAL_ADCEx_InjectedPollForConversion>:
{
 80023f6:	b570      	push	{r4, r5, r6, lr}
 80023f8:	4604      	mov	r4, r0
 80023fa:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 80023fc:	f7ff f802 	bl	8001404 <HAL_GetTick>
 8002400:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f012 0f04 	tst.w	r2, #4
 800240a:	d10f      	bne.n	800242c <HAL_ADCEx_InjectedPollForConversion+0x36>
    if(Timeout != HAL_MAX_DELAY)
 800240c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002410:	d0f7      	beq.n	8002402 <HAL_ADCEx_InjectedPollForConversion+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002412:	b125      	cbz	r5, 800241e <HAL_ADCEx_InjectedPollForConversion+0x28>
 8002414:	f7fe fff6 	bl	8001404 <HAL_GetTick>
 8002418:	1b80      	subs	r0, r0, r6
 800241a:	4285      	cmp	r5, r0
 800241c:	d2f1      	bcs.n	8002402 <HAL_ADCEx_InjectedPollForConversion+0xc>
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 800241e:	2304      	movs	r3, #4
 8002420:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8002422:	2300      	movs	r3, #0
 8002424:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
 800242a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 800242c:	f06f 020c 	mvn.w	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002438:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002442:	d11f      	bne.n	8002484 <HAL_ADCEx_InjectedPollForConversion+0x8e>
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002446:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800244a:	d003      	beq.n	8002454 <HAL_ADCEx_InjectedPollForConversion+0x5e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800244c:	689a      	ldr	r2, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800244e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002452:	d119      	bne.n	8002488 <HAL_ADCEx_InjectedPollForConversion+0x92>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002454:	685a      	ldr	r2, [r3, #4]
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002456:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800245a:	d117      	bne.n	800248c <HAL_ADCEx_InjectedPollForConversion+0x96>
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800245c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800245e:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8002462:	d115      	bne.n	8002490 <HAL_ADCEx_InjectedPollForConversion+0x9a>
      (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002464:	7e23      	ldrb	r3, [r4, #24]
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002466:	b9ab      	cbnz	r3, 8002494 <HAL_ADCEx_InjectedPollForConversion+0x9e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800246a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800246e:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002472:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002476:	d10f      	bne.n	8002498 <HAL_ADCEx_InjectedPollForConversion+0xa2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	2000      	movs	r0, #0
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	2000      	movs	r0, #0
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	2000      	movs	r0, #0
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	2000      	movs	r0, #0
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	2000      	movs	r0, #0
 8002496:	bd70      	pop	{r4, r5, r6, pc}
 8002498:	2000      	movs	r0, #0
}      
 800249a:	bd70      	pop	{r4, r5, r6, pc}

0800249c <HAL_ADCEx_InjectedStop_IT>:
{
 800249c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800249e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80024a2:	2a01      	cmp	r2, #1
 80024a4:	d02d      	beq.n	8002502 <HAL_ADCEx_InjectedStop_IT+0x66>
 80024a6:	2201      	movs	r2, #1
 80024a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80024ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80024ae:	f412 7f80 	tst.w	r2, #256	; 0x100
 80024b2:	d11b      	bne.n	80024ec <HAL_ADCEx_InjectedStop_IT+0x50>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80024b4:	6802      	ldr	r2, [r0, #0]
 80024b6:	6851      	ldr	r1, [r2, #4]
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80024b8:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80024bc:	d116      	bne.n	80024ec <HAL_ADCEx_InjectedStop_IT+0x50>
    __HAL_ADC_DISABLE(hadc);
 80024be:	6891      	ldr	r1, [r2, #8]
 80024c0:	f021 0101 	bic.w	r1, r1, #1
 80024c4:	6091      	str	r1, [r2, #8]
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c6:	6802      	ldr	r2, [r0, #0]
 80024c8:	6891      	ldr	r1, [r2, #8]
 80024ca:	f011 0f01 	tst.w	r1, #1
 80024ce:	d116      	bne.n	80024fe <HAL_ADCEx_InjectedStop_IT+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024d0:	6851      	ldr	r1, [r2, #4]
 80024d2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80024d6:	6051      	str	r1, [r2, #4]
      ADC_STATE_CLR_SET(hadc->State,
 80024d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80024da:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2000      	movs	r0, #0
 80024ea:	e004      	b.n	80024f6 <HAL_ADCEx_InjectedStop_IT+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80024f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmp_hal_status;
 80024fc:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2000      	movs	r0, #0
 8002500:	e7f9      	b.n	80024f6 <HAL_ADCEx_InjectedStop_IT+0x5a>
  __HAL_LOCK(hadc);
 8002502:	2002      	movs	r0, #2
}
 8002504:	4770      	bx	lr

08002506 <HAL_ADCEx_InjectedGetValue>:
{
 8002506:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	f06f 0204 	mvn.w	r2, #4
 8002512:	601a      	str	r2, [r3, #0]
  switch(InjectedRank)
 8002514:	3901      	subs	r1, #1
 8002516:	2903      	cmp	r1, #3
 8002518:	d806      	bhi.n	8002528 <HAL_ADCEx_InjectedGetValue+0x22>
 800251a:	e8df f001 	tbb	[pc, r1]
 800251e:	0c10      	.short	0x0c10
 8002520:	0208      	.short	0x0208
      tmp =  hadc->Instance->JDR4;
 8002522:	6803      	ldr	r3, [r0, #0]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	9301      	str	r3, [sp, #4]
  return tmp;
 8002528:	9801      	ldr	r0, [sp, #4]
}
 800252a:	b002      	add	sp, #8
 800252c:	4770      	bx	lr
      tmp =  hadc->Instance->JDR3;
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	9301      	str	r3, [sp, #4]
    break;
 8002534:	e7f8      	b.n	8002528 <HAL_ADCEx_InjectedGetValue+0x22>
      tmp =  hadc->Instance->JDR2;
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	9301      	str	r3, [sp, #4]
    break;
 800253c:	e7f4      	b.n	8002528 <HAL_ADCEx_InjectedGetValue+0x22>
      tmp =  hadc->Instance->JDR1;
 800253e:	6803      	ldr	r3, [r0, #0]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	9301      	str	r3, [sp, #4]
    break;
 8002544:	e7f0      	b.n	8002528 <HAL_ADCEx_InjectedGetValue+0x22>

08002546 <HAL_ADCEx_MultiModeStart_DMA>:
{
 8002546:	b510      	push	{r4, lr}
 8002548:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800254e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d072      	beq.n	800263c <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8002556:	2301      	movs	r3, #1
 8002558:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	689c      	ldr	r4, [r3, #8]
 8002560:	f014 0f01 	tst.w	r4, #1
 8002564:	d113      	bne.n	800258e <HAL_ADCEx_MultiModeStart_DMA+0x48>
    __HAL_ADC_ENABLE(hadc);
 8002566:	689c      	ldr	r4, [r3, #8]
 8002568:	f044 0401 	orr.w	r4, r4, #1
 800256c:	609c      	str	r4, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_ADCEx_MultiModeStart_DMA+0x106>)
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_ADCEx_MultiModeStart_DMA+0x10a>)
 8002574:	fba3 3404 	umull	r3, r4, r3, r4
 8002578:	0ca4      	lsrs	r4, r4, #18
 800257a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800257e:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002580:	e002      	b.n	8002588 <HAL_ADCEx_MultiModeStart_DMA+0x42>
      counter--;
 8002582:	9c01      	ldr	r4, [sp, #4]
 8002584:	3c01      	subs	r4, #1
 8002586:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002588:	9c01      	ldr	r4, [sp, #4]
 800258a:	2c00      	cmp	r4, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADCEx_MultiModeStart_DMA+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800258e:	6803      	ldr	r3, [r0, #0]
 8002590:	689c      	ldr	r4, [r3, #8]
 8002592:	f014 0f01 	tst.w	r4, #1
 8002596:	d054      	beq.n	8002642 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 8002598:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800259a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800259e:	f024 0401 	bic.w	r4, r4, #1
 80025a2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80025a6:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025ae:	d005      	beq.n	80025bc <HAL_ADCEx_MultiModeStart_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ba:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80025c2:	d032      	beq.n	800262a <HAL_ADCEx_MultiModeStart_DMA+0xe4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025c6:	f023 0306 	bic.w	r3, r3, #6
 80025ca:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80025cc:	2300      	movs	r3, #0
 80025ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80025d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025d4:	4c1f      	ldr	r4, [pc, #124]	; (8002654 <HAL_ADCEx_MultiModeStart_DMA+0x10e>)
 80025d6:	63dc      	str	r4, [r3, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80025d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025da:	4c1f      	ldr	r4, [pc, #124]	; (8002658 <HAL_ADCEx_MultiModeStart_DMA+0x112>)
 80025dc:	641c      	str	r4, [r3, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80025de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025e0:	4c1e      	ldr	r4, [pc, #120]	; (800265c <HAL_ADCEx_MultiModeStart_DMA+0x116>)
 80025e2:	64dc      	str	r4, [r3, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	f06f 0402 	mvn.w	r4, #2
 80025ea:	601c      	str	r4, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ec:	6804      	ldr	r4, [r0, #0]
 80025ee:	6863      	ldr	r3, [r4, #4]
 80025f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f4:	6063      	str	r3, [r4, #4]
    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80025f6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80025fa:	b1cb      	cbz	r3, 8002630 <HAL_ADCEx_MultiModeStart_DMA+0xea>
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 80025fc:	4c18      	ldr	r4, [pc, #96]	; (8002660 <HAL_ADCEx_MultiModeStart_DMA+0x11a>)
 80025fe:	6863      	ldr	r3, [r4, #4]
 8002600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002604:	6063      	str	r3, [r4, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	460a      	mov	r2, r1
 800260a:	4604      	mov	r4, r0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800260c:	4915      	ldr	r1, [pc, #84]	; (8002664 <HAL_ADCEx_MultiModeStart_DMA+0x11e>)
 800260e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002610:	f001 fb4b 	bl	8003caa <HAL_DMA_Start_IT>
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800261c:	d113      	bne.n	8002646 <HAL_ADCEx_MultiModeStart_DMA+0x100>
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002626:	2000      	movs	r0, #0
 8002628:	e009      	b.n	800263e <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      ADC_CLEAR_ERRORCODE(hadc);
 800262a:	2300      	movs	r3, #0
 800262c:	6443      	str	r3, [r0, #68]	; 0x44
 800262e:	e7cd      	b.n	80025cc <HAL_ADCEx_MultiModeStart_DMA+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8002630:	4c0b      	ldr	r4, [pc, #44]	; (8002660 <HAL_ADCEx_MultiModeStart_DMA+0x11a>)
 8002632:	6863      	ldr	r3, [r4, #4]
 8002634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002638:	6063      	str	r3, [r4, #4]
 800263a:	e7e4      	b.n	8002606 <HAL_ADCEx_MultiModeStart_DMA+0xc0>
  __HAL_LOCK(hadc);
 800263c:	2002      	movs	r0, #2
}
 800263e:	b002      	add	sp, #8
 8002640:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
 8002644:	e7fb      	b.n	800263e <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8002646:	2000      	movs	r0, #0
 8002648:	e7f9      	b.n	800263e <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 800264a:	bf00      	nop
 800264c:	20000008 	.word	0x20000008
 8002650:	431bde83 	.word	0x431bde83
 8002654:	08002145 	.word	0x08002145
 8002658:	0800213b 	.word	0x0800213b
 800265c:	08002125 	.word	0x08002125
 8002660:	40012300 	.word	0x40012300
 8002664:	40012308 	.word	0x40012308

08002668 <HAL_ADCEx_MultiModeStop_DMA>:
  __HAL_LOCK(hadc);
 8002668:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d029      	beq.n	80026c4 <HAL_ADCEx_MultiModeStop_DMA+0x5c>
{
 8002670:	b510      	push	{r4, lr}
 8002672:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002674:	2301      	movs	r3, #1
 8002676:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800267a:	6802      	ldr	r2, [r0, #0]
 800267c:	6893      	ldr	r3, [r2, #8]
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002684:	6803      	ldr	r3, [r0, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f013 0f01 	tst.w	r3, #1
 800268c:	d004      	beq.n	8002698 <HAL_ADCEx_MultiModeStop_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002690:	2300      	movs	r3, #0
 8002692:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8002696:	bd10      	pop	{r4, pc}
    tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_ADCEx_MultiModeStop_DMA+0x60>)
 800269a:	6853      	ldr	r3, [r2, #4]
 800269c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026a0:	6053      	str	r3, [r2, #4]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80026a4:	f001 fb36 	bl	8003d14 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	6853      	ldr	r3, [r2, #4]
 80026ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026b0:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6423      	str	r3, [r4, #64]	; 0x40
 80026c2:	e7e5      	b.n	8002690 <HAL_ADCEx_MultiModeStop_DMA+0x28>
  __HAL_LOCK(hadc);
 80026c4:	2002      	movs	r0, #2
 80026c6:	4770      	bx	lr
 80026c8:	40012300 	.word	0x40012300

080026cc <HAL_ADCEx_MultiModeGetValue>:
  return tmpADC_Common->CDR;
 80026cc:	4b01      	ldr	r3, [pc, #4]	; (80026d4 <HAL_ADCEx_MultiModeGetValue+0x8>)
 80026ce:	6898      	ldr	r0, [r3, #8]
}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40012300 	.word	0x40012300

080026d8 <HAL_ADCEx_InjectedConvCpltCallback>:
{
 80026d8:	4770      	bx	lr

080026da <HAL_ADCEx_InjectedConfigChannel>:
  __HAL_LOCK(hadc);
 80026da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f000 80f9 	beq.w	80028d6 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
{
 80026e4:	b430      	push	{r4, r5}
  __HAL_LOCK(hadc);
 80026e6:	2301      	movs	r3, #1
 80026e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d97d      	bls.n	80027ee <HAL_ADCEx_InjectedConfigChannel+0x114>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80026f2:	6805      	ldr	r5, [r0, #0]
 80026f4:	68ea      	ldr	r2, [r5, #12]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026fc:	3b1e      	subs	r3, #30
 80026fe:	2407      	movs	r4, #7
 8002700:	fa04 f303 	lsl.w	r3, r4, r3
 8002704:	ea22 0303 	bic.w	r3, r2, r3
 8002708:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800270a:	6805      	ldr	r5, [r0, #0]
 800270c:	68ea      	ldr	r2, [r5, #12]
 800270e:	688c      	ldr	r4, [r1, #8]
 8002710:	880b      	ldrh	r3, [r1, #0]
 8002712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002716:	3b1e      	subs	r3, #30
 8002718:	fa04 f303 	lsl.w	r3, r4, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	60eb      	str	r3, [r5, #12]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002720:	6802      	ldr	r2, [r0, #0]
 8002722:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002724:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002728:	6393      	str	r3, [r2, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800272a:	6804      	ldr	r4, [r0, #0]
 800272c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800272e:	690a      	ldr	r2, [r1, #16]
 8002730:	3a01      	subs	r2, #1
 8002732:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002736:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002738:	6805      	ldr	r5, [r0, #0]
 800273a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800273c:	684b      	ldr	r3, [r1, #4]
 800273e:	690c      	ldr	r4, [r1, #16]
 8002740:	1b1b      	subs	r3, r3, r4
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3303      	adds	r3, #3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800274c:	241f      	movs	r4, #31
 800274e:	fa04 f303 	lsl.w	r3, r4, r3
 8002752:	ea22 0303 	bic.w	r3, r2, r3
 8002756:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002758:	6805      	ldr	r5, [r0, #0]
 800275a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800275c:	684b      	ldr	r3, [r1, #4]
 800275e:	690c      	ldr	r4, [r1, #16]
 8002760:	1b1b      	subs	r3, r3, r4
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3303      	adds	r3, #3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800276c:	880c      	ldrh	r4, [r1, #0]
 800276e:	fa04 f303 	lsl.w	r3, r4, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	63ab      	str	r3, [r5, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002776:	698a      	ldr	r2, [r1, #24]
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_ADCEx_InjectedConfigChannel+0x202>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d04d      	beq.n	800281a <HAL_ADCEx_InjectedConfigChannel+0x140>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002786:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002788:	6802      	ldr	r2, [r0, #0]
 800278a:	6893      	ldr	r3, [r2, #8]
 800278c:	698c      	ldr	r4, [r1, #24]
 800278e:	4323      	orrs	r3, r4
 8002790:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	6893      	ldr	r3, [r2, #8]
 8002796:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800279a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800279c:	6802      	ldr	r2, [r0, #0]
 800279e:	6893      	ldr	r3, [r2, #8]
 80027a0:	69cc      	ldr	r4, [r1, #28]
 80027a2:	4323      	orrs	r3, r4
 80027a4:	6093      	str	r3, [r2, #8]
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80027a6:	7d4b      	ldrb	r3, [r1, #21]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d041      	beq.n	8002830 <HAL_ADCEx_InjectedConfigChannel+0x156>
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	6853      	ldr	r3, [r2, #4]
 80027b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b4:	6053      	str	r3, [r2, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80027b6:	7d0b      	ldrb	r3, [r1, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03f      	beq.n	800283c <HAL_ADCEx_InjectedConfigChannel+0x162>
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80027bc:	6802      	ldr	r2, [r0, #0]
 80027be:	6853      	ldr	r3, [r2, #4]
 80027c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c4:	6053      	str	r3, [r2, #4]
  switch(sConfigInjected->InjectedRank)
 80027c6:	684b      	ldr	r3, [r1, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d057      	beq.n	800287c <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d062      	beq.n	8002896 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d039      	beq.n	8002848 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80027d4:	6802      	ldr	r2, [r0, #0]
 80027d6:	6a13      	ldr	r3, [r2, #32]
 80027d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027dc:	f023 030f 	bic.w	r3, r3, #15
 80027e0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80027e2:	6802      	ldr	r2, [r0, #0]
 80027e4:	6a13      	ldr	r3, [r2, #32]
 80027e6:	68cc      	ldr	r4, [r1, #12]
 80027e8:	4323      	orrs	r3, r4
 80027ea:	6213      	str	r3, [r2, #32]
      break;
 80027ec:	e038      	b.n	8002860 <HAL_ADCEx_InjectedConfigChannel+0x186>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80027ee:	6805      	ldr	r5, [r0, #0]
 80027f0:	692a      	ldr	r2, [r5, #16]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027f8:	2407      	movs	r4, #7
 80027fa:	fa04 f303 	lsl.w	r3, r4, r3
 80027fe:	ea22 0303 	bic.w	r3, r2, r3
 8002802:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002804:	6805      	ldr	r5, [r0, #0]
 8002806:	692a      	ldr	r2, [r5, #16]
 8002808:	688c      	ldr	r4, [r1, #8]
 800280a:	880b      	ldrh	r3, [r1, #0]
 800280c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002810:	fa04 f303 	lsl.w	r3, r4, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	612b      	str	r3, [r5, #16]
 8002818:	e782      	b.n	8002720 <HAL_ADCEx_InjectedConfigChannel+0x46>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	6893      	ldr	r3, [r2, #8]
 800281e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002822:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002824:	6802      	ldr	r2, [r0, #0]
 8002826:	6893      	ldr	r3, [r2, #8]
 8002828:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	e7ba      	b.n	80027a6 <HAL_ADCEx_InjectedConfigChannel+0xcc>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	6853      	ldr	r3, [r2, #4]
 8002834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002838:	6053      	str	r3, [r2, #4]
 800283a:	e7bc      	b.n	80027b6 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800283c:	6802      	ldr	r2, [r0, #0]
 800283e:	6853      	ldr	r3, [r2, #4]
 8002840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002844:	6053      	str	r3, [r2, #4]
 8002846:	e7be      	b.n	80027c6 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002848:	6802      	ldr	r2, [r0, #0]
 800284a:	6953      	ldr	r3, [r2, #20]
 800284c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002850:	f023 030f 	bic.w	r3, r3, #15
 8002854:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	6953      	ldr	r3, [r2, #20]
 800285a:	68cc      	ldr	r4, [r1, #12]
 800285c:	4323      	orrs	r3, r4
 800285e:	6153      	str	r3, [r2, #20]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002860:	6802      	ldr	r2, [r0, #0]
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_ADCEx_InjectedConfigChannel+0x206>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d023      	beq.n	80028b0 <HAL_ADCEx_InjectedConfigChannel+0x1d6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002868:	6802      	ldr	r2, [r0, #0]
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_ADCEx_InjectedConfigChannel+0x206>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d028      	beq.n	80028c2 <HAL_ADCEx_InjectedConfigChannel+0x1e8>
  __HAL_UNLOCK(hadc);
 8002870:	2300      	movs	r3, #0
 8002872:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002876:	4618      	mov	r0, r3
}
 8002878:	bc30      	pop	{r4, r5}
 800287a:	4770      	bx	lr
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800287c:	6802      	ldr	r2, [r0, #0]
 800287e:	6993      	ldr	r3, [r2, #24]
 8002880:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800288a:	6802      	ldr	r2, [r0, #0]
 800288c:	6993      	ldr	r3, [r2, #24]
 800288e:	68cc      	ldr	r4, [r1, #12]
 8002890:	4323      	orrs	r3, r4
 8002892:	6193      	str	r3, [r2, #24]
      break;
 8002894:	e7e4      	b.n	8002860 <HAL_ADCEx_InjectedConfigChannel+0x186>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002896:	6802      	ldr	r2, [r0, #0]
 8002898:	69d3      	ldr	r3, [r2, #28]
 800289a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800289e:	f023 030f 	bic.w	r3, r3, #15
 80028a2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80028a4:	6802      	ldr	r2, [r0, #0]
 80028a6:	69d3      	ldr	r3, [r2, #28]
 80028a8:	68cc      	ldr	r4, [r1, #12]
 80028aa:	4323      	orrs	r3, r4
 80028ac:	61d3      	str	r3, [r2, #28]
      break;
 80028ae:	e7d7      	b.n	8002860 <HAL_ADCEx_InjectedConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80028b0:	680b      	ldr	r3, [r1, #0]
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d1d8      	bne.n	8002868 <HAL_ADCEx_InjectedConfigChannel+0x18e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_ADCEx_InjectedConfigChannel+0x20a>)
 80028b8:	6853      	ldr	r3, [r2, #4]
 80028ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028be:	6053      	str	r3, [r2, #4]
 80028c0:	e7d2      	b.n	8002868 <HAL_ADCEx_InjectedConfigChannel+0x18e>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80028c2:	680b      	ldr	r3, [r1, #0]
 80028c4:	3b10      	subs	r3, #16
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d8d2      	bhi.n	8002870 <HAL_ADCEx_InjectedConfigChannel+0x196>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028ca:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_ADCEx_InjectedConfigChannel+0x20a>)
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d2:	6053      	str	r3, [r2, #4]
 80028d4:	e7cc      	b.n	8002870 <HAL_ADCEx_InjectedConfigChannel+0x196>
  __HAL_LOCK(hadc);
 80028d6:	2002      	movs	r0, #2
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	000f0001 	.word	0x000f0001
 80028e0:	40012000 	.word	0x40012000
 80028e4:	40012300 	.word	0x40012300

080028e8 <HAL_ADCEx_MultiModeConfigChannel>:
  __HAL_LOCK(hadc);
 80028e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d023      	beq.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x50>
{
 80028f0:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80028f2:	2301      	movs	r3, #1
 80028f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	f022 021f 	bic.w	r2, r2, #31
 8002900:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	680c      	ldr	r4, [r1, #0]
 8002906:	4322      	orrs	r2, r4
 8002908:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002910:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	684c      	ldr	r4, [r1, #4]
 8002916:	4322      	orrs	r2, r4
 8002918:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002920:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	6889      	ldr	r1, [r1, #8]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800292a:	2300      	movs	r3, #0
 800292c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002930:	4618      	mov	r0, r3
}
 8002932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002936:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002938:	2002      	movs	r0, #2
 800293a:	4770      	bx	lr
 800293c:	40012300 	.word	0x40012300
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_Init>:
  if (hcan == NULL)
 8002942:	2800      	cmp	r0, #0
 8002944:	f000 80a1 	beq.w	8002a8a <HAL_CAN_Init+0x148>
{
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 800294c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002950:	b1d3      	cbz	r3, 8002988 <HAL_CAN_Init+0x46>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0302 	bic.w	r3, r3, #2
 800295a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800295c:	f7fe fd52 	bl	8001404 <HAL_GetTick>
 8002960:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	f012 0f02 	tst.w	r2, #2
 800296a:	d010      	beq.n	800298e <HAL_CAN_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800296c:	f7fe fd4a 	bl	8001404 <HAL_GetTick>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	280a      	cmp	r0, #10
 8002974:	d9f5      	bls.n	8002962 <HAL_CAN_Init+0x20>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800297e:	2305      	movs	r3, #5
 8002980:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002984:	2001      	movs	r0, #1
 8002986:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002988:	f7fd fda8 	bl	80004dc <HAL_CAN_MspInit>
 800298c:	e7e1      	b.n	8002952 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002996:	f7fe fd35 	bl	8001404 <HAL_GetTick>
 800299a:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	f012 0f01 	tst.w	r2, #1
 80029a4:	d10d      	bne.n	80029c2 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029a6:	f7fe fd2d 	bl	8001404 <HAL_GetTick>
 80029aa:	1b40      	subs	r0, r0, r5
 80029ac:	280a      	cmp	r0, #10
 80029ae:	d9f5      	bls.n	800299c <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80029b8:	2305      	movs	r3, #5
 80029ba:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029c2:	7e22      	ldrb	r2, [r4, #24]
 80029c4:	2a01      	cmp	r2, #1
 80029c6:	d03d      	beq.n	8002a44 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ce:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80029d0:	7e63      	ldrb	r3, [r4, #25]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d03b      	beq.n	8002a4e <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029e0:	7ea3      	ldrb	r3, [r4, #26]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d039      	beq.n	8002a5a <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	f023 0320 	bic.w	r3, r3, #32
 80029ee:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029f0:	7ee3      	ldrb	r3, [r4, #27]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d037      	beq.n	8002a66 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a00:	7f23      	ldrb	r3, [r4, #28]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d035      	beq.n	8002a72 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	f023 0308 	bic.w	r3, r3, #8
 8002a0e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a10:	7f63      	ldrb	r3, [r4, #29]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d033      	beq.n	8002a7e <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a20:	6821      	ldr	r1, [r4, #0]
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	68e2      	ldr	r2, [r4, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	6922      	ldr	r2, [r4, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	6962      	ldr	r2, [r4, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	6862      	ldr	r2, [r4, #4]
 8002a32:	3a01      	subs	r2, #1
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e7c0      	b.n	80029d0 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e7c2      	b.n	80029e0 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a5a:	6822      	ldr	r2, [r4, #0]
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	f043 0320 	orr.w	r3, r3, #32
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e7c4      	b.n	80029f0 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	e7c6      	b.n	8002a00 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e7c8      	b.n	8002a10 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e7ca      	b.n	8002a20 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	4770      	bx	lr
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
{
 8002a8e:	4770      	bx	lr

08002a90 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a90:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d905      	bls.n	8002aa8 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	4770      	bx	lr
{
 8002aa8:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aaa:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002aac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ab8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002abc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002ac0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ac8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002aca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002ace:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ad2:	694a      	ldr	r2, [r1, #20]
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2001      	movs	r0, #1
 8002ada:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ade:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8002ae2:	43d0      	mvns	r0, r2
 8002ae4:	4004      	ands	r4, r0
 8002ae6:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002aea:	69cb      	ldr	r3, [r1, #28]
 8002aec:	b9b3      	cbnz	r3, 8002b1c <HAL_CAN_ConfigFilter+0x8c>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002aee:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002af0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8002af4:	4004      	ands	r4, r0
 8002af6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002afa:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002afc:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002afe:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b00:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b04:	3448      	adds	r4, #72	; 0x48
 8002b06:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b0a:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b0c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b0e:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b10:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b14:	3548      	adds	r5, #72	; 0x48
 8002b16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002b1a:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b1c:	69cb      	ldr	r3, [r1, #28]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d01d      	beq.n	8002b5e <HAL_CAN_ConfigFilter+0xce>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b22:	698b      	ldr	r3, [r1, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d132      	bne.n	8002b8e <HAL_CAN_ConfigFilter+0xfe>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b28:	4c23      	ldr	r4, [pc, #140]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b2a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8002b2e:	4003      	ands	r3, r0
 8002b30:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b34:	690b      	ldr	r3, [r1, #16]
 8002b36:	bb8b      	cbnz	r3, 8002b9c <HAL_CAN_ConfigFilter+0x10c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b3a:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8002b3e:	4020      	ands	r0, r4
 8002b40:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b44:	6a0b      	ldr	r3, [r1, #32]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d02f      	beq.n	8002baa <HAL_CAN_ConfigFilter+0x11a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b4c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8002b58:	2000      	movs	r0, #0
  }
}
 8002b5a:	bc70      	pop	{r4, r5, r6}
 8002b5c:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b60:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8002b64:	4314      	orrs	r4, r2
 8002b66:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b6a:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b6c:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b6e:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b70:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b74:	3448      	adds	r4, #72	; 0x48
 8002b76:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b7a:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b7c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b7e:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b80:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b84:	3548      	adds	r5, #72	; 0x48
 8002b86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002b8a:	605c      	str	r4, [r3, #4]
 8002b8c:	e7c9      	b.n	8002b22 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b8e:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b90:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 8002b9a:	e7cb      	b.n	8002b34 <HAL_CAN_ConfigFilter+0xa4>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002b9e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8002ba8:	e7cc      	b.n	8002b44 <HAL_CAN_ConfigFilter+0xb4>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_CAN_ConfigFilter+0x128>)
 8002bac:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8002bb6:	e7c8      	b.n	8002b4a <HAL_CAN_ConfigFilter+0xba>
 8002bb8:	40006400 	.word	0x40006400

08002bbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bbe:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d005      	beq.n	8002bd4 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bce:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
  }
}
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bdc:	6802      	ldr	r2, [r0, #0]
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002be6:	f7fe fc0d 	bl	8001404 <HAL_GetTick>
 8002bea:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f013 0f01 	tst.w	r3, #1
 8002bf4:	d00d      	beq.n	8002c12 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf6:	f7fe fc05 	bl	8001404 <HAL_GetTick>
 8002bfa:	1b40      	subs	r0, r0, r5
 8002bfc:	280a      	cmp	r0, #10
 8002bfe:	d9f5      	bls.n	8002bec <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c08:	2305      	movs	r3, #5
 8002c0a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c12:	2000      	movs	r0, #0
 8002c14:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8002c16:	bd38      	pop	{r3, r4, r5, pc}

08002c18 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002c18:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002c1a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d005      	beq.n	8002c30 <HAL_CAN_Stop+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002c2c:	2001      	movs	r0, #1
  }
}
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
 8002c30:	4604      	mov	r4, r0
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c32:	6802      	ldr	r2, [r0, #0]
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fbe2 	bl	8001404 <HAL_GetTick>
 8002c40:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	f012 0f01 	tst.w	r2, #1
 8002c4a:	d10d      	bne.n	8002c68 <HAL_CAN_Stop+0x50>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c4c:	f7fe fbda 	bl	8001404 <HAL_GetTick>
 8002c50:	1b40      	subs	r0, r0, r5
 8002c52:	280a      	cmp	r0, #10
 8002c54:	d9f5      	bls.n	8002c42 <HAL_CAN_Stop+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c5e:	2305      	movs	r3, #5
 8002c60:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f022 0202 	bic.w	r2, r2, #2
 8002c6e:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd38      	pop	{r3, r4, r5, pc}

08002c7a <HAL_CAN_DeInit>:
  if (hcan == NULL)
 8002c7a:	b180      	cbz	r0, 8002c9e <HAL_CAN_DeInit+0x24>
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4604      	mov	r4, r0
  (void)HAL_CAN_Stop(hcan);
 8002c80:	f7ff ffca 	bl	8002c18 <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7fd fc5f 	bl	8000548 <HAL_CAN_MspDeInit>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	6013      	str	r3, [r2, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c94:	2000      	movs	r0, #0
 8002c96:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 8002c98:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8002c9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_CAN_RequestSleep>:
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ca2:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d905      	bls.n	8002cba <HAL_CAN_RequestSleep+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6243      	str	r3, [r0, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8002cb6:	2001      	movs	r0, #1
  }
}
 8002cb8:	4770      	bx	lr
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cba:	6802      	ldr	r2, [r0, #0]
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b082      	sub	sp, #8
  __IO uint32_t count = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = 1000000U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cce:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d906      	bls.n	8002ce8 <HAL_CAN_WakeUp+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002ce2:	2001      	movs	r0, #1
  }
}
 8002ce4:	b002      	add	sp, #8
 8002ce6:	4770      	bx	lr
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	6013      	str	r3, [r2, #0]
      count++;
 8002cf2:	9b01      	ldr	r3, [sp, #4]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
      if (count > timeout)
 8002cf8:	9a01      	ldr	r2, [sp, #4]
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_CAN_WakeUp+0x54>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d806      	bhi.n	8002d0e <HAL_CAN_WakeUp+0x46>
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f013 0f02 	tst.w	r3, #2
 8002d08:	d1f3      	bne.n	8002cf2 <HAL_CAN_WakeUp+0x2a>
    return HAL_OK;
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e7ea      	b.n	8002ce4 <HAL_CAN_WakeUp+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002d16:	2001      	movs	r0, #1
 8002d18:	e7e4      	b.n	8002ce4 <HAL_CAN_WakeUp+0x1c>
 8002d1a:	bf00      	nop
 8002d1c:	000f4240 	.word	0x000f4240

08002d20 <HAL_CAN_IsSleepActive>:
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d20:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d901      	bls.n	8002d30 <HAL_CAN_IsSleepActive+0x10>
  uint32_t status = 0U;
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	4770      	bx	lr
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d30:	6803      	ldr	r3, [r0, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f013 0f02 	tst.w	r3, #2
 8002d38:	d001      	beq.n	8002d3e <HAL_CAN_IsSleepActive+0x1e>
    {
      status = 1U;
 8002d3a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return status;
}
 8002d3c:	4770      	bx	lr
  uint32_t status = 0U;
 8002d3e:	2000      	movs	r0, #0
 8002d40:	4770      	bx	lr

08002d42 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d42:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d44:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d48:	6805      	ldr	r5, [r0, #0]
 8002d4a:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4c:	3c01      	subs	r4, #1
 8002d4e:	b2e4      	uxtb	r4, r4
 8002d50:	2c01      	cmp	r4, #1
 8002d52:	d906      	bls.n	8002d62 <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
  }
}
 8002d5e:	bc70      	pop	{r4, r5, r6}
 8002d60:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d62:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 8002d66:	d05b      	beq.n	8002e20 <HAL_CAN_AddTxMessage+0xde>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d68:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 8002d6c:	2d02      	cmp	r5, #2
 8002d6e:	d83e      	bhi.n	8002dee <HAL_CAN_AddTxMessage+0xac>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d70:	2401      	movs	r4, #1
 8002d72:	40ac      	lsls	r4, r5
 8002d74:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8002d76:	688b      	ldr	r3, [r1, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d13e      	bne.n	8002dfa <HAL_CAN_AddTxMessage+0xb8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d7c:	6804      	ldr	r4, [r0, #0]
 8002d7e:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 8002d80:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d82:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8002d86:	f105 0318 	add.w	r3, r5, #24
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	690c      	ldr	r4, [r1, #16]
 8002d92:	f105 0618 	add.w	r6, r5, #24
 8002d96:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002d9a:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d9c:	7d0b      	ldrb	r3, [r1, #20]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d036      	beq.n	8002e10 <HAL_CAN_AddTxMessage+0xce>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002da2:	6804      	ldr	r4, [r0, #0]
 8002da4:	79d1      	ldrb	r1, [r2, #7]
 8002da6:	7993      	ldrb	r3, [r2, #6]
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002dae:	7951      	ldrb	r1, [r2, #5]
 8002db0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002db4:	7911      	ldrb	r1, [r2, #4]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	012e      	lsls	r6, r5, #4
 8002dba:	4434      	add	r4, r6
 8002dbc:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dc0:	6801      	ldr	r1, [r0, #0]
 8002dc2:	78d4      	ldrb	r4, [r2, #3]
 8002dc4:	7893      	ldrb	r3, [r2, #2]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002dcc:	7854      	ldrb	r4, [r2, #1]
 8002dce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	4431      	add	r1, r6
 8002dd8:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ddc:	6802      	ldr	r2, [r0, #0]
 8002dde:	3518      	adds	r5, #24
 8002de0:	012d      	lsls	r5, r5, #4
 8002de2:	5953      	ldr	r3, [r2, r5]
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	5153      	str	r3, [r2, r5]
      return HAL_OK;
 8002dea:	2000      	movs	r0, #0
 8002dec:	e7b7      	b.n	8002d5e <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002dee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002df0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df4:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	e7b1      	b.n	8002d5e <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dfa:	6804      	ldr	r4, [r0, #0]
 8002dfc:	684e      	ldr	r6, [r1, #4]
 8002dfe:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
                                                           pHeader->RTR);
 8002e02:	68ce      	ldr	r6, [r1, #12]
                                                           pHeader->IDE |
 8002e04:	4333      	orrs	r3, r6
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e06:	f105 0618 	add.w	r6, r5, #24
 8002e0a:	0136      	lsls	r6, r6, #4
 8002e0c:	51a3      	str	r3, [r4, r6]
 8002e0e:	e7be      	b.n	8002d8e <HAL_CAN_AddTxMessage+0x4c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e10:	6803      	ldr	r3, [r0, #0]
 8002e12:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002e1c:	6059      	str	r1, [r3, #4]
 8002e1e:	e7c0      	b.n	8002da2 <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e26:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e798      	b.n	8002d5e <HAL_CAN_AddTxMessage+0x1c>

08002e2c <HAL_CAN_AbortTxRequest>:
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e2c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d905      	bls.n	8002e44 <HAL_CAN_AbortTxRequest+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
 8002e42:	4770      	bx	lr
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8002e44:	f011 0f01 	tst.w	r1, #1
 8002e48:	d004      	beq.n	8002e54 <HAL_CAN_AbortTxRequest+0x28>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8002e4a:	6802      	ldr	r2, [r0, #0]
 8002e4c:	6893      	ldr	r3, [r2, #8]
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	6093      	str	r3, [r2, #8]
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8002e54:	f011 0f02 	tst.w	r1, #2
 8002e58:	d004      	beq.n	8002e64 <HAL_CAN_AbortTxRequest+0x38>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	6893      	ldr	r3, [r2, #8]
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e62:	6093      	str	r3, [r2, #8]
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8002e64:	f011 0f04 	tst.w	r1, #4
 8002e68:	d006      	beq.n	8002e78 <HAL_CAN_AbortTxRequest+0x4c>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8002e6a:	6802      	ldr	r2, [r0, #0]
 8002e6c:	6893      	ldr	r3, [r2, #8]
 8002e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e72:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8002e74:	2000      	movs	r0, #0
 8002e76:	4770      	bx	lr
 8002e78:	2000      	movs	r0, #0
  }
}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e7c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d901      	bls.n	8002e8c <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8002e88:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8002e8a:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e8c:	6803      	ldr	r3, [r0, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8002e94:	d10b      	bne.n	8002eae <HAL_CAN_GetTxMailboxesFreeLevel+0x32>
  uint32_t freelevel = 0U;
 8002e96:	2000      	movs	r0, #0
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8002e9e:	d000      	beq.n	8002ea2 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8002ea0:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ea8:	d0ef      	beq.n	8002e8a <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8002eaa:	3001      	adds	r0, #1
 8002eac:	4770      	bx	lr
      freelevel++;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7f2      	b.n	8002e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>

08002eb2 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb2:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d901      	bls.n	8002ec2 <HAL_CAN_IsTxMessagePending+0x10>
  uint32_t status = 0U;
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	4770      	bx	lr
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0689      	lsls	r1, r1, #26
 8002ec8:	ea31 0303 	bics.w	r3, r1, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_CAN_IsTxMessagePending+0x20>
    {
      status = 1U;
 8002ece:	2001      	movs	r0, #1
    }
  }

  /* Return status */
  return status;
}
 8002ed0:	4770      	bx	lr
  uint32_t status = 0U;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_GetTxTimestamp>:
  */
uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
{
  uint32_t timestamp = 0U;
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ed6:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX(TxMailbox));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d901      	bls.n	8002ee6 <HAL_CAN_GetTxTimestamp+0x10>
  uint32_t timestamp = 0U;
 8002ee2:	2000      	movs	r0, #0
    timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TIME_Pos;
  }

  /* Return the timestamp */
  return timestamp;
}
 8002ee4:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	fa91 f1a1 	rbit	r1, r1
    transmitmailbox = POSITION_VAL(TxMailbox);
 8002eea:	fab1 f181 	clz	r1, r1
    timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TIME_Pos;
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	3118      	adds	r1, #24
 8002ef2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002ef6:	6848      	ldr	r0, [r1, #4]
 8002ef8:	0c00      	lsrs	r0, r0, #16
 8002efa:	4770      	bx	lr

08002efc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002efc:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002efe:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f02:	3c01      	subs	r4, #1
 8002f04:	b2e4      	uxtb	r4, r4
 8002f06:	2c01      	cmp	r4, #1
 8002f08:	d906      	bls.n	8002f18 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
  }
}
 8002f14:	bc30      	pop	{r4, r5}
 8002f16:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d16f      	bne.n	8002ffc <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f1c:	6804      	ldr	r4, [r0, #0]
 8002f1e:	68e4      	ldr	r4, [r4, #12]
 8002f20:	f014 0f03 	tst.w	r4, #3
 8002f24:	d064      	beq.n	8002ff0 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f26:	6805      	ldr	r5, [r0, #0]
 8002f28:	f101 041b 	add.w	r4, r1, #27
 8002f2c:	0124      	lsls	r4, r4, #4
 8002f2e:	592c      	ldr	r4, [r5, r4]
 8002f30:	f004 0404 	and.w	r4, r4, #4
 8002f34:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f36:	2c00      	cmp	r4, #0
 8002f38:	d16b      	bne.n	8003012 <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f3a:	6805      	ldr	r5, [r0, #0]
 8002f3c:	f101 041b 	add.w	r4, r1, #27
 8002f40:	0124      	lsls	r4, r4, #4
 8002f42:	592c      	ldr	r4, [r5, r4]
 8002f44:	0d64      	lsrs	r4, r4, #21
 8002f46:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f48:	6805      	ldr	r5, [r0, #0]
 8002f4a:	f101 041b 	add.w	r4, r1, #27
 8002f4e:	0124      	lsls	r4, r4, #4
 8002f50:	592d      	ldr	r5, [r5, r4]
 8002f52:	f005 0502 	and.w	r5, r5, #2
 8002f56:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f58:	6805      	ldr	r5, [r0, #0]
 8002f5a:	4425      	add	r5, r4
 8002f5c:	686d      	ldr	r5, [r5, #4]
 8002f5e:	f005 050f 	and.w	r5, r5, #15
 8002f62:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f64:	6805      	ldr	r5, [r0, #0]
 8002f66:	4425      	add	r5, r4
 8002f68:	686d      	ldr	r5, [r5, #4]
 8002f6a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8002f6e:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f70:	6805      	ldr	r5, [r0, #0]
 8002f72:	442c      	add	r4, r5
 8002f74:	6864      	ldr	r4, [r4, #4]
 8002f76:	0c24      	lsrs	r4, r4, #16
 8002f78:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f7a:	6804      	ldr	r4, [r0, #0]
 8002f7c:	010a      	lsls	r2, r1, #4
 8002f7e:	4414      	add	r4, r2
 8002f80:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002f84:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f86:	6804      	ldr	r4, [r0, #0]
 8002f88:	4414      	add	r4, r2
 8002f8a:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002f8e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002f92:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f94:	6804      	ldr	r4, [r0, #0]
 8002f96:	4414      	add	r4, r2
 8002f98:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002f9c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002fa0:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fa2:	6804      	ldr	r4, [r0, #0]
 8002fa4:	4414      	add	r4, r2
 8002fa6:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002faa:	0e24      	lsrs	r4, r4, #24
 8002fac:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fae:	6804      	ldr	r4, [r0, #0]
 8002fb0:	4414      	add	r4, r2
 8002fb2:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002fb6:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fb8:	6804      	ldr	r4, [r0, #0]
 8002fba:	4414      	add	r4, r2
 8002fbc:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002fc0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002fc4:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fc6:	6804      	ldr	r4, [r0, #0]
 8002fc8:	4414      	add	r4, r2
 8002fca:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002fce:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002fd2:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002fd4:	6804      	ldr	r4, [r0, #0]
 8002fd6:	4422      	add	r2, r4
 8002fd8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002fdc:	0e12      	lsrs	r2, r2, #24
 8002fde:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fe0:	b9f9      	cbnz	r1, 8003022 <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	68d3      	ldr	r3, [r2, #12]
 8002fe6:	f043 0320 	orr.w	r3, r3, #32
 8002fea:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002fec:	2000      	movs	r0, #0
 8002fee:	e791      	b.n	8002f14 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ff0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff6:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	e78b      	b.n	8002f14 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ffc:	6804      	ldr	r4, [r0, #0]
 8002ffe:	6924      	ldr	r4, [r4, #16]
 8003000:	f014 0f03 	tst.w	r4, #3
 8003004:	d18f      	bne.n	8002f26 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003006:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800300c:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800300e:	2001      	movs	r0, #1
 8003010:	e780      	b.n	8002f14 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003012:	6805      	ldr	r5, [r0, #0]
 8003014:	f101 041b 	add.w	r4, r1, #27
 8003018:	0124      	lsls	r4, r4, #4
 800301a:	592c      	ldr	r4, [r5, r4]
 800301c:	08e4      	lsrs	r4, r4, #3
 800301e:	6054      	str	r4, [r2, #4]
 8003020:	e792      	b.n	8002f48 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003022:	6802      	ldr	r2, [r0, #0]
 8003024:	6913      	ldr	r3, [r2, #16]
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 800302c:	2000      	movs	r0, #0
 800302e:	e771      	b.n	8002f14 <HAL_CAN_GetRxMessage+0x18>

08003030 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003030:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003034:	3b01      	subs	r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d901      	bls.n	8003040 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 800303c:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 800303e:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8003040:	b121      	cbz	r1, 800304c <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003042:	6803      	ldr	r3, [r0, #0]
 8003044:	6918      	ldr	r0, [r3, #16]
 8003046:	f000 0003 	and.w	r0, r0, #3
 800304a:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800304c:	6803      	ldr	r3, [r0, #0]
 800304e:	68d8      	ldr	r0, [r3, #12]
 8003050:	f000 0003 	and.w	r0, r0, #3
 8003054:	4770      	bx	lr

08003056 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003056:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800305a:	3b01      	subs	r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d905      	bls.n	800306e <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003062:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
  }
}
 800306c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800306e:	6802      	ldr	r2, [r0, #0]
 8003070:	6953      	ldr	r3, [r2, #20]
 8003072:	4319      	orrs	r1, r3
 8003074:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003076:	2000      	movs	r0, #0
 8003078:	4770      	bx	lr

0800307a <HAL_CAN_DeactivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800307a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800307e:	3b01      	subs	r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d905      	bls.n	8003092 <HAL_CAN_DeactivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003086:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800308e:	2001      	movs	r0, #1
  }
}
 8003090:	4770      	bx	lr
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8003092:	6802      	ldr	r2, [r0, #0]
 8003094:	6953      	ldr	r3, [r2, #20]
 8003096:	ea23 0101 	bic.w	r1, r3, r1
 800309a:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800309c:	2000      	movs	r0, #0
 800309e:	4770      	bx	lr

080030a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a0:	4770      	bx	lr

080030a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a2:	4770      	bx	lr

080030a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	4770      	bx	lr

080030a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a8:	4770      	bx	lr

080030aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030aa:	4770      	bx	lr

080030ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	4770      	bx	lr

080030ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ae:	4770      	bx	lr

080030b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030b0:	4770      	bx	lr

080030b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030b2:	4770      	bx	lr

080030b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030b4:	4770      	bx	lr

080030b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_IRQHandler>:
{
 80030ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030be:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030c0:	6803      	ldr	r3, [r0, #0]
 80030c2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030c4:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030c6:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030c8:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030cc:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030d0:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030d4:	f014 0f01 	tst.w	r4, #1
 80030d8:	d05a      	beq.n	8003190 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030da:	f016 0f01 	tst.w	r6, #1
 80030de:	d017      	beq.n	8003110 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030e0:	2201      	movs	r2, #1
 80030e2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030e4:	f016 0f02 	tst.w	r6, #2
 80030e8:	d108      	bne.n	80030fc <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030ea:	f016 0f04 	tst.w	r6, #4
 80030ee:	d130      	bne.n	8003152 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030f0:	f016 0f08 	tst.w	r6, #8
 80030f4:	d007      	beq.n	8003106 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030f6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80030fa:	e00b      	b.n	8003114 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030fc:	f7ff ffd0 	bl	80030a0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003100:	f04f 0b00 	mov.w	fp, #0
 8003104:	e006      	b.n	8003114 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003106:	f7ff ffce 	bl	80030a6 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800310a:	f04f 0b00 	mov.w	fp, #0
 800310e:	e001      	b.n	8003114 <HAL_CAN_IRQHandler+0x5a>
 8003110:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003114:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003118:	d00b      	beq.n	8003132 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800311a:	682b      	ldr	r3, [r5, #0]
 800311c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003120:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003122:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003126:	d117      	bne.n	8003158 <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003128:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800312c:	d018      	beq.n	8003160 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800312e:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003132:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003136:	d02d      	beq.n	8003194 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800313e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003140:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003144:	d116      	bne.n	8003174 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003146:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800314a:	d017      	beq.n	800317c <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800314c:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8003150:	e020      	b.n	8003194 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003152:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8003156:	e7dd      	b.n	8003114 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003158:	4628      	mov	r0, r5
 800315a:	f7ff ffa2 	bl	80030a2 <HAL_CAN_TxMailbox1CompleteCallback>
 800315e:	e7e8      	b.n	8003132 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003160:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8003164:	d002      	beq.n	800316c <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003166:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 800316a:	e7e2      	b.n	8003132 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800316c:	4628      	mov	r0, r5
 800316e:	f7ff ff9b 	bl	80030a8 <HAL_CAN_TxMailbox1AbortCallback>
 8003172:	e7de      	b.n	8003132 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003174:	4628      	mov	r0, r5
 8003176:	f7ff ff95 	bl	80030a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800317a:	e00b      	b.n	8003194 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800317c:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8003180:	d002      	beq.n	8003188 <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003182:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8003186:	e005      	b.n	8003194 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003188:	4628      	mov	r0, r5
 800318a:	f7ff ff8e 	bl	80030aa <HAL_CAN_TxMailbox2AbortCallback>
 800318e:	e001      	b.n	8003194 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003190:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003194:	f014 0f08 	tst.w	r4, #8
 8003198:	d007      	beq.n	80031aa <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800319a:	f019 0f10 	tst.w	r9, #16
 800319e:	d004      	beq.n	80031aa <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031a0:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	2210      	movs	r2, #16
 80031a8:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031aa:	f014 0f04 	tst.w	r4, #4
 80031ae:	d002      	beq.n	80031b6 <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031b0:	f019 0f08 	tst.w	r9, #8
 80031b4:	d160      	bne.n	8003278 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031b6:	f014 0f02 	tst.w	r4, #2
 80031ba:	d004      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f013 0f03 	tst.w	r3, #3
 80031c4:	d15f      	bne.n	8003286 <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031c6:	f014 0f40 	tst.w	r4, #64	; 0x40
 80031ca:	d007      	beq.n	80031dc <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031cc:	f018 0f10 	tst.w	r8, #16
 80031d0:	d004      	beq.n	80031dc <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031d2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031d6:	682b      	ldr	r3, [r5, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031dc:	f014 0f20 	tst.w	r4, #32
 80031e0:	d002      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031e2:	f018 0f08 	tst.w	r8, #8
 80031e6:	d152      	bne.n	800328e <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031e8:	f014 0f10 	tst.w	r4, #16
 80031ec:	d004      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f013 0f03 	tst.w	r3, #3
 80031f6:	d151      	bne.n	800329c <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031f8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80031fc:	d002      	beq.n	8003204 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031fe:	f017 0f10 	tst.w	r7, #16
 8003202:	d14f      	bne.n	80032a4 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003204:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8003208:	d002      	beq.n	8003210 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800320a:	f017 0f08 	tst.w	r7, #8
 800320e:	d150      	bne.n	80032b2 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003210:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003214:	d067      	beq.n	80032e6 <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003216:	f017 0f04 	tst.w	r7, #4
 800321a:	d061      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800321c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003220:	d004      	beq.n	800322c <HAL_CAN_IRQHandler+0x172>
 8003222:	f01a 0f01 	tst.w	sl, #1
 8003226:	d001      	beq.n	800322c <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 8003228:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800322c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003230:	d004      	beq.n	800323c <HAL_CAN_IRQHandler+0x182>
 8003232:	f01a 0f02 	tst.w	sl, #2
 8003236:	d001      	beq.n	800323c <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 8003238:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800323c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003240:	d004      	beq.n	800324c <HAL_CAN_IRQHandler+0x192>
 8003242:	f01a 0f04 	tst.w	sl, #4
 8003246:	d001      	beq.n	800324c <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 8003248:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800324c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8003250:	d046      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x226>
 8003252:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8003256:	d043      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 8003258:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800325c:	d048      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x236>
 800325e:	d92f      	bls.n	80032c0 <HAL_CAN_IRQHandler+0x206>
 8003260:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8003264:	d047      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x23c>
 8003266:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800326a:	d047      	beq.n	80032fc <HAL_CAN_IRQHandler+0x242>
 800326c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8003270:	d131      	bne.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8003272:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 8003276:	e02e      	b.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	2208      	movs	r2, #8
 800327c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800327e:	4628      	mov	r0, r5
 8003280:	f7ff ff15 	bl	80030ae <HAL_CAN_RxFifo0FullCallback>
 8003284:	e797      	b.n	80031b6 <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003286:	4628      	mov	r0, r5
 8003288:	f7ff ff10 	bl	80030ac <HAL_CAN_RxFifo0MsgPendingCallback>
 800328c:	e79b      	b.n	80031c6 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	2208      	movs	r2, #8
 8003292:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003294:	4628      	mov	r0, r5
 8003296:	f7ff ff0c 	bl	80030b2 <HAL_CAN_RxFifo1FullCallback>
 800329a:	e7a5      	b.n	80031e8 <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800329c:	4628      	mov	r0, r5
 800329e:	f7ff ff07 	bl	80030b0 <HAL_CAN_RxFifo1MsgPendingCallback>
 80032a2:	e7a9      	b.n	80031f8 <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	2210      	movs	r2, #16
 80032a8:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7ff ff02 	bl	80030b4 <HAL_CAN_SleepCallback>
 80032b0:	e7a8      	b.n	8003204 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	2208      	movs	r2, #8
 80032b6:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032b8:	4628      	mov	r0, r5
 80032ba:	f7ff fefc 	bl	80030b6 <HAL_CAN_WakeUpFromRxMsgCallback>
 80032be:	e7a7      	b.n	8003210 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 80032c0:	f1ba 0f10 	cmp.w	sl, #16
 80032c4:	d005      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x218>
 80032c6:	f1ba 0f20 	cmp.w	sl, #32
 80032ca:	d104      	bne.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032cc:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 80032d0:	e001      	b.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 80032d2:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032d6:	682a      	ldr	r2, [r5, #0]
 80032d8:	6993      	ldr	r3, [r2, #24]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	2204      	movs	r2, #4
 80032e4:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032e6:	f1bb 0f00 	cmp.w	fp, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_CAN_IRQHandler+0x248>
 80032ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 80032f0:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 80032f4:	e7ef      	b.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 80032f6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 80032fa:	e7ec      	b.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032fc:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8003300:	e7e9      	b.n	80032d6 <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8003302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003304:	ea4b 0303 	orr.w	r3, fp, r3
 8003308:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800330a:	4628      	mov	r0, r5
 800330c:	f7ff fed4 	bl	80030b8 <HAL_CAN_ErrorCallback>
}
 8003310:	e7ec      	b.n	80032ec <HAL_CAN_IRQHandler+0x232>

08003312 <HAL_CAN_GetState>:
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003312:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003316:	b2db      	uxtb	r3, r3

  if ((state == HAL_CAN_STATE_READY) ||
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	2a01      	cmp	r2, #1
 800331e:	d901      	bls.n	8003324 <HAL_CAN_GetState+0x12>
    }
  }

  /* Return CAN state */
  return state;
}
 8003320:	4618      	mov	r0, r3
 8003322:	4770      	bx	lr
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003324:	6802      	ldr	r2, [r0, #0]
 8003326:	6851      	ldr	r1, [r2, #4]
 8003328:	f011 0f02 	tst.w	r1, #2
 800332c:	d001      	beq.n	8003332 <HAL_CAN_GetState+0x20>
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 800332e:	2304      	movs	r3, #4
 8003330:	e7f6      	b.n	8003320 <HAL_CAN_GetState+0xe>
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	f012 0f02 	tst.w	r2, #2
 8003338:	d0f2      	beq.n	8003320 <HAL_CAN_GetState+0xe>
      state = HAL_CAN_STATE_SLEEP_PENDING;
 800333a:	2303      	movs	r3, #3
 800333c:	e7f0      	b.n	8003320 <HAL_CAN_GetState+0xe>

0800333e <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 800333e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8003340:	4770      	bx	lr

08003342 <HAL_CAN_ResetError>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
  HAL_StatusTypeDef status = HAL_OK;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003342:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003346:	3b01      	subs	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d905      	bls.n	800335a <HAL_CAN_ResetError+0x18>
    hcan->ErrorCode = 0U;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800334e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6243      	str	r3, [r0, #36]	; 0x24

    status = HAL_ERROR;
 8003356:	2001      	movs	r0, #1
  }

  /* Return the status */
  return status;
}
 8003358:	4770      	bx	lr
    hcan->ErrorCode = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	4618      	mov	r0, r3
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003366:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003368:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	0200      	lsls	r0, r0, #8
 8003372:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003376:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003378:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800337c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003380:	60d0      	str	r0, [r2, #12]
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003388:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_NVIC_SetPriority+0x5c>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003392:	f1c3 0407 	rsb	r4, r3, #7
 8003396:	2c04      	cmp	r4, #4
 8003398:	bf28      	it	cs
 800339a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339c:	1d1d      	adds	r5, r3, #4
 800339e:	2d06      	cmp	r5, #6
 80033a0:	d917      	bls.n	80033d2 <HAL_NVIC_SetPriority+0x4a>
 80033a2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	2501      	movs	r5, #1
 80033a6:	fa05 f404 	lsl.w	r4, r5, r4
 80033aa:	3c01      	subs	r4, #1
 80033ac:	4021      	ands	r1, r4
 80033ae:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	fa05 f303 	lsl.w	r3, r5, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80033ba:	2800      	cmp	r0, #0
 80033bc:	db0b      	blt.n	80033d6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	0109      	lsls	r1, r1, #4
 80033c0:	b2c9      	uxtb	r1, r1
 80033c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80033c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80033ca:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80033ce:	bc30      	pop	{r4, r5}
 80033d0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	2300      	movs	r3, #0
 80033d4:	e7e6      	b.n	80033a4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	f000 000f 	and.w	r0, r0, #15
 80033da:	0109      	lsls	r1, r1, #4
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <HAL_NVIC_SetPriority+0x60>)
 80033e0:	5419      	strb	r1, [r3, r0]
 80033e2:	e7f4      	b.n	80033ce <HAL_NVIC_SetPriority+0x46>
 80033e4:	e000ed00 	.word	0xe000ed00
 80033e8:	e000ed14 	.word	0xe000ed14

080033ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033ec:	2800      	cmp	r0, #0
 80033ee:	db08      	blt.n	8003402 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f0:	0942      	lsrs	r2, r0, #5
 80033f2:	f000 001f 	and.w	r0, r0, #31
 80033f6:	2301      	movs	r3, #1
 80033f8:	fa03 f000 	lsl.w	r0, r3, r0
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <HAL_NVIC_EnableIRQ+0x18>)
 80033fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100

08003408 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003408:	2800      	cmp	r0, #0
 800340a:	db0d      	blt.n	8003428 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340c:	0943      	lsrs	r3, r0, #5
 800340e:	f000 001f 	and.w	r0, r0, #31
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f000 	lsl.w	r0, r2, r0
 8003418:	3320      	adds	r3, #32
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_NVIC_DisableIRQ+0x24>)
 800341c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100

08003430 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003430:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003434:	4905      	ldr	r1, [pc, #20]	; (800344c <HAL_NVIC_SystemReset+0x1c>)
 8003436:	68ca      	ldr	r2, [r1, #12]
 8003438:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_NVIC_SystemReset+0x20>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003446:	bf00      	nop
 8003448:	e7fd      	b.n	8003446 <HAL_NVIC_SystemReset+0x16>
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00
 8003450:	05fa0004 	.word	0x05fa0004

08003454 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	3801      	subs	r0, #1
 8003456:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800345a:	d20a      	bcs.n	8003472 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_SYSTICK_Config+0x24>)
 800345e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	21f0      	movs	r1, #240	; 0xf0
 8003462:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_SYSTICK_Config+0x28>)
 8003464:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	2000      	movs	r0, #0
 800346a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003480:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003484:	4a04      	ldr	r2, [pc, #16]	; (8003498 <HAL_MPU_Disable+0x18>)
 8003486:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 800348e:	2200      	movs	r2, #0
 8003490:	4b02      	ldr	r3, [pc, #8]	; (800349c <HAL_MPU_Disable+0x1c>)
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000ed00 	.word	0xe000ed00
 800349c:	e000ed90 	.word	0xe000ed90

080034a0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80034a0:	f040 0001 	orr.w	r0, r0, #1
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_MPU_Enable+0x1c>)
 80034a6:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80034a8:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <HAL_MPU_Enable+0x20>)
 80034aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80034b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	4770      	bx	lr
 80034bc:	e000ed90 	.word	0xe000ed90
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80034c4:	7842      	ldrb	r2, [r0, #1]
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_MPU_ConfigRegion+0x50>)
 80034c8:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80034ca:	7803      	ldrb	r3, [r0, #0]
 80034cc:	b923      	cbnz	r3, 80034d8 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_MPU_ConfigRegion+0x50>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80034d8:	6843      	ldr	r3, [r0, #4]
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_MPU_ConfigRegion+0x50>)
 80034dc:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034de:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034e0:	7ac3      	ldrb	r3, [r0, #11]
 80034e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034e4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034e8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034ea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034ee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034f4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034fa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003500:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003506:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003508:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800350c:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800350e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003510:	6113      	str	r3, [r2, #16]
 8003512:	4770      	bx	lr
 8003514:	e000ed90 	.word	0xe000ed90

08003518 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <HAL_NVIC_GetPriorityGrouping+0xc>)
 800351a:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 800351c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8003528:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) >= 0)
 800352a:	2800      	cmp	r0, #0
 800352c:	db1f      	blt.n	800356e <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800352e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003532:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003536:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 800353a:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800353c:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	f1c1 0407 	rsb	r4, r1, #7
 8003544:	2c04      	cmp	r4, #4
 8003546:	bf28      	it	cs
 8003548:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	1d08      	adds	r0, r1, #4
 800354c:	2806      	cmp	r0, #6
 800354e:	d914      	bls.n	800357a <HAL_NVIC_GetPriority+0x52>
 8003550:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8003552:	fa25 f601 	lsr.w	r6, r5, r1
 8003556:	2001      	movs	r0, #1
 8003558:	fa00 f404 	lsl.w	r4, r0, r4
 800355c:	3c01      	subs	r4, #1
 800355e:	4034      	ands	r4, r6
 8003560:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8003562:	4088      	lsls	r0, r1
 8003564:	3801      	subs	r0, #1
 8003566:	4028      	ands	r0, r5
 8003568:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 800356a:	bc70      	pop	{r4, r5, r6}
 800356c:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800356e:	f000 000f 	and.w	r0, r0, #15
 8003572:	4c03      	ldr	r4, [pc, #12]	; (8003580 <HAL_NVIC_GetPriority+0x58>)
 8003574:	5c20      	ldrb	r0, [r4, r0]
 8003576:	0905      	lsrs	r5, r0, #4
 8003578:	e7e0      	b.n	800353c <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357a:	2100      	movs	r1, #0
 800357c:	e7e9      	b.n	8003552 <HAL_NVIC_GetPriority+0x2a>
 800357e:	bf00      	nop
 8003580:	e000ed14 	.word	0xe000ed14

08003584 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003584:	2800      	cmp	r0, #0
 8003586:	db09      	blt.n	800359c <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003588:	0943      	lsrs	r3, r0, #5
 800358a:	f000 001f 	and.w	r0, r0, #31
 800358e:	2201      	movs	r2, #1
 8003590:	fa02 f000 	lsl.w	r0, r2, r0
 8003594:	3340      	adds	r3, #64	; 0x40
 8003596:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8003598:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	db0a      	blt.n	80035be <HAL_NVIC_GetPendingIRQ+0x1a>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80035a8:	095a      	lsrs	r2, r3, #5
 80035aa:	3240      	adds	r2, #64	; 0x40
 80035ac:	4905      	ldr	r1, [pc, #20]	; (80035c4 <HAL_NVIC_GetPendingIRQ+0x20>)
 80035ae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	40d8      	lsrs	r0, r3
 80035b8:	f000 0001 	and.w	r0, r0, #1
 80035bc:	4770      	bx	lr
    return(0U);
 80035be:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	db09      	blt.n	80035e0 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035cc:	0943      	lsrs	r3, r0, #5
 80035ce:	f000 001f 	and.w	r0, r0, #31
 80035d2:	2201      	movs	r2, #1
 80035d4:	fa02 f000 	lsl.w	r0, r2, r0
 80035d8:	3360      	adds	r3, #96	; 0x60
 80035da:	4a02      	ldr	r2, [pc, #8]	; (80035e4 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 80035dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	db0a      	blt.n	8003602 <HAL_NVIC_GetActive+0x1a>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80035ec:	095a      	lsrs	r2, r3, #5
 80035ee:	3280      	adds	r2, #128	; 0x80
 80035f0:	4905      	ldr	r1, [pc, #20]	; (8003608 <HAL_NVIC_GetActive+0x20>)
 80035f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	40d8      	lsrs	r0, r3
 80035fc:	f000 0001 	and.w	r0, r0, #1
 8003600:	4770      	bx	lr
    return(0U);
 8003602:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800360c:	2804      	cmp	r0, #4
 800360e:	d005      	beq.n	800361c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800361c:	4a02      	ldr	r2, [pc, #8]	; (8003628 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4770      	bx	lr
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800362c:	4770      	bx	lr

0800362e <HAL_SYSTICK_IRQHandler>:
{
 800362e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003630:	f7ff fffc 	bl	800362c <HAL_SYSTICK_Callback>
 8003634:	bd08      	pop	{r3, pc}
 8003636:	bf00      	nop
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003638:	4770      	bx	lr

0800363a <HAL_DAC_Init>:
  if(hdac == NULL)
 800363a:	b170      	cbz	r0, 800365a <HAL_DAC_Init+0x20>
{ 
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003640:	7903      	ldrb	r3, [r0, #4]
 8003642:	b133      	cbz	r3, 8003652 <HAL_DAC_Init+0x18>
  hdac->State = HAL_DAC_STATE_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	7123      	strb	r3, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003648:	2000      	movs	r0, #0
 800364a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800364c:	2301      	movs	r3, #1
 800364e:	7123      	strb	r3, [r4, #4]
  return HAL_OK;
 8003650:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003652:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003654:	f7fc ffb8 	bl	80005c8 <HAL_DAC_MspInit>
 8003658:	e7f4      	b.n	8003644 <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 800365a:	2001      	movs	r0, #1
 800365c:	4770      	bx	lr
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.  
  * @retval None
  */
__weak void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 800365e:	4770      	bx	lr

08003660 <HAL_DAC_DeInit>:
  if(hdac == NULL)
 8003660:	b150      	cbz	r0, 8003678 <HAL_DAC_DeInit+0x18>
{
 8003662:	b510      	push	{r4, lr}
 8003664:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003666:	2302      	movs	r3, #2
 8003668:	7103      	strb	r3, [r0, #4]
  HAL_DAC_MspDeInit(hdac);
 800366a:	f7fc ffe7 	bl	800063c <HAL_DAC_MspDeInit>
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800366e:	2000      	movs	r0, #0
 8003670:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_RESET;
 8003672:	7120      	strb	r0, [r4, #4]
  __HAL_UNLOCK(hdac);
 8003674:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8003676:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8003678:	2001      	movs	r0, #1
 800367a:	4770      	bx	lr

0800367c <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800367c:	7943      	ldrb	r3, [r0, #5]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d031      	beq.n	80036e6 <HAL_DAC_Start+0x6a>
{
 8003682:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 8003684:	2301      	movs	r3, #1
 8003686:	7143      	strb	r3, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003688:	2202      	movs	r2, #2
 800368a:	7102      	strb	r2, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800368c:	6804      	ldr	r4, [r0, #0]
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	408b      	lsls	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	6023      	str	r3, [r4, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003696:	b9b1      	cbnz	r1, 80036c6 <HAL_DAC_Start+0x4a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003698:	6802      	ldr	r2, [r0, #0]
 800369a:	6811      	ldr	r1, [r2, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80036a2:	f011 0f04 	tst.w	r1, #4
 80036a6:	d001      	beq.n	80036ac <HAL_DAC_Start+0x30>
 80036a8:	2b38      	cmp	r3, #56	; 0x38
 80036aa:	d007      	beq.n	80036bc <HAL_DAC_Start+0x40>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036ac:	2301      	movs	r3, #1
 80036ae:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036b0:	2300      	movs	r3, #0
 80036b2:	7143      	strb	r3, [r0, #5]
    
  /* Return function status */
  return HAL_OK;
 80036b4:	4618      	mov	r0, r3
}
 80036b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ba:	4770      	bx	lr
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80036bc:	6853      	ldr	r3, [r2, #4]
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6053      	str	r3, [r2, #4]
 80036c4:	e7f2      	b.n	80036ac <HAL_DAC_Start+0x30>
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80036c6:	6802      	ldr	r2, [r0, #0]
 80036c8:	6811      	ldr	r1, [r2, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80036d0:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 80036d4:	d0ea      	beq.n	80036ac <HAL_DAC_Start+0x30>
 80036d6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80036da:	d1e7      	bne.n	80036ac <HAL_DAC_Start+0x30>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80036dc:	6853      	ldr	r3, [r2, #4]
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	6053      	str	r3, [r2, #4]
 80036e4:	e7e2      	b.n	80036ac <HAL_DAC_Start+0x30>
  __HAL_LOCK(hdac);
 80036e6:	2002      	movs	r0, #2
 80036e8:	4770      	bx	lr

080036ea <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80036ea:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80036ec:	6804      	ldr	r4, [r0, #0]
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	fa02 f101 	lsl.w	r1, r2, r1
 80036f6:	ea23 0301 	bic.w	r3, r3, r1
 80036fa:	6023      	str	r3, [r4, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036fc:	7102      	strb	r2, [r0, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80036fe:	2000      	movs	r0, #0
 8003700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003708:	9e06      	ldr	r6, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800370a:	7944      	ldrb	r4, [r0, #5]
 800370c:	2c01      	cmp	r4, #1
 800370e:	d064      	beq.n	80037da <HAL_DAC_Start_DMA+0xd4>
 8003710:	2401      	movs	r4, #1
 8003712:	7144      	strb	r4, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003714:	2402      	movs	r4, #2
 8003716:	7104      	strb	r4, [r0, #4]

  if(Channel == DAC_CHANNEL_1)
 8003718:	2900      	cmp	r1, #0
 800371a:	d135      	bne.n	8003788 <HAL_DAC_Start_DMA+0x82>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800371c:	6884      	ldr	r4, [r0, #8]
 800371e:	4d30      	ldr	r5, [pc, #192]	; (80037e0 <HAL_DAC_Start_DMA+0xda>)
 8003720:	63e5      	str	r5, [r4, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003722:	6884      	ldr	r4, [r0, #8]
 8003724:	4d2f      	ldr	r5, [pc, #188]	; (80037e4 <HAL_DAC_Start_DMA+0xde>)
 8003726:	6425      	str	r5, [r4, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003728:	6884      	ldr	r4, [r0, #8]
 800372a:	4d2f      	ldr	r5, [pc, #188]	; (80037e8 <HAL_DAC_Start_DMA+0xe2>)
 800372c:	64e5      	str	r5, [r4, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800372e:	6805      	ldr	r5, [r0, #0]
 8003730:	682c      	ldr	r4, [r5, #0]
 8003732:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8003736:	602c      	str	r4, [r5, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8003738:	2e04      	cmp	r6, #4
 800373a:	d01f      	beq.n	800377c <HAL_DAC_Start_DMA+0x76>
 800373c:	2e08      	cmp	r6, #8
 800373e:	d020      	beq.n	8003782 <HAL_DAC_Start_DMA+0x7c>
 8003740:	b1ce      	cbz	r6, 8003776 <HAL_DAC_Start_DMA+0x70>
  uint32_t tmpreg = 0U;
 8003742:	460e      	mov	r6, r1
 8003744:	4617      	mov	r7, r2
 8003746:	460d      	mov	r5, r1
 8003748:	4604      	mov	r4, r0
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800374a:	2900      	cmp	r1, #0
 800374c:	d13a      	bne.n	80037c4 <HAL_DAC_Start_DMA+0xbe>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800374e:	6801      	ldr	r1, [r0, #0]
 8003750:	680a      	ldr	r2, [r1, #0]
 8003752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003756:	600a      	str	r2, [r1, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003758:	4632      	mov	r2, r6
 800375a:	4639      	mov	r1, r7
 800375c:	6880      	ldr	r0, [r0, #8]
 800375e:	f000 faa4 	bl	8003caa <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	6813      	ldr	r3, [r2, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f505 	lsl.w	r5, r1, r5
 800376c:	431d      	orrs	r5, r3
 800376e:	6015      	str	r5, [r2, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003770:	2000      	movs	r0, #0
 8003772:	7160      	strb	r0, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003776:	6806      	ldr	r6, [r0, #0]
 8003778:	3608      	adds	r6, #8
        break;
 800377a:	e7e3      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800377c:	6806      	ldr	r6, [r0, #0]
 800377e:	360c      	adds	r6, #12
        break;
 8003780:	e7e0      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003782:	6806      	ldr	r6, [r0, #0]
 8003784:	3610      	adds	r6, #16
        break;
 8003786:	e7dd      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003788:	68c4      	ldr	r4, [r0, #12]
 800378a:	4d18      	ldr	r5, [pc, #96]	; (80037ec <HAL_DAC_Start_DMA+0xe6>)
 800378c:	63e5      	str	r5, [r4, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800378e:	68c4      	ldr	r4, [r0, #12]
 8003790:	4d17      	ldr	r5, [pc, #92]	; (80037f0 <HAL_DAC_Start_DMA+0xea>)
 8003792:	6425      	str	r5, [r4, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003794:	68c4      	ldr	r4, [r0, #12]
 8003796:	4d17      	ldr	r5, [pc, #92]	; (80037f4 <HAL_DAC_Start_DMA+0xee>)
 8003798:	64e5      	str	r5, [r4, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800379a:	6805      	ldr	r5, [r0, #0]
 800379c:	682c      	ldr	r4, [r5, #0]
 800379e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80037a2:	602c      	str	r4, [r5, #0]
    switch(Alignment)
 80037a4:	2e04      	cmp	r6, #4
 80037a6:	d007      	beq.n	80037b8 <HAL_DAC_Start_DMA+0xb2>
 80037a8:	2e08      	cmp	r6, #8
 80037aa:	d008      	beq.n	80037be <HAL_DAC_Start_DMA+0xb8>
 80037ac:	b10e      	cbz	r6, 80037b2 <HAL_DAC_Start_DMA+0xac>
  uint32_t tmpreg = 0U;
 80037ae:	2600      	movs	r6, #0
 80037b0:	e7c8      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80037b2:	6806      	ldr	r6, [r0, #0]
 80037b4:	3614      	adds	r6, #20
        break;
 80037b6:	e7c5      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80037b8:	6806      	ldr	r6, [r0, #0]
 80037ba:	3618      	adds	r6, #24
        break;
 80037bc:	e7c2      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80037be:	6806      	ldr	r6, [r0, #0]
 80037c0:	361c      	adds	r6, #28
        break;
 80037c2:	e7bf      	b.n	8003744 <HAL_DAC_Start_DMA+0x3e>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80037c4:	6801      	ldr	r1, [r0, #0]
 80037c6:	680a      	ldr	r2, [r1, #0]
 80037c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037cc:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80037ce:	4632      	mov	r2, r6
 80037d0:	4639      	mov	r1, r7
 80037d2:	68c0      	ldr	r0, [r0, #12]
 80037d4:	f000 fa69 	bl	8003caa <HAL_DMA_Start_IT>
 80037d8:	e7c3      	b.n	8003762 <HAL_DAC_Start_DMA+0x5c>
  __HAL_LOCK(hdac);
 80037da:	2002      	movs	r0, #2
}
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037de:	bf00      	nop
 80037e0:	08003849 	.word	0x08003849
 80037e4:	0800385b 	.word	0x0800385b
 80037e8:	08003867 	.word	0x08003867
 80037ec:	08003a01 	.word	0x08003a01
 80037f0:	08003a11 	.word	0x08003a11
 80037f4:	08003a1b 	.word	0x08003a1b

080037f8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80037f8:	b510      	push	{r4, lr}
 80037fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80037fc:	6800      	ldr	r0, [r0, #0]
 80037fe:	6803      	ldr	r3, [r0, #0]
 8003800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003804:	408a      	lsls	r2, r1
 8003806:	ea23 0302 	bic.w	r3, r3, r2
 800380a:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	408a      	lsls	r2, r1
 8003814:	ea23 0302 	bic.w	r3, r3, r2
 8003818:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800381a:	b931      	cbnz	r1, 800382a <HAL_DAC_Stop_DMA+0x32>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800381c:	68a0      	ldr	r0, [r4, #8]
 800381e:	f000 fa79 	bl	8003d14 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003822:	b930      	cbnz	r0, 8003832 <HAL_DAC_Stop_DMA+0x3a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003824:	2301      	movs	r3, #1
 8003826:	7123      	strb	r3, [r4, #4]
  }

  /* Return function status */
  return status;
}
 8003828:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 800382a:	68e0      	ldr	r0, [r4, #12]
 800382c:	f000 fa72 	bl	8003d14 <HAL_DMA_Abort>
 8003830:	e7f7      	b.n	8003822 <HAL_DAC_Stop_DMA+0x2a>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003832:	2304      	movs	r3, #4
 8003834:	7123      	strb	r3, [r4, #4]
 8003836:	bd10      	pop	{r4, pc}

08003838 <HAL_DAC_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1)
 8003838:	b111      	cbz	r1, 8003840 <HAL_DAC_GetValue+0x8>
  {
    return hdac->Instance->DOR1;
  }
  else
  {
    return hdac->Instance->DOR2;
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	6b18      	ldr	r0, [r3, #48]	; 0x30
  }
}
 800383e:	4770      	bx	lr
    return hdac->Instance->DOR1;
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003844:	4770      	bx	lr

08003846 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003846:	4770      	bx	lr

08003848 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003848:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800384c:	4620      	mov	r0, r4
 800384e:	f7ff fffa 	bl	8003846 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003852:	2301      	movs	r3, #1
 8003854:	7123      	strb	r3, [r4, #4]
 8003856:	bd10      	pop	{r4, pc}

08003858 <HAL_DAC_ConvHalfCpltCallbackCh1>:
{
 8003858:	4770      	bx	lr

0800385a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800385a:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800385c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800385e:	f7ff fffb 	bl	8003858 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8003862:	bd08      	pop	{r3, pc}

08003864 <HAL_DAC_ErrorCallbackCh1>:
{
 8003864:	4770      	bx	lr

08003866 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003866:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003868:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff fff6 	bl	8003864 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003878:	2301      	movs	r3, #1
 800387a:	7123      	strb	r3, [r4, #4]
 800387c:	bd10      	pop	{r4, pc}

0800387e <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 800387e:	4770      	bx	lr

08003880 <HAL_DAC_IRQHandler>:
{
 8003880:	b510      	push	{r4, lr}
 8003882:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003884:	6803      	ldr	r3, [r0, #0]
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800388c:	d105      	bne.n	800389a <HAL_DAC_IRQHandler+0x1a>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003896:	d111      	bne.n	80038bc <HAL_DAC_IRQHandler+0x3c>
 8003898:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 800389a:	2204      	movs	r2, #4
 800389c:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800389e:	6902      	ldr	r2, [r0, #16]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80038a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80038ac:	6802      	ldr	r2, [r0, #0]
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b4:	6013      	str	r3, [r2, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80038b6:	f7ff ffe2 	bl	800387e <HAL_DAC_DMAUnderrunCallbackCh1>
 80038ba:	e7e8      	b.n	800388e <HAL_DAC_IRQHandler+0xe>
    hdac->State = HAL_DAC_STATE_ERROR;
 80038bc:	2204      	movs	r2, #4
 80038be:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80038c0:	6922      	ldr	r2, [r4, #16]
 80038c2:	f042 0202 	orr.w	r2, r2, #2
 80038c6:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80038c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80038ce:	6822      	ldr	r2, [r4, #0]
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6013      	str	r3, [r2, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 f890 	bl	80039fe <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 80038de:	e7db      	b.n	8003898 <HAL_DAC_IRQHandler+0x18>

080038e0 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 80038e0:	7943      	ldrb	r3, [r0, #5]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d01f      	beq.n	8003926 <HAL_DAC_ConfigChannel+0x46>
{
 80038e6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdac);
 80038e8:	2501      	movs	r5, #1
 80038ea:	7145      	strb	r5, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80038ec:	2302      	movs	r3, #2
 80038ee:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80038f0:	6806      	ldr	r6, [r0, #0]
 80038f2:	6833      	ldr	r3, [r6, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80038f4:	f640 74fe 	movw	r4, #4094	; 0xffe
 80038f8:	4094      	lsls	r4, r2
 80038fa:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038fe:	680c      	ldr	r4, [r1, #0]
 8003900:	6849      	ldr	r1, [r1, #4]
 8003902:	4321      	orrs	r1, r4
  tmpreg1 |= tmpreg2 << Channel;
 8003904:	4091      	lsls	r1, r2
 8003906:	430b      	orrs	r3, r1
  hdac->Instance->CR = tmpreg1;
 8003908:	6033      	str	r3, [r6, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800390a:	6804      	ldr	r4, [r0, #0]
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	21c0      	movs	r1, #192	; 0xc0
 8003910:	fa01 f202 	lsl.w	r2, r1, r2
 8003914:	ea23 0202 	bic.w	r2, r3, r2
 8003918:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800391a:	7105      	strb	r5, [r0, #4]
  __HAL_UNLOCK(hdac);
 800391c:	2300      	movs	r3, #0
 800391e:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8003920:	4618      	mov	r0, r3
}
 8003922:	bc70      	pop	{r4, r5, r6}
 8003924:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003926:	2002      	movs	r0, #2
 8003928:	4770      	bx	lr

0800392a <HAL_DAC_SetValue>:
{  
 800392a:	b410      	push	{r4}
 800392c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0U;
 800392e:	2400      	movs	r4, #0
 8003930:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 8003936:	b151      	cbz	r1, 800394e <HAL_DAC_SetValue+0x24>
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003938:	9901      	ldr	r1, [sp, #4]
 800393a:	440a      	add	r2, r1
 800393c:	3214      	adds	r2, #20
 800393e:	9201      	str	r2, [sp, #4]
  *(__IO uint32_t *) tmp = Data;
 8003940:	9a01      	ldr	r2, [sp, #4]
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	2000      	movs	r0, #0
 8003946:	b003      	add	sp, #12
 8003948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800394c:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800394e:	9901      	ldr	r1, [sp, #4]
 8003950:	440a      	add	r2, r1
 8003952:	3208      	adds	r2, #8
 8003954:	9201      	str	r2, [sp, #4]
 8003956:	e7f3      	b.n	8003940 <HAL_DAC_SetValue+0x16>

08003958 <HAL_DAC_GetState>:
  return hdac->State;
 8003958:	7900      	ldrb	r0, [r0, #4]
}
 800395a:	4770      	bx	lr

0800395c <HAL_DAC_GetError>:
  return hdac->ErrorCode;
 800395c:	6900      	ldr	r0, [r0, #16]
}
 800395e:	4770      	bx	lr

08003960 <HAL_DACEx_DualGetValue>:
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac)
{
  uint32_t tmp = 0U;
  
  tmp |= hdac->Instance->DOR1;
 8003960:	6803      	ldr	r3, [r0, #0]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  
  tmp |= hdac->Instance->DOR2 << 16U;
 8003964:	6b18      	ldr	r0, [r3, #48]	; 0x30
  
  /* Returns the DAC channel data output register value */
  return tmp;
}
 8003966:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800396a:	4770      	bx	lr

0800396c <HAL_DACEx_TriangleWaveGenerate>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800396c:	7943      	ldrb	r3, [r0, #5]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d017      	beq.n	80039a2 <HAL_DACEx_TriangleWaveGenerate+0x36>
{  
 8003972:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdac);
 8003974:	2501      	movs	r5, #1
 8003976:	7145      	strb	r5, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	7103      	strb	r3, [r0, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 800397c:	6806      	ldr	r6, [r0, #0]
 800397e:	6833      	ldr	r3, [r6, #0]
 8003980:	f44f 647c 	mov.w	r4, #4032	; 0xfc0
 8003984:	408c      	lsls	r4, r1
 8003986:	ea23 0304 	bic.w	r3, r3, r4
 800398a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800398e:	fa02 f101 	lsl.w	r1, r2, r1
 8003992:	4319      	orrs	r1, r3
 8003994:	6031      	str	r1, [r6, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003996:	7105      	strb	r5, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003998:	2300      	movs	r3, #0
 800399a:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
 800399c:	4618      	mov	r0, r3
}
 800399e:	bc70      	pop	{r4, r5, r6}
 80039a0:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80039a2:	2002      	movs	r0, #2
 80039a4:	4770      	bx	lr

080039a6 <HAL_DACEx_NoiseWaveGenerate>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80039a6:	7943      	ldrb	r3, [r0, #5]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d017      	beq.n	80039dc <HAL_DACEx_NoiseWaveGenerate+0x36>
{  
 80039ac:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdac);
 80039ae:	2501      	movs	r5, #1
 80039b0:	7145      	strb	r5, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	7103      	strb	r3, [r0, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_0 | Amplitude) << Channel);
 80039b6:	6806      	ldr	r6, [r0, #0]
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	f44f 647c 	mov.w	r4, #4032	; 0xfc0
 80039be:	408c      	lsls	r4, r1
 80039c0:	ea23 0304 	bic.w	r3, r3, r4
 80039c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c8:	fa02 f101 	lsl.w	r1, r2, r1
 80039cc:	4319      	orrs	r1, r3
 80039ce:	6031      	str	r1, [r6, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039d0:	7105      	strb	r5, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039d2:	2300      	movs	r3, #0
 80039d4:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
 80039d6:	4618      	mov	r0, r3
}
 80039d8:	bc70      	pop	{r4, r5, r6}
 80039da:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80039dc:	2002      	movs	r0, #2
 80039de:	4770      	bx	lr

080039e0 <HAL_DACEx_DualSetValue>:
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 80039e0:	2908      	cmp	r1, #8
 80039e2:	d006      	beq.n	80039f2 <HAL_DACEx_DualSetValue+0x12>
  {
    data = ((uint32_t)Data2 << 8U) | Data1; 
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80039e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  }
  
  tmp = (uint32_t)hdac->Instance;
 80039e8:	6803      	ldr	r3, [r0, #0]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80039ea:	4419      	add	r1, r3

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80039ec:	620a      	str	r2, [r1, #32]
  
  /* Return function status */
  return HAL_OK;
}
 80039ee:	2000      	movs	r0, #0
 80039f0:	4770      	bx	lr
    data = ((uint32_t)Data2 << 8U) | Data1; 
 80039f2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80039f6:	e7f7      	b.n	80039e8 <HAL_DACEx_DualSetValue+0x8>

080039f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80039f8:	4770      	bx	lr

080039fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80039fa:	4770      	bx	lr

080039fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039fc:	4770      	bx	lr

080039fe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039fe:	4770      	bx	lr

08003a00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003a00:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a02:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff fff7 	bl	80039f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	7123      	strb	r3, [r4, #4]
 8003a0e:	bd10      	pop	{r4, pc}

08003a10 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003a10:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003a12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003a14:	f7ff fff1 	bl	80039fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8003a18:	bd08      	pop	{r3, pc}

08003a1a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003a1a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1c:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff ffe8 	bl	80039fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	7123      	strb	r3, [r4, #4]
 8003a30:	bd10      	pop	{r4, pc}
	...

08003a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a34:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a36:	6805      	ldr	r5, [r0, #0]
 8003a38:	682c      	ldr	r4, [r5, #0]
 8003a3a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003a3e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a40:	6804      	ldr	r4, [r0, #0]
 8003a42:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a44:	6883      	ldr	r3, [r0, #8]
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d005      	beq.n	8003a56 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	60da      	str	r2, [r3, #12]
  }
}
 8003a52:	bc30      	pop	{r4, r5}
 8003a54:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003a56:	6803      	ldr	r3, [r0, #0]
 8003a58:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003a5a:	6803      	ldr	r3, [r0, #0]
 8003a5c:	60d9      	str	r1, [r3, #12]
 8003a5e:	e7f8      	b.n	8003a52 <DMA_SetConfig+0x1e>

08003a60 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a60:	6802      	ldr	r2, [r0, #0]
 8003a62:	b2d3      	uxtb	r3, r2
 8003a64:	3b10      	subs	r3, #16
 8003a66:	490b      	ldr	r1, [pc, #44]	; (8003a94 <DMA_CalcBaseAndBitshift+0x34>)
 8003a68:	fba1 1303 	umull	r1, r3, r1, r3
 8003a6c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <DMA_CalcBaseAndBitshift+0x38>)
 8003a70:	5cc9      	ldrb	r1, [r1, r3]
 8003a72:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d806      	bhi.n	8003a86 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a78:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003a7c:	f022 0203 	bic.w	r2, r2, #3
 8003a80:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8003a82:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003a84:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a86:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003a8a:	f022 0203 	bic.w	r2, r2, #3
 8003a8e:	3204      	adds	r2, #4
 8003a90:	6582      	str	r2, [r0, #88]	; 0x58
 8003a92:	e7f6      	b.n	8003a82 <DMA_CalcBaseAndBitshift+0x22>
 8003a94:	aaaaaaab 	.word	0xaaaaaaab
 8003a98:	0801c9ec 	.word	0x0801c9ec

08003a9c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a9e:	6982      	ldr	r2, [r0, #24]
 8003aa0:	b992      	cbnz	r2, 8003ac8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d00a      	beq.n	8003abc <DMA_CheckFifoParam+0x20>
 8003aa6:	b11b      	cbz	r3, 8003ab0 <DMA_CheckFifoParam+0x14>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d001      	beq.n	8003ab0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ab2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ab6:	d12c      	bne.n	8003b12 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2000      	movs	r0, #0
 8003aba:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac2:	d028      	beq.n	8003b16 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ac8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003acc:	d005      	beq.n	8003ada <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d929      	bls.n	8003b26 <DMA_CheckFifoParam+0x8a>
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d015      	beq.n	8003b02 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	4770      	bx	lr
    switch (tmp)
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d803      	bhi.n	8003ae6 <DMA_CheckFifoParam+0x4a>
 8003ade:	e8df f003 	tbb	[pc, r3]
 8003ae2:	041c      	.short	0x041c
 8003ae4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003aec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003af0:	d115      	bne.n	8003b1e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2000      	movs	r0, #0
 8003af4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003afc:	d011      	beq.n	8003b22 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2000      	movs	r0, #0
 8003b00:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b08:	d001      	beq.n	8003b0e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003b0c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2000      	movs	r0, #0
 8003b10:	4770      	bx	lr
        status = HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
 8003b14:	4770      	bx	lr
        status = HAL_ERROR;
 8003b16:	2001      	movs	r0, #1
 8003b18:	4770      	bx	lr
      status = HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	4770      	bx	lr
        status = HAL_ERROR;
 8003b1e:	2001      	movs	r0, #1
 8003b20:	4770      	bx	lr
        status = HAL_ERROR;
 8003b22:	2001      	movs	r0, #1
 8003b24:	4770      	bx	lr
      status = HAL_ERROR;
 8003b26:	2001      	movs	r0, #1
 8003b28:	4770      	bx	lr

08003b2a <HAL_DMA_Init>:
{
 8003b2a:	b570      	push	{r4, r5, r6, lr}
 8003b2c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b2e:	f7fd fc69 	bl	8001404 <HAL_GetTick>
  if(hdma == NULL)
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d05d      	beq.n	8003bf2 <HAL_DMA_Init+0xc8>
 8003b36:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f012 0f01 	tst.w	r2, #1
 8003b56:	d00a      	beq.n	8003b6e <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b58:	f7fd fc54 	bl	8001404 <HAL_GetTick>
 8003b5c:	1b40      	subs	r0, r0, r5
 8003b5e:	2805      	cmp	r0, #5
 8003b60:	d9f5      	bls.n	8003b4e <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b62:	2320      	movs	r3, #32
 8003b64:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003b6e:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b70:	4921      	ldr	r1, [pc, #132]	; (8003bf8 <HAL_DMA_Init+0xce>)
 8003b72:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b74:	6862      	ldr	r2, [r4, #4]
 8003b76:	68a0      	ldr	r0, [r4, #8]
 8003b78:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7c:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	6920      	ldr	r0, [r4, #16]
 8003b80:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b82:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	69a0      	ldr	r0, [r4, #24]
 8003b88:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8a:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8c:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8e:	6a20      	ldr	r0, [r4, #32]
 8003b90:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b92:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b96:	2904      	cmp	r1, #4
 8003b98:	d016      	beq.n	8003bc8 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8003b9a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003b9c:	6826      	ldr	r6, [r4, #0]
 8003b9e:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba0:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ba6:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d012      	beq.n	8003bd2 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8003bac:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ff56 	bl	8003a60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bb6:	233f      	movs	r3, #63	; 0x3f
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003bca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003bcc:	4301      	orrs	r1, r0
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	e7e3      	b.n	8003b9a <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8003bd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bd4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0e7      	beq.n	8003bac <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff ff5d 	bl	8003a9c <DMA_CheckFifoParam>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d0e2      	beq.n	8003bac <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003be6:	2340      	movs	r3, #64	; 0x40
 8003be8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003bea:	2001      	movs	r0, #1
 8003bec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003bf2:	2001      	movs	r0, #1
}
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
 8003bf6:	bf00      	nop
 8003bf8:	f010803f 	.word	0xf010803f

08003bfc <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d02e      	beq.n	8003c5e <HAL_DMA_DeInit+0x62>
{
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c04:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_DeInit+0x16>
    return HAL_BUSY;
 8003c0e:	2002      	movs	r0, #2
}
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 8003c12:	6802      	ldr	r2, [r0, #0]
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8003c1c:	6803      	ldr	r3, [r0, #0]
 8003c1e:	2500      	movs	r5, #0
 8003c20:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003c2a:	6803      	ldr	r3, [r0, #0]
 8003c2c:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003c2e:	6803      	ldr	r3, [r0, #0]
 8003c30:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8003c32:	6803      	ldr	r3, [r0, #0]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c38:	f7ff ff12 	bl	8003a60 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8003c3c:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c3e:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003c40:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003c42:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003c44:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003c46:	6525      	str	r5, [r4, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c4a:	233f      	movs	r3, #63	; 0x3f
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8003c52:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8003c56:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	4770      	bx	lr

08003c62 <HAL_DMA_Start>:
{
 8003c62:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8003c64:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003c68:	2c01      	cmp	r4, #1
 8003c6a:	d01c      	beq.n	8003ca6 <HAL_DMA_Start+0x44>
 8003c6c:	2401      	movs	r4, #1
 8003c6e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c72:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003c76:	b2e4      	uxtb	r4, r4
 8003c78:	2c01      	cmp	r4, #1
 8003c7a:	d004      	beq.n	8003c86 <HAL_DMA_Start+0x24>
    __HAL_UNLOCK(hdma);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8003c82:	2002      	movs	r0, #2
 8003c84:	bd38      	pop	{r3, r4, r5, pc}
 8003c86:	4605      	mov	r5, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	2002      	movs	r0, #2
 8003c8a:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	2400      	movs	r4, #0
 8003c90:	656c      	str	r4, [r5, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c92:	4628      	mov	r0, r5
 8003c94:	f7ff fece 	bl	8003a34 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8003c98:	682a      	ldr	r2, [r5, #0]
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8003ca6:	2002      	movs	r0, #2
}
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}

08003caa <HAL_DMA_Start_IT>:
{
 8003caa:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cac:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003cae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003cb2:	2c01      	cmp	r4, #1
 8003cb4:	d02c      	beq.n	8003d10 <HAL_DMA_Start_IT+0x66>
 8003cb6:	2401      	movs	r4, #1
 8003cb8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cbc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003cc0:	b2e4      	uxtb	r4, r4
 8003cc2:	2c01      	cmp	r4, #1
 8003cc4:	d004      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8003ccc:	2002      	movs	r0, #2
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd8:	2000      	movs	r0, #0
 8003cda:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff fea9 	bl	8003a34 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ce4:	233f      	movs	r3, #63	; 0x3f
 8003ce6:	4093      	lsls	r3, r2
 8003ce8:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f043 0316 	orr.w	r3, r3, #22
 8003cf2:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf6:	b123      	cbz	r3, 8003d02 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	f043 0308 	orr.w	r3, r3, #8
 8003d00:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8003d10:	2002      	movs	r0, #2
}
 8003d12:	bd38      	pop	{r3, r4, r5, pc}

08003d14 <HAL_DMA_Abort>:
{
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d18:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003d1a:	f7fd fb73 	bl	8001404 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d1e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d006      	beq.n	8003d36 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003d32:	2001      	movs	r0, #1
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
 8003d36:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	f023 0316 	bic.w	r3, r3, #22
 8003d40:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	6953      	ldr	r3, [r2, #20]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4a:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d4e:	b1e3      	cbz	r3, 8003d8a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	f023 0308 	bic.w	r3, r3, #8
 8003d58:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f013 0f01 	tst.w	r3, #1
 8003d6c:	d011      	beq.n	8003d92 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d6e:	f7fd fb49 	bl	8001404 <HAL_GetTick>
 8003d72:	1b40      	subs	r0, r0, r5
 8003d74:	2805      	cmp	r0, #5
 8003d76:	d9f5      	bls.n	8003d64 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d78:	2320      	movs	r3, #32
 8003d7a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d82:	2003      	movs	r0, #3
 8003d84:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1df      	bne.n	8003d50 <HAL_DMA_Abort+0x3c>
 8003d90:	e7e3      	b.n	8003d5a <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d94:	233f      	movs	r3, #63	; 0x3f
 8003d96:	4093      	lsls	r3, r2
 8003d98:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003da6:	bd70      	pop	{r4, r5, r6, pc}

08003da8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
 8003db8:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dba:	2305      	movs	r3, #5
 8003dbc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003dc0:	6802      	ldr	r2, [r0, #0]
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003dca:	2000      	movs	r0, #0
}
 8003dcc:	4770      	bx	lr

08003dce <HAL_DMA_PollForTransfer>:
{
 8003dce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4689      	mov	r9, r1
 8003dd6:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick(); 
 8003dd8:	f7fd fb14 	bl	8001404 <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ddc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d007      	beq.n	8003df6 <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
 8003df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df6:	4680      	mov	r8, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e00:	d138      	bne.n	8003e74 <HAL_DMA_PollForTransfer+0xa6>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8003e02:	f1b9 0f00 	cmp.w	r9, #0
 8003e06:	d13b      	bne.n	8003e80 <HAL_DMA_PollForTransfer+0xb2>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e0a:	2720      	movs	r7, #32
 8003e0c:	409f      	lsls	r7, r3
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	6da6      	ldr	r6, [r4, #88]	; 0x58
  tmpisr = regs->ISR;
 8003e10:	6833      	ldr	r3, [r6, #0]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8003e12:	421f      	tst	r7, r3
 8003e14:	d143      	bne.n	8003e9e <HAL_DMA_PollForTransfer+0xd0>
 8003e16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e18:	f013 0f01 	tst.w	r3, #1
 8003e1c:	d13f      	bne.n	8003e9e <HAL_DMA_PollForTransfer+0xd0>
    if(Timeout != HAL_MAX_DELAY)
 8003e1e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e22:	d007      	beq.n	8003e34 <HAL_DMA_PollForTransfer+0x66>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	d02f      	beq.n	8003e88 <HAL_DMA_PollForTransfer+0xba>
 8003e28:	f7fd faec 	bl	8001404 <HAL_GetTick>
 8003e2c:	eba0 0008 	sub.w	r0, r0, r8
 8003e30:	4285      	cmp	r5, r0
 8003e32:	d329      	bcc.n	8003e88 <HAL_DMA_PollForTransfer+0xba>
    tmpisr = regs->ISR;
 8003e34:	6833      	ldr	r3, [r6, #0]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e38:	2208      	movs	r2, #8
 8003e3a:	408a      	lsls	r2, r1
 8003e3c:	4213      	tst	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_PollForTransfer+0x7c>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e40:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e42:	f041 0101 	orr.w	r1, r1, #1
 8003e46:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e48:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	408a      	lsls	r2, r1
 8003e50:	4213      	tst	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_PollForTransfer+0x90>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e54:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e56:	f041 0102 	orr.w	r1, r1, #2
 8003e5a:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e5c:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e60:	2204      	movs	r2, #4
 8003e62:	408a      	lsls	r2, r1
 8003e64:	4213      	tst	r3, r2
 8003e66:	d0d4      	beq.n	8003e12 <HAL_DMA_PollForTransfer+0x44>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e68:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e6a:	f041 0104 	orr.w	r1, r1, #4
 8003e6e:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e70:	60b2      	str	r2, [r6, #8]
 8003e72:	e7ce      	b.n	8003e12 <HAL_DMA_PollForTransfer+0x44>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e78:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e82:	2710      	movs	r7, #16
 8003e84:	409f      	lsls	r7, r3
 8003e86:	e7c2      	b.n	8003e0e <HAL_DMA_PollForTransfer+0x40>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8003e98:	2003      	movs	r0, #3
 8003e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ea0:	b11b      	cbz	r3, 8003eaa <HAL_DMA_PollForTransfer+0xdc>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ea2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ea4:	f013 0f01 	tst.w	r3, #1
 8003ea8:	d109      	bne.n	8003ebe <HAL_DMA_PollForTransfer+0xf0>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8003eaa:	f1b9 0f00 	cmp.w	r9, #0
 8003eae:	d015      	beq.n	8003edc <HAL_DMA_PollForTransfer+0x10e>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8003eb0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	60b3      	str	r3, [r6, #8]
  return status;
 8003eb8:	2000      	movs	r0, #0
}
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      HAL_DMA_Abort(hdma);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff ff28 	bl	8003d14 <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8003ec4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ec6:	2330      	movs	r3, #48	; 0x30
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	60b3      	str	r3, [r6, #8]
      __HAL_UNLOCK(hdma);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_ERROR;
 8003ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8003edc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ede:	2330      	movs	r3, #48	; 0x30
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ef4 <HAL_DMA_IRQHandler>:
{
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003efe:	4b72      	ldr	r3, [pc, #456]	; (80040c8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f00:	681d      	ldr	r5, [r3, #0]
 8003f02:	4b72      	ldr	r3, [pc, #456]	; (80040cc <HAL_DMA_IRQHandler+0x1d8>)
 8003f04:	fba3 3505 	umull	r3, r5, r3, r5
 8003f08:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003f0c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003f10:	2308      	movs	r3, #8
 8003f12:	4093      	lsls	r3, r2
 8003f14:	421e      	tst	r6, r3
 8003f16:	d010      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f18:	6803      	ldr	r3, [r0, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f012 0f04 	tst.w	r2, #4
 8003f20:	d00b      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f022 0204 	bic.w	r2, r2, #4
 8003f28:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f2a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	4093      	lsls	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f32:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	421e      	tst	r6, r3
 8003f42:	d009      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f44:	6822      	ldr	r2, [r4, #0]
 8003f46:	6952      	ldr	r2, [r2, #20]
 8003f48:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f4c:	d004      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f4e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	421e      	tst	r6, r3
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	f012 0f02 	tst.w	r2, #2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f6c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f78:	2310      	movs	r3, #16
 8003f7a:	4093      	lsls	r3, r2
 8003f7c:	421e      	tst	r6, r3
 8003f7e:	d024      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	f012 0f08 	tst.w	r2, #8
 8003f88:	d01f      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f8a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003f94:	d00d      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003f9c:	d104      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa0:	b19b      	cbz	r3, 8003fca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4798      	blx	r3
 8003fa6:	e010      	b.n	8003fca <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003faa:	b173      	cbz	r3, 8003fca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003fac:	4620      	mov	r0, r4
 8003fae:	4798      	blx	r3
 8003fb0:	e00b      	b.n	8003fca <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003fb8:	d103      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	f022 0208 	bic.w	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc4:	b10b      	cbz	r3, 8003fca <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fcc:	2320      	movs	r3, #32
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	421e      	tst	r6, r3
 8003fd2:	d055      	beq.n	8004080 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	f012 0f10 	tst.w	r2, #16
 8003fdc:	d050      	beq.n	8004080 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fde:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fe0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003ff2:	d033      	beq.n	800405c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ffa:	d12a      	bne.n	8004052 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03e      	beq.n	8004080 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8004002:	4620      	mov	r0, r4
 8004004:	4798      	blx	r3
 8004006:	e03b      	b.n	8004080 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	f023 0316 	bic.w	r3, r3, #22
 8004010:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	6953      	ldr	r3, [r2, #20]
 8004016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800401e:	b1a3      	cbz	r3, 800404a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	f023 0308 	bic.w	r3, r3, #8
 8004028:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800402c:	233f      	movs	r3, #63	; 0x3f
 800402e:	4093      	lsls	r3, r2
 8004030:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8004032:	2300      	movs	r3, #0
 8004034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004038:	2301      	movs	r3, #1
 800403a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800403e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004040:	2b00      	cmp	r3, #0
 8004042:	d03f      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004044:	4620      	mov	r0, r4
 8004046:	4798      	blx	r3
 8004048:	e03c      	b.n	80040c4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800404a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e7      	bne.n	8004020 <HAL_DMA_IRQHandler+0x12c>
 8004050:	e7eb      	b.n	800402a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8004052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004054:	b1a3      	cbz	r3, 8004080 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004056:	4620      	mov	r0, r4
 8004058:	4798      	blx	r3
 800405a:	e011      	b.n	8004080 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004062:	d109      	bne.n	8004078 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f022 0210 	bic.w	r2, r2, #16
 800406a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800406c:	2300      	movs	r3, #0
 800406e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004072:	2301      	movs	r3, #1
 8004074:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800407a:	b10b      	cbz	r3, 8004080 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800407c:	4620      	mov	r0, r4
 800407e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004080:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004082:	b1fb      	cbz	r3, 80040c4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004084:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004086:	f013 0f01 	tst.w	r3, #1
 800408a:	d017      	beq.n	80040bc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800408c:	2305      	movs	r3, #5
 800408e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	429d      	cmp	r5, r3
 80040a4:	d304      	bcc.n	80040b0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f013 0f01 	tst.w	r3, #1
 80040ae:	d1f5      	bne.n	800409c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80040bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80040be:	b10b      	cbz	r3, 80040c4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80040c0:	4620      	mov	r0, r4
 80040c2:	4798      	blx	r3
}
 80040c4:	b003      	add	sp, #12
 80040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c8:	20000008 	.word	0x20000008
 80040cc:	1b4e81b5 	.word	0x1b4e81b5

080040d0 <HAL_DMA_RegisterCallback>:
{
 80040d0:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80040d2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80040d6:	2801      	cmp	r0, #1
 80040d8:	d027      	beq.n	800412a <HAL_DMA_RegisterCallback+0x5a>
 80040da:	2001      	movs	r0, #1
 80040dc:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80040e0:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 80040e4:	b2c0      	uxtb	r0, r0
 80040e6:	2801      	cmp	r0, #1
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_RegisterCallback+0x24>
    status =  HAL_ERROR;
 80040ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 80040f2:	4770      	bx	lr
    switch (CallbackID)
 80040f4:	2905      	cmp	r1, #5
 80040f6:	d816      	bhi.n	8004126 <HAL_DMA_RegisterCallback+0x56>
 80040f8:	e8df f001 	tbb	[pc, r1]
 80040fc:	0c090603 	.word	0x0c090603
 8004100:	120f      	.short	0x120f
      hdma->XferCpltCallback = pCallback;
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2000      	movs	r0, #0
      break;
 8004106:	e7f1      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = pCallback;
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2000      	movs	r0, #0
      break;
 800410c:	e7ee      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferM1CpltCallback = pCallback;
 800410e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	2000      	movs	r0, #0
      break;
 8004112:	e7eb      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferM1HalfCpltCallback = pCallback;
 8004114:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2000      	movs	r0, #0
      break;
 8004118:	e7e8      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferErrorCallback = pCallback;
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2000      	movs	r0, #0
      break;
 800411e:	e7e5      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferAbortCallback = pCallback;
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2000      	movs	r0, #0
      break;
 8004124:	e7e2      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2000      	movs	r0, #0
 8004128:	e7e0      	b.n	80040ec <HAL_DMA_RegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 800412a:	2002      	movs	r0, #2
}
 800412c:	4770      	bx	lr

0800412e <HAL_DMA_UnRegisterCallback>:
{
 800412e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8004130:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8004134:	2a01      	cmp	r2, #1
 8004136:	d030      	beq.n	800419a <HAL_DMA_UnRegisterCallback+0x6c>
 8004138:	2201      	movs	r2, #1
 800413a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800413e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	2a01      	cmp	r2, #1
 8004146:	d004      	beq.n	8004152 <HAL_DMA_UnRegisterCallback+0x24>
    status = HAL_ERROR;
 8004148:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 8004150:	4770      	bx	lr
    switch (CallbackID)
 8004152:	2906      	cmp	r1, #6
 8004154:	d81f      	bhi.n	8004196 <HAL_DMA_UnRegisterCallback+0x68>
 8004156:	e8df f001 	tbb	[pc, r1]
 800415a:	0704      	.short	0x0704
 800415c:	13100d0a 	.word	0x13100d0a
 8004160:	16          	.byte	0x16
 8004161:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 8004162:	2000      	movs	r0, #0
 8004164:	63d8      	str	r0, [r3, #60]	; 0x3c
      break;
 8004166:	e7f0      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = NULL;
 8004168:	2000      	movs	r0, #0
 800416a:	6418      	str	r0, [r3, #64]	; 0x40
      break;
 800416c:	e7ed      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1CpltCallback = NULL;
 800416e:	2000      	movs	r0, #0
 8004170:	6458      	str	r0, [r3, #68]	; 0x44
      break;
 8004172:	e7ea      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1HalfCpltCallback = NULL;
 8004174:	2000      	movs	r0, #0
 8004176:	6498      	str	r0, [r3, #72]	; 0x48
      break;
 8004178:	e7e7      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferErrorCallback = NULL;
 800417a:	2000      	movs	r0, #0
 800417c:	64d8      	str	r0, [r3, #76]	; 0x4c
      break;
 800417e:	e7e4      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferAbortCallback = NULL;
 8004180:	2000      	movs	r0, #0
 8004182:	6518      	str	r0, [r3, #80]	; 0x50
      break; 
 8004184:	e7e1      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferCpltCallback = NULL;
 8004186:	2000      	movs	r0, #0
 8004188:	63d8      	str	r0, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800418a:	6418      	str	r0, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 800418c:	6458      	str	r0, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800418e:	6498      	str	r0, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8004190:	64d8      	str	r0, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8004192:	6518      	str	r0, [r3, #80]	; 0x50
      break; 
 8004194:	e7d9      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
      status = HAL_ERROR;
 8004196:	2001      	movs	r0, #1
 8004198:	e7d7      	b.n	800414a <HAL_DMA_UnRegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 800419a:	2002      	movs	r0, #2
}
 800419c:	4770      	bx	lr

0800419e <HAL_DMA_GetState>:
  return hdma->State;
 800419e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80041a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80041a6:	4770      	bx	lr

080041a8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80041a8:	b410      	push	{r4}
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041aa:	6804      	ldr	r4, [r0, #0]
 80041ac:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ae:	6883      	ldr	r3, [r0, #8]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d006      	beq.n	80041c2 <DMA_MultiBufferSetConfig+0x1a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80041b4:	6803      	ldr	r3, [r0, #0]
 80041b6:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80041b8:	6803      	ldr	r3, [r0, #0]
 80041ba:	60da      	str	r2, [r3, #12]
  }
}
 80041bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041c0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80041c2:	6803      	ldr	r3, [r0, #0]
 80041c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80041c6:	6803      	ldr	r3, [r0, #0]
 80041c8:	60d9      	str	r1, [r3, #12]
 80041ca:	e7f7      	b.n	80041bc <DMA_MultiBufferSetConfig+0x14>

080041cc <HAL_DMAEx_MultiBufferStart>:
{
 80041cc:	b538      	push	{r3, r4, r5, lr}
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041ce:	6884      	ldr	r4, [r0, #8]
 80041d0:	2c80      	cmp	r4, #128	; 0x80
 80041d2:	d00d      	beq.n	80041f0 <HAL_DMAEx_MultiBufferStart+0x24>
    __HAL_LOCK(hdma);
 80041d4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80041d8:	2c01      	cmp	r4, #1
 80041da:	d024      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart+0x5a>
 80041dc:	2401      	movs	r4, #1
 80041de:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    if(HAL_DMA_STATE_READY == hdma->State)
 80041e2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80041e6:	b2e4      	uxtb	r4, r4
 80041e8:	2c01      	cmp	r4, #1
 80041ea:	d006      	beq.n	80041fa <HAL_DMAEx_MultiBufferStart+0x2e>
      status = HAL_BUSY;
 80041ec:	2002      	movs	r0, #2
}
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80041f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f4:	6543      	str	r3, [r0, #84]	; 0x54
    status = HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
 80041f8:	bd38      	pop	{r3, r4, r5, pc}
 80041fa:	4604      	mov	r4, r0
      hdma->State = HAL_DMA_STATE_BUSY; 
 80041fc:	2002      	movs	r0, #2
 80041fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	6828      	ldr	r0, [r5, #0]
 8004206:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800420a:	6028      	str	r0, [r5, #0]
      hdma->Instance->M1AR = SecondMemAddress;
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	6103      	str	r3, [r0, #16]
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004210:	9b04      	ldr	r3, [sp, #16]
 8004212:	4620      	mov	r0, r4
 8004214:	f7ff ffc8 	bl	80041a8 <DMA_MultiBufferSetConfig>
      __HAL_DMA_ENABLE(hdma);
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2000      	movs	r0, #0
 8004224:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hdma);
 8004226:	2002      	movs	r0, #2
 8004228:	bd38      	pop	{r3, r4, r5, pc}

0800422a <HAL_DMAEx_MultiBufferStart_IT>:
{
 800422a:	b538      	push	{r3, r4, r5, lr}
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800422c:	6884      	ldr	r4, [r0, #8]
 800422e:	2c80      	cmp	r4, #128	; 0x80
 8004230:	d017      	beq.n	8004262 <HAL_DMAEx_MultiBufferStart_IT+0x38>
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8004232:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004234:	b1d4      	cbz	r4, 800426c <HAL_DMAEx_MultiBufferStart_IT+0x42>
 8004236:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004238:	b1c4      	cbz	r4, 800426c <HAL_DMAEx_MultiBufferStart_IT+0x42>
 800423a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800423c:	b1b4      	cbz	r4, 800426c <HAL_DMAEx_MultiBufferStart_IT+0x42>
  __HAL_LOCK(hdma);
 800423e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004242:	2c01      	cmp	r4, #1
 8004244:	f000 875e 	beq.w	8005104 <HAL_DMAEx_MultiBufferStart_IT+0xeda>
 8004248:	2401      	movs	r4, #1
 800424a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800424e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004252:	b2e4      	uxtb	r4, r4
 8004254:	2c01      	cmp	r4, #1
 8004256:	d00d      	beq.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4a>
    __HAL_UNLOCK(hdma);	  
 8004258:	2300      	movs	r3, #0
 800425a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800425e:	2002      	movs	r0, #2
 8004260:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004266:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004268:	2001      	movs	r0, #1
 800426a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004270:	2001      	movs	r0, #1
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004276:	2002      	movs	r0, #2
 8004278:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427c:	2000      	movs	r0, #0
 800427e:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004280:	6825      	ldr	r5, [r4, #0]
 8004282:	6828      	ldr	r0, [r5, #0]
 8004284:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8004288:	6028      	str	r0, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	6103      	str	r3, [r0, #16]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff ff89 	bl	80041a8 <DMA_MultiBufferSetConfig>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	4ac5      	ldr	r2, [pc, #788]	; (80045b0 <HAL_DMAEx_MultiBufferStart_IT+0x386>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f240 8098 	bls.w	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x1a6>
 80042a0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d031      	beq.n	800430c <HAL_DMAEx_MultiBufferStart_IT+0xe2>
 80042a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d074      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x170>
 80042b0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d072      	beq.n	800439e <HAL_DMAEx_MultiBufferStart_IT+0x174>
 80042b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042bc:	4293      	cmp	r3, r2
 80042be:	d070      	beq.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 80042c0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d06e      	beq.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 80042c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d06d      	beq.n	80043ac <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80042d0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d06c      	beq.n	80043b2 <HAL_DMAEx_MultiBufferStart_IT+0x188>
 80042d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042dc:	4293      	cmp	r3, r2
 80042de:	d06b      	beq.n	80043b8 <HAL_DMAEx_MultiBufferStart_IT+0x18e>
 80042e0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d06a      	beq.n	80043be <HAL_DMAEx_MultiBufferStart_IT+0x194>
 80042e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d069      	beq.n	80043c4 <HAL_DMAEx_MultiBufferStart_IT+0x19a>
 80042f0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d068      	beq.n	80043ca <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 80042f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d002      	beq.n	8004306 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 8004300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004304:	e003      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 8004306:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800430a:	e000      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 800430c:	2320      	movs	r3, #32
 800430e:	4aa9      	ldr	r2, [pc, #676]	; (80045b4 <HAL_DMAEx_MultiBufferStart_IT+0x38a>)
 8004310:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	4aa6      	ldr	r2, [pc, #664]	; (80045b0 <HAL_DMAEx_MultiBufferStart_IT+0x386>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f240 81cd 	bls.w	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 800431c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004320:	4293      	cmp	r3, r2
 8004322:	f000 8166 	beq.w	80045f2 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800432a:	4293      	cmp	r3, r2
 800432c:	f000 81a8 	beq.w	8004680 <HAL_DMAEx_MultiBufferStart_IT+0x456>
 8004330:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004334:	4293      	cmp	r3, r2
 8004336:	f000 81a5 	beq.w	8004684 <HAL_DMAEx_MultiBufferStart_IT+0x45a>
 800433a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800433e:	4293      	cmp	r3, r2
 8004340:	f000 81a2 	beq.w	8004688 <HAL_DMAEx_MultiBufferStart_IT+0x45e>
 8004344:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004348:	4293      	cmp	r3, r2
 800434a:	f000 819f 	beq.w	800468c <HAL_DMAEx_MultiBufferStart_IT+0x462>
 800434e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004352:	4293      	cmp	r3, r2
 8004354:	f000 819d 	beq.w	8004692 <HAL_DMAEx_MultiBufferStart_IT+0x468>
 8004358:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800435c:	4293      	cmp	r3, r2
 800435e:	f000 819b 	beq.w	8004698 <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 8004362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 8199 	beq.w	800469e <HAL_DMAEx_MultiBufferStart_IT+0x474>
 800436c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004370:	4293      	cmp	r3, r2
 8004372:	f000 8197 	beq.w	80046a4 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8004376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800437a:	4293      	cmp	r3, r2
 800437c:	f000 8195 	beq.w	80046aa <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8004380:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004384:	4293      	cmp	r3, r2
 8004386:	f000 8193 	beq.w	80046b0 <HAL_DMAEx_MultiBufferStart_IT+0x486>
 800438a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800438e:	4293      	cmp	r3, r2
 8004390:	f000 812c 	beq.w	80045ec <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
 8004394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004398:	e12c      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800439a:	2320      	movs	r3, #32
 800439c:	e7b7      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 800439e:	2320      	movs	r3, #32
 80043a0:	e7b5      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043a2:	2320      	movs	r3, #32
 80043a4:	e7b3      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043aa:	e7b0      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b0:	e7ad      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b6:	e7aa      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043bc:	e7a7      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043c2:	e7a4      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043c8:	e7a1      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043ce:	e79e      	b.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0xe4>
 80043d0:	4a79      	ldr	r2, [pc, #484]	; (80045b8 <HAL_DMAEx_MultiBufferStart_IT+0x38e>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d953      	bls.n	800447e <HAL_DMAEx_MultiBufferStart_IT+0x254>
 80043d6:	3aa8      	subs	r2, #168	; 0xa8
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02e      	beq.n	800443a <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80043dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02e      	beq.n	8004442 <HAL_DMAEx_MultiBufferStart_IT+0x218>
 80043e4:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d02c      	beq.n	8004446 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80043ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d02a      	beq.n	800444a <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80043f4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d028      	beq.n	800444e <HAL_DMAEx_MultiBufferStart_IT+0x224>
 80043fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004400:	4293      	cmp	r3, r2
 8004402:	d027      	beq.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8004404:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004408:	4293      	cmp	r3, r2
 800440a:	d026      	beq.n	800445a <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800440c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004410:	4293      	cmp	r3, r2
 8004412:	d025      	beq.n	8004460 <HAL_DMAEx_MultiBufferStart_IT+0x236>
 8004414:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004418:	4293      	cmp	r3, r2
 800441a:	d024      	beq.n	8004466 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 800441c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004420:	4293      	cmp	r3, r2
 8004422:	d023      	beq.n	800446c <HAL_DMAEx_MultiBufferStart_IT+0x242>
 8004424:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <HAL_DMAEx_MultiBufferStart_IT+0x248>
 800442c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004430:	4293      	cmp	r3, r2
 8004432:	d121      	bne.n	8004478 <HAL_DMAEx_MultiBufferStart_IT+0x24e>
 8004434:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004438:	e000      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800443a:	2320      	movs	r3, #32
 800443c:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <HAL_DMAEx_MultiBufferStart_IT+0x38a>)
 800443e:	6093      	str	r3, [r2, #8]
 8004440:	e767      	b.n	8004312 <HAL_DMAEx_MultiBufferStart_IT+0xe8>
 8004442:	2320      	movs	r3, #32
 8004444:	e7fa      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004446:	2320      	movs	r3, #32
 8004448:	e7f8      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800444a:	2320      	movs	r3, #32
 800444c:	e7f6      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800444e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004452:	e7f3      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004458:	e7f0      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800445a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800445e:	e7ed      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004464:	e7ea      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800446a:	e7e7      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800446c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004470:	e7e4      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004472:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004476:	e7e1      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8004478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800447c:	e7de      	b.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800447e:	4a4f      	ldr	r2, [pc, #316]	; (80045bc <HAL_DMAEx_MultiBufferStart_IT+0x392>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d953      	bls.n	800452c <HAL_DMAEx_MultiBufferStart_IT+0x302>
 8004484:	3a48      	subs	r2, #72	; 0x48
 8004486:	4293      	cmp	r3, r2
 8004488:	d031      	beq.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0x2c4>
 800448a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004492:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004496:	4293      	cmp	r3, r2
 8004498:	d02f      	beq.n	80044fa <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
 800449a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02d      	beq.n	80044fe <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 80044a2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02b      	beq.n	8004502 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80044aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02a      	beq.n	8004508 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80044b2:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d029      	beq.n	800450e <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80044ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044be:	4293      	cmp	r3, r2
 80044c0:	d028      	beq.n	8004514 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80044c2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d027      	beq.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80044ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d026      	beq.n	8004520 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80044d2:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d025      	beq.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80044da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044de:	4293      	cmp	r3, r2
 80044e0:	d002      	beq.n	80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x2be>
 80044e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044e6:	e003      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80044e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044ec:	e000      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80044ee:	2320      	movs	r3, #32
 80044f0:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <HAL_DMAEx_MultiBufferStart_IT+0x396>)
 80044f2:	60d3      	str	r3, [r2, #12]
 80044f4:	e70d      	b.n	8004312 <HAL_DMAEx_MultiBufferStart_IT+0xe8>
 80044f6:	2320      	movs	r3, #32
 80044f8:	e7fa      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80044fa:	2320      	movs	r3, #32
 80044fc:	e7f8      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80044fe:	2320      	movs	r3, #32
 8004500:	e7f6      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004506:	e7f3      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800450c:	e7f0      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 800450e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004512:	e7ed      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004518:	e7ea      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 800451a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800451e:	e7e7      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004524:	e7e4      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800452a:	e7e1      	b.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <HAL_DMAEx_MultiBufferStart_IT+0x39a>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_DMAEx_MultiBufferStart_IT+0x36c>
 8004532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMAEx_MultiBufferStart_IT+0x374>
 800453a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800453e:	4293      	cmp	r3, r2
 8004540:	d02f      	beq.n	80045a2 <HAL_DMAEx_MultiBufferStart_IT+0x378>
 8004542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004546:	4293      	cmp	r3, r2
 8004548:	d02d      	beq.n	80045a6 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 800454a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800454e:	4293      	cmp	r3, r2
 8004550:	d02b      	beq.n	80045aa <HAL_DMAEx_MultiBufferStart_IT+0x380>
 8004552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004556:	4293      	cmp	r3, r2
 8004558:	d036      	beq.n	80045c8 <HAL_DMAEx_MultiBufferStart_IT+0x39e>
 800455a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800455e:	4293      	cmp	r3, r2
 8004560:	d035      	beq.n	80045ce <HAL_DMAEx_MultiBufferStart_IT+0x3a4>
 8004562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004566:	4293      	cmp	r3, r2
 8004568:	d034      	beq.n	80045d4 <HAL_DMAEx_MultiBufferStart_IT+0x3aa>
 800456a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800456e:	4293      	cmp	r3, r2
 8004570:	d033      	beq.n	80045da <HAL_DMAEx_MultiBufferStart_IT+0x3b0>
 8004572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004576:	4293      	cmp	r3, r2
 8004578:	d032      	beq.n	80045e0 <HAL_DMAEx_MultiBufferStart_IT+0x3b6>
 800457a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800457e:	4293      	cmp	r3, r2
 8004580:	d031      	beq.n	80045e6 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8004582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004586:	4293      	cmp	r3, r2
 8004588:	d002      	beq.n	8004590 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 800458a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800458e:	e003      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 8004590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004594:	e000      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 8004596:	2320      	movs	r3, #32
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_DMAEx_MultiBufferStart_IT+0x396>)
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	e6b9      	b.n	8004312 <HAL_DMAEx_MultiBufferStart_IT+0xe8>
 800459e:	2320      	movs	r3, #32
 80045a0:	e7fa      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045a2:	2320      	movs	r3, #32
 80045a4:	e7f8      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045a6:	2320      	movs	r3, #32
 80045a8:	e7f6      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045ae:	e7f3      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045b0:	40026458 	.word	0x40026458
 80045b4:	40026400 	.word	0x40026400
 80045b8:	400260b8 	.word	0x400260b8
 80045bc:	40026058 	.word	0x40026058
 80045c0:	40026000 	.word	0x40026000
 80045c4:	40026010 	.word	0x40026010
 80045c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045cc:	e7e4      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045d2:	e7e1      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045d8:	e7de      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045de:	e7db      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045e4:	e7d8      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 80045e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045ea:	e7d5      	b.n	8004598 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045f0:	e000      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80045f2:	2310      	movs	r3, #16
 80045f4:	4ab2      	ldr	r2, [pc, #712]	; (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x696>)
 80045f6:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	4ab2      	ldr	r2, [pc, #712]	; (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x69a>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	f240 81cd 	bls.w	800499c <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8004602:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004606:	4293      	cmp	r3, r2
 8004608:	f000 8166 	beq.w	80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800460c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004610:	4293      	cmp	r3, r2
 8004612:	f000 81a8 	beq.w	8004966 <HAL_DMAEx_MultiBufferStart_IT+0x73c>
 8004616:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800461a:	4293      	cmp	r3, r2
 800461c:	f000 81a5 	beq.w	800496a <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004624:	4293      	cmp	r3, r2
 8004626:	f000 81a2 	beq.w	800496e <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800462a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800462e:	4293      	cmp	r3, r2
 8004630:	f000 819f 	beq.w	8004972 <HAL_DMAEx_MultiBufferStart_IT+0x748>
 8004634:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004638:	4293      	cmp	r3, r2
 800463a:	f000 819d 	beq.w	8004978 <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 800463e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004642:	4293      	cmp	r3, r2
 8004644:	f000 819b 	beq.w	800497e <HAL_DMAEx_MultiBufferStart_IT+0x754>
 8004648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800464c:	4293      	cmp	r3, r2
 800464e:	f000 8199 	beq.w	8004984 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004652:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004656:	4293      	cmp	r3, r2
 8004658:	f000 8197 	beq.w	800498a <HAL_DMAEx_MultiBufferStart_IT+0x760>
 800465c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004660:	4293      	cmp	r3, r2
 8004662:	f000 8195 	beq.w	8004990 <HAL_DMAEx_MultiBufferStart_IT+0x766>
 8004666:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800466a:	4293      	cmp	r3, r2
 800466c:	f000 8193 	beq.w	8004996 <HAL_DMAEx_MultiBufferStart_IT+0x76c>
 8004670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004674:	4293      	cmp	r3, r2
 8004676:	f000 8120 	beq.w	80048ba <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800467a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800467e:	e12c      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004680:	2310      	movs	r3, #16
 8004682:	e7b7      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004684:	2310      	movs	r3, #16
 8004686:	e7b5      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004688:	2310      	movs	r3, #16
 800468a:	e7b3      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 800468c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004690:	e7b0      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	e7ad      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469c:	e7aa      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	e7a7      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80046a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046a8:	e7a4      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80046aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046ae:	e7a1      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80046b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046b4:	e79e      	b.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80046b6:	4a84      	ldr	r2, [pc, #528]	; (80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x69e>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d953      	bls.n	8004764 <HAL_DMAEx_MultiBufferStart_IT+0x53a>
 80046bc:	3aa8      	subs	r2, #168	; 0xa8
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02e      	beq.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x4f6>
 80046c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02e      	beq.n	8004728 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80046ca:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x502>
 80046d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02a      	beq.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x506>
 80046da:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80046de:	4293      	cmp	r3, r2
 80046e0:	d028      	beq.n	8004734 <HAL_DMAEx_MultiBufferStart_IT+0x50a>
 80046e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMAEx_MultiBufferStart_IT+0x510>
 80046ea:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d026      	beq.n	8004740 <HAL_DMAEx_MultiBufferStart_IT+0x516>
 80046f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d025      	beq.n	8004746 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 80046fa:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80046fe:	4293      	cmp	r3, r2
 8004700:	d024      	beq.n	800474c <HAL_DMAEx_MultiBufferStart_IT+0x522>
 8004702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004706:	4293      	cmp	r3, r2
 8004708:	d023      	beq.n	8004752 <HAL_DMAEx_MultiBufferStart_IT+0x528>
 800470a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMAEx_MultiBufferStart_IT+0x52e>
 8004712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004716:	4293      	cmp	r3, r2
 8004718:	d121      	bne.n	800475e <HAL_DMAEx_MultiBufferStart_IT+0x534>
 800471a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800471e:	e000      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004720:	2310      	movs	r3, #16
 8004722:	4a67      	ldr	r2, [pc, #412]	; (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x696>)
 8004724:	6093      	str	r3, [r2, #8]
 8004726:	e767      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x3ce>
 8004728:	2310      	movs	r3, #16
 800472a:	e7fa      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 800472c:	2310      	movs	r3, #16
 800472e:	e7f8      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004730:	2310      	movs	r3, #16
 8004732:	e7f6      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004738:	e7f3      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 800473a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473e:	e7f0      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004744:	e7ed      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	e7ea      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 800474c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004750:	e7e7      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004752:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004756:	e7e4      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004758:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800475c:	e7e1      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 800475e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004762:	e7de      	b.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4f8>
 8004764:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_DMAEx_MultiBufferStart_IT+0x6a2>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d953      	bls.n	8004812 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>
 800476a:	3a48      	subs	r2, #72	; 0x48
 800476c:	4293      	cmp	r3, r2
 800476e:	d031      	beq.n	80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8004770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004774:	4293      	cmp	r3, r2
 8004776:	d031      	beq.n	80047dc <HAL_DMAEx_MultiBufferStart_IT+0x5b2>
 8004778:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800477c:	4293      	cmp	r3, r2
 800477e:	d02f      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b6>
 8004780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004784:	4293      	cmp	r3, r2
 8004786:	d02d      	beq.n	80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 8004788:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800478c:	4293      	cmp	r3, r2
 800478e:	d02b      	beq.n	80047e8 <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8004790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004794:	4293      	cmp	r3, r2
 8004796:	d02a      	beq.n	80047ee <HAL_DMAEx_MultiBufferStart_IT+0x5c4>
 8004798:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800479c:	4293      	cmp	r3, r2
 800479e:	d029      	beq.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x5ca>
 80047a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d028      	beq.n	80047fa <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 80047a8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x5d6>
 80047b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d026      	beq.n	8004806 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>
 80047b8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d025      	beq.n	800480c <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80047c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d002      	beq.n	80047ce <HAL_DMAEx_MultiBufferStart_IT+0x5a4>
 80047c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047cc:	e003      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047d2:	e000      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047d4:	2310      	movs	r3, #16
 80047d6:	4a3e      	ldr	r2, [pc, #248]	; (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>)
 80047d8:	60d3      	str	r3, [r2, #12]
 80047da:	e70d      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x3ce>
 80047dc:	2310      	movs	r3, #16
 80047de:	e7fa      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047e0:	2310      	movs	r3, #16
 80047e2:	e7f8      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047e4:	2310      	movs	r3, #16
 80047e6:	e7f6      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ec:	e7f3      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f2:	e7f0      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f8:	e7ed      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80047fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fe:	e7ea      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004800:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004804:	e7e7      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800480a:	e7e4      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800480c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004810:	e7e1      	b.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004812:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x6aa>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d031      	beq.n	800487c <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800481c:	4293      	cmp	r3, r2
 800481e:	d031      	beq.n	8004884 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8004820:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004824:	4293      	cmp	r3, r2
 8004826:	d02f      	beq.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8004828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800482c:	4293      	cmp	r3, r2
 800482e:	d02d      	beq.n	800488c <HAL_DMAEx_MultiBufferStart_IT+0x662>
 8004830:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004834:	4293      	cmp	r3, r2
 8004836:	d02b      	beq.n	8004890 <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8004838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800483c:	4293      	cmp	r3, r2
 800483e:	d02a      	beq.n	8004896 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8004840:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004844:	4293      	cmp	r3, r2
 8004846:	d029      	beq.n	800489c <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800484c:	4293      	cmp	r3, r2
 800484e:	d028      	beq.n	80048a2 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8004850:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004854:	4293      	cmp	r3, r2
 8004856:	d027      	beq.n	80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800485c:	4293      	cmp	r3, r2
 800485e:	d026      	beq.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004860:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004864:	4293      	cmp	r3, r2
 8004866:	d025      	beq.n	80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8004868:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800486c:	4293      	cmp	r3, r2
 800486e:	d002      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 8004870:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004874:	e003      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 8004876:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800487a:	e000      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 800487c:	2310      	movs	r3, #16
 800487e:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>)
 8004880:	6093      	str	r3, [r2, #8]
 8004882:	e6b9      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x3ce>
 8004884:	2310      	movs	r3, #16
 8004886:	e7fa      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 8004888:	2310      	movs	r3, #16
 800488a:	e7f8      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 800488c:	2310      	movs	r3, #16
 800488e:	e7f6      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 8004890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004894:	e7f3      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 8004896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800489a:	e7f0      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 800489c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a0:	e7ed      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 80048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a6:	e7ea      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 80048a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048ac:	e7e7      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 80048ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048b2:	e7e4      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
 80048b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048b8:	e7e1      	b.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x654>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80048ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048be:	e00c      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80048c0:	40026400 	.word	0x40026400
 80048c4:	40026458 	.word	0x40026458
 80048c8:	400260b8 	.word	0x400260b8
 80048cc:	40026058 	.word	0x40026058
 80048d0:	40026000 	.word	0x40026000
 80048d4:	40026010 	.word	0x40026010
 80048d8:	2308      	movs	r3, #8
 80048da:	4ab3      	ldr	r2, [pc, #716]	; (8004ba8 <HAL_DMAEx_MultiBufferStart_IT+0x97e>)
 80048dc:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	4ab2      	ldr	r2, [pc, #712]	; (8004bac <HAL_DMAEx_MultiBufferStart_IT+0x982>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f240 81ce 	bls.w	8004c84 <HAL_DMAEx_MultiBufferStart_IT+0xa5a>
 80048e8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f000 8167 	beq.w	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x996>
 80048f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f000 81a9 	beq.w	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80048fc:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004900:	4293      	cmp	r3, r2
 8004902:	f000 81a6 	beq.w	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490a:	4293      	cmp	r3, r2
 800490c:	f000 81a3 	beq.w	8004c56 <HAL_DMAEx_MultiBufferStart_IT+0xa2c>
 8004910:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004914:	4293      	cmp	r3, r2
 8004916:	f000 81a0 	beq.w	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800491a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800491e:	4293      	cmp	r3, r2
 8004920:	f000 819e 	beq.w	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0xa36>
 8004924:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004928:	4293      	cmp	r3, r2
 800492a:	f000 819c 	beq.w	8004c66 <HAL_DMAEx_MultiBufferStart_IT+0xa3c>
 800492e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004932:	4293      	cmp	r3, r2
 8004934:	f000 819a 	beq.w	8004c6c <HAL_DMAEx_MultiBufferStart_IT+0xa42>
 8004938:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800493c:	4293      	cmp	r3, r2
 800493e:	f000 8198 	beq.w	8004c72 <HAL_DMAEx_MultiBufferStart_IT+0xa48>
 8004942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004946:	4293      	cmp	r3, r2
 8004948:	f000 8196 	beq.w	8004c78 <HAL_DMAEx_MultiBufferStart_IT+0xa4e>
 800494c:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004950:	4293      	cmp	r3, r2
 8004952:	f000 8194 	beq.w	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8004956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495a:	4293      	cmp	r3, r2
 800495c:	f000 8120 	beq.w	8004ba0 <HAL_DMAEx_MultiBufferStart_IT+0x976>
 8004960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004964:	e12d      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004966:	2308      	movs	r3, #8
 8004968:	e7b7      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800496a:	2308      	movs	r3, #8
 800496c:	e7b5      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800496e:	2308      	movs	r3, #8
 8004970:	e7b3      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004976:	e7b0      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497c:	e7ad      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800497e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004982:	e7aa      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004988:	e7a7      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800498a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800498e:	e7a4      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004994:	e7a1      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004996:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800499a:	e79e      	b.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800499c:	4a84      	ldr	r2, [pc, #528]	; (8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x986>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d953      	bls.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80049a2:	3aa8      	subs	r2, #168	; 0xa8
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02e      	beq.n	8004a06 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>
 80049a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02e      	beq.n	8004a0e <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 80049b0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d02c      	beq.n	8004a12 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 80049b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049bc:	4293      	cmp	r3, r2
 80049be:	d02a      	beq.n	8004a16 <HAL_DMAEx_MultiBufferStart_IT+0x7ec>
 80049c0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d028      	beq.n	8004a1a <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 80049c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d027      	beq.n	8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 80049d0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d026      	beq.n	8004a26 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 80049d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049dc:	4293      	cmp	r3, r2
 80049de:	d025      	beq.n	8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x802>
 80049e0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d024      	beq.n	8004a32 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 80049e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d023      	beq.n	8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80049f0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80049f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d121      	bne.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8004a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a04:	e000      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a06:	2308      	movs	r3, #8
 8004a08:	4a67      	ldr	r2, [pc, #412]	; (8004ba8 <HAL_DMAEx_MultiBufferStart_IT+0x97e>)
 8004a0a:	6093      	str	r3, [r2, #8]
 8004a0c:	e767      	b.n	80048de <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	e7fa      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a12:	2308      	movs	r3, #8
 8004a14:	e7f8      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a16:	2308      	movs	r3, #8
 8004a18:	e7f6      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1e:	e7f3      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a24:	e7f0      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2a:	e7ed      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a30:	e7ea      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a36:	e7e7      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a3c:	e7e4      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a42:	e7e1      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a48:	e7de      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8004a4a:	4a5a      	ldr	r2, [pc, #360]	; (8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x98a>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d953      	bls.n	8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x8ce>
 8004a50:	3a48      	subs	r2, #72	; 0x48
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d031      	beq.n	8004aba <HAL_DMAEx_MultiBufferStart_IT+0x890>
 8004a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0x898>
 8004a5e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02f      	beq.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x89c>
 8004a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02d      	beq.n	8004aca <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8004a6e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02b      	beq.n	8004ace <HAL_DMAEx_MultiBufferStart_IT+0x8a4>
 8004a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02a      	beq.n	8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 8004a7e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d029      	beq.n	8004ada <HAL_DMAEx_MultiBufferStart_IT+0x8b0>
 8004a86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d028      	beq.n	8004ae0 <HAL_DMAEx_MultiBufferStart_IT+0x8b6>
 8004a8e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d027      	beq.n	8004ae6 <HAL_DMAEx_MultiBufferStart_IT+0x8bc>
 8004a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d026      	beq.n	8004aec <HAL_DMAEx_MultiBufferStart_IT+0x8c2>
 8004a9e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d025      	beq.n	8004af2 <HAL_DMAEx_MultiBufferStart_IT+0x8c8>
 8004aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d002      	beq.n	8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8004aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab2:	e003      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ab8:	e000      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004aba:	2308      	movs	r3, #8
 8004abc:	4a3e      	ldr	r2, [pc, #248]	; (8004bb8 <HAL_DMAEx_MultiBufferStart_IT+0x98e>)
 8004abe:	60d3      	str	r3, [r2, #12]
 8004ac0:	e70d      	b.n	80048de <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	e7fa      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	e7f8      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004aca:	2308      	movs	r3, #8
 8004acc:	e7f6      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad2:	e7f3      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad8:	e7f0      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ade:	e7ed      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae4:	e7ea      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ae6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004aea:	e7e7      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004aec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004af0:	e7e4      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004af2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004af6:	e7e1      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_DMAEx_MultiBufferStart_IT+0x992>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d031      	beq.n	8004b6a <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8004b06:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02f      	beq.n	8004b6e <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8004b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d02d      	beq.n	8004b72 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8004b16:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02b      	beq.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8004b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02a      	beq.n	8004b7c <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8004b26:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d029      	beq.n	8004b82 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8004b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d028      	beq.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x95e>
 8004b36:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0x964>
 8004b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d026      	beq.n	8004b94 <HAL_DMAEx_MultiBufferStart_IT+0x96a>
 8004b46:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d025      	beq.n	8004b9a <HAL_DMAEx_MultiBufferStart_IT+0x970>
 8004b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d002      	beq.n	8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b5a:	e003      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b60:	e000      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b62:	2308      	movs	r3, #8
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <HAL_DMAEx_MultiBufferStart_IT+0x98e>)
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	e6b9      	b.n	80048de <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	e7fa      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b6e:	2308      	movs	r3, #8
 8004b70:	e7f8      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e7f6      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b7a:	e7f3      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b80:	e7f0      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b86:	e7ed      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8c:	e7ea      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b92:	e7e7      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b98:	e7e4      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b9e:	e7e1      	b.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004ba0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ba4:	e00d      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004ba6:	bf00      	nop
 8004ba8:	40026400 	.word	0x40026400
 8004bac:	40026458 	.word	0x40026458
 8004bb0:	400260b8 	.word	0x400260b8
 8004bb4:	40026058 	.word	0x40026058
 8004bb8:	40026000 	.word	0x40026000
 8004bbc:	40026010 	.word	0x40026010
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	4ac1      	ldr	r2, [pc, #772]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>)
 8004bc4:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	4ac0      	ldr	r2, [pc, #768]	; (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0xca2>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f240 819f 	bls.w	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0xce4>
 8004bd0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	f000 815a 	beq.w	8004e8e <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8004bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bde:	4293      	cmp	r3, r2
 8004be0:	f000 817e 	beq.w	8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0xcb6>
 8004be4:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	f000 817b 	beq.w	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8004bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f000 8178 	beq.w	8004ee8 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8004bf8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f000 8175 	beq.w	8004eec <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8004c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f000 8172 	beq.w	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004c0c:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	f000 816f 	beq.w	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xcca>
 8004c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f000 816c 	beq.w	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8004c20:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f000 8169 	beq.w	8004efc <HAL_DMAEx_MultiBufferStart_IT+0xcd2>
 8004c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f000 8167 	beq.w	8004f02 <HAL_DMAEx_MultiBufferStart_IT+0xcd8>
 8004c34:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	f000 8165 	beq.w	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0xcde>
 8004c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f000 8120 	beq.w	8004e88 <HAL_DMAEx_MultiBufferStart_IT+0xc5e>
 8004c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c4c:	e120      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e7b7      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c52:	2304      	movs	r3, #4
 8004c54:	e7b5      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e7b3      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c5e:	e7b0      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c64:	e7ad      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c6a:	e7aa      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c70:	e7a7      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c76:	e7a4      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c7c:	e7a1      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c82:	e79e      	b.n	8004bc2 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004c84:	4a92      	ldr	r2, [pc, #584]	; (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xca6>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d953      	bls.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004c8a:	3aa8      	subs	r2, #168	; 0xa8
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d02e      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0xac4>
 8004c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02e      	beq.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8004c98:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d02c      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0xad0>
 8004ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d02a      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0xad4>
 8004ca8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d028      	beq.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8004cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d027      	beq.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8004cb8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d026      	beq.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0xae4>
 8004cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d025      	beq.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xaea>
 8004cc8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d024      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0xaf0>
 8004cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d023      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xaf6>
 8004cd8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0xafc>
 8004ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d121      	bne.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8004ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cec:	e000      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	4a75      	ldr	r2, [pc, #468]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>)
 8004cf2:	6093      	str	r3, [r2, #8]
 8004cf4:	e767      	b.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	e7fa      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e7f8      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004cfe:	2304      	movs	r3, #4
 8004d00:	e7f6      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d06:	e7f3      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d0c:	e7f0      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d12:	e7ed      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d18:	e7ea      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d1e:	e7e7      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d24:	e7e4      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d2a:	e7e1      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d30:	e7de      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004d32:	4a68      	ldr	r2, [pc, #416]	; (8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d953      	bls.n	8004de0 <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8004d38:	3a48      	subs	r2, #72	; 0x48
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d031      	beq.n	8004da2 <HAL_DMAEx_MultiBufferStart_IT+0xb78>
 8004d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d031      	beq.n	8004daa <HAL_DMAEx_MultiBufferStart_IT+0xb80>
 8004d46:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02f      	beq.n	8004dae <HAL_DMAEx_MultiBufferStart_IT+0xb84>
 8004d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02d      	beq.n	8004db2 <HAL_DMAEx_MultiBufferStart_IT+0xb88>
 8004d56:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02b      	beq.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0xb8c>
 8004d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02a      	beq.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0xb92>
 8004d66:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d029      	beq.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8004d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d028      	beq.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8004d76:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d027      	beq.n	8004dce <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8004d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d026      	beq.n	8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8004d86:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d025      	beq.n	8004dda <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8004d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d002      	beq.n	8004d9c <HAL_DMAEx_MultiBufferStart_IT+0xb72>
 8004d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d9a:	e003      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004d9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004da0:	e000      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004da2:	2304      	movs	r3, #4
 8004da4:	4a4c      	ldr	r2, [pc, #304]	; (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xcae>)
 8004da6:	60d3      	str	r3, [r2, #12]
 8004da8:	e70d      	b.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 8004daa:	2304      	movs	r3, #4
 8004dac:	e7fa      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e7f8      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004db2:	2304      	movs	r3, #4
 8004db4:	e7f6      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dba:	e7f3      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc0:	e7f0      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc6:	e7ed      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dcc:	e7ea      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dd2:	e7e7      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dd8:	e7e4      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004dda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dde:	e7e1      	b.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 8004de0:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <HAL_DMAEx_MultiBufferStart_IT+0xcb2>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d031      	beq.n	8004e4a <HAL_DMAEx_MultiBufferStart_IT+0xc20>
 8004de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_DMAEx_MultiBufferStart_IT+0xc28>
 8004dee:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02f      	beq.n	8004e56 <HAL_DMAEx_MultiBufferStart_IT+0xc2c>
 8004df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02d      	beq.n	8004e5a <HAL_DMAEx_MultiBufferStart_IT+0xc30>
 8004dfe:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <HAL_DMAEx_MultiBufferStart_IT+0xc34>
 8004e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02a      	beq.n	8004e64 <HAL_DMAEx_MultiBufferStart_IT+0xc3a>
 8004e0e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d029      	beq.n	8004e6a <HAL_DMAEx_MultiBufferStart_IT+0xc40>
 8004e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d028      	beq.n	8004e70 <HAL_DMAEx_MultiBufferStart_IT+0xc46>
 8004e1e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d027      	beq.n	8004e76 <HAL_DMAEx_MultiBufferStart_IT+0xc4c>
 8004e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d026      	beq.n	8004e7c <HAL_DMAEx_MultiBufferStart_IT+0xc52>
 8004e2e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d025      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8004e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d002      	beq.n	8004e44 <HAL_DMAEx_MultiBufferStart_IT+0xc1a>
 8004e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e42:	e003      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e48:	e000      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xcae>)
 8004e4e:	6093      	str	r3, [r2, #8]
 8004e50:	e6b9      	b.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 8004e52:	2304      	movs	r3, #4
 8004e54:	e7fa      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e7f8      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	e7f6      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e62:	e7f3      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e68:	e7f0      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6e:	e7ed      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e74:	e7ea      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e7a:	e7e7      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e80:	e7e4      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
 8004e82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e86:	e7e1      	b.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xc22>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e8c:	e000      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>)
 8004e92:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	f043 0316 	orr.w	r3, r3, #22
 8004e9c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	6953      	ldr	r3, [r2, #20]
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8125 	beq.w	80050fa <HAL_DMAEx_MultiBufferStart_IT+0xed0>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	6813      	ldr	r3, [r2, #0]
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma); 
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	40026400 	.word	0x40026400
 8004ecc:	40026458 	.word	0x40026458
 8004ed0:	400260b8 	.word	0x400260b8
 8004ed4:	40026058 	.word	0x40026058
 8004ed8:	40026000 	.word	0x40026000
 8004edc:	40026010 	.word	0x40026010
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e7d5      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e7d3      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7d1      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	e7cf      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	e7cd      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	e7cb      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	e7c9      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f00:	e7c6      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f06:	e7c3      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f0c:	e7c0      	b.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004f0e:	4a7e      	ldr	r2, [pc, #504]	; (8005108 <HAL_DMAEx_MultiBufferStart_IT+0xede>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d94f      	bls.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8004f14:	3aa8      	subs	r2, #168	; 0xa8
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02e      	beq.n	8004f78 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8004f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02e      	beq.n	8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xd56>
 8004f22:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02c      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8004f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02a      	beq.n	8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xd5e>
 8004f32:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d028      	beq.n	8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xd62>
 8004f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d026      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004f42:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d024      	beq.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8004f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8004f52:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d020      	beq.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8004f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8004f62:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01e      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8004f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d11d      	bne.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f76:	e000      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4a64      	ldr	r2, [pc, #400]	; (800510c <HAL_DMAEx_MultiBufferStart_IT+0xee2>)
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	e789      	b.n	8004e94 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e7fa      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e7f8      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e7f6      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	e7f4      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	e7f2      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	e7f0      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	e7ee      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fa0:	e7eb      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fa6:	e7e8      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fac:	e7e5      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fb2:	e7e2      	b.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xd50>
 8004fb4:	4a56      	ldr	r2, [pc, #344]	; (8005110 <HAL_DMAEx_MultiBufferStart_IT+0xee6>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d94f      	bls.n	800505a <HAL_DMAEx_MultiBufferStart_IT+0xe30>
 8004fba:	3a48      	subs	r2, #72	; 0x48
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d031      	beq.n	8005024 <HAL_DMAEx_MultiBufferStart_IT+0xdfa>
 8004fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMAEx_MultiBufferStart_IT+0xe02>
 8004fc8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02f      	beq.n	8005030 <HAL_DMAEx_MultiBufferStart_IT+0xe06>
 8004fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d02d      	beq.n	8005034 <HAL_DMAEx_MultiBufferStart_IT+0xe0a>
 8004fd8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d02b      	beq.n	8005038 <HAL_DMAEx_MultiBufferStart_IT+0xe0e>
 8004fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d029      	beq.n	800503c <HAL_DMAEx_MultiBufferStart_IT+0xe12>
 8004fe8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d027      	beq.n	8005040 <HAL_DMAEx_MultiBufferStart_IT+0xe16>
 8004ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d025      	beq.n	8005044 <HAL_DMAEx_MultiBufferStart_IT+0xe1a>
 8004ff8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d023      	beq.n	8005048 <HAL_DMAEx_MultiBufferStart_IT+0xe1e>
 8005000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_DMAEx_MultiBufferStart_IT+0xe24>
 8005008:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800500c:	4293      	cmp	r3, r2
 800500e:	d021      	beq.n	8005054 <HAL_DMAEx_MultiBufferStart_IT+0xe2a>
 8005010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005014:	4293      	cmp	r3, r2
 8005016:	d002      	beq.n	800501e <HAL_DMAEx_MultiBufferStart_IT+0xdf4>
 8005018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800501c:	e003      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 800501e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005022:	e000      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005024:	2301      	movs	r3, #1
 8005026:	4a3b      	ldr	r2, [pc, #236]	; (8005114 <HAL_DMAEx_MultiBufferStart_IT+0xeea>)
 8005028:	60d3      	str	r3, [r2, #12]
 800502a:	e733      	b.n	8004e94 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 800502c:	2301      	movs	r3, #1
 800502e:	e7fa      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005030:	2301      	movs	r3, #1
 8005032:	e7f8      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005034:	2301      	movs	r3, #1
 8005036:	e7f6      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	e7f4      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	e7f2      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	e7f0      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	e7ee      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800504c:	e7eb      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 800504e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005052:	e7e8      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8005054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005058:	e7e5      	b.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 800505a:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <HAL_DMAEx_MultiBufferStart_IT+0xeee>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d031      	beq.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8005060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMAEx_MultiBufferStart_IT+0xea2>
 8005068:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800506c:	4293      	cmp	r3, r2
 800506e:	d02f      	beq.n	80050d0 <HAL_DMAEx_MultiBufferStart_IT+0xea6>
 8005070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005074:	4293      	cmp	r3, r2
 8005076:	d02d      	beq.n	80050d4 <HAL_DMAEx_MultiBufferStart_IT+0xeaa>
 8005078:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800507c:	4293      	cmp	r3, r2
 800507e:	d02b      	beq.n	80050d8 <HAL_DMAEx_MultiBufferStart_IT+0xeae>
 8005080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005084:	4293      	cmp	r3, r2
 8005086:	d029      	beq.n	80050dc <HAL_DMAEx_MultiBufferStart_IT+0xeb2>
 8005088:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800508c:	4293      	cmp	r3, r2
 800508e:	d027      	beq.n	80050e0 <HAL_DMAEx_MultiBufferStart_IT+0xeb6>
 8005090:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005094:	4293      	cmp	r3, r2
 8005096:	d025      	beq.n	80050e4 <HAL_DMAEx_MultiBufferStart_IT+0xeba>
 8005098:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800509c:	4293      	cmp	r3, r2
 800509e:	d023      	beq.n	80050e8 <HAL_DMAEx_MultiBufferStart_IT+0xebe>
 80050a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMAEx_MultiBufferStart_IT+0xec4>
 80050a8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d021      	beq.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xeca>
 80050b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d002      	beq.n	80050be <HAL_DMAEx_MultiBufferStart_IT+0xe94>
 80050b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050bc:	e003      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050c2:	e000      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4a13      	ldr	r2, [pc, #76]	; (8005114 <HAL_DMAEx_MultiBufferStart_IT+0xeea>)
 80050c8:	6093      	str	r3, [r2, #8]
 80050ca:	e6e3      	b.n	8004e94 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e7fa      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e7f8      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e7f6      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050d8:	2340      	movs	r3, #64	; 0x40
 80050da:	e7f4      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	e7f2      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	e7f0      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050e4:	2340      	movs	r3, #64	; 0x40
 80050e6:	e7ee      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ec:	e7eb      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050f2:	e7e8      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050f8:	e7e5      	b.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f47f aed7 	bne.w	8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0xc86>
 8005102:	e6da      	b.n	8004eba <HAL_DMAEx_MultiBufferStart_IT+0xc90>
  __HAL_LOCK(hdma);
 8005104:	2002      	movs	r0, #2
}
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	400260b8 	.word	0x400260b8
 800510c:	40026400 	.word	0x40026400
 8005110:	40026058 	.word	0x40026058
 8005114:	40026000 	.word	0x40026000
 8005118:	40026010 	.word	0x40026010

0800511c <HAL_DMAEx_ChangeMemory>:
  if(memory == MEMORY0)
 800511c:	b11a      	cbz	r2, 8005126 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M1AR = Address;
 800511e:	6803      	ldr	r3, [r0, #0]
 8005120:	6119      	str	r1, [r3, #16]
}
 8005122:	2000      	movs	r0, #0
 8005124:	4770      	bx	lr
    hdma->Instance->M0AR = Address;
 8005126:	6803      	ldr	r3, [r0, #0]
 8005128:	60d9      	str	r1, [r3, #12]
 800512a:	e7fa      	b.n	8005122 <HAL_DMAEx_ChangeMemory+0x6>

0800512c <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800512c:	2800      	cmp	r0, #0
 800512e:	d061      	beq.n	80051f4 <HAL_EXTI_SetConfigLine+0xc8>
 8005130:	2900      	cmp	r1, #0
 8005132:	d061      	beq.n	80051f8 <HAL_EXTI_SetConfigLine+0xcc>
{
 8005134:	b470      	push	{r4, r5, r6}
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8005136:	680a      	ldr	r2, [r1, #0]
 8005138:	6002      	str	r2, [r0, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800513a:	680a      	ldr	r2, [r1, #0]
 800513c:	f002 001f 	and.w	r0, r2, #31
  maskline = (1uL << linepos);
 8005140:	2301      	movs	r3, #1
 8005142:	4083      	lsls	r3, r0

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005144:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005148:	d015      	beq.n	8005176 <HAL_EXTI_SetConfigLine+0x4a>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800514a:	688c      	ldr	r4, [r1, #8]
 800514c:	f014 0f01 	tst.w	r4, #1
 8005150:	d025      	beq.n	800519e <HAL_EXTI_SetConfigLine+0x72>
    {
      EXTI->RTSR |= maskline;
 8005152:	4d2a      	ldr	r5, [pc, #168]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 8005154:	68ac      	ldr	r4, [r5, #8]
 8005156:	431c      	orrs	r4, r3
 8005158:	60ac      	str	r4, [r5, #8]
      EXTI->RTSR &= ~maskline;
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800515a:	688c      	ldr	r4, [r1, #8]
 800515c:	f014 0f02 	tst.w	r4, #2
 8005160:	d023      	beq.n	80051aa <HAL_EXTI_SetConfigLine+0x7e>
    {
      EXTI->FTSR |= maskline;
 8005162:	4d26      	ldr	r5, [pc, #152]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 8005164:	68ec      	ldr	r4, [r5, #12]
 8005166:	431c      	orrs	r4, r3
 8005168:	60ec      	str	r4, [r5, #12]
      EXTI->FTSR &= ~maskline;
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800516a:	680c      	ldr	r4, [r1, #0]
 800516c:	f004 64c0 	and.w	r4, r4, #100663296	; 0x6000000
 8005170:	f1b4 6fc0 	cmp.w	r4, #100663296	; 0x6000000
 8005174:	d01f      	beq.n	80051b6 <HAL_EXTI_SetConfigLine+0x8a>
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8005176:	684a      	ldr	r2, [r1, #4]
 8005178:	f012 0f01 	tst.w	r2, #1
 800517c:	d02e      	beq.n	80051dc <HAL_EXTI_SetConfigLine+0xb0>
  {
    EXTI->IMR |= maskline;
 800517e:	481f      	ldr	r0, [pc, #124]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 8005180:	6802      	ldr	r2, [r0, #0]
 8005182:	431a      	orrs	r2, r3
 8005184:	6002      	str	r2, [r0, #0]
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005186:	684a      	ldr	r2, [r1, #4]
 8005188:	f012 0f02 	tst.w	r2, #2
 800518c:	d12c      	bne.n	80051e8 <HAL_EXTI_SetConfigLine+0xbc>
  {
    EXTI->EMR |= maskline;
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800518e:	491b      	ldr	r1, [pc, #108]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 8005190:	684a      	ldr	r2, [r1, #4]
 8005192:	ea22 0303 	bic.w	r3, r2, r3
 8005196:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8005198:	2000      	movs	r0, #0
}
 800519a:	bc70      	pop	{r4, r5, r6}
 800519c:	4770      	bx	lr
      EXTI->RTSR &= ~maskline;
 800519e:	4d17      	ldr	r5, [pc, #92]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 80051a0:	68ac      	ldr	r4, [r5, #8]
 80051a2:	ea24 0403 	bic.w	r4, r4, r3
 80051a6:	60ac      	str	r4, [r5, #8]
 80051a8:	e7d7      	b.n	800515a <HAL_EXTI_SetConfigLine+0x2e>
      EXTI->FTSR &= ~maskline;
 80051aa:	4d14      	ldr	r5, [pc, #80]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 80051ac:	68ec      	ldr	r4, [r5, #12]
 80051ae:	ea24 0403 	bic.w	r4, r4, r3
 80051b2:	60ec      	str	r4, [r5, #12]
 80051b4:	e7d9      	b.n	800516a <HAL_EXTI_SetConfigLine+0x3e>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 80051b6:	0880      	lsrs	r0, r0, #2
 80051b8:	4e11      	ldr	r6, [pc, #68]	; (8005200 <HAL_EXTI_SetConfigLine+0xd4>)
 80051ba:	3002      	adds	r0, #2
 80051bc:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80051c0:	f002 0203 	and.w	r2, r2, #3
 80051c4:	0092      	lsls	r2, r2, #2
 80051c6:	250f      	movs	r5, #15
 80051c8:	4095      	lsls	r5, r2
 80051ca:	ea24 0405 	bic.w	r4, r4, r5
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80051ce:	68cd      	ldr	r5, [r1, #12]
 80051d0:	fa05 f202 	lsl.w	r2, r5, r2
 80051d4:	4322      	orrs	r2, r4
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80051d6:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 80051da:	e7cc      	b.n	8005176 <HAL_EXTI_SetConfigLine+0x4a>
    EXTI->IMR &= ~maskline;
 80051dc:	4807      	ldr	r0, [pc, #28]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 80051de:	6802      	ldr	r2, [r0, #0]
 80051e0:	ea22 0203 	bic.w	r2, r2, r3
 80051e4:	6002      	str	r2, [r0, #0]
 80051e6:	e7ce      	b.n	8005186 <HAL_EXTI_SetConfigLine+0x5a>
    EXTI->EMR |= maskline;
 80051e8:	4904      	ldr	r1, [pc, #16]	; (80051fc <HAL_EXTI_SetConfigLine+0xd0>)
 80051ea:	684a      	ldr	r2, [r1, #4]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
  return HAL_OK;
 80051f0:	2000      	movs	r0, #0
 80051f2:	e7d2      	b.n	800519a <HAL_EXTI_SetConfigLine+0x6e>
    return HAL_ERROR;
 80051f4:	2001      	movs	r0, #1
 80051f6:	4770      	bx	lr
 80051f8:	2001      	movs	r0, #1
 80051fa:	4770      	bx	lr
 80051fc:	40013c00 	.word	0x40013c00
 8005200:	40013800 	.word	0x40013800

08005204 <HAL_EXTI_GetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8005204:	2800      	cmp	r0, #0
 8005206:	d04a      	beq.n	800529e <HAL_EXTI_GetConfigLine+0x9a>
 8005208:	2900      	cmp	r1, #0
 800520a:	d04a      	beq.n	80052a2 <HAL_EXTI_GetConfigLine+0x9e>
{
 800520c:	b410      	push	{r4}

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	6008      	str	r0, [r1, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005212:	f000 041f 	and.w	r4, r0, #31
  maskline = (1uL << linepos);
 8005216:	2301      	movs	r3, #1
 8005218:	40a3      	lsls	r3, r4

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800521a:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <HAL_EXTI_GetConfigLine+0xa4>)
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	4213      	tst	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_EXTI_GetConfigLine+0x64>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8005222:	2201      	movs	r2, #1
 8005224:	604a      	str	r2, [r1, #4]
    pExtiConfig->Mode = EXTI_MODE_NONE;
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8005226:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <HAL_EXTI_GetConfigLine+0xa4>)
 8005228:	6852      	ldr	r2, [r2, #4]
 800522a:	4213      	tst	r3, r2
 800522c:	d003      	beq.n	8005236 <HAL_EXTI_GetConfigLine+0x32>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 800522e:	684a      	ldr	r2, [r1, #4]
 8005230:	f042 0202 	orr.w	r2, r2, #2
 8005234:	604a      	str	r2, [r1, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005236:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800523a:	d02a      	beq.n	8005292 <HAL_EXTI_GetConfigLine+0x8e>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_EXTI_GetConfigLine+0xa4>)
 800523e:	6892      	ldr	r2, [r2, #8]
 8005240:	4213      	tst	r3, r2
 8005242:	d014      	beq.n	800526e <HAL_EXTI_GetConfigLine+0x6a>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8005244:	2201      	movs	r2, #1
 8005246:	608a      	str	r2, [r1, #8]
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <HAL_EXTI_GetConfigLine+0xa4>)
 800524a:	68d2      	ldr	r2, [r2, #12]
 800524c:	4213      	tst	r3, r2
 800524e:	d003      	beq.n	8005258 <HAL_EXTI_GetConfigLine+0x54>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8005250:	688b      	ldr	r3, [r1, #8]
 8005252:	f043 0302 	orr.w	r3, r3, #2
 8005256:	608b      	str	r3, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8005258:	f000 63c0 	and.w	r3, r0, #100663296	; 0x6000000
 800525c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005260:	d008      	beq.n	8005274 <HAL_EXTI_GetConfigLine+0x70>
      regval = SYSCFG->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
 8005262:	2000      	movs	r0, #0
 8005264:	60c8      	str	r0, [r1, #12]
 8005266:	e017      	b.n	8005298 <HAL_EXTI_GetConfigLine+0x94>
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8005268:	2200      	movs	r2, #0
 800526a:	604a      	str	r2, [r1, #4]
 800526c:	e7db      	b.n	8005226 <HAL_EXTI_GetConfigLine+0x22>
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 800526e:	2200      	movs	r2, #0
 8005270:	608a      	str	r2, [r1, #8]
 8005272:	e7e9      	b.n	8005248 <HAL_EXTI_GetConfigLine+0x44>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8005274:	08a3      	lsrs	r3, r4, #2
 8005276:	3302      	adds	r3, #2
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <HAL_EXTI_GetConfigLine+0xa8>)
 800527a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 800527e:	43e3      	mvns	r3, r4
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	60cb      	str	r3, [r1, #12]
    /* No Trigger selected */
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    pExtiConfig->GPIOSel = 0x00u;
  }

  return HAL_OK;
 800528e:	2000      	movs	r0, #0
 8005290:	e002      	b.n	8005298 <HAL_EXTI_GetConfigLine+0x94>
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8005292:	2000      	movs	r0, #0
 8005294:	6088      	str	r0, [r1, #8]
    pExtiConfig->GPIOSel = 0x00u;
 8005296:	60c8      	str	r0, [r1, #12]
}
 8005298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800529c:	4770      	bx	lr
    return HAL_ERROR;
 800529e:	2001      	movs	r0, #1
 80052a0:	4770      	bx	lr
 80052a2:	2001      	movs	r0, #1
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40013c00 	.word	0x40013c00
 80052ac:	40013800 	.word	0x40013800

080052b0 <HAL_EXTI_ClearConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d032      	beq.n	800531a <HAL_EXTI_ClearConfigLine+0x6a>
{
 80052b4:	b430      	push	{r4, r5}
 80052b6:	4604      	mov	r4, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 80052b8:	6805      	ldr	r5, [r0, #0]
 80052ba:	f005 001f 	and.w	r0, r5, #31
  maskline = (1uL << linepos);
 80052be:	2301      	movs	r3, #1
 80052c0:	4083      	lsls	r3, r0

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 80052c2:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_EXTI_ClearConfigLine+0x74>)
 80052c4:	6811      	ldr	r1, [r2, #0]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	4019      	ands	r1, r3
 80052ca:	6011      	str	r1, [r2, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 80052cc:	6851      	ldr	r1, [r2, #4]
 80052ce:	4019      	ands	r1, r3
 80052d0:	6051      	str	r1, [r2, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80052d8:	d021      	beq.n	800531e <HAL_EXTI_ClearConfigLine+0x6e>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <HAL_EXTI_ClearConfigLine+0x74>)
 80052dc:	6891      	ldr	r1, [r2, #8]
 80052de:	4019      	ands	r1, r3
 80052e0:	6091      	str	r1, [r2, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 80052e2:	68d1      	ldr	r1, [r2, #12]
 80052e4:	400b      	ands	r3, r1
 80052e6:	60d3      	str	r3, [r2, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80052ee:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80052f2:	d001      	beq.n	80052f8 <HAL_EXTI_ClearConfigLine+0x48>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 80052f4:	2000      	movs	r0, #0
 80052f6:	e013      	b.n	8005320 <HAL_EXTI_ClearConfigLine+0x70>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 80052f8:	0880      	lsrs	r0, r0, #2
 80052fa:	490b      	ldr	r1, [pc, #44]	; (8005328 <HAL_EXTI_ClearConfigLine+0x78>)
 80052fc:	3002      	adds	r0, #2
 80052fe:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005302:	f005 0503 	and.w	r5, r5, #3
 8005306:	00ad      	lsls	r5, r5, #2
 8005308:	220f      	movs	r2, #15
 800530a:	fa02 f505 	lsl.w	r5, r2, r5
 800530e:	ea23 0505 	bic.w	r5, r3, r5
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8005312:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
  return HAL_OK;
 8005316:	2000      	movs	r0, #0
 8005318:	e002      	b.n	8005320 <HAL_EXTI_ClearConfigLine+0x70>
    return HAL_ERROR;
 800531a:	2001      	movs	r0, #1
 800531c:	4770      	bx	lr
  return HAL_OK;
 800531e:	2000      	movs	r0, #0
}
 8005320:	bc30      	pop	{r4, r5}
 8005322:	4770      	bx	lr
 8005324:	40013c00 	.word	0x40013c00
 8005328:	40013800 	.word	0x40013800

0800532c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800532c:	b911      	cbnz	r1, 8005334 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800532e:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2000      	movs	r0, #0
      break;
 8005332:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8005334:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8005336:	4770      	bx	lr

08005338 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005338:	b110      	cbz	r0, 8005340 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800533a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800533c:	2000      	movs	r0, #0
 800533e:	4770      	bx	lr
    return HAL_ERROR;
 8005340:	2001      	movs	r0, #1
  }
}
 8005342:	4770      	bx	lr

08005344 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005344:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	f003 021f 	and.w	r2, r3, #31
 800534c:	2301      	movs	r3, #1
 800534e:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HAL_EXTI_IRQHandler+0x20>)
 8005352:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 8005354:	4213      	tst	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8005358:	4a02      	ldr	r2, [pc, #8]	; (8005364 <HAL_EXTI_IRQHandler+0x20>)
 800535a:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800535c:	6843      	ldr	r3, [r0, #4]
 800535e:	b103      	cbz	r3, 8005362 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8005360:	4798      	blx	r3
 8005362:	bd08      	pop	{r3, pc}
 8005364:	40013c00 	.word	0x40013c00

08005368 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8005368:	6800      	ldr	r0, [r0, #0]
 800536a:	f000 001f 	and.w	r0, r0, #31
  maskline = (1uL << linepos);
 800536e:	2301      	movs	r3, #1
 8005370:	4083      	lsls	r3, r0

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8005372:	4a03      	ldr	r2, [pc, #12]	; (8005380 <HAL_EXTI_GetPending+0x18>)
 8005374:	6952      	ldr	r2, [r2, #20]
 8005376:	4013      	ands	r3, r2
  return regval;
}
 8005378:	fa23 f000 	lsr.w	r0, r3, r0
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40013c00 	.word	0x40013c00

08005384 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005384:	6802      	ldr	r2, [r0, #0]
 8005386:	f002 021f 	and.w	r2, r2, #31
 800538a:	2301      	movs	r3, #1
 800538c:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800538e:	4a01      	ldr	r2, [pc, #4]	; (8005394 <HAL_EXTI_ClearPending+0x10>)
 8005390:	6153      	str	r3, [r2, #20]
 8005392:	4770      	bx	lr
 8005394:	40013c00 	.word	0x40013c00

08005398 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005398:	6802      	ldr	r2, [r0, #0]
 800539a:	f002 021f 	and.w	r2, r2, #31
 800539e:	2301      	movs	r3, #1
 80053a0:	4093      	lsls	r3, r2

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80053a2:	4a01      	ldr	r2, [pc, #4]	; (80053a8 <HAL_EXTI_GenerateSWI+0x10>)
 80053a4:	6113      	str	r3, [r2, #16]
 80053a6:	4770      	bx	lr
 80053a8:	40013c00 	.word	0x40013c00

080053ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053ac:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053ae:	490a      	ldr	r1, [pc, #40]	; (80053d8 <FLASH_Program_DoubleWord+0x2c>)
 80053b0:	690c      	ldr	r4, [r1, #16]
 80053b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80053b6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053b8:	690c      	ldr	r4, [r1, #16]
 80053ba:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80053be:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053c0:	690c      	ldr	r4, [r1, #16]
 80053c2:	f044 0401 	orr.w	r4, r4, #1
 80053c6:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053c8:	6002      	str	r2, [r0, #0]
 80053ca:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80053ce:	6043      	str	r3, [r0, #4]
}
 80053d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023c00 	.word	0x40023c00

080053dc <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <FLASH_Program_Word+0x20>)
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053e4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80053f6:	6001      	str	r1, [r0, #0]
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40023c00 	.word	0x40023c00

08005400 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <FLASH_Program_HalfWord+0x20>)
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005408:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005410:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800541a:	8001      	strh	r1, [r0, #0]
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40023c00 	.word	0x40023c00

08005424 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <FLASH_Program_Byte+0x1c>)
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800542c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800543a:	7001      	strb	r1, [r0, #0]
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00

08005444 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f013 0f10 	tst.w	r3, #16
 800544c:	d007      	beq.n	800545e <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800544e:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <FLASH_SetErrorCode+0x88>)
 8005450:	69d3      	ldr	r3, [r2, #28]
 8005452:	f043 0310 	orr.w	r3, r3, #16
 8005456:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005458:	2210      	movs	r2, #16
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 800545c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800545e:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f013 0f20 	tst.w	r3, #32
 8005466:	d007      	beq.n	8005478 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005468:	4a18      	ldr	r2, [pc, #96]	; (80054cc <FLASH_SetErrorCode+0x88>)
 800546a:	69d3      	ldr	r3, [r2, #28]
 800546c:	f043 0308 	orr.w	r3, r3, #8
 8005470:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005472:	2220      	movs	r2, #32
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 8005476:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005480:	d007      	beq.n	8005492 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005482:	4a12      	ldr	r2, [pc, #72]	; (80054cc <FLASH_SetErrorCode+0x88>)
 8005484:	69d3      	ldr	r3, [r2, #28]
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 8005490:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f013 0f80 	tst.w	r3, #128	; 0x80
 800549a:	d007      	beq.n	80054ac <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800549c:	4a0b      	ldr	r2, [pc, #44]	; (80054cc <FLASH_SetErrorCode+0x88>)
 800549e:	69d3      	ldr	r3, [r2, #28]
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 80054aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f013 0f02 	tst.w	r3, #2
 80054b4:	d007      	beq.n	80054c6 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80054b6:	4a05      	ldr	r2, [pc, #20]	; (80054cc <FLASH_SetErrorCode+0x88>)
 80054b8:	69d3      	ldr	r3, [r2, #28]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80054c0:	2202      	movs	r2, #2
 80054c2:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <FLASH_SetErrorCode+0x84>)
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	4770      	bx	lr
 80054c8:	40023c00 	.word	0x40023c00
 80054cc:	20005eac 	.word	0x20005eac

080054d0 <HAL_FLASH_Program_IT>:
{
 80054d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80054d2:	4c19      	ldr	r4, [pc, #100]	; (8005538 <HAL_FLASH_Program_IT+0x68>)
 80054d4:	7e24      	ldrb	r4, [r4, #24]
 80054d6:	2c01      	cmp	r4, #1
 80054d8:	d02c      	beq.n	8005534 <HAL_FLASH_Program_IT+0x64>
 80054da:	460d      	mov	r5, r1
 80054dc:	4604      	mov	r4, r0
 80054de:	4916      	ldr	r1, [pc, #88]	; (8005538 <HAL_FLASH_Program_IT+0x68>)
 80054e0:	2001      	movs	r0, #1
 80054e2:	7608      	strb	r0, [r1, #24]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80054e4:	4815      	ldr	r0, [pc, #84]	; (800553c <HAL_FLASH_Program_IT+0x6c>)
 80054e6:	6906      	ldr	r6, [r0, #16]
 80054e8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80054ec:	6106      	str	r6, [r0, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80054ee:	6906      	ldr	r6, [r0, #16]
 80054f0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
 80054f4:	6106      	str	r6, [r0, #16]
  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80054f6:	2003      	movs	r0, #3
 80054f8:	7008      	strb	r0, [r1, #0]
  pFlash.Address = Address;
 80054fa:	614d      	str	r5, [r1, #20]
  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80054fc:	b144      	cbz	r4, 8005510 <HAL_FLASH_Program_IT+0x40>
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80054fe:	2c01      	cmp	r4, #1
 8005500:	d00c      	beq.n	800551c <HAL_FLASH_Program_IT+0x4c>
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005502:	2c02      	cmp	r4, #2
 8005504:	d010      	beq.n	8005528 <HAL_FLASH_Program_IT+0x58>
    FLASH_Program_DoubleWord(Address, Data);
 8005506:	4628      	mov	r0, r5
 8005508:	f7ff ff50 	bl	80053ac <FLASH_Program_DoubleWord>
  return status;
 800550c:	2000      	movs	r0, #0
 800550e:	bd70      	pop	{r4, r5, r6, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005510:	b2d1      	uxtb	r1, r2
 8005512:	4628      	mov	r0, r5
 8005514:	f7ff ff86 	bl	8005424 <FLASH_Program_Byte>
  return status;
 8005518:	2000      	movs	r0, #0
 800551a:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800551c:	b291      	uxth	r1, r2
 800551e:	4628      	mov	r0, r5
 8005520:	f7ff ff6e 	bl	8005400 <FLASH_Program_HalfWord>
  return status;
 8005524:	2000      	movs	r0, #0
 8005526:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_Program_Word(Address, (uint32_t) Data);
 8005528:	4611      	mov	r1, r2
 800552a:	4628      	mov	r0, r5
 800552c:	f7ff ff56 	bl	80053dc <FLASH_Program_Word>
  return status;
 8005530:	2000      	movs	r0, #0
 8005532:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8005534:	2002      	movs	r0, #2
}
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	20005eac 	.word	0x20005eac
 800553c:	40023c00 	.word	0x40023c00

08005540 <HAL_FLASH_EndOfOperationCallback>:
{
 8005540:	4770      	bx	lr

08005542 <HAL_FLASH_OperationErrorCallback>:
{
 8005542:	4770      	bx	lr

08005544 <HAL_FLASH_IRQHandler>:
{
 8005544:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_FLASH_IRQHandler+0xec>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 800554e:	d013      	beq.n	8005578 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005550:	4b38      	ldr	r3, [pc, #224]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d03b      	beq.n	80055d2 <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800555a:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d03c      	beq.n	80055de <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 8005564:	4b33      	ldr	r3, [pc, #204]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 8005566:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8005568:	f7ff ff6c 	bl	8005444 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff ffe8 	bl	8005542 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005572:	2200      	movs	r2, #0
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 8005576:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005578:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <HAL_FLASH_IRQHandler+0xec>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f013 0f01 	tst.w	r3, #1
 8005580:	d013      	beq.n	80055aa <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005582:	2201      	movs	r2, #1
 8005584:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <HAL_FLASH_IRQHandler+0xec>)
 8005586:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005588:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	4293      	cmp	r3, r2
 8005590:	d028      	beq.n	80055e4 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005592:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d041      	beq.n	8005620 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 800559e:	6958      	ldr	r0, [r3, #20]
 80055a0:	f7ff ffce 	bl	8005540 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80055a4:	2200      	movs	r2, #0
 80055a6:	4b23      	ldr	r3, [pc, #140]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055a8:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80055aa:	4b22      	ldr	r3, [pc, #136]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b97b      	cbnz	r3, 80055d0 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <HAL_FLASH_IRQHandler+0xec>)
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055b8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80055c0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80055c8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055ce:	761a      	strb	r2, [r3, #24]
 80055d0:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80055d2:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055d4:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	e7c4      	b.n	8005568 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80055de:	4b15      	ldr	r3, [pc, #84]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055e0:	691c      	ldr	r4, [r3, #16]
 80055e2:	e7c1      	b.n	8005568 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	3a01      	subs	r2, #1
 80055ea:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b15b      	cbz	r3, 8005608 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 80055f0:	4c10      	ldr	r4, [pc, #64]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 80055f2:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80055f4:	f7ff ffa4 	bl	8005540 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80055f8:	68e3      	ldr	r3, [r4, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80055fe:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005600:	7a21      	ldrb	r1, [r4, #8]
 8005602:	f000 f9c2 	bl	800598a <FLASH_Erase_Sector>
 8005606:	e7d0      	b.n	80055aa <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 800560a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800560e:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8005614:	f000 fa18 	bl	8005a48 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff ff91 	bl	8005540 <HAL_FLASH_EndOfOperationCallback>
 800561e:	e7c4      	b.n	80055aa <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8005620:	f000 fa12 	bl	8005a48 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_FLASH_IRQHandler+0xf0>)
 8005626:	6918      	ldr	r0, [r3, #16]
 8005628:	f7ff ff8a 	bl	8005540 <HAL_FLASH_EndOfOperationCallback>
 800562c:	e7ba      	b.n	80055a4 <HAL_FLASH_IRQHandler+0x60>
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00
 8005634:	20005eac 	.word	0x20005eac

08005638 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_FLASH_Unlock+0x28>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	db01      	blt.n	8005644 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2000      	movs	r0, #0
 8005642:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_FLASH_Unlock+0x28>)
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_FLASH_Unlock+0x2c>)
 8005648:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800564a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800564e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	db01      	blt.n	800565a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2000      	movs	r0, #0
 8005658:	4770      	bx	lr
      status = HAL_ERROR;
 800565a:	2001      	movs	r0, #1
}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40023c00 	.word	0x40023c00
 8005664:	45670123 	.word	0x45670123

08005668 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8005668:	4a03      	ldr	r2, [pc, #12]	; (8005678 <HAL_FLASH_Lock+0x10>)
 800566a:	6913      	ldr	r3, [r2, #16]
 800566c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005670:	6113      	str	r3, [r2, #16]
}
 8005672:	2000      	movs	r0, #0
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40023c00 	.word	0x40023c00

0800567c <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <HAL_FLASH_OB_Unlock+0x20>)
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f013 0f01 	tst.w	r3, #1
 8005684:	d007      	beq.n	8005696 <HAL_FLASH_OB_Unlock+0x1a>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_FLASH_OB_Unlock+0x20>)
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <HAL_FLASH_OB_Unlock+0x24>)
 800568a:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800568c:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8005690:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8005692:	2000      	movs	r0, #0
 8005694:	4770      	bx	lr
    return HAL_ERROR;
 8005696:	2001      	movs	r0, #1
}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40023c00 	.word	0x40023c00
 80056a0:	08192a3b 	.word	0x08192a3b

080056a4 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80056a4:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <HAL_FLASH_OB_Lock+0x10>)
 80056a6:	6953      	ldr	r3, [r2, #20]
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6153      	str	r3, [r2, #20]
}
 80056ae:	2000      	movs	r0, #0
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40023c00 	.word	0x40023c00

080056b8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80056b8:	4b01      	ldr	r3, [pc, #4]	; (80056c0 <HAL_FLASH_GetError+0x8>)
 80056ba:	69d8      	ldr	r0, [r3, #28]
}  
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20005eac 	.word	0x20005eac

080056c4 <FLASH_WaitForLastOperation>:
{ 
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056c8:	2200      	movs	r2, #0
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <FLASH_WaitForLastOperation+0x5c>)
 80056cc:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80056ce:	f7fb fe99 	bl	8001404 <HAL_GetTick>
 80056d2:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <FLASH_WaitForLastOperation+0x60>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80056dc:	d00a      	beq.n	80056f4 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80056de:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80056e2:	d0f7      	beq.n	80056d4 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80056e4:	b1cc      	cbz	r4, 800571a <FLASH_WaitForLastOperation+0x56>
 80056e6:	f7fb fe8d 	bl	8001404 <HAL_GetTick>
 80056ea:	1b40      	subs	r0, r0, r5
 80056ec:	4284      	cmp	r4, r0
 80056ee:	d2f1      	bcs.n	80056d4 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80056f0:	2003      	movs	r0, #3
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <FLASH_WaitForLastOperation+0x60>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f013 0f01 	tst.w	r3, #1
 80056fc:	d002      	beq.n	8005704 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80056fe:	2201      	movs	r2, #1
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <FLASH_WaitForLastOperation+0x60>)
 8005702:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <FLASH_WaitForLastOperation+0x60>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 800570c:	d101      	bne.n	8005712 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800570e:	2000      	movs	r0, #0
}  
 8005710:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8005712:	f7ff fe97 	bl	8005444 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005716:	2001      	movs	r0, #1
 8005718:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800571a:	2003      	movs	r0, #3
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	20005eac 	.word	0x20005eac
 8005724:	40023c00 	.word	0x40023c00

08005728 <HAL_FLASH_Program>:
{
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800572c:	4c1d      	ldr	r4, [pc, #116]	; (80057a4 <HAL_FLASH_Program+0x7c>)
 800572e:	7e24      	ldrb	r4, [r4, #24]
 8005730:	2c01      	cmp	r4, #1
 8005732:	d103      	bne.n	800573c <HAL_FLASH_Program+0x14>
 8005734:	2402      	movs	r4, #2
}
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	4698      	mov	r8, r3
 800573e:	4617      	mov	r7, r2
 8005740:	460e      	mov	r6, r1
 8005742:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8005744:	2201      	movs	r2, #1
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_FLASH_Program+0x7c>)
 8005748:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800574a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800574e:	f7ff ffb9 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005752:	4604      	mov	r4, r0
 8005754:	b998      	cbnz	r0, 800577e <HAL_FLASH_Program+0x56>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005756:	b1b5      	cbz	r5, 8005786 <HAL_FLASH_Program+0x5e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005758:	2d01      	cmp	r5, #1
 800575a:	d019      	beq.n	8005790 <HAL_FLASH_Program+0x68>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800575c:	2d02      	cmp	r5, #2
 800575e:	d01c      	beq.n	800579a <HAL_FLASH_Program+0x72>
      FLASH_Program_DoubleWord(Address, Data);
 8005760:	463a      	mov	r2, r7
 8005762:	4643      	mov	r3, r8
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff fe21 	bl	80053ac <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800576a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800576e:	f7ff ffa9 	bl	80056c4 <FLASH_WaitForLastOperation>
 8005772:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <HAL_FLASH_Program+0x80>)
 8005776:	6913      	ldr	r3, [r2, #16]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800577e:	2200      	movs	r2, #0
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <HAL_FLASH_Program+0x7c>)
 8005782:	761a      	strb	r2, [r3, #24]
  return status;
 8005784:	e7d7      	b.n	8005736 <HAL_FLASH_Program+0xe>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005786:	b2f9      	uxtb	r1, r7
 8005788:	4630      	mov	r0, r6
 800578a:	f7ff fe4b 	bl	8005424 <FLASH_Program_Byte>
 800578e:	e7ec      	b.n	800576a <HAL_FLASH_Program+0x42>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005790:	b2b9      	uxth	r1, r7
 8005792:	4630      	mov	r0, r6
 8005794:	f7ff fe34 	bl	8005400 <FLASH_Program_HalfWord>
 8005798:	e7e7      	b.n	800576a <HAL_FLASH_Program+0x42>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800579a:	4639      	mov	r1, r7
 800579c:	4630      	mov	r0, r6
 800579e:	f7ff fe1d 	bl	80053dc <FLASH_Program_Word>
 80057a2:	e7e2      	b.n	800576a <HAL_FLASH_Program+0x42>
 80057a4:	20005eac 	.word	0x20005eac
 80057a8:	40023c00 	.word	0x40023c00

080057ac <HAL_FLASH_OB_Launch>:
{
 80057ac:	b508      	push	{r3, lr}
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <HAL_FLASH_OB_Launch+0x18>)
 80057b0:	7813      	ldrb	r3, [r2, #0]
 80057b2:	f043 0302 	orr.w	r3, r3, #2
 80057b6:	7013      	strb	r3, [r2, #0]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 80057b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057bc:	f7ff ff82 	bl	80056c4 <FLASH_WaitForLastOperation>
}
 80057c0:	bd08      	pop	{r3, pc}
 80057c2:	bf00      	nop
 80057c4:	40023c14 	.word	0x40023c14

080057c8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <FLASH_MassErase+0x20>)
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	f042 0204 	orr.w	r2, r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80057e0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80057e4:	6118      	str	r0, [r3, #16]
 80057e6:	4770      	bx	lr
 80057e8:	40023c00 	.word	0x40023c00

080057ec <FLASH_OB_BOR_LevelConfig>:
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <FLASH_OB_BOR_LevelConfig+0x14>)
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 80057f4:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80057f6:	781a      	ldrb	r2, [r3, #0]
 80057f8:	4310      	orrs	r0, r2
 80057fa:	7018      	strb	r0, [r3, #0]
  
  return HAL_OK;
  
}
 80057fc:	2000      	movs	r0, #0
 80057fe:	4770      	bx	lr
 8005800:	40023c14 	.word	0x40023c14

08005804 <FLASH_OB_GetUser>:
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <FLASH_OB_GetUser+0xc>)
 8005806:	6958      	ldr	r0, [r3, #20]
}
 8005808:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40023c00 	.word	0x40023c00

08005814 <FLASH_OB_GetWRP>:
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <FLASH_OB_GetWRP+0x8>)
 8005816:	8818      	ldrh	r0, [r3, #0]
}
 8005818:	b280      	uxth	r0, r0
 800581a:	4770      	bx	lr
 800581c:	40023c16 	.word	0x40023c16

08005820 <FLASH_OB_GetRDP>:
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <FLASH_OB_GetRDP+0x20>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2bcc      	cmp	r3, #204	; 0xcc
 8005828:	d008      	beq.n	800583c <FLASH_OB_GetRDP+0x1c>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <FLASH_OB_GetRDP+0x20>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2baa      	cmp	r3, #170	; 0xaa
 8005832:	d001      	beq.n	8005838 <FLASH_OB_GetRDP+0x18>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8005834:	2055      	movs	r0, #85	; 0x55
  }

  return readstatus;
}
 8005836:	4770      	bx	lr
    readstatus = OB_RDP_LEVEL_0;
 8005838:	20aa      	movs	r0, #170	; 0xaa
 800583a:	4770      	bx	lr
    readstatus = OB_RDP_LEVEL_2;
 800583c:	20cc      	movs	r0, #204	; 0xcc
 800583e:	4770      	bx	lr
 8005840:	40023c15 	.word	0x40023c15

08005844 <FLASH_OB_GetBOR>:
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <FLASH_OB_GetBOR+0xc>)
 8005846:	7818      	ldrb	r0, [r3, #0]
}
 8005848:	f000 000c 	and.w	r0, r0, #12
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40023c14 	.word	0x40023c14

08005854 <FLASH_OB_EnableWRP>:
{
 8005854:	b510      	push	{r4, lr}
 8005856:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005858:	f24c 3050 	movw	r0, #50000	; 0xc350
 800585c:	f7ff ff32 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005860:	4603      	mov	r3, r0
 8005862:	b928      	cbnz	r0, 8005870 <FLASH_OB_EnableWRP+0x1c>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8005864:	4a03      	ldr	r2, [pc, #12]	; (8005874 <FLASH_OB_EnableWRP+0x20>)
 8005866:	8810      	ldrh	r0, [r2, #0]
 8005868:	b280      	uxth	r0, r0
 800586a:	ea20 0004 	bic.w	r0, r0, r4
 800586e:	8010      	strh	r0, [r2, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd10      	pop	{r4, pc}
 8005874:	40023c16 	.word	0x40023c16

08005878 <FLASH_OB_DisableWRP>:
{
 8005878:	b510      	push	{r4, lr}
 800587a:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800587c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005880:	f7ff ff20 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005884:	4603      	mov	r3, r0
 8005886:	b928      	cbnz	r0, 8005894 <FLASH_OB_DisableWRP+0x1c>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8005888:	4a03      	ldr	r2, [pc, #12]	; (8005898 <FLASH_OB_DisableWRP+0x20>)
 800588a:	8810      	ldrh	r0, [r2, #0]
 800588c:	b280      	uxth	r0, r0
 800588e:	b2a4      	uxth	r4, r4
 8005890:	4320      	orrs	r0, r4
 8005892:	8010      	strh	r0, [r2, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd10      	pop	{r4, pc}
 8005898:	40023c16 	.word	0x40023c16

0800589c <FLASH_OB_RDP_LevelConfig>:
{
 800589c:	b510      	push	{r4, lr}
 800589e:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058a4:	f7ff ff0e 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80058a8:	4603      	mov	r3, r0
 80058aa:	b908      	cbnz	r0, 80058b0 <FLASH_OB_RDP_LevelConfig+0x14>
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80058ac:	4a01      	ldr	r2, [pc, #4]	; (80058b4 <FLASH_OB_RDP_LevelConfig+0x18>)
 80058ae:	7014      	strb	r4, [r2, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd10      	pop	{r4, pc}
 80058b4:	40023c15 	.word	0x40023c15

080058b8 <FLASH_OB_UserConfig>:
{
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	460e      	mov	r6, r1
 80058be:	4615      	mov	r5, r2
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058c4:	f7ff fefe 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80058c8:	4603      	mov	r3, r0
 80058ca:	b938      	cbnz	r0, 80058dc <FLASH_OB_UserConfig+0x24>
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <FLASH_OB_UserConfig+0x28>)
 80058ce:	7810      	ldrb	r0, [r2, #0]
 80058d0:	f000 001f 	and.w	r0, r0, #31
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80058d4:	4330      	orrs	r0, r6
 80058d6:	4328      	orrs	r0, r5
 80058d8:	4320      	orrs	r0, r4
 80058da:	7010      	strb	r0, [r2, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	40023c14 	.word	0x40023c14

080058e4 <HAL_FLASHEx_OBProgram>:
  __HAL_LOCK(&pFlash);
 80058e4:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <HAL_FLASHEx_OBProgram+0x80>)
 80058e6:	7e1b      	ldrb	r3, [r3, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d038      	beq.n	800595e <HAL_FLASHEx_OBProgram+0x7a>
{
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80058f0:	2201      	movs	r2, #1
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <HAL_FLASHEx_OBProgram+0x80>)
 80058f4:	761a      	strb	r2, [r3, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80058f6:	6803      	ldr	r3, [r0, #0]
 80058f8:	f013 0f01 	tst.w	r3, #1
 80058fc:	d00c      	beq.n	8005918 <HAL_FLASHEx_OBProgram+0x34>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80058fe:	6843      	ldr	r3, [r0, #4]
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_FLASHEx_OBProgram+0x2a>
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8005904:	68c1      	ldr	r1, [r0, #12]
 8005906:	6880      	ldr	r0, [r0, #8]
 8005908:	f7ff ffb6 	bl	8005878 <FLASH_OB_DisableWRP>
 800590c:	e005      	b.n	800591a <HAL_FLASHEx_OBProgram+0x36>
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800590e:	68c1      	ldr	r1, [r0, #12]
 8005910:	6880      	ldr	r0, [r0, #8]
 8005912:	f7ff ff9f 	bl	8005854 <FLASH_OB_EnableWRP>
 8005916:	e000      	b.n	800591a <HAL_FLASHEx_OBProgram+0x36>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005918:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f013 0f02 	tst.w	r3, #2
 8005920:	d10b      	bne.n	800593a <HAL_FLASHEx_OBProgram+0x56>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	f013 0f04 	tst.w	r3, #4
 8005928:	d10b      	bne.n	8005942 <HAL_FLASHEx_OBProgram+0x5e>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f013 0f08 	tst.w	r3, #8
 8005930:	d111      	bne.n	8005956 <HAL_FLASHEx_OBProgram+0x72>
  __HAL_UNLOCK(&pFlash);
 8005932:	2200      	movs	r2, #0
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_FLASHEx_OBProgram+0x80>)
 8005936:	761a      	strb	r2, [r3, #24]
  return status;
 8005938:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800593a:	7c20      	ldrb	r0, [r4, #16]
 800593c:	f7ff ffae 	bl	800589c <FLASH_OB_RDP_LevelConfig>
 8005940:	e7ef      	b.n	8005922 <HAL_FLASHEx_OBProgram+0x3e>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8005942:	7e20      	ldrb	r0, [r4, #24]
 8005944:	f000 0280 	and.w	r2, r0, #128	; 0x80
 8005948:	f000 0140 	and.w	r1, r0, #64	; 0x40
 800594c:	f000 0020 	and.w	r0, r0, #32
 8005950:	f7ff ffb2 	bl	80058b8 <FLASH_OB_UserConfig>
 8005954:	e7e9      	b.n	800592a <HAL_FLASHEx_OBProgram+0x46>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8005956:	7d20      	ldrb	r0, [r4, #20]
 8005958:	f7ff ff48 	bl	80057ec <FLASH_OB_BOR_LevelConfig>
 800595c:	e7e9      	b.n	8005932 <HAL_FLASHEx_OBProgram+0x4e>
  __HAL_LOCK(&pFlash);
 800595e:	2002      	movs	r0, #2
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20005eac 	.word	0x20005eac

08005968 <HAL_FLASHEx_OBGetConfig>:
{
 8005968:	b510      	push	{r4, lr}
 800596a:	4604      	mov	r4, r0
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800596c:	230f      	movs	r3, #15
 800596e:	6003      	str	r3, [r0, #0]
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8005970:	f7ff ff50 	bl	8005814 <FLASH_OB_GetWRP>
 8005974:	60a0      	str	r0, [r4, #8]
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8005976:	f7ff ff53 	bl	8005820 <FLASH_OB_GetRDP>
 800597a:	6120      	str	r0, [r4, #16]
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800597c:	f7ff ff42 	bl	8005804 <FLASH_OB_GetUser>
 8005980:	7620      	strb	r0, [r4, #24]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8005982:	f7ff ff5f 	bl	8005844 <FLASH_OB_GetBOR>
 8005986:	6160      	str	r0, [r4, #20]
 8005988:	bd10      	pop	{r4, pc}

0800598a <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800598a:	b1f9      	cbz	r1, 80059cc <FLASH_Erase_Sector+0x42>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800598c:	2901      	cmp	r1, #1
 800598e:	d01f      	beq.n	80059d0 <FLASH_Erase_Sector+0x46>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005990:	2902      	cmp	r1, #2
 8005992:	d018      	beq.n	80059c6 <FLASH_Erase_Sector+0x3c>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005994:	f44f 7140 	mov.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <FLASH_Erase_Sector+0x4e>)
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80059ae:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80059b6:	f040 0002 	orr.w	r0, r0, #2
 80059ba:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059c2:	611a      	str	r2, [r3, #16]
 80059c4:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_WORD;
 80059c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059ca:	e7e5      	b.n	8005998 <FLASH_Erase_Sector+0xe>
     tmp_psize = FLASH_PSIZE_BYTE;
 80059cc:	2100      	movs	r1, #0
 80059ce:	e7e3      	b.n	8005998 <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80059d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059d4:	e7e0      	b.n	8005998 <FLASH_Erase_Sector+0xe>
 80059d6:	bf00      	nop
 80059d8:	40023c00 	.word	0x40023c00

080059dc <HAL_FLASHEx_Erase_IT>:
{
 80059dc:	b508      	push	{r3, lr}
  __HAL_LOCK(&pFlash);
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_FLASHEx_Erase_IT+0x64>)
 80059e0:	7e1b      	ldrb	r3, [r3, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d029      	beq.n	8005a3a <HAL_FLASHEx_Erase_IT+0x5e>
 80059e6:	2201      	movs	r2, #1
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <HAL_FLASHEx_Erase_IT+0x64>)
 80059ea:	761a      	strb	r2, [r3, #24]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <HAL_FLASHEx_Erase_IT+0x68>)
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80059f4:	611a      	str	r2, [r3, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80059fc:	611a      	str	r2, [r3, #16]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 80059fe:	22f3      	movs	r2, #243	; 0xf3
 8005a00:	60da      	str	r2, [r3, #12]
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a02:	6803      	ldr	r3, [r0, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d00d      	beq.n	8005a24 <HAL_FLASHEx_Erase_IT+0x48>
    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <HAL_FLASHEx_Erase_IT+0x64>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 8005a0e:	68c2      	ldr	r2, [r0, #12]
 8005a10:	605a      	str	r2, [r3, #4]
    pFlash.Sector = pEraseInit->Sector;
 8005a12:	6882      	ldr	r2, [r0, #8]
 8005a14:	60da      	str	r2, [r3, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 8005a16:	7c01      	ldrb	r1, [r0, #16]
 8005a18:	7219      	strb	r1, [r3, #8]
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 8005a1a:	6880      	ldr	r0, [r0, #8]
 8005a1c:	f7ff ffb5 	bl	800598a <FLASH_Erase_Sector>
  return status;
 8005a20:	2000      	movs	r0, #0
 8005a22:	bd08      	pop	{r3, pc}
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_FLASHEx_Erase_IT+0x64>)
 8005a26:	2202      	movs	r2, #2
 8005a28:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 8005a2a:	6842      	ldr	r2, [r0, #4]
 8005a2c:	611a      	str	r2, [r3, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005a2e:	6841      	ldr	r1, [r0, #4]
 8005a30:	7c00      	ldrb	r0, [r0, #16]
 8005a32:	f7ff fec9 	bl	80057c8 <FLASH_MassErase>
  return status;
 8005a36:	2000      	movs	r0, #0
 8005a38:	bd08      	pop	{r3, pc}
  __HAL_LOCK(&pFlash);
 8005a3a:	2002      	movs	r0, #2
}
 8005a3c:	bd08      	pop	{r3, pc}
 8005a3e:	bf00      	nop
 8005a40:	20005eac 	.word	0x20005eac
 8005a44:	40023c00 	.word	0x40023c00

08005a48 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <FLASH_FlushCaches+0x5c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a50:	d010      	beq.n	8005a74 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <FLASH_FlushCaches+0x5c>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a5a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a72:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <FLASH_FlushCaches+0x5c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a7c:	d010      	beq.n	8005aa0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <FLASH_FlushCaches+0x5c>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a96:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00

08005aa8 <HAL_FLASHEx_Erase>:
{
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_FLASHEx_Erase+0x8c>)
 8005aac:	7e1b      	ldrb	r3, [r3, #24]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d102      	bne.n	8005ab8 <HAL_FLASHEx_Erase+0x10>
 8005ab2:	2702      	movs	r7, #2
}
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab8:	460e      	mov	r6, r1
 8005aba:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8005abc:	2201      	movs	r2, #1
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_FLASHEx_Erase+0x8c>)
 8005ac0:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ac6:	f7ff fdfd 	bl	80056c4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005aca:	4607      	mov	r7, r0
 8005acc:	bb70      	cbnz	r0, 8005b2c <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad2:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d016      	beq.n	8005b08 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005ada:	68a5      	ldr	r5, [r4, #8]
 8005adc:	68e3      	ldr	r3, [r4, #12]
 8005ade:	68a2      	ldr	r2, [r4, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	d220      	bcs.n	8005b28 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005ae6:	7c21      	ldrb	r1, [r4, #16]
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f7ff ff4e 	bl	800598a <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005aee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005af2:	f7ff fde7 	bl	80056c4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <HAL_FLASHEx_Erase+0x90>)
 8005af8:	6913      	ldr	r3, [r2, #16]
 8005afa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005afe:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8005b00:	4607      	mov	r7, r0
 8005b02:	b980      	cbnz	r0, 8005b26 <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7e9      	b.n	8005adc <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005b08:	6861      	ldr	r1, [r4, #4]
 8005b0a:	7c20      	ldrb	r0, [r4, #16]
 8005b0c:	f7ff fe5c 	bl	80057c8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b14:	f7ff fdd6 	bl	80056c4 <FLASH_WaitForLastOperation>
 8005b18:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8005b1a:	4a07      	ldr	r2, [pc, #28]	; (8005b38 <HAL_FLASHEx_Erase+0x90>)
 8005b1c:	6913      	ldr	r3, [r2, #16]
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	6113      	str	r3, [r2, #16]
 8005b24:	e000      	b.n	8005b28 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 8005b26:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8005b28:	f7ff ff8e 	bl	8005a48 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <HAL_FLASHEx_Erase+0x8c>)
 8005b30:	761a      	strb	r2, [r3, #24]
  return status;
 8005b32:	e7bf      	b.n	8005ab4 <HAL_FLASHEx_Erase+0xc>
 8005b34:	20005eac 	.word	0x20005eac
 8005b38:	40023c00 	.word	0x40023c00

08005b3c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	f200 80df 	bhi.w	8005d02 <HAL_GPIO_Init+0x1c6>
{
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b083      	sub	sp, #12
 8005b48:	e050      	b.n	8005bec <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b4a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8005b4e:	f10c 0c08 	add.w	ip, ip, #8
 8005b52:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b56:	f003 0e07 	and.w	lr, r3, #7
 8005b5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005b5e:	260f      	movs	r6, #15
 8005b60:	fa06 f60e 	lsl.w	r6, r6, lr
 8005b64:	ea25 0506 	bic.w	r5, r5, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b68:	690e      	ldr	r6, [r1, #16]
 8005b6a:	fa06 f60e 	lsl.w	r6, r6, lr
 8005b6e:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8005b70:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
 8005b74:	e06f      	b.n	8005c56 <HAL_GPIO_Init+0x11a>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b76:	2607      	movs	r6, #7
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	fa06 f60e 	lsl.w	r6, r6, lr
 8005b80:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b82:	3202      	adds	r2, #2
 8005b84:	4e5f      	ldr	r6, [pc, #380]	; (8005d04 <HAL_GPIO_Init+0x1c8>)
 8005b86:	f846 5022 	str.w	r5, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b8a:	4a5f      	ldr	r2, [pc, #380]	; (8005d08 <HAL_GPIO_Init+0x1cc>)
 8005b8c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005b8e:	43e2      	mvns	r2, r4
 8005b90:	ea05 0602 	and.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b94:	684f      	ldr	r7, [r1, #4]
 8005b96:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005b9a:	d001      	beq.n	8005ba0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8005b9c:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->IMR = temp;
 8005ba0:	4d59      	ldr	r5, [pc, #356]	; (8005d08 <HAL_GPIO_Init+0x1cc>)
 8005ba2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8005ba4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8005ba6:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005baa:	684f      	ldr	r7, [r1, #4]
 8005bac:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005bb0:	d001      	beq.n	8005bb6 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8005bb2:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->EMR = temp;
 8005bb6:	4d54      	ldr	r5, [pc, #336]	; (8005d08 <HAL_GPIO_Init+0x1cc>)
 8005bb8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bba:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8005bbc:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bc0:	684f      	ldr	r7, [r1, #4]
 8005bc2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005bc6:	d001      	beq.n	8005bcc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8005bc8:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->RTSR = temp;
 8005bcc:	4d4e      	ldr	r5, [pc, #312]	; (8005d08 <HAL_GPIO_Init+0x1cc>)
 8005bce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8005bd0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8005bd2:	402a      	ands	r2, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bd4:	684e      	ldr	r6, [r1, #4]
 8005bd6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8005bda:	d001      	beq.n	8005be0 <HAL_GPIO_Init+0xa4>
        {
          temp |= iocurrent;
 8005bdc:	ea44 0205 	orr.w	r2, r4, r5
        }
        EXTI->FTSR = temp;
 8005be0:	4c49      	ldr	r4, [pc, #292]	; (8005d08 <HAL_GPIO_Init+0x1cc>)
 8005be2:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005be4:	3301      	adds	r3, #1
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	f200 8089 	bhi.w	8005cfe <HAL_GPIO_Init+0x1c2>
    ioposition = 0x01U << position;
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bf0:	680c      	ldr	r4, [r1, #0]
 8005bf2:	4014      	ands	r4, r2
    if(iocurrent == ioposition)
 8005bf4:	42a2      	cmp	r2, r4
 8005bf6:	d1f5      	bne.n	8005be4 <HAL_GPIO_Init+0xa8>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005bf8:	684d      	ldr	r5, [r1, #4]
 8005bfa:	1e6e      	subs	r6, r5, #1
 8005bfc:	2e01      	cmp	r6, #1
 8005bfe:	d903      	bls.n	8005c08 <HAL_GPIO_Init+0xcc>
 8005c00:	2d11      	cmp	r5, #17
 8005c02:	d001      	beq.n	8005c08 <HAL_GPIO_Init+0xcc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c04:	2d12      	cmp	r5, #18
 8005c06:	d115      	bne.n	8005c34 <HAL_GPIO_Init+0xf8>
        temp = GPIOx->OSPEEDR; 
 8005c08:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c0a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005c0e:	2703      	movs	r7, #3
 8005c10:	fa07 f70e 	lsl.w	r7, r7, lr
 8005c14:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c18:	68ce      	ldr	r6, [r1, #12]
 8005c1a:	fa06 f60e 	lsl.w	r6, r6, lr
 8005c1e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8005c20:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c22:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c24:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c28:	684d      	ldr	r5, [r1, #4]
 8005c2a:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8005c2e:	409d      	lsls	r5, r3
 8005c30:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005c32:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005c34:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c36:	005f      	lsls	r7, r3, #1
 8005c38:	2203      	movs	r2, #3
 8005c3a:	40ba      	lsls	r2, r7
 8005c3c:	43d2      	mvns	r2, r2
 8005c3e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c40:	688d      	ldr	r5, [r1, #8]
 8005c42:	40bd      	lsls	r5, r7
 8005c44:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8005c46:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c48:	684d      	ldr	r5, [r1, #4]
 8005c4a:	2d02      	cmp	r5, #2
 8005c4c:	f43f af7d 	beq.w	8005b4a <HAL_GPIO_Init+0xe>
 8005c50:	2d12      	cmp	r5, #18
 8005c52:	f43f af7a 	beq.w	8005b4a <HAL_GPIO_Init+0xe>
      temp = GPIOx->MODER;
 8005c56:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c58:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c5a:	684d      	ldr	r5, [r1, #4]
 8005c5c:	f005 0503 	and.w	r5, r5, #3
 8005c60:	40bd      	lsls	r5, r7
 8005c62:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8005c64:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c66:	684a      	ldr	r2, [r1, #4]
 8005c68:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005c6c:	d0ba      	beq.n	8005be4 <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6e:	2200      	movs	r2, #0
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <HAL_GPIO_Init+0x1d0>)
 8005c74:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8005c76:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8005c7a:	6455      	str	r5, [r2, #68]	; 0x44
 8005c7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005c82:	9201      	str	r2, [sp, #4]
 8005c84:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c86:	089a      	lsrs	r2, r3, #2
 8005c88:	1c96      	adds	r6, r2, #2
 8005c8a:	4d1e      	ldr	r5, [pc, #120]	; (8005d04 <HAL_GPIO_Init+0x1c8>)
 8005c8c:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c90:	f003 0603 	and.w	r6, r3, #3
 8005c94:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8005c98:	260f      	movs	r6, #15
 8005c9a:	fa06 f60e 	lsl.w	r6, r6, lr
 8005c9e:	ea25 0506 	bic.w	r5, r5, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ca2:	4f1b      	ldr	r7, [pc, #108]	; (8005d10 <HAL_GPIO_Init+0x1d4>)
 8005ca4:	42b8      	cmp	r0, r7
 8005ca6:	f43f af68 	beq.w	8005b7a <HAL_GPIO_Init+0x3e>
 8005caa:	4e1a      	ldr	r6, [pc, #104]	; (8005d14 <HAL_GPIO_Init+0x1d8>)
 8005cac:	42b0      	cmp	r0, r6
 8005cae:	d01a      	beq.n	8005ce6 <HAL_GPIO_Init+0x1aa>
 8005cb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cb4:	42b0      	cmp	r0, r6
 8005cb6:	d018      	beq.n	8005cea <HAL_GPIO_Init+0x1ae>
 8005cb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cbc:	42b0      	cmp	r0, r6
 8005cbe:	d016      	beq.n	8005cee <HAL_GPIO_Init+0x1b2>
 8005cc0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cc4:	42b0      	cmp	r0, r6
 8005cc6:	d014      	beq.n	8005cf2 <HAL_GPIO_Init+0x1b6>
 8005cc8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ccc:	42b0      	cmp	r0, r6
 8005cce:	d012      	beq.n	8005cf6 <HAL_GPIO_Init+0x1ba>
 8005cd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cd4:	42b0      	cmp	r0, r6
 8005cd6:	d010      	beq.n	8005cfa <HAL_GPIO_Init+0x1be>
 8005cd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cdc:	42b0      	cmp	r0, r6
 8005cde:	f43f af4a 	beq.w	8005b76 <HAL_GPIO_Init+0x3a>
 8005ce2:	2608      	movs	r6, #8
 8005ce4:	e74a      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005ce6:	2601      	movs	r6, #1
 8005ce8:	e748      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005cea:	2602      	movs	r6, #2
 8005cec:	e746      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005cee:	2603      	movs	r6, #3
 8005cf0:	e744      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005cf2:	2604      	movs	r6, #4
 8005cf4:	e742      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005cf6:	2605      	movs	r6, #5
 8005cf8:	e740      	b.n	8005b7c <HAL_GPIO_Init+0x40>
 8005cfa:	2606      	movs	r6, #6
 8005cfc:	e73e      	b.n	8005b7c <HAL_GPIO_Init+0x40>
      }
    }
  }
}
 8005cfe:	b003      	add	sp, #12
 8005d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d02:	4770      	bx	lr
 8005d04:	40013800 	.word	0x40013800
 8005d08:	40013c00 	.word	0x40013c00
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40020000 	.word	0x40020000
 8005d14:	40020400 	.word	0x40020400

08005d18 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	f200 808f 	bhi.w	8005e3e <HAL_GPIO_DeInit+0x126>
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	e02b      	b.n	8005d7c <HAL_GPIO_DeInit+0x64>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005d24:	f04f 0e07 	mov.w	lr, #7
 8005d28:	e001      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005d2a:	f04f 0e00 	mov.w	lr, #0
 8005d2e:	fa0e f505 	lsl.w	r5, lr, r5
 8005d32:	42af      	cmp	r7, r5
 8005d34:	d06a      	beq.n	8005e0c <HAL_GPIO_DeInit+0xf4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d36:	6805      	ldr	r5, [r0, #0]
 8005d38:	005e      	lsls	r6, r3, #1
 8005d3a:	2403      	movs	r4, #3
 8005d3c:	40b4      	lsls	r4, r6
 8005d3e:	43e4      	mvns	r4, r4
 8005d40:	4025      	ands	r5, r4
 8005d42:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d44:	08dd      	lsrs	r5, r3, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005d4c:	f003 0707 	and.w	r7, r3, #7
 8005d50:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8005d54:	270f      	movs	r7, #15
 8005d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8005d5a:	ea26 0607 	bic.w	r6, r6, r7
 8005d5e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d62:	68c5      	ldr	r5, [r0, #12]
 8005d64:	4025      	ands	r5, r4
 8005d66:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d68:	6845      	ldr	r5, [r0, #4]
 8005d6a:	ea25 0202 	bic.w	r2, r5, r2
 8005d6e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d70:	6882      	ldr	r2, [r0, #8]
 8005d72:	4014      	ands	r4, r2
 8005d74:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d76:	3301      	adds	r3, #1
 8005d78:	2b0f      	cmp	r3, #15
 8005d7a:	d85f      	bhi.n	8005e3c <HAL_GPIO_DeInit+0x124>
    ioposition = 0x01U << position;
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8005d80:	ea02 0401 	and.w	r4, r2, r1
    if(iocurrent == ioposition)
 8005d84:	42a2      	cmp	r2, r4
 8005d86:	d1f6      	bne.n	8005d76 <HAL_GPIO_DeInit+0x5e>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005d88:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005d8c:	f10c 0602 	add.w	r6, ip, #2
 8005d90:	4d2b      	ldr	r5, [pc, #172]	; (8005e40 <HAL_GPIO_DeInit+0x128>)
 8005d92:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005d96:	f003 0503 	and.w	r5, r3, #3
 8005d9a:	00ad      	lsls	r5, r5, #2
 8005d9c:	260f      	movs	r6, #15
 8005d9e:	40ae      	lsls	r6, r5
 8005da0:	4037      	ands	r7, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005da2:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8005e48 <HAL_GPIO_DeInit+0x130>
 8005da6:	4570      	cmp	r0, lr
 8005da8:	d0bf      	beq.n	8005d2a <HAL_GPIO_DeInit+0x12>
 8005daa:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dae:	4570      	cmp	r0, lr
 8005db0:	d01a      	beq.n	8005de8 <HAL_GPIO_DeInit+0xd0>
 8005db2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005db6:	4570      	cmp	r0, lr
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_DeInit+0xd6>
 8005dba:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dbe:	4570      	cmp	r0, lr
 8005dc0:	d018      	beq.n	8005df4 <HAL_GPIO_DeInit+0xdc>
 8005dc2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dc6:	4570      	cmp	r0, lr
 8005dc8:	d017      	beq.n	8005dfa <HAL_GPIO_DeInit+0xe2>
 8005dca:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dce:	4570      	cmp	r0, lr
 8005dd0:	d016      	beq.n	8005e00 <HAL_GPIO_DeInit+0xe8>
 8005dd2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dd6:	4570      	cmp	r0, lr
 8005dd8:	d015      	beq.n	8005e06 <HAL_GPIO_DeInit+0xee>
 8005dda:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8005dde:	4570      	cmp	r0, lr
 8005de0:	d0a0      	beq.n	8005d24 <HAL_GPIO_DeInit+0xc>
 8005de2:	f04f 0e08 	mov.w	lr, #8
 8005de6:	e7a2      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005de8:	f04f 0e01 	mov.w	lr, #1
 8005dec:	e79f      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005dee:	f04f 0e02 	mov.w	lr, #2
 8005df2:	e79c      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005df4:	f04f 0e03 	mov.w	lr, #3
 8005df8:	e799      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005dfa:	f04f 0e04 	mov.w	lr, #4
 8005dfe:	e796      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005e00:	f04f 0e05 	mov.w	lr, #5
 8005e04:	e793      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
 8005e06:	f04f 0e06 	mov.w	lr, #6
 8005e0a:	e790      	b.n	8005d2e <HAL_GPIO_DeInit+0x16>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e0c:	4d0d      	ldr	r5, [pc, #52]	; (8005e44 <HAL_GPIO_DeInit+0x12c>)
 8005e0e:	682f      	ldr	r7, [r5, #0]
 8005e10:	43e4      	mvns	r4, r4
 8005e12:	4027      	ands	r7, r4
 8005e14:	602f      	str	r7, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e16:	686f      	ldr	r7, [r5, #4]
 8005e18:	4027      	ands	r7, r4
 8005e1a:	606f      	str	r7, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e1c:	68af      	ldr	r7, [r5, #8]
 8005e1e:	4027      	ands	r7, r4
 8005e20:	60af      	str	r7, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e22:	68ef      	ldr	r7, [r5, #12]
 8005e24:	403c      	ands	r4, r7
 8005e26:	60ec      	str	r4, [r5, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e28:	4f05      	ldr	r7, [pc, #20]	; (8005e40 <HAL_GPIO_DeInit+0x128>)
 8005e2a:	f10c 0402 	add.w	r4, ip, #2
 8005e2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e32:	ea25 0606 	bic.w	r6, r5, r6
 8005e36:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
 8005e3a:	e77c      	b.n	8005d36 <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 8005e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3e:	4770      	bx	lr
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40013c00 	.word	0x40013c00
 8005e48:	40020000 	.word	0x40020000

08005e4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e4c:	6903      	ldr	r3, [r0, #16]
 8005e4e:	4219      	tst	r1, r3
 8005e50:	d101      	bne.n	8005e56 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e52:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005e54:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005e56:	2001      	movs	r0, #1
 8005e58:	4770      	bx	lr

08005e5a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e5a:	b912      	cbnz	r2, 8005e62 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e5c:	0409      	lsls	r1, r1, #16
 8005e5e:	6181      	str	r1, [r0, #24]
 8005e60:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005e62:	6181      	str	r1, [r0, #24]
 8005e64:	4770      	bx	lr

08005e66 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005e66:	6943      	ldr	r3, [r0, #20]
 8005e68:	ea31 0303 	bics.w	r3, r1, r3
 8005e6c:	d001      	beq.n	8005e72 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e6e:	6181      	str	r1, [r0, #24]
 8005e70:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e72:	0409      	lsls	r1, r1, #16
 8005e74:	6181      	str	r1, [r0, #24]
 8005e76:	4770      	bx	lr

08005e78 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e78:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8005e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e7e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	430b      	orrs	r3, r1
 8005e84:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8005e8a:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005e8c:	9b01      	ldr	r3, [sp, #4]
 8005e8e:	61c3      	str	r3, [r0, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8005e90:	69c3      	ldr	r3, [r0, #28]
 8005e92:	9301      	str	r3, [sp, #4]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8005e94:	69c3      	ldr	r3, [r0, #28]
 8005e96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005e9a:	d102      	bne.n	8005ea2 <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 8005e9c:	2001      	movs	r0, #1
  }
}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	4770      	bx	lr
    return HAL_OK;
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e7fb      	b.n	8005e9e <HAL_GPIO_LockPin+0x26>

08005ea6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005ea8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4203      	tst	r3, r0
 8005eb0:	d100      	bne.n	8005eb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8005eb2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005eb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eb8:	f7ff fff5 	bl	8005ea6 <HAL_GPIO_EXTI_Callback>
}
 8005ebc:	e7f9      	b.n	8005eb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005ebe:	bf00      	nop
 8005ec0:	40013c00 	.word	0x40013c00

08005ec4 <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8005ec4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ec6:	b99b      	cbnz	r3, 8005ef0 <I2C_MemoryTransmit_TXE_BTF+0x2c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ec8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d008      	beq.n	8005ee0 <I2C_MemoryTransmit_TXE_BTF+0x1c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ece:	6802      	ldr	r2, [r0, #0]
 8005ed0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005ed2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005ed6:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 8005ed8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005eda:	3301      	adds	r3, #1
 8005edc:	6503      	str	r3, [r0, #80]	; 0x50
 8005ede:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8005ee8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005eea:	3302      	adds	r3, #2
 8005eec:	6503      	str	r3, [r0, #80]	; 0x50
 8005eee:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8005ef0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d003      	beq.n	8005efe <I2C_MemoryTransmit_TXE_BTF+0x3a>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8005ef6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d008      	beq.n	8005f0e <I2C_MemoryTransmit_TXE_BTF+0x4a>
 8005efc:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005efe:	6802      	ldr	r2, [r0, #0]
 8005f00:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8005f06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f08:	3301      	adds	r3, #1
 8005f0a:	6503      	str	r3, [r0, #80]	; 0x50
 8005f0c:	4770      	bx	lr
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b22      	cmp	r3, #34	; 0x22
 8005f16:	d011      	beq.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x78>
    {
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b21      	cmp	r3, #33	; 0x21
 8005f20:	d1ec      	bne.n	8005efc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f22:	6803      	ldr	r3, [r0, #0]
 8005f24:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005f26:	7812      	ldrb	r2, [r2, #0]
 8005f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	6243      	str	r3, [r0, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f30:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f3a:	e7df      	b.n	8005efc <I2C_MemoryTransmit_TXE_BTF+0x38>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f3c:	6802      	ldr	r2, [r0, #0]
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	4770      	bx	lr

08005f48 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d00a      	beq.n	8005f68 <I2C_Master_SB+0x20>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f52:	6903      	ldr	r3, [r0, #16]
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f58:	d015      	beq.n	8005f86 <I2C_Master_SB+0x3e>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8005f5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d034      	beq.n	8005fca <I2C_Master_SB+0x82>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if (hi2c->EventCount == 1U)
 8005f60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d03b      	beq.n	8005fde <I2C_Master_SB+0x96>
 8005f66:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8005f68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f6a:	b92b      	cbnz	r3, 8005f78 <I2C_Master_SB+0x30>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f6c:	6802      	ldr	r2, [r0, #0]
 8005f6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f74:	6113      	str	r3, [r2, #16]
 8005f76:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f78:	6802      	ldr	r2, [r0, #0]
 8005f7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	6113      	str	r3, [r2, #16]
 8005f84:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b21      	cmp	r3, #33	; 0x21
 8005f8e:	d00f      	beq.n	8005fb0 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f90:	6802      	ldr	r2, [r0, #0]
 8005f92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f9e:	b16b      	cbz	r3, 8005fbc <I2C_Master_SB+0x74>
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	b15b      	cbz	r3, 8005fbc <I2C_Master_SB+0x74>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fa4:	6802      	ldr	r2, [r0, #0]
 8005fa6:	6853      	ldr	r3, [r2, #4]
 8005fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fac:	6053      	str	r3, [r2, #4]
 8005fae:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005fb0:	6802      	ldr	r2, [r0, #0]
 8005fb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005fb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005fb8:	6113      	str	r3, [r2, #16]
 8005fba:	e7ef      	b.n	8005f9c <I2C_Master_SB+0x54>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0d1      	beq.n	8005f66 <I2C_Master_SB+0x1e>
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ed      	bne.n	8005fa4 <I2C_Master_SB+0x5c>
 8005fc8:	e7cd      	b.n	8005f66 <I2C_Master_SB+0x1e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005fca:	6802      	ldr	r2, [r0, #0]
 8005fcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005fce:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8005fd2:	f003 0306 	and.w	r3, r3, #6
 8005fd6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005fda:	6113      	str	r3, [r2, #16]
 8005fdc:	4770      	bx	lr
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005fde:	6802      	ldr	r2, [r0, #0]
 8005fe0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005fe2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8005fe6:	f003 0306 	and.w	r3, r3, #6
 8005fea:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8005fee:	6113      	str	r3, [r2, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ff0:	e7b9      	b.n	8005f66 <I2C_Master_SB+0x1e>

08005ff2 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ff2:	6802      	ldr	r2, [r0, #0]
 8005ff4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005ffa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ffc:	b13b      	cbz	r3, 800600e <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	b14b      	cbz	r3, 8006016 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006002:	6802      	ldr	r2, [r0, #0]
 8006004:	6853      	ldr	r3, [r2, #4]
 8006006:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800600a:	6053      	str	r3, [r2, #4]
 800600c:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800600e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006010:	2a00      	cmp	r2, #0
 8006012:	d1f4      	bne.n	8005ffe <I2C_Master_ADD10+0xc>
 8006014:	e7fa      	b.n	800600c <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006016:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f1      	bne.n	8006002 <I2C_Master_ADD10+0x10>
 800601e:	e7f5      	b.n	800600c <I2C_Master_ADD10+0x1a>

08006020 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006020:	b410      	push	{r4}
 8006022:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006024:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006028:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800602a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800602c:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800602e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b22      	cmp	r3, #34	; 0x22
 8006036:	d00b      	beq.n	8006050 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006038:	2300      	movs	r3, #0
 800603a:	9309      	str	r3, [sp, #36]	; 0x24
 800603c:	6803      	ldr	r3, [r0, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	9209      	str	r2, [sp, #36]	; 0x24
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	9309      	str	r3, [sp, #36]	; 0x24
 8006046:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8006048:	b00b      	add	sp, #44	; 0x2c
 800604a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800604e:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006050:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006052:	b90b      	cbnz	r3, 8006058 <I2C_Master_ADDR+0x38>
 8006054:	2a40      	cmp	r2, #64	; 0x40
 8006056:	d017      	beq.n	8006088 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006058:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800605a:	b91b      	cbnz	r3, 8006064 <I2C_Master_ADDR+0x44>
 800605c:	6903      	ldr	r3, [r0, #16]
 800605e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006062:	d019      	beq.n	8006098 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8006064:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d125      	bne.n	80060b8 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606c:	9302      	str	r3, [sp, #8]
 800606e:	6803      	ldr	r3, [r0, #0]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	9202      	str	r2, [sp, #8]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006080:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	6503      	str	r3, [r0, #80]	; 0x50
 8006086:	e7df      	b.n	8006048 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	6803      	ldr	r3, [r0, #0]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	9200      	str	r2, [sp, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	e7d7      	b.n	8006048 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006098:	2300      	movs	r3, #0
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	6803      	ldr	r3, [r0, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	9201      	str	r2, [sp, #4]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	9201      	str	r2, [sp, #4]
 80060a6:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80060b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80060b2:	3301      	adds	r3, #1
 80060b4:	6503      	str	r3, [r0, #80]	; 0x50
 80060b6:	e7c7      	b.n	8006048 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 80060b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d025      	beq.n	800610c <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 80060c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d07b      	beq.n	80061c0 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c8:	6802      	ldr	r2, [r0, #0]
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060d0:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80060da:	d00e      	beq.n	80060fa <I2C_Master_ADDR+0xda>
 80060dc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80060e0:	d007      	beq.n	80060f2 <I2C_Master_ADDR+0xd2>
 80060e2:	2901      	cmp	r1, #1
 80060e4:	d005      	beq.n	80060f2 <I2C_Master_ADDR+0xd2>
 80060e6:	2908      	cmp	r1, #8
 80060e8:	d003      	beq.n	80060f2 <I2C_Master_ADDR+0xd2>
 80060ea:	2910      	cmp	r1, #16
 80060ec:	d001      	beq.n	80060f2 <I2C_Master_ADDR+0xd2>
 80060ee:	2920      	cmp	r1, #32
 80060f0:	d103      	bne.n	80060fa <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fa:	2300      	movs	r3, #0
 80060fc:	9308      	str	r3, [sp, #32]
 80060fe:	6803      	ldr	r3, [r0, #0]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	9208      	str	r2, [sp, #32]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	9b08      	ldr	r3, [sp, #32]
 800610a:	e7ba      	b.n	8006082 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800610c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8006110:	d011      	beq.n	8006136 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006112:	2908      	cmp	r1, #8
 8006114:	d034      	beq.n	8006180 <I2C_Master_ADDR+0x160>
 8006116:	2920      	cmp	r1, #32
 8006118:	d032      	beq.n	8006180 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800611a:	2c12      	cmp	r4, #18
 800611c:	d02e      	beq.n	800617c <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800611e:	2904      	cmp	r1, #4
 8006120:	d040      	beq.n	80061a4 <I2C_Master_ADDR+0x184>
 8006122:	2902      	cmp	r1, #2
 8006124:	d03e      	beq.n	80061a4 <I2C_Master_ADDR+0x184>
 8006126:	2910      	cmp	r1, #16
 8006128:	d03c      	beq.n	80061a4 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e03b      	b.n	80061ae <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	6802      	ldr	r2, [r0, #0]
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613e:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006148:	d00c      	beq.n	8006164 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006152:	2300      	movs	r3, #0
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	9203      	str	r2, [sp, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	e78e      	b.n	8006082 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006164:	2200      	movs	r2, #0
 8006166:	9204      	str	r2, [sp, #16]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	9204      	str	r2, [sp, #16]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	9204      	str	r2, [sp, #16]
 8006170:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e782      	b.n	8006082 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800617c:	2901      	cmp	r1, #1
 800617e:	d0ce      	beq.n	800611e <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006180:	6802      	ldr	r2, [r0, #0]
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006188:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618a:	2300      	movs	r3, #0
 800618c:	9306      	str	r3, [sp, #24]
 800618e:	6803      	ldr	r3, [r0, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	9206      	str	r2, [sp, #24]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	9206      	str	r2, [sp, #24]
 8006198:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e76e      	b.n	8006082 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a4:	6802      	ldr	r2, [r0, #0]
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ac:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ae:	2300      	movs	r3, #0
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	6803      	ldr	r3, [r0, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	9205      	str	r2, [sp, #20]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	9b05      	ldr	r3, [sp, #20]
 80061be:	e760      	b.n	8006082 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061c0:	2904      	cmp	r1, #4
 80061c2:	d00e      	beq.n	80061e2 <I2C_Master_ADDR+0x1c2>
 80061c4:	2902      	cmp	r1, #2
 80061c6:	d00c      	beq.n	80061e2 <I2C_Master_ADDR+0x1c2>
 80061c8:	2910      	cmp	r1, #16
 80061ca:	d00a      	beq.n	80061e2 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061cc:	6802      	ldr	r2, [r0, #0]
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d4:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061d6:	6802      	ldr	r2, [r0, #0]
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	e004      	b.n	80061ec <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	6802      	ldr	r2, [r0, #0]
 80061e4:	6813      	ldr	r3, [r2, #0]
 80061e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ea:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061ec:	6803      	ldr	r3, [r0, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80061f4:	d00e      	beq.n	8006214 <I2C_Master_ADDR+0x1f4>
 80061f6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80061fa:	d007      	beq.n	800620c <I2C_Master_ADDR+0x1ec>
 80061fc:	2901      	cmp	r1, #1
 80061fe:	d005      	beq.n	800620c <I2C_Master_ADDR+0x1ec>
 8006200:	2908      	cmp	r1, #8
 8006202:	d003      	beq.n	800620c <I2C_Master_ADDR+0x1ec>
 8006204:	2910      	cmp	r1, #16
 8006206:	d001      	beq.n	800620c <I2C_Master_ADDR+0x1ec>
 8006208:	2920      	cmp	r1, #32
 800620a:	d103      	bne.n	8006214 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006212:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006214:	2300      	movs	r3, #0
 8006216:	9307      	str	r3, [sp, #28]
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	9207      	str	r2, [sp, #28]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	9307      	str	r3, [sp, #28]
 8006222:	9b07      	ldr	r3, [sp, #28]
 8006224:	e72d      	b.n	8006082 <I2C_Master_ADDR+0x62>

08006226 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006226:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	b15b      	cbz	r3, 8006244 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006234:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006236:	3301      	adds	r3, #1
 8006238:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800623a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29b      	uxth	r3, r3
 8006242:	8543      	strh	r3, [r0, #42]	; 0x2a
 8006244:	4770      	bx	lr

08006246 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006246:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	b15b      	cbz	r3, 8006264 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800624e:	6802      	ldr	r2, [r0, #0]
 8006250:	6912      	ldr	r2, [r2, #16]
 8006252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006254:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006256:	3301      	adds	r3, #1
 8006258:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800625a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29b      	uxth	r3, r3
 8006262:	8543      	strh	r3, [r0, #42]	; 0x2a
 8006264:	4770      	bx	lr

08006266 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800626e:	d011      	beq.n	8006294 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006276:	2300      	movs	r3, #0
 8006278:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800627a:	2220      	movs	r2, #32
 800627c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006280:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006284:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006286:	f042 0204 	orr.w	r2, r2, #4
 800628a:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8006290:	2001      	movs	r0, #1
 8006292:	4770      	bx	lr
  }
  return HAL_OK;
 8006294:	2000      	movs	r0, #0
}
 8006296:	4770      	bx	lr

08006298 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006298:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800629a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800629e:	d004      	beq.n	80062aa <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80062a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062a6:	d003      	beq.n	80062b0 <I2C_ConvertOtherXferOptions+0x18>
 80062a8:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062aa:	2301      	movs	r3, #1
 80062ac:	62c3      	str	r3, [r0, #44]	; 0x2c
 80062ae:	4770      	bx	lr
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062b0:	2308      	movs	r3, #8
 80062b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062b4:	e7f8      	b.n	80062a8 <I2C_ConvertOtherXferOptions+0x10>

080062b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80062b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b8:	4606      	mov	r6, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	4617      	mov	r7, r2
 80062be:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c0:	e022      	b.n	8006308 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c2:	f7fb f89f 	bl	8001404 <HAL_GetTick>
 80062c6:	9b06      	ldr	r3, [sp, #24]
 80062c8:	1ac0      	subs	r0, r0, r3
 80062ca:	4285      	cmp	r5, r0
 80062cc:	d300      	bcc.n	80062d0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80062ce:	b9dd      	cbnz	r5, 8006308 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062d4:	2220      	movs	r2, #32
 80062d6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062da:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062de:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80062e0:	f042 0220 	orr.w	r2, r2, #32
 80062e4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80062e6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80062ea:	2001      	movs	r0, #1
 80062ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ee:	6833      	ldr	r3, [r6, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	ea24 0303 	bic.w	r3, r4, r3
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	fab3 f383 	clz	r3, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	42bb      	cmp	r3, r7
 8006300:	d10f      	bne.n	8006322 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8006302:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006306:	d1dc      	bne.n	80062c2 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006308:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800630c:	2b01      	cmp	r3, #1
 800630e:	d0ee      	beq.n	80062ee <I2C_WaitOnFlagUntilTimeout+0x38>
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	ea24 0303 	bic.w	r3, r4, r3
 8006318:	b29b      	uxth	r3, r3
 800631a:	fab3 f383 	clz	r3, r3
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	e7ed      	b.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8006322:	2000      	movs	r0, #0
}
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8006326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	4616      	mov	r6, r2
 800632e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006330:	e03c      	b.n	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006338:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006340:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006346:	2220      	movs	r2, #32
 8006348:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006350:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006352:	f042 0204 	orr.w	r2, r2, #4
 8006356:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006358:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800635c:	2001      	movs	r0, #1
 800635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7fb f850 	bl	8001404 <HAL_GetTick>
 8006364:	1bc0      	subs	r0, r0, r7
 8006366:	4286      	cmp	r6, r0
 8006368:	d300      	bcc.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800636a:	b9fe      	cbnz	r6, 80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800636c:	2300      	movs	r3, #0
 800636e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006370:	2220      	movs	r2, #32
 8006372:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006376:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800637c:	f042 0220 	orr.w	r2, r2, #32
 8006380:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006382:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006386:	2001      	movs	r0, #1
 8006388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	ea25 0303 	bic.w	r3, r5, r3
 8006392:	b29b      	uxth	r3, r3
 8006394:	3300      	adds	r3, #0
 8006396:	bf18      	it	ne
 8006398:	2301      	movne	r3, #1
 800639a:	b1a3      	cbz	r3, 80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80063a4:	d1c5      	bne.n	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80063aa:	d1d9      	bne.n	8006360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ac:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d0ea      	beq.n	800638a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	ea25 0303 	bic.w	r3, r5, r3
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3300      	adds	r3, #0
 80063c0:	bf18      	it	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	e7e9      	b.n	800639a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80063c6:	2000      	movs	r0, #0
}
 80063c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063ca <I2C_MasterRequestWrite>:
{
 80063ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063cc:	b083      	sub	sp, #12
 80063ce:	4604      	mov	r4, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	4615      	mov	r5, r2
 80063d4:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d00d      	beq.n	80063f8 <I2C_MasterRequestWrite+0x2e>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d00b      	beq.n	80063f8 <I2C_MasterRequestWrite+0x2e>
 80063e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e4:	d008      	beq.n	80063f8 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80063e8:	2b12      	cmp	r3, #18
 80063ea:	d10a      	bne.n	8006402 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ec:	6802      	ldr	r2, [r0, #0]
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e004      	b.n	8006402 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006400:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	9600      	str	r6, [sp, #0]
 8006404:	462b      	mov	r3, r5
 8006406:	2200      	movs	r2, #0
 8006408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800640c:	4620      	mov	r0, r4
 800640e:	f7ff ff52 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006412:	b158      	cbz	r0, 800642c <I2C_MasterRequestWrite+0x62>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f413 7f80 	tst.w	r3, #256	; 0x100
 800641c:	d02b      	beq.n	8006476 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800641e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006422:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
}
 8006426:	4618      	mov	r0, r3
 8006428:	b003      	add	sp, #12
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006432:	d011      	beq.n	8006458 <I2C_MasterRequestWrite+0x8e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	11fb      	asrs	r3, r7, #7
 8006438:	f003 0306 	and.w	r3, r3, #6
 800643c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8006440:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006442:	4633      	mov	r3, r6
 8006444:	462a      	mov	r2, r5
 8006446:	490e      	ldr	r1, [pc, #56]	; (8006480 <I2C_MasterRequestWrite+0xb6>)
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff ff6c 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800644e:	b9a0      	cbnz	r0, 800647a <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	b2ff      	uxtb	r7, r7
 8006454:	611f      	str	r7, [r3, #16]
 8006456:	e003      	b.n	8006460 <I2C_MasterRequestWrite+0x96>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800645e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006460:	4633      	mov	r3, r6
 8006462:	462a      	mov	r2, r5
 8006464:	4907      	ldr	r1, [pc, #28]	; (8006484 <I2C_MasterRequestWrite+0xba>)
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff ff5d 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d0d9      	beq.n	8006426 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e7d7      	b.n	8006426 <I2C_MasterRequestWrite+0x5c>
    return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e7d5      	b.n	8006426 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e7d3      	b.n	8006426 <I2C_MasterRequestWrite+0x5c>
 800647e:	bf00      	nop
 8006480:	00010008 	.word	0x00010008
 8006484:	00010002 	.word	0x00010002

08006488 <I2C_MasterRequestRead>:
{
 8006488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	4604      	mov	r4, r0
 8006490:	460d      	mov	r5, r1
 8006492:	4616      	mov	r6, r2
 8006494:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006496:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006498:	6801      	ldr	r1, [r0, #0]
 800649a:	680b      	ldr	r3, [r1, #0]
 800649c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a0:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064a2:	2a08      	cmp	r2, #8
 80064a4:	d00d      	beq.n	80064c2 <I2C_MasterRequestRead+0x3a>
 80064a6:	2a01      	cmp	r2, #1
 80064a8:	d00b      	beq.n	80064c2 <I2C_MasterRequestRead+0x3a>
 80064aa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80064ae:	d008      	beq.n	80064c2 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80064b2:	2b11      	cmp	r3, #17
 80064b4:	d10a      	bne.n	80064cc <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b6:	6802      	ldr	r2, [r0, #0]
 80064b8:	6813      	ldr	r3, [r2, #0]
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e004      	b.n	80064cc <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ca:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064cc:	9700      	str	r7, [sp, #0]
 80064ce:	4633      	mov	r3, r6
 80064d0:	2200      	movs	r2, #0
 80064d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff feed 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80064dc:	b160      	cbz	r0, 80064f8 <I2C_MasterRequestRead+0x70>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064e6:	d05b      	beq.n	80065a0 <I2C_MasterRequestRead+0x118>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ec:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	b004      	add	sp, #16
 80064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064fe:	d010      	beq.n	8006522 <I2C_MasterRequestRead+0x9a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8006506:	f008 0806 	and.w	r8, r8, #6
 800650a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800650e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006510:	463b      	mov	r3, r7
 8006512:	4632      	mov	r2, r6
 8006514:	4924      	ldr	r1, [pc, #144]	; (80065a8 <I2C_MasterRequestRead+0x120>)
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff ff05 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800651c:	b188      	cbz	r0, 8006542 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e7e6      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	f045 0501 	orr.w	r5, r5, #1
 8006528:	b2ed      	uxtb	r5, r5
 800652a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652c:	463b      	mov	r3, r7
 800652e:	4632      	mov	r2, r6
 8006530:	491e      	ldr	r1, [pc, #120]	; (80065ac <I2C_MasterRequestRead+0x124>)
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff fef7 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2800      	cmp	r0, #0
 800653c:	d0d8      	beq.n	80064f0 <I2C_MasterRequestRead+0x68>
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e7d6      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	b2ed      	uxtb	r5, r5
 8006546:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006548:	463b      	mov	r3, r7
 800654a:	4632      	mov	r2, r6
 800654c:	4917      	ldr	r1, [pc, #92]	; (80065ac <I2C_MasterRequestRead+0x124>)
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff fee9 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006554:	b108      	cbz	r0, 800655a <I2C_MasterRequestRead+0xd2>
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e7ca      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655a:	2200      	movs	r2, #0
 800655c:	9203      	str	r2, [sp, #12]
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6959      	ldr	r1, [r3, #20]
 8006562:	9103      	str	r1, [sp, #12]
 8006564:	6999      	ldr	r1, [r3, #24]
 8006566:	9103      	str	r1, [sp, #12]
 8006568:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006570:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006572:	9700      	str	r7, [sp, #0]
 8006574:	4633      	mov	r3, r6
 8006576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800657a:	4620      	mov	r0, r4
 800657c:	f7ff fe9b 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006580:	b148      	cbz	r0, 8006596 <I2C_MasterRequestRead+0x10e>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f413 7f80 	tst.w	r3, #256	; 0x100
 800658a:	d00b      	beq.n	80065a4 <I2C_MasterRequestRead+0x11c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800658c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006590:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e7ac      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800659c:	6113      	str	r3, [r2, #16]
 800659e:	e7c5      	b.n	800652c <I2C_MasterRequestRead+0xa4>
    return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e7a5      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e7a3      	b.n	80064f0 <I2C_MasterRequestRead+0x68>
 80065a8:	00010008 	.word	0x00010008
 80065ac:	00010002 	.word	0x00010002

080065b0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065c0:	d11c      	bne.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7ff fe4f 	bl	8006266 <I2C_IsAcknowledgeFailed>
 80065c8:	b9d0      	cbnz	r0, 8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80065ce:	d0f3      	beq.n	80065b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d0:	f7fa ff18 	bl	8001404 <HAL_GetTick>
 80065d4:	1b80      	subs	r0, r0, r6
 80065d6:	4285      	cmp	r5, r0
 80065d8:	d301      	bcc.n	80065de <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80065da:	2d00      	cmp	r5, #0
 80065dc:	d1ec      	bne.n	80065b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	2300      	movs	r3, #0
 80065e0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	2220      	movs	r2, #32
 80065e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80065ee:	f042 0220 	orr.w	r2, r2, #32
 80065f2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80065f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80065f8:	2001      	movs	r0, #1
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80065fc:	2000      	movs	r0, #0
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006600:	2001      	movs	r0, #1
}
 8006602:	bd70      	pop	{r4, r5, r6, pc}

08006604 <I2C_RequestMemoryWrite>:
{
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	4604      	mov	r4, r0
 800660c:	4688      	mov	r8, r1
 800660e:	4616      	mov	r6, r2
 8006610:	461f      	mov	r7, r3
 8006612:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006614:	6802      	ldr	r2, [r0, #0]
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800661e:	9500      	str	r5, [sp, #0]
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	2200      	movs	r2, #0
 8006624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006628:	f7ff fe45 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 800662c:	b160      	cbz	r0, 8006648 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006636:	d04f      	beq.n	80066d8 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
}
 8006640:	4618      	mov	r0, r3
 8006642:	b004      	add	sp, #16
 8006644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 800664e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006650:	462b      	mov	r3, r5
 8006652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006654:	4921      	ldr	r1, [pc, #132]	; (80066dc <I2C_RequestMemoryWrite+0xd8>)
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff fe65 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800665c:	b108      	cbz	r0, 8006662 <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e7ee      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	9303      	str	r3, [sp, #12]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	9203      	str	r2, [sp, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006672:	462a      	mov	r2, r5
 8006674:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff ff9a 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	b158      	cbz	r0, 8006698 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006682:	2b04      	cmp	r3, #4
 8006684:	d001      	beq.n	800668a <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e7da      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	6813      	ldr	r3, [r2, #0]
 800668e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006692:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e7d3      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006698:	2f01      	cmp	r7, #1
 800669a:	d00e      	beq.n	80066ba <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	0a32      	lsrs	r2, r6, #8
 80066a0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	462a      	mov	r2, r5
 80066a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff82 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	b178      	cbz	r0, 80066d0 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d005      	beq.n	80066c2 <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e7c2      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	b2f6      	uxtb	r6, r6
 80066be:	6116      	str	r6, [r2, #16]
 80066c0:	e7be      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	6813      	ldr	r3, [r2, #0]
 80066c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ca:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e7b7      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	b2f6      	uxtb	r6, r6
 80066d4:	6116      	str	r6, [r2, #16]
 80066d6:	e7b3      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e7b1      	b.n	8006640 <I2C_RequestMemoryWrite+0x3c>
 80066dc:	00010002 	.word	0x00010002

080066e0 <I2C_RequestMemoryRead>:
{
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	4604      	mov	r4, r0
 80066e8:	460e      	mov	r6, r1
 80066ea:	4617      	mov	r7, r2
 80066ec:	4698      	mov	r8, r3
 80066ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f0:	6802      	ldr	r2, [r0, #0]
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066fa:	6802      	ldr	r2, [r0, #0]
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006702:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006704:	9500      	str	r5, [sp, #0]
 8006706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006708:	2200      	movs	r2, #0
 800670a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800670e:	f7ff fdd2 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006712:	b168      	cbz	r0, 8006730 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f413 7f80 	tst.w	r3, #256	; 0x100
 800671c:	f000 8089 	beq.w	8006832 <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006724:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
}
 8006728:	4618      	mov	r0, r3
 800672a:	b004      	add	sp, #16
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	b2f6      	uxtb	r6, r6
 8006734:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8006738:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800673a:	462b      	mov	r3, r5
 800673c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673e:	493f      	ldr	r1, [pc, #252]	; (800683c <I2C_RequestMemoryRead+0x15c>)
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fdf0 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006746:	b108      	cbz	r0, 800674c <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e7ed      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674c:	2300      	movs	r3, #0
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	9203      	str	r2, [sp, #12]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675c:	462a      	mov	r2, r5
 800675e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff ff25 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006766:	b158      	cbz	r0, 8006780 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800676a:	2b04      	cmp	r3, #4
 800676c:	d001      	beq.n	8006772 <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e7da      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	6813      	ldr	r3, [r2, #0]
 8006776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800677a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e7d3      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006780:	f1b8 0f01 	cmp.w	r8, #1
 8006784:	d00d      	beq.n	80067a2 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0a3a      	lsrs	r2, r7, #8
 800678a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678c:	462a      	mov	r2, r5
 800678e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff0d 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006796:	b1c8      	cbz	r0, 80067cc <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800679a:	2b04      	cmp	r3, #4
 800679c:	d00f      	beq.n	80067be <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e7c2      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	b2ff      	uxtb	r7, r7
 80067a6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a8:	462a      	mov	r2, r5
 80067aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff feff 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067b2:	b1b0      	cbz	r0, 80067e2 <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d00c      	beq.n	80067d4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7b4      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067c6:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7ad      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	b2ff      	uxtb	r7, r7
 80067d0:	611f      	str	r7, [r3, #16]
 80067d2:	e7e9      	b.n	80067a8 <I2C_RequestMemoryRead+0xc8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067dc:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e7a2      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	6813      	ldr	r3, [r2, #0]
 80067e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ea:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ec:	9500      	str	r5, [sp, #0]
 80067ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f0:	2200      	movs	r2, #0
 80067f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff fd5d 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80067fc:	b148      	cbz	r0, 8006812 <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006806:	d016      	beq.n	8006836 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800680c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e78a      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	f046 0601 	orr.w	r6, r6, #1
 8006818:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800681a:	462b      	mov	r3, r5
 800681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681e:	4907      	ldr	r1, [pc, #28]	; (800683c <I2C_RequestMemoryRead+0x15c>)
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff fd80 	bl	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	f43f af7d 	beq.w	8006728 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e77a      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e778      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e776      	b.n	8006728 <I2C_RequestMemoryRead+0x48>
 800683a:	bf00      	nop
 800683c:	00010002 	.word	0x00010002

08006840 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	460d      	mov	r5, r1
 8006846:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f013 0f04 	tst.w	r3, #4
 8006850:	d11c      	bne.n	800688c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff fd07 	bl	8006266 <I2C_IsAcknowledgeFailed>
 8006858:	b9d0      	cbnz	r0, 8006890 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800685a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800685e:	d0f3      	beq.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fa fdd0 	bl	8001404 <HAL_GetTick>
 8006864:	1b80      	subs	r0, r0, r6
 8006866:	4285      	cmp	r5, r0
 8006868:	d301      	bcc.n	800686e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800686a:	2d00      	cmp	r5, #0
 800686c:	d1ec      	bne.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800686e:	2300      	movs	r3, #0
 8006870:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006872:	2220      	movs	r2, #32
 8006874:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006878:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800687e:	f042 0220 	orr.w	r2, r2, #32
 8006882:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006884:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006888:	2001      	movs	r0, #1
 800688a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800688c:	2000      	movs	r0, #0
 800688e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006890:	2001      	movs	r0, #1
}
 8006892:	bd70      	pop	{r4, r5, r6, pc}

08006894 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	4605      	mov	r5, r0
 8006898:	460c      	mov	r4, r1
 800689a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068a4:	d129      	bne.n	80068fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	f012 0f10 	tst.w	r2, #16
 80068ac:	d115      	bne.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fa fda9 	bl	8001404 <HAL_GetTick>
 80068b2:	1b80      	subs	r0, r0, r6
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d801      	bhi.n	80068bc <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80068b8:	2c00      	cmp	r4, #0
 80068ba:	d1ef      	bne.n	800689c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068bc:	2300      	movs	r3, #0
 80068be:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068c0:	2220      	movs	r2, #32
 80068c2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80068cc:	f042 0220 	orr.w	r2, r2, #32
 80068d0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80068d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068da:	f06f 0210 	mvn.w	r2, #16
 80068de:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	2220      	movs	r2, #32
 80068e6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ea:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80068f0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80068f2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80068f6:	2001      	movs	r0, #1
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80068fa:	2000      	movs	r0, #0
}
 80068fc:	bd70      	pop	{r4, r5, r6, pc}

080068fe <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f013 0f10 	tst.w	r3, #16
 800690e:	d119      	bne.n	8006944 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff fca8 	bl	8006266 <I2C_IsAcknowledgeFailed>
 8006916:	b9b8      	cbnz	r0, 8006948 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fa fd74 	bl	8001404 <HAL_GetTick>
 800691c:	1b80      	subs	r0, r0, r6
 800691e:	42a8      	cmp	r0, r5
 8006920:	d801      	bhi.n	8006926 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
 8006922:	2d00      	cmp	r5, #0
 8006924:	d1ef      	bne.n	8006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006926:	2300      	movs	r3, #0
 8006928:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800692a:	2220      	movs	r2, #32
 800692c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006936:	f042 0220 	orr.w	r2, r2, #32
 800693a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800693c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8006940:	2001      	movs	r0, #1
 8006942:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006944:	2000      	movs	r0, #0
 8006946:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006948:	2001      	movs	r0, #1
}
 800694a:	bd70      	pop	{r4, r5, r6, pc}
{
 800694c:	4770      	bx	lr

0800694e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800694e:	2800      	cmp	r0, #0
 8006950:	f000 80c8 	beq.w	8006ae4 <HAL_I2C_Init+0x196>
{
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006958:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800695c:	2b00      	cmp	r3, #0
 800695e:	d075      	beq.n	8006a4c <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006960:	2324      	movs	r3, #36	; 0x24
 8006962:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	6813      	ldr	r3, [r2, #0]
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	6813      	ldr	r3, [r2, #0]
 800697e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006982:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006984:	f004 fcc8 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006988:	6862      	ldr	r2, [r4, #4]
 800698a:	4b58      	ldr	r3, [pc, #352]	; (8006aec <HAL_I2C_Init+0x19e>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d862      	bhi.n	8006a56 <HAL_I2C_Init+0x108>
 8006990:	4b57      	ldr	r3, [pc, #348]	; (8006af0 <HAL_I2C_Init+0x1a2>)
 8006992:	4298      	cmp	r0, r3
 8006994:	bf8c      	ite	hi
 8006996:	2300      	movhi	r3, #0
 8006998:	2301      	movls	r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 80a4 	bne.w	8006ae8 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 80069a0:	4b54      	ldr	r3, [pc, #336]	; (8006af4 <HAL_I2C_Init+0x1a6>)
 80069a2:	fba3 2300 	umull	r2, r3, r3, r0
 80069a6:	0c9a      	lsrs	r2, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069a8:	6821      	ldr	r1, [r4, #0]
 80069aa:	684b      	ldr	r3, [r1, #4]
 80069ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069b4:	6825      	ldr	r5, [r4, #0]
 80069b6:	6a29      	ldr	r1, [r5, #32]
 80069b8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80069bc:	6866      	ldr	r6, [r4, #4]
 80069be:	4b4b      	ldr	r3, [pc, #300]	; (8006aec <HAL_I2C_Init+0x19e>)
 80069c0:	429e      	cmp	r6, r3
 80069c2:	d84e      	bhi.n	8006a62 <HAL_I2C_Init+0x114>
 80069c4:	1c53      	adds	r3, r2, #1
 80069c6:	430b      	orrs	r3, r1
 80069c8:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	69d1      	ldr	r1, [r2, #28]
 80069ce:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80069d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	4d44      	ldr	r5, [pc, #272]	; (8006aec <HAL_I2C_Init+0x19e>)
 80069da:	42ab      	cmp	r3, r5
 80069dc:	d84b      	bhi.n	8006a76 <HAL_I2C_Init+0x128>
 80069de:	3801      	subs	r0, #1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e6:	3301      	adds	r3, #1
 80069e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	bf38      	it	cc
 80069f0:	2304      	movcc	r3, #4
 80069f2:	430b      	orrs	r3, r1
 80069f4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069f6:	6821      	ldr	r1, [r4, #0]
 80069f8:	680b      	ldr	r3, [r1, #0]
 80069fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069fe:	69e2      	ldr	r2, [r4, #28]
 8006a00:	6a20      	ldr	r0, [r4, #32]
 8006a02:	4302      	orrs	r2, r0
 8006a04:	4313      	orrs	r3, r2
 8006a06:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a08:	6821      	ldr	r1, [r4, #0]
 8006a0a:	688b      	ldr	r3, [r1, #8]
 8006a0c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	68e0      	ldr	r0, [r4, #12]
 8006a18:	4302      	orrs	r2, r0
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a1e:	6821      	ldr	r1, [r4, #0]
 8006a20:	68cb      	ldr	r3, [r1, #12]
 8006a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a26:	6962      	ldr	r2, [r4, #20]
 8006a28:	69a0      	ldr	r0, [r4, #24]
 8006a2a:	4302      	orrs	r2, r0
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	2320      	movs	r3, #32
 8006a40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8006a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006a4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006a50:	f7f9 ff76 	bl	8000940 <HAL_I2C_MspInit>
 8006a54:	e784      	b.n	8006960 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a56:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_I2C_Init+0x1aa>)
 8006a58:	4298      	cmp	r0, r3
 8006a5a:	bf8c      	ite	hi
 8006a5c:	2300      	movhi	r3, #0
 8006a5e:	2301      	movls	r3, #1
 8006a60:	e79b      	b.n	800699a <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a62:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006a66:	fb03 f302 	mul.w	r3, r3, r2
 8006a6a:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_I2C_Init+0x1ae>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	099b      	lsrs	r3, r3, #6
 8006a72:	3301      	adds	r3, #1
 8006a74:	e7a7      	b.n	80069c6 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a76:	68a6      	ldr	r6, [r4, #8]
 8006a78:	b9be      	cbnz	r6, 8006aaa <HAL_I2C_Init+0x15c>
 8006a7a:	1e45      	subs	r5, r0, #1
 8006a7c:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8006a80:	fbb5 f5f7 	udiv	r5, r5, r7
 8006a84:	3501      	adds	r5, #1
 8006a86:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8006a8a:	fab5 f585 	clz	r5, r5
 8006a8e:	096d      	lsrs	r5, r5, #5
 8006a90:	bb35      	cbnz	r5, 8006ae0 <HAL_I2C_Init+0x192>
 8006a92:	b9c6      	cbnz	r6, 8006ac6 <HAL_I2C_Init+0x178>
 8006a94:	3801      	subs	r0, #1
 8006a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa8:	e7a3      	b.n	80069f2 <HAL_I2C_Init+0xa4>
 8006aaa:	1e45      	subs	r5, r0, #1
 8006aac:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8006ab0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8006ab4:	fbb5 f5f7 	udiv	r5, r5, r7
 8006ab8:	3501      	adds	r5, #1
 8006aba:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8006abe:	fab5 f585 	clz	r5, r5
 8006ac2:	096d      	lsrs	r5, r5, #5
 8006ac4:	e7e4      	b.n	8006a90 <HAL_I2C_Init+0x142>
 8006ac6:	3801      	subs	r0, #1
 8006ac8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ade:	e788      	b.n	80069f2 <HAL_I2C_Init+0xa4>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e786      	b.n	80069f2 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	4770      	bx	lr
    return HAL_ERROR;
 8006ae8:	2001      	movs	r0, #1
}
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aec:	000186a0 	.word	0x000186a0
 8006af0:	001e847f 	.word	0x001e847f
 8006af4:	431bde83 	.word	0x431bde83
 8006af8:	003d08ff 	.word	0x003d08ff
 8006afc:	10624dd3 	.word	0x10624dd3
{
 8006b00:	4770      	bx	lr

08006b02 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8006b02:	b1a8      	cbz	r0, 8006b30 <HAL_I2C_DeInit+0x2e>
{
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b08:	2324      	movs	r3, #36	; 0x24
 8006b0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006b0e:	6802      	ldr	r2, [r0, #0]
 8006b10:	6813      	ldr	r3, [r2, #0]
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006b18:	f7f9 ff4c 	bl	80009b4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006b20:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b26:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8006b2a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006b2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006b30:	2001      	movs	r0, #1
 8006b32:	4770      	bx	lr

08006b34 <HAL_I2C_Master_Transmit>:
{
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	4690      	mov	r8, r2
 8006b40:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006b42:	f7fa fc5f 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b46:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d004      	beq.n	8006b5a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8006b50:	2502      	movs	r5, #2
}
 8006b52:	4628      	mov	r0, r5
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b5a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b5c:	9000      	str	r0, [sp, #0]
 8006b5e:	2319      	movs	r3, #25
 8006b60:	2201      	movs	r2, #1
 8006b62:	494f      	ldr	r1, [pc, #316]	; (8006ca0 <HAL_I2C_Master_Transmit+0x16c>)
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fba6 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006b6a:	b108      	cbz	r0, 8006b70 <HAL_I2C_Master_Transmit+0x3c>
      return HAL_BUSY;
 8006b6c:	2502      	movs	r5, #2
 8006b6e:	e7f0      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8006b70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	f000 808e 	beq.w	8006c96 <HAL_I2C_Master_Transmit+0x162>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	f012 0f01 	tst.w	r2, #1
 8006b88:	d103      	bne.n	8006b92 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	6813      	ldr	r3, [r2, #0]
 8006b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b9a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b9c:	2321      	movs	r3, #33	; 0x21
 8006b9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ba2:	2310      	movs	r3, #16
 8006ba4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006bac:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bb0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bb4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <HAL_I2C_Master_Transmit+0x170>)
 8006bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bba:	4633      	mov	r3, r6
 8006bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7ff fc02 	bl	80063ca <I2C_MasterRequestWrite>
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d166      	bne.n	8006c9a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9303      	str	r3, [sp, #12]
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	9203      	str	r2, [sp, #12]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8006bdc:	e012      	b.n	8006c04 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d001      	beq.n	8006be8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8006be4:	2501      	movs	r5, #1
 8006be6:	e7b4      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bf0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006bf2:	2501      	movs	r5, #1
 8006bf4:	e7ad      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7ff fe20 	bl	8006840 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d12e      	bne.n	8006c62 <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8006c04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d037      	beq.n	8006c7a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff fcce 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d1e2      	bne.n	8006bde <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c1c:	7812      	ldrb	r2, [r2, #0]
 8006c1e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c22:	1c4b      	adds	r3, r1, #1
 8006c24:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006c26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006c30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	6950      	ldr	r0, [r2, #20]
 8006c3c:	f010 0f04 	tst.w	r0, #4
 8006c40:	d0d9      	beq.n	8006bf6 <HAL_I2C_Master_Transmit+0xc2>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0d7      	beq.n	8006bf6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c46:	784b      	ldrb	r3, [r1, #1]
 8006c48:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8006c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006c50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006c5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	8523      	strh	r3, [r4, #40]	; 0x28
 8006c60:	e7c9      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d001      	beq.n	8006c6c <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 8006c68:	2501      	movs	r5, #1
 8006c6a:	e772      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c74:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006c76:	2501      	movs	r5, #1
 8006c78:	e76b      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	6813      	ldr	r3, [r2, #0]
 8006c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c82:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	2320      	movs	r3, #32
 8006c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006c90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006c94:	e75d      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8006c96:	2502      	movs	r5, #2
 8006c98:	e75b      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8006c9a:	2501      	movs	r5, #1
 8006c9c:	e759      	b.n	8006b52 <HAL_I2C_Master_Transmit+0x1e>
 8006c9e:	bf00      	nop
 8006ca0:	00100002 	.word	0x00100002
 8006ca4:	ffff0000 	.word	0xffff0000

08006ca8 <HAL_I2C_Master_Receive>:
{
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006cb6:	f7fa fba5 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d004      	beq.n	8006cce <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8006cc4:	2502      	movs	r5, #2
}
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	b006      	add	sp, #24
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cce:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd0:	9000      	str	r0, [sp, #0]
 8006cd2:	2319      	movs	r3, #25
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	4988      	ldr	r1, [pc, #544]	; (8006ef8 <HAL_I2C_Master_Receive+0x250>)
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7ff faec 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006cde:	b108      	cbz	r0, 8006ce4 <HAL_I2C_Master_Receive+0x3c>
      return HAL_BUSY;
 8006ce0:	2502      	movs	r5, #2
 8006ce2:	e7f0      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8006ce4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	f000 813d 	beq.w	8006f68 <HAL_I2C_Master_Receive+0x2c0>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f012 0f01 	tst.w	r2, #1
 8006cfc:	d103      	bne.n	8006d06 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d0e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006d10:	2322      	movs	r3, #34	; 0x22
 8006d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d16:	2310      	movs	r3, #16
 8006d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006d20:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d24:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d28:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d2a:	4b74      	ldr	r3, [pc, #464]	; (8006efc <HAL_I2C_Master_Receive+0x254>)
 8006d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d2e:	4633      	mov	r3, r6
 8006d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff fba7 	bl	8006488 <I2C_MasterRequestRead>
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f040 8115 	bne.w	8006f6c <HAL_I2C_Master_Receive+0x2c4>
    if (hi2c->XferSize == 0U)
 8006d42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d44:	b95b      	cbnz	r3, 8006d5e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	695a      	ldr	r2, [r3, #20]
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	9202      	str	r2, [sp, #8]
 8006d52:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e07a      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
    else if (hi2c->XferSize == 1U)
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d00f      	beq.n	8006d82 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d01f      	beq.n	8006da6 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d6e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d70:	2300      	movs	r3, #0
 8006d72:	9305      	str	r3, [sp, #20]
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	9205      	str	r2, [sp, #20]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	e068      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	6813      	ldr	r3, [r2, #0]
 8006d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	9203      	str	r2, [sp, #12]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	9203      	str	r2, [sp, #12]
 8006d9a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e056      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dae:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	6813      	ldr	r3, [r2, #0]
 8006db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006db8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	9204      	str	r2, [sp, #16]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	9304      	str	r3, [sp, #16]
 8006dc8:	9b04      	ldr	r3, [sp, #16]
 8006dca:	e043      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dcc:	4632      	mov	r2, r6
 8006dce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff fd5f 	bl	8006894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 80ca 	bne.w	8006f70 <HAL_I2C_Master_Receive+0x2c8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	6912      	ldr	r2, [r2, #16]
 8006de2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de6:	3301      	adds	r3, #1
 8006de8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006dea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006dec:	3b01      	subs	r3, #1
 8006dee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006df0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006dfa:	e02b      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dfc:	9600      	str	r6, [sp, #0]
 8006dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e00:	2200      	movs	r2, #0
 8006e02:	493f      	ldr	r1, [pc, #252]	; (8006f00 <HAL_I2C_Master_Receive+0x258>)
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff fa56 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f040 80b2 	bne.w	8006f74 <HAL_I2C_Master_Receive+0x2cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e18:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	6912      	ldr	r2, [r2, #16]
 8006e20:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e24:	1c53      	adds	r3, r2, #1
 8006e26:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e40:	3301      	adds	r3, #1
 8006e42:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e46:	3b01      	subs	r3, #1
 8006e48:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d07d      	beq.n	8006f56 <HAL_I2C_Master_Receive+0x2ae>
      if (hi2c->XferSize <= 3U)
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d852      	bhi.n	8006f04 <HAL_I2C_Master_Receive+0x25c>
        if (hi2c->XferSize == 1U)
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d0b4      	beq.n	8006dcc <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d0ca      	beq.n	8006dfc <HAL_I2C_Master_Receive+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e66:	9600      	str	r6, [sp, #0]
 8006e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	4924      	ldr	r1, [pc, #144]	; (8006f00 <HAL_I2C_Master_Receive+0x258>)
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7ff fa21 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d17f      	bne.n	8006f78 <HAL_I2C_Master_Receive+0x2d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e80:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	6912      	ldr	r2, [r2, #16]
 8006e88:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ea0:	9600      	str	r6, [sp, #0]
 8006ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4916      	ldr	r1, [pc, #88]	; (8006f00 <HAL_I2C_Master_Receive+0x258>)
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f7ff fa04 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d164      	bne.n	8006f7c <HAL_I2C_Master_Receive+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	6813      	ldr	r3, [r2, #0]
 8006eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	6912      	ldr	r2, [r2, #16]
 8006ec2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ec6:	1c53      	adds	r3, r2, #1
 8006ec8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006eca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006ed0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006ee6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006eec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006ef6:	e7ad      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
 8006ef8:	00100002 	.word	0x00100002
 8006efc:	ffff0000 	.word	0xffff0000
 8006f00:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f04:	4632      	mov	r2, r6
 8006f06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7ff fcc3 	bl	8006894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d136      	bne.n	8006f80 <HAL_I2C_Master_Receive+0x2d8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	6912      	ldr	r2, [r2, #16]
 8006f18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f1c:	1c53      	adds	r3, r2, #1
 8006f1e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006f20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f22:	3b01      	subs	r3, #1
 8006f24:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006f26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	6959      	ldr	r1, [r3, #20]
 8006f34:	f011 0f04 	tst.w	r1, #4
 8006f38:	d08c      	beq.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	3301      	adds	r3, #1
 8006f42:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f46:	3b01      	subs	r3, #1
 8006f48:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006f54:	e77e      	b.n	8006e54 <HAL_I2C_Master_Receive+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	2320      	movs	r3, #32
 8006f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006f62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006f66:	e6ae      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8006f68:	2502      	movs	r5, #2
 8006f6a:	e6ac      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8006f6c:	2501      	movs	r5, #1
 8006f6e:	e6aa      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8006f70:	2501      	movs	r5, #1
 8006f72:	e6a8      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8006f74:	2501      	movs	r5, #1
 8006f76:	e6a6      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8006f78:	2501      	movs	r5, #1
 8006f7a:	e6a4      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8006f7c:	2501      	movs	r5, #1
 8006f7e:	e6a2      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8006f80:	2501      	movs	r5, #1
 8006f82:	e6a0      	b.n	8006cc6 <HAL_I2C_Master_Receive+0x1e>

08006f84 <HAL_I2C_Slave_Transmit>:
{
 8006f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4690      	mov	r8, r2
 8006f90:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8006f92:	f7fa fa37 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f96:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d004      	beq.n	8006faa <HAL_I2C_Slave_Transmit+0x26>
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	b004      	add	sp, #16
 8006fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006faa:	4606      	mov	r6, r0
    if ((pData == NULL) || (Size == 0U))
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80a6 	beq.w	80070fe <HAL_I2C_Slave_Transmit+0x17a>
 8006fb2:	f1b8 0f00 	cmp.w	r8, #0
 8006fb6:	f000 80a4 	beq.w	8007102 <HAL_I2C_Slave_Transmit+0x17e>
    __HAL_LOCK(hi2c);
 8006fba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f000 80a1 	beq.w	8007106 <HAL_I2C_Slave_Transmit+0x182>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	f012 0f01 	tst.w	r2, #1
 8006fd2:	d103      	bne.n	8006fdc <HAL_I2C_Slave_Transmit+0x58>
      __HAL_I2C_ENABLE(hi2c);
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fdc:	6822      	ldr	r2, [r4, #0]
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fe6:	2321      	movs	r3, #33	; 0x21
 8006fe8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006fec:	2320      	movs	r3, #32
 8006fee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006ff6:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ff8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ffc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ffe:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007000:	4b45      	ldr	r3, [pc, #276]	; (8007118 <HAL_I2C_Slave_Transmit+0x194>)
 8007002:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007004:	6821      	ldr	r1, [r4, #0]
 8007006:	680b      	ldr	r3, [r1, #0]
 8007008:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800700c:	600b      	str	r3, [r1, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800700e:	9600      	str	r6, [sp, #0]
 8007010:	462b      	mov	r3, r5
 8007012:	4942      	ldr	r1, [pc, #264]	; (800711c <HAL_I2C_Slave_Transmit+0x198>)
 8007014:	4620      	mov	r0, r4
 8007016:	f7ff f94e 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 800701a:	2800      	cmp	r0, #0
 800701c:	d175      	bne.n	800710a <HAL_I2C_Slave_Transmit+0x186>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800701e:	2300      	movs	r3, #0
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	9202      	str	r2, [sp, #8]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	9b02      	ldr	r3, [sp, #8]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007034:	d02e      	beq.n	8007094 <HAL_I2C_Slave_Transmit+0x110>
    while (hi2c->XferSize > 0U)
 8007036:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d044      	beq.n	80070c6 <HAL_I2C_Slave_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703c:	4632      	mov	r2, r6
 800703e:	4629      	mov	r1, r5
 8007040:	4620      	mov	r0, r4
 8007042:	f7ff fab5 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007046:	2800      	cmp	r0, #0
 8007048:	d136      	bne.n	80070b8 <HAL_I2C_Slave_Transmit+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007052:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007054:	1c4b      	adds	r3, r1, #1
 8007056:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29b      	uxth	r3, r3
 8007060:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007062:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007064:	3b01      	subs	r3, #1
 8007066:	b29b      	uxth	r3, r3
 8007068:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	6950      	ldr	r0, [r2, #20]
 800706e:	f010 0f04 	tst.w	r0, #4
 8007072:	d0e0      	beq.n	8007036 <HAL_I2C_Slave_Transmit+0xb2>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0de      	beq.n	8007036 <HAL_I2C_Slave_Transmit+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007078:	784b      	ldrb	r3, [r1, #1]
 800707a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800707c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800708c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800708e:	3b01      	subs	r3, #1
 8007090:	8523      	strh	r3, [r4, #40]	; 0x28
 8007092:	e7d0      	b.n	8007036 <HAL_I2C_Slave_Transmit+0xb2>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8007094:	9600      	str	r6, [sp, #0]
 8007096:	462b      	mov	r3, r5
 8007098:	2200      	movs	r2, #0
 800709a:	4920      	ldr	r1, [pc, #128]	; (800711c <HAL_I2C_Slave_Transmit+0x198>)
 800709c:	4620      	mov	r0, r4
 800709e:	f7ff f90a 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d133      	bne.n	800710e <HAL_I2C_Slave_Transmit+0x18a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a6:	2300      	movs	r3, #0
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	9203      	str	r2, [sp, #12]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	e7be      	b.n	8007036 <HAL_I2C_Slave_Transmit+0xb2>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e76d      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 80070c6:	9600      	str	r6, [sp, #0]
 80070c8:	462b      	mov	r3, r5
 80070ca:	2200      	movs	r2, #0
 80070cc:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff f8f0 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	b9d8      	cbnz	r0, 8007112 <HAL_I2C_Slave_Transmit+0x18e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80070e0:	6151      	str	r1, [r2, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e2:	6821      	ldr	r1, [r4, #0]
 80070e4:	680a      	ldr	r2, [r1, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ea:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	2220      	movs	r2, #32
 80070ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f2:	2200      	movs	r2, #0
 80070f4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80070f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80070fc:	e751      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
      return  HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e74f      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
 8007102:	2301      	movs	r3, #1
 8007104:	e74d      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8007106:	2302      	movs	r3, #2
 8007108:	e74b      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e749      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e747      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e745      	b.n	8006fa2 <HAL_I2C_Slave_Transmit+0x1e>
 8007116:	bf00      	nop
 8007118:	ffff0000 	.word	0xffff0000
 800711c:	00010002 	.word	0x00010002

08007120 <HAL_I2C_Slave_Receive>:
{
 8007120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	4604      	mov	r4, r0
 8007128:	460f      	mov	r7, r1
 800712a:	4690      	mov	r8, r2
 800712c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800712e:	f7fa f969 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007132:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b20      	cmp	r3, #32
 800713a:	d004      	beq.n	8007146 <HAL_I2C_Slave_Receive+0x26>
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
}
 800713e:	4618      	mov	r0, r3
 8007140:	b004      	add	sp, #16
 8007142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007146:	4606      	mov	r6, r0
    if ((pData == NULL) || (Size == (uint16_t)0))
 8007148:	2f00      	cmp	r7, #0
 800714a:	f000 8098 	beq.w	800727e <HAL_I2C_Slave_Receive+0x15e>
 800714e:	f1b8 0f00 	cmp.w	r8, #0
 8007152:	f000 8096 	beq.w	8007282 <HAL_I2C_Slave_Receive+0x162>
    __HAL_LOCK(hi2c);
 8007156:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800715a:	2b01      	cmp	r3, #1
 800715c:	f000 8093 	beq.w	8007286 <HAL_I2C_Slave_Receive+0x166>
 8007160:	2301      	movs	r3, #1
 8007162:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f012 0f01 	tst.w	r2, #1
 800716e:	d103      	bne.n	8007178 <HAL_I2C_Slave_Receive+0x58>
      __HAL_I2C_ENABLE(hi2c);
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007180:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007182:	2322      	movs	r3, #34	; 0x22
 8007184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007188:	2320      	movs	r3, #32
 800718a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800718e:	2200      	movs	r2, #0
 8007190:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007192:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007194:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007198:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800719a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800719c:	4b3c      	ldr	r3, [pc, #240]	; (8007290 <HAL_I2C_Slave_Receive+0x170>)
 800719e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a0:	6821      	ldr	r1, [r4, #0]
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071a8:	600b      	str	r3, [r1, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80071aa:	9600      	str	r6, [sp, #0]
 80071ac:	462b      	mov	r3, r5
 80071ae:	4939      	ldr	r1, [pc, #228]	; (8007294 <HAL_I2C_Slave_Receive+0x174>)
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff f880 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d167      	bne.n	800728a <HAL_I2C_Slave_Receive+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ba:	2300      	movs	r3, #0
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	695a      	ldr	r2, [r3, #20]
 80071c2:	9202      	str	r2, [sp, #8]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	9302      	str	r3, [sp, #8]
 80071c8:	9b02      	ldr	r3, [sp, #8]
    while (hi2c->XferSize > 0U)
 80071ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d031      	beq.n	8007234 <HAL_I2C_Slave_Receive+0x114>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d0:	4632      	mov	r2, r6
 80071d2:	4629      	mov	r1, r5
 80071d4:	4620      	mov	r0, r4
 80071d6:	f7ff fb5d 	bl	8006894 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071da:	bb20      	cbnz	r0, 8007226 <HAL_I2C_Slave_Receive+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	6912      	ldr	r2, [r2, #16]
 80071e2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80071e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071e6:	1c4b      	adds	r3, r1, #1
 80071e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80071ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80071ec:	3a01      	subs	r2, #1
 80071ee:	b292      	uxth	r2, r2
 80071f0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80071f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	6958      	ldr	r0, [r3, #20]
 8007200:	f010 0f04 	tst.w	r0, #4
 8007204:	d0e1      	beq.n	80071ca <HAL_I2C_Slave_Receive+0xaa>
 8007206:	2a00      	cmp	r2, #0
 8007208:	d0df      	beq.n	80071ca <HAL_I2C_Slave_Receive+0xaa>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	704b      	strb	r3, [r1, #1]
        hi2c->pBuffPtr++;
 800720e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007210:	3301      	adds	r3, #1
 8007212:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007214:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007216:	3b01      	subs	r3, #1
 8007218:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800721a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29b      	uxth	r3, r3
 8007222:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007224:	e7d1      	b.n	80071ca <HAL_I2C_Slave_Receive+0xaa>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	6813      	ldr	r3, [r2, #0]
 800722a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e784      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007234:	4632      	mov	r2, r6
 8007236:	4629      	mov	r1, r5
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff fb60 	bl	80068fe <I2C_WaitOnSTOPFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	b9b0      	cbnz	r0, 8007270 <HAL_I2C_Slave_Receive+0x150>
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007242:	2200      	movs	r2, #0
 8007244:	9203      	str	r2, [sp, #12]
 8007246:	6821      	ldr	r1, [r4, #0]
 8007248:	6948      	ldr	r0, [r1, #20]
 800724a:	9003      	str	r0, [sp, #12]
 800724c:	6808      	ldr	r0, [r1, #0]
 800724e:	f040 0001 	orr.w	r0, r0, #1
 8007252:	6008      	str	r0, [r1, #0]
 8007254:	9903      	ldr	r1, [sp, #12]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	6801      	ldr	r1, [r0, #0]
 800725a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800725e:	6001      	str	r1, [r0, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007260:	2120      	movs	r1, #32
 8007262:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800726a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 800726e:	e766      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007278:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e75f      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e75d      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
 8007282:	2301      	movs	r3, #1
 8007284:	e75b      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8007286:	2302      	movs	r3, #2
 8007288:	e759      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e757      	b.n	800713e <HAL_I2C_Slave_Receive+0x1e>
 800728e:	bf00      	nop
 8007290:	ffff0000 	.word	0xffff0000
 8007294:	00010002 	.word	0x00010002

08007298 <HAL_I2C_Master_Transmit_IT>:
{
 8007298:	b430      	push	{r4, r5}
 800729a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800729c:	2400      	movs	r4, #0
 800729e:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a0:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80072a4:	b2e4      	uxtb	r4, r4
 80072a6:	2c20      	cmp	r4, #32
 80072a8:	d003      	beq.n	80072b2 <HAL_I2C_Master_Transmit_IT+0x1a>
    return HAL_BUSY;
 80072aa:	2002      	movs	r0, #2
}
 80072ac:	b002      	add	sp, #8
 80072ae:	bc30      	pop	{r4, r5}
 80072b0:	4770      	bx	lr
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80072b2:	4c2c      	ldr	r4, [pc, #176]	; (8007364 <HAL_I2C_Master_Transmit_IT+0xcc>)
 80072b4:	6824      	ldr	r4, [r4, #0]
 80072b6:	08e4      	lsrs	r4, r4, #3
 80072b8:	4d2b      	ldr	r5, [pc, #172]	; (8007368 <HAL_I2C_Master_Transmit_IT+0xd0>)
 80072ba:	fba5 5404 	umull	r5, r4, r5, r4
 80072be:	0a24      	lsrs	r4, r4, #8
 80072c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80072c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80072c8:	9401      	str	r4, [sp, #4]
      count--;
 80072ca:	9c01      	ldr	r4, [sp, #4]
 80072cc:	3c01      	subs	r4, #1
 80072ce:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80072d0:	9c01      	ldr	r4, [sp, #4]
 80072d2:	2c00      	cmp	r4, #0
 80072d4:	d035      	beq.n	8007342 <HAL_I2C_Master_Transmit_IT+0xaa>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80072d6:	6804      	ldr	r4, [r0, #0]
 80072d8:	69a5      	ldr	r5, [r4, #24]
 80072da:	f015 0f02 	tst.w	r5, #2
 80072de:	d1f4      	bne.n	80072ca <HAL_I2C_Master_Transmit_IT+0x32>
    __HAL_LOCK(hi2c);
 80072e0:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80072e4:	2d01      	cmp	r5, #1
 80072e6:	d03b      	beq.n	8007360 <HAL_I2C_Master_Transmit_IT+0xc8>
 80072e8:	2501      	movs	r5, #1
 80072ea:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	f015 0f01 	tst.w	r5, #1
 80072f4:	d103      	bne.n	80072fe <HAL_I2C_Master_Transmit_IT+0x66>
      __HAL_I2C_ENABLE(hi2c);
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	f045 0501 	orr.w	r5, r5, #1
 80072fc:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072fe:	6805      	ldr	r5, [r0, #0]
 8007300:	682c      	ldr	r4, [r5, #0]
 8007302:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8007306:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007308:	2421      	movs	r4, #33	; 0x21
 800730a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800730e:	2410      	movs	r4, #16
 8007310:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007314:	2400      	movs	r4, #0
 8007316:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007318:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800731a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800731c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800731e:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_I2C_Master_Transmit_IT+0xd4>)
 8007322:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007324:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007326:	6802      	ldr	r2, [r0, #0]
 8007328:	6813      	ldr	r3, [r2, #0]
 800732a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007330:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007334:	6802      	ldr	r2, [r0, #0]
 8007336:	6853      	ldr	r3, [r2, #4]
 8007338:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800733c:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 800733e:	4620      	mov	r0, r4
 8007340:	e7b4      	b.n	80072ac <HAL_I2C_Master_Transmit_IT+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007342:	2300      	movs	r3, #0
 8007344:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007346:	2220      	movs	r2, #32
 8007348:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007350:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007352:	f042 0220 	orr.w	r2, r2, #32
 8007356:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 800735c:	2001      	movs	r0, #1
 800735e:	e7a5      	b.n	80072ac <HAL_I2C_Master_Transmit_IT+0x14>
    __HAL_LOCK(hi2c);
 8007360:	2002      	movs	r0, #2
 8007362:	e7a3      	b.n	80072ac <HAL_I2C_Master_Transmit_IT+0x14>
 8007364:	20000008 	.word	0x20000008
 8007368:	14f8b589 	.word	0x14f8b589
 800736c:	ffff0000 	.word	0xffff0000

08007370 <HAL_I2C_Master_Receive_IT>:
{
 8007370:	b430      	push	{r4, r5}
 8007372:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007374:	2400      	movs	r4, #0
 8007376:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007378:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800737c:	b2e4      	uxtb	r4, r4
 800737e:	2c20      	cmp	r4, #32
 8007380:	d003      	beq.n	800738a <HAL_I2C_Master_Receive_IT+0x1a>
    return HAL_BUSY;
 8007382:	2002      	movs	r0, #2
}
 8007384:	b002      	add	sp, #8
 8007386:	bc30      	pop	{r4, r5}
 8007388:	4770      	bx	lr
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800738a:	4c2f      	ldr	r4, [pc, #188]	; (8007448 <HAL_I2C_Master_Receive_IT+0xd8>)
 800738c:	6824      	ldr	r4, [r4, #0]
 800738e:	08e4      	lsrs	r4, r4, #3
 8007390:	4d2e      	ldr	r5, [pc, #184]	; (800744c <HAL_I2C_Master_Receive_IT+0xdc>)
 8007392:	fba5 5404 	umull	r5, r4, r5, r4
 8007396:	0a24      	lsrs	r4, r4, #8
 8007398:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800739c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80073a0:	9401      	str	r4, [sp, #4]
      count--;
 80073a2:	9c01      	ldr	r4, [sp, #4]
 80073a4:	3c01      	subs	r4, #1
 80073a6:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80073a8:	9c01      	ldr	r4, [sp, #4]
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d03a      	beq.n	8007424 <HAL_I2C_Master_Receive_IT+0xb4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80073ae:	6804      	ldr	r4, [r0, #0]
 80073b0:	69a5      	ldr	r5, [r4, #24]
 80073b2:	f015 0f02 	tst.w	r5, #2
 80073b6:	d1f4      	bne.n	80073a2 <HAL_I2C_Master_Receive_IT+0x32>
    __HAL_LOCK(hi2c);
 80073b8:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80073bc:	2d01      	cmp	r5, #1
 80073be:	d040      	beq.n	8007442 <HAL_I2C_Master_Receive_IT+0xd2>
 80073c0:	2501      	movs	r5, #1
 80073c2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	f015 0f01 	tst.w	r5, #1
 80073cc:	d103      	bne.n	80073d6 <HAL_I2C_Master_Receive_IT+0x66>
      __HAL_I2C_ENABLE(hi2c);
 80073ce:	6825      	ldr	r5, [r4, #0]
 80073d0:	f045 0501 	orr.w	r5, r5, #1
 80073d4:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073d6:	6805      	ldr	r5, [r0, #0]
 80073d8:	682c      	ldr	r4, [r5, #0]
 80073da:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80073de:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073e0:	2422      	movs	r4, #34	; 0x22
 80073e2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073e6:	2410      	movs	r4, #16
 80073e8:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ec:	2400      	movs	r4, #0
 80073ee:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80073f0:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073f2:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80073f6:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073f8:	4b15      	ldr	r3, [pc, #84]	; (8007450 <HAL_I2C_Master_Receive_IT+0xe0>)
 80073fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80073fc:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fe:	6802      	ldr	r2, [r0, #0]
 8007400:	6813      	ldr	r3, [r2, #0]
 8007402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007406:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007408:	6802      	ldr	r2, [r0, #0]
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007410:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007412:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007416:	6802      	ldr	r2, [r0, #0]
 8007418:	6853      	ldr	r3, [r2, #4]
 800741a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800741e:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8007420:	4620      	mov	r0, r4
 8007422:	e7af      	b.n	8007384 <HAL_I2C_Master_Receive_IT+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007424:	2300      	movs	r3, #0
 8007426:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007428:	2220      	movs	r2, #32
 800742a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007434:	f042 0220 	orr.w	r2, r2, #32
 8007438:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800743a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 800743e:	2001      	movs	r0, #1
 8007440:	e7a0      	b.n	8007384 <HAL_I2C_Master_Receive_IT+0x14>
    __HAL_LOCK(hi2c);
 8007442:	2002      	movs	r0, #2
 8007444:	e79e      	b.n	8007384 <HAL_I2C_Master_Receive_IT+0x14>
 8007446:	bf00      	nop
 8007448:	20000008 	.word	0x20000008
 800744c:	14f8b589 	.word	0x14f8b589
 8007450:	ffff0000 	.word	0xffff0000

08007454 <HAL_I2C_Slave_Transmit_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007454:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b20      	cmp	r3, #32
 800745c:	d001      	beq.n	8007462 <HAL_I2C_Slave_Transmit_IT+0xe>
    return HAL_BUSY;
 800745e:	2002      	movs	r0, #2
 8007460:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8007462:	2900      	cmp	r1, #0
 8007464:	d035      	beq.n	80074d2 <HAL_I2C_Slave_Transmit_IT+0x7e>
 8007466:	2a00      	cmp	r2, #0
 8007468:	d035      	beq.n	80074d6 <HAL_I2C_Slave_Transmit_IT+0x82>
    __HAL_LOCK(hi2c);
 800746a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d033      	beq.n	80074da <HAL_I2C_Slave_Transmit_IT+0x86>
{
 8007472:	b410      	push	{r4}
    __HAL_LOCK(hi2c);
 8007474:	2301      	movs	r3, #1
 8007476:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	681c      	ldr	r4, [r3, #0]
 800747e:	f014 0f01 	tst.w	r4, #1
 8007482:	d103      	bne.n	800748c <HAL_I2C_Slave_Transmit_IT+0x38>
      __HAL_I2C_ENABLE(hi2c);
 8007484:	681c      	ldr	r4, [r3, #0]
 8007486:	f044 0401 	orr.w	r4, r4, #1
 800748a:	601c      	str	r4, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800748c:	6804      	ldr	r4, [r0, #0]
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007494:	6023      	str	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007496:	2321      	movs	r3, #33	; 0x21
 8007498:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800749c:	2320      	movs	r3, #32
 800749e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80074a6:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074a8:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074aa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80074ac:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ae:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <HAL_I2C_Slave_Transmit_IT+0x8c>)
 80074b0:	62c2      	str	r2, [r0, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b2:	6801      	ldr	r1, [r0, #0]
 80074b4:	680a      	ldr	r2, [r1, #0]
 80074b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ba:	600a      	str	r2, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80074bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074c0:	6801      	ldr	r1, [r0, #0]
 80074c2:	684a      	ldr	r2, [r1, #4]
 80074c4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80074c8:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 80074ca:	4618      	mov	r0, r3
}
 80074cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d0:	4770      	bx	lr
      return  HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
 80074d4:	4770      	bx	lr
 80074d6:	2001      	movs	r0, #1
 80074d8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80074da:	2002      	movs	r0, #2
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	ffff0000 	.word	0xffff0000

080074e4 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d001      	beq.n	80074f2 <HAL_I2C_Slave_Receive_IT+0xe>
    return HAL_BUSY;
 80074ee:	2002      	movs	r0, #2
 80074f0:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d035      	beq.n	8007562 <HAL_I2C_Slave_Receive_IT+0x7e>
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d035      	beq.n	8007566 <HAL_I2C_Slave_Receive_IT+0x82>
    __HAL_LOCK(hi2c);
 80074fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d033      	beq.n	800756a <HAL_I2C_Slave_Receive_IT+0x86>
{
 8007502:	b410      	push	{r4}
    __HAL_LOCK(hi2c);
 8007504:	2301      	movs	r3, #1
 8007506:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800750a:	6803      	ldr	r3, [r0, #0]
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	f014 0f01 	tst.w	r4, #1
 8007512:	d103      	bne.n	800751c <HAL_I2C_Slave_Receive_IT+0x38>
      __HAL_I2C_ENABLE(hi2c);
 8007514:	681c      	ldr	r4, [r3, #0]
 8007516:	f044 0401 	orr.w	r4, r4, #1
 800751a:	601c      	str	r4, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800751c:	6804      	ldr	r4, [r0, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007524:	6023      	str	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007526:	2322      	movs	r3, #34	; 0x22
 8007528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800752c:	2320      	movs	r3, #32
 800752e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007532:	2300      	movs	r3, #0
 8007534:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007536:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007538:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800753a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800753c:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800753e:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <HAL_I2C_Slave_Receive_IT+0x8c>)
 8007540:	62c2      	str	r2, [r0, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007542:	6801      	ldr	r1, [r0, #0]
 8007544:	680a      	ldr	r2, [r1, #0]
 8007546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800754a:	600a      	str	r2, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800754c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007550:	6801      	ldr	r1, [r0, #0]
 8007552:	684a      	ldr	r2, [r1, #4]
 8007554:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007558:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 800755a:	4618      	mov	r0, r3
}
 800755c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007560:	4770      	bx	lr
      return  HAL_ERROR;
 8007562:	2001      	movs	r0, #1
 8007564:	4770      	bx	lr
 8007566:	2001      	movs	r0, #1
 8007568:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800756a:	2002      	movs	r0, #2
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	ffff0000 	.word	0xffff0000

08007574 <HAL_I2C_Master_Transmit_DMA>:
{
 8007574:	b530      	push	{r4, r5, lr}
 8007576:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8007578:	2400      	movs	r4, #0
 800757a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800757c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8007580:	b2e4      	uxtb	r4, r4
 8007582:	2c20      	cmp	r4, #32
 8007584:	d003      	beq.n	800758e <HAL_I2C_Master_Transmit_DMA+0x1a>
    return HAL_BUSY;
 8007586:	2302      	movs	r3, #2
}
 8007588:	4618      	mov	r0, r3
 800758a:	b003      	add	sp, #12
 800758c:	bd30      	pop	{r4, r5, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800758e:	4c50      	ldr	r4, [pc, #320]	; (80076d0 <HAL_I2C_Master_Transmit_DMA+0x15c>)
 8007590:	6824      	ldr	r4, [r4, #0]
 8007592:	08e4      	lsrs	r4, r4, #3
 8007594:	4d4f      	ldr	r5, [pc, #316]	; (80076d4 <HAL_I2C_Master_Transmit_DMA+0x160>)
 8007596:	fba5 5404 	umull	r5, r4, r5, r4
 800759a:	0a24      	lsrs	r4, r4, #8
 800759c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80075a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80075a4:	9401      	str	r4, [sp, #4]
      count--;
 80075a6:	9c01      	ldr	r4, [sp, #4]
 80075a8:	3c01      	subs	r4, #1
 80075aa:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80075ac:	9c01      	ldr	r4, [sp, #4]
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	d03d      	beq.n	800762e <HAL_I2C_Master_Transmit_DMA+0xba>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80075b2:	6804      	ldr	r4, [r0, #0]
 80075b4:	69a5      	ldr	r5, [r4, #24]
 80075b6:	f015 0f02 	tst.w	r5, #2
 80075ba:	d1f4      	bne.n	80075a6 <HAL_I2C_Master_Transmit_DMA+0x32>
    __HAL_LOCK(hi2c);
 80075bc:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80075c0:	2d01      	cmp	r5, #1
 80075c2:	f000 8082 	beq.w	80076ca <HAL_I2C_Master_Transmit_DMA+0x156>
 80075c6:	2501      	movs	r5, #1
 80075c8:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075cc:	6825      	ldr	r5, [r4, #0]
 80075ce:	f015 0f01 	tst.w	r5, #1
 80075d2:	d103      	bne.n	80075dc <HAL_I2C_Master_Transmit_DMA+0x68>
      __HAL_I2C_ENABLE(hi2c);
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	f045 0501 	orr.w	r5, r5, #1
 80075da:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075dc:	6805      	ldr	r5, [r0, #0]
 80075de:	682c      	ldr	r4, [r5, #0]
 80075e0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80075e4:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075e6:	2421      	movs	r4, #33	; 0x21
 80075e8:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075ec:	2410      	movs	r4, #16
 80075ee:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f2:	2400      	movs	r4, #0
 80075f4:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80075f6:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075f8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007600:	4a35      	ldr	r2, [pc, #212]	; (80076d8 <HAL_I2C_Master_Transmit_DMA+0x164>)
 8007602:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007604:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8007606:	bb0b      	cbnz	r3, 800764c <HAL_I2C_Master_Transmit_DMA+0xd8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007608:	6802      	ldr	r2, [r0, #0]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007610:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007612:	6802      	ldr	r2, [r0, #0]
 8007614:	6813      	ldr	r3, [r2, #0]
 8007616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800761a:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800761c:	2300      	movs	r3, #0
 800761e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007622:	6801      	ldr	r1, [r0, #0]
 8007624:	684a      	ldr	r2, [r1, #4]
 8007626:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800762a:	604a      	str	r2, [r1, #4]
 800762c:	e7ac      	b.n	8007588 <HAL_I2C_Master_Transmit_DMA+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800762e:	2300      	movs	r3, #0
 8007630:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007632:	2220      	movs	r2, #32
 8007634:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007638:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800763c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800763e:	f042 0220 	orr.w	r2, r2, #32
 8007642:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007644:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e79d      	b.n	8007588 <HAL_I2C_Master_Transmit_DMA+0x14>
 800764c:	4604      	mov	r4, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800764e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007650:	4a22      	ldr	r2, [pc, #136]	; (80076dc <HAL_I2C_Master_Transmit_DMA+0x168>)
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007654:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007656:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <HAL_I2C_Master_Transmit_DMA+0x16c>)
 8007658:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800765a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800765c:	2300      	movs	r3, #0
 800765e:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007660:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007662:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007664:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007666:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007668:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800766a:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800766c:	6802      	ldr	r2, [r0, #0]
 800766e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007670:	3210      	adds	r2, #16
 8007672:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007674:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007676:	f7fc fb18 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800767a:	4603      	mov	r3, r0
 800767c:	b9b8      	cbnz	r0, 80076ae <HAL_I2C_Master_Transmit_DMA+0x13a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	680a      	ldr	r2, [r1, #0]
 8007682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007686:	600a      	str	r2, [r1, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007688:	6821      	ldr	r1, [r4, #0]
 800768a:	680a      	ldr	r2, [r1, #0]
 800768c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007690:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hi2c);
 8007692:	2200      	movs	r2, #0
 8007694:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007698:	6821      	ldr	r1, [r4, #0]
 800769a:	684a      	ldr	r2, [r1, #4]
 800769c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80076a0:	604a      	str	r2, [r1, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076a2:	6821      	ldr	r1, [r4, #0]
 80076a4:	684a      	ldr	r2, [r1, #4]
 80076a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076aa:	604a      	str	r2, [r1, #4]
 80076ac:	e76c      	b.n	8007588 <HAL_I2C_Master_Transmit_DMA+0x14>
        hi2c->State     = HAL_I2C_STATE_READY;
 80076ae:	2320      	movs	r3, #32
 80076b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80076b4:	2200      	movs	r2, #0
 80076b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80076ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076bc:	f043 0310 	orr.w	r3, r3, #16
 80076c0:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80076c2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e75e      	b.n	8007588 <HAL_I2C_Master_Transmit_DMA+0x14>
    __HAL_LOCK(hi2c);
 80076ca:	2302      	movs	r3, #2
 80076cc:	e75c      	b.n	8007588 <HAL_I2C_Master_Transmit_DMA+0x14>
 80076ce:	bf00      	nop
 80076d0:	20000008 	.word	0x20000008
 80076d4:	14f8b589 	.word	0x14f8b589
 80076d8:	ffff0000 	.word	0xffff0000
 80076dc:	08009567 	.word	0x08009567
 80076e0:	08009523 	.word	0x08009523

080076e4 <HAL_I2C_Master_Receive_DMA>:
{
 80076e4:	b530      	push	{r4, r5, lr}
 80076e6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80076e8:	2400      	movs	r4, #0
 80076ea:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ec:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80076f0:	b2e4      	uxtb	r4, r4
 80076f2:	2c20      	cmp	r4, #32
 80076f4:	d003      	beq.n	80076fe <HAL_I2C_Master_Receive_DMA+0x1a>
    return HAL_BUSY;
 80076f6:	2302      	movs	r3, #2
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	b003      	add	sp, #12
 80076fc:	bd30      	pop	{r4, r5, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80076fe:	4c50      	ldr	r4, [pc, #320]	; (8007840 <HAL_I2C_Master_Receive_DMA+0x15c>)
 8007700:	6824      	ldr	r4, [r4, #0]
 8007702:	08e4      	lsrs	r4, r4, #3
 8007704:	4d4f      	ldr	r5, [pc, #316]	; (8007844 <HAL_I2C_Master_Receive_DMA+0x160>)
 8007706:	fba5 5404 	umull	r5, r4, r5, r4
 800770a:	0a24      	lsrs	r4, r4, #8
 800770c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007710:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007714:	9401      	str	r4, [sp, #4]
      count--;
 8007716:	9c01      	ldr	r4, [sp, #4]
 8007718:	3c01      	subs	r4, #1
 800771a:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 800771c:	9c01      	ldr	r4, [sp, #4]
 800771e:	2c00      	cmp	r4, #0
 8007720:	d03d      	beq.n	800779e <HAL_I2C_Master_Receive_DMA+0xba>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007722:	6804      	ldr	r4, [r0, #0]
 8007724:	69a5      	ldr	r5, [r4, #24]
 8007726:	f015 0f02 	tst.w	r5, #2
 800772a:	d1f4      	bne.n	8007716 <HAL_I2C_Master_Receive_DMA+0x32>
    __HAL_LOCK(hi2c);
 800772c:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8007730:	2d01      	cmp	r5, #1
 8007732:	f000 8082 	beq.w	800783a <HAL_I2C_Master_Receive_DMA+0x156>
 8007736:	2501      	movs	r5, #1
 8007738:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800773c:	6825      	ldr	r5, [r4, #0]
 800773e:	f015 0f01 	tst.w	r5, #1
 8007742:	d103      	bne.n	800774c <HAL_I2C_Master_Receive_DMA+0x68>
      __HAL_I2C_ENABLE(hi2c);
 8007744:	6825      	ldr	r5, [r4, #0]
 8007746:	f045 0501 	orr.w	r5, r5, #1
 800774a:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800774c:	6805      	ldr	r5, [r0, #0]
 800774e:	682c      	ldr	r4, [r5, #0]
 8007750:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8007754:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007756:	2422      	movs	r4, #34	; 0x22
 8007758:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800775c:	2410      	movs	r4, #16
 800775e:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007762:	2400      	movs	r4, #0
 8007764:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007766:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007768:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800776a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007770:	4a35      	ldr	r2, [pc, #212]	; (8007848 <HAL_I2C_Master_Receive_DMA+0x164>)
 8007772:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007774:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8007776:	bb0b      	cbnz	r3, 80077bc <HAL_I2C_Master_Receive_DMA+0xd8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007778:	6802      	ldr	r2, [r0, #0]
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007780:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007782:	6802      	ldr	r2, [r0, #0]
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778a:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800778c:	2300      	movs	r3, #0
 800778e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007792:	6801      	ldr	r1, [r0, #0]
 8007794:	684a      	ldr	r2, [r1, #4]
 8007796:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800779a:	604a      	str	r2, [r1, #4]
 800779c:	e7ac      	b.n	80076f8 <HAL_I2C_Master_Receive_DMA+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800779e:	2300      	movs	r3, #0
 80077a0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077a2:	2220      	movs	r2, #32
 80077a4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80077ae:	f042 0220 	orr.w	r2, r2, #32
 80077b2:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80077b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e79d      	b.n	80076f8 <HAL_I2C_Master_Receive_DMA+0x14>
 80077bc:	4604      	mov	r4, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80077be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077c0:	4a22      	ldr	r2, [pc, #136]	; (800784c <HAL_I2C_Master_Receive_DMA+0x168>)
 80077c2:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80077c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077c6:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_I2C_Master_Receive_DMA+0x16c>)
 80077c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80077ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80077cc:	2300      	movs	r3, #0
 80077ce:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80077d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80077d2:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80077d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80077d6:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80077d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80077da:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80077dc:	6801      	ldr	r1, [r0, #0]
 80077de:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80077e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80077e2:	3110      	adds	r1, #16
 80077e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80077e6:	f7fc fa60 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80077ea:	4603      	mov	r3, r0
 80077ec:	b9b8      	cbnz	r0, 800781e <HAL_I2C_Master_Receive_DMA+0x13a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	680a      	ldr	r2, [r1, #0]
 80077f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f6:	600a      	str	r2, [r1, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077f8:	6821      	ldr	r1, [r4, #0]
 80077fa:	680a      	ldr	r2, [r1, #0]
 80077fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007800:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hi2c);
 8007802:	2200      	movs	r2, #0
 8007804:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007808:	6821      	ldr	r1, [r4, #0]
 800780a:	684a      	ldr	r2, [r1, #4]
 800780c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007810:	604a      	str	r2, [r1, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007812:	6821      	ldr	r1, [r4, #0]
 8007814:	684a      	ldr	r2, [r1, #4]
 8007816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781a:	604a      	str	r2, [r1, #4]
 800781c:	e76c      	b.n	80076f8 <HAL_I2C_Master_Receive_DMA+0x14>
        hi2c->State     = HAL_I2C_STATE_READY;
 800781e:	2320      	movs	r3, #32
 8007820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007824:	2200      	movs	r2, #0
 8007826:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800782a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800782c:	f043 0310 	orr.w	r3, r3, #16
 8007830:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007832:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e75e      	b.n	80076f8 <HAL_I2C_Master_Receive_DMA+0x14>
    __HAL_LOCK(hi2c);
 800783a:	2302      	movs	r3, #2
 800783c:	e75c      	b.n	80076f8 <HAL_I2C_Master_Receive_DMA+0x14>
 800783e:	bf00      	nop
 8007840:	20000008 	.word	0x20000008
 8007844:	14f8b589 	.word	0x14f8b589
 8007848:	ffff0000 	.word	0xffff0000
 800784c:	08009567 	.word	0x08009567
 8007850:	08009523 	.word	0x08009523

08007854 <HAL_I2C_Slave_Transmit_DMA>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007854:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b20      	cmp	r3, #32
 800785c:	d002      	beq.n	8007864 <HAL_I2C_Slave_Transmit_DMA+0x10>
    return HAL_BUSY;
 800785e:	2302      	movs	r3, #2
}
 8007860:	4618      	mov	r0, r3
 8007862:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8007864:	2900      	cmp	r1, #0
 8007866:	d05f      	beq.n	8007928 <HAL_I2C_Slave_Transmit_DMA+0xd4>
 8007868:	2a00      	cmp	r2, #0
 800786a:	d05f      	beq.n	800792c <HAL_I2C_Slave_Transmit_DMA+0xd8>
    __HAL_LOCK(hi2c);
 800786c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007870:	2b01      	cmp	r3, #1
 8007872:	d05d      	beq.n	8007930 <HAL_I2C_Slave_Transmit_DMA+0xdc>
{
 8007874:	b510      	push	{r4, lr}
    __HAL_LOCK(hi2c);
 8007876:	2301      	movs	r3, #1
 8007878:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	681c      	ldr	r4, [r3, #0]
 8007880:	f014 0f01 	tst.w	r4, #1
 8007884:	d103      	bne.n	800788e <HAL_I2C_Slave_Transmit_DMA+0x3a>
      __HAL_I2C_ENABLE(hi2c);
 8007886:	681c      	ldr	r4, [r3, #0]
 8007888:	f044 0401 	orr.w	r4, r4, #1
 800788c:	601c      	str	r4, [r3, #0]
 800788e:	4604      	mov	r4, r0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	6803      	ldr	r3, [r0, #0]
 8007894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007898:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800789a:	2321      	movs	r3, #33	; 0x21
 800789c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80078a0:	2320      	movs	r3, #32
 80078a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80078aa:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078ac:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80078b0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078b2:	4a20      	ldr	r2, [pc, #128]	; (8007934 <HAL_I2C_Slave_Transmit_DMA+0xe0>)
 80078b4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80078b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078b8:	491f      	ldr	r1, [pc, #124]	; (8007938 <HAL_I2C_Slave_Transmit_DMA+0xe4>)
 80078ba:	63d1      	str	r1, [r2, #60]	; 0x3c
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80078bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078be:	491f      	ldr	r1, [pc, #124]	; (800793c <HAL_I2C_Slave_Transmit_DMA+0xe8>)
 80078c0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80078c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078c4:	6413      	str	r3, [r2, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 80078c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078c8:	6453      	str	r3, [r2, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80078ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078cc:	6493      	str	r3, [r2, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 80078ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078d0:	6513      	str	r3, [r2, #80]	; 0x50
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80078d6:	3210      	adds	r2, #16
 80078d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078dc:	f7fc f9e5 	bl	8003caa <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80078e0:	4603      	mov	r3, r0
 80078e2:	b170      	cbz	r0, 8007902 <HAL_I2C_Slave_Transmit_DMA+0xae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80078e4:	2320      	movs	r3, #32
 80078e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80078ea:	2200      	movs	r2, #0
 80078ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80078f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078f2:	f043 0310 	orr.w	r3, r3, #16
 80078f6:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80078f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
}
 80078fe:	4618      	mov	r0, r3
 8007900:	bd10      	pop	{r4, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007902:	6821      	ldr	r1, [r4, #0]
 8007904:	680a      	ldr	r2, [r1, #0]
 8007906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800790a:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hi2c);
 800790c:	2200      	movs	r2, #0
 800790e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	684a      	ldr	r2, [r1, #4]
 8007916:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800791a:	604a      	str	r2, [r1, #4]
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	684a      	ldr	r2, [r1, #4]
 8007920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007924:	604a      	str	r2, [r1, #4]
      return HAL_OK;
 8007926:	e7ea      	b.n	80078fe <HAL_I2C_Slave_Transmit_DMA+0xaa>
      return  HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e799      	b.n	8007860 <HAL_I2C_Slave_Transmit_DMA+0xc>
 800792c:	2301      	movs	r3, #1
 800792e:	e797      	b.n	8007860 <HAL_I2C_Slave_Transmit_DMA+0xc>
    __HAL_LOCK(hi2c);
 8007930:	2302      	movs	r3, #2
 8007932:	e795      	b.n	8007860 <HAL_I2C_Slave_Transmit_DMA+0xc>
 8007934:	ffff0000 	.word	0xffff0000
 8007938:	08009567 	.word	0x08009567
 800793c:	08009523 	.word	0x08009523

08007940 <HAL_I2C_Slave_Receive_DMA>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007940:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b20      	cmp	r3, #32
 8007948:	d002      	beq.n	8007950 <HAL_I2C_Slave_Receive_DMA+0x10>
    return HAL_BUSY;
 800794a:	2302      	movs	r3, #2
}
 800794c:	4618      	mov	r0, r3
 800794e:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8007950:	2900      	cmp	r1, #0
 8007952:	d05f      	beq.n	8007a14 <HAL_I2C_Slave_Receive_DMA+0xd4>
 8007954:	2a00      	cmp	r2, #0
 8007956:	d05f      	beq.n	8007a18 <HAL_I2C_Slave_Receive_DMA+0xd8>
    __HAL_LOCK(hi2c);
 8007958:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d05d      	beq.n	8007a1c <HAL_I2C_Slave_Receive_DMA+0xdc>
{
 8007960:	b510      	push	{r4, lr}
    __HAL_LOCK(hi2c);
 8007962:	2301      	movs	r3, #1
 8007964:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007968:	6803      	ldr	r3, [r0, #0]
 800796a:	681c      	ldr	r4, [r3, #0]
 800796c:	f014 0f01 	tst.w	r4, #1
 8007970:	d103      	bne.n	800797a <HAL_I2C_Slave_Receive_DMA+0x3a>
      __HAL_I2C_ENABLE(hi2c);
 8007972:	681c      	ldr	r4, [r3, #0]
 8007974:	f044 0401 	orr.w	r4, r4, #1
 8007978:	601c      	str	r4, [r3, #0]
 800797a:	4604      	mov	r4, r0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007984:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007986:	2322      	movs	r3, #34	; 0x22
 8007988:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800798c:	2320      	movs	r3, #32
 800798e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007992:	2300      	movs	r3, #0
 8007994:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007996:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007998:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800799a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800799c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800799e:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <HAL_I2C_Slave_Receive_DMA+0xe0>)
 80079a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80079a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079a4:	491f      	ldr	r1, [pc, #124]	; (8007a24 <HAL_I2C_Slave_Receive_DMA+0xe4>)
 80079a6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80079a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079aa:	491f      	ldr	r1, [pc, #124]	; (8007a28 <HAL_I2C_Slave_Receive_DMA+0xe8>)
 80079ac:	64d1      	str	r1, [r2, #76]	; 0x4c
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80079ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079b0:	6413      	str	r3, [r2, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 80079b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079b4:	6453      	str	r3, [r2, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80079b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079b8:	6493      	str	r3, [r2, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 80079ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079bc:	6513      	str	r3, [r2, #80]	; 0x50
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80079be:	6821      	ldr	r1, [r4, #0]
 80079c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80079c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079c4:	3110      	adds	r1, #16
 80079c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80079c8:	f7fc f96f 	bl	8003caa <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80079cc:	4603      	mov	r3, r0
 80079ce:	b170      	cbz	r0, 80079ee <HAL_I2C_Slave_Receive_DMA+0xae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80079d0:	2320      	movs	r3, #32
 80079d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80079d6:	2200      	movs	r2, #0
 80079d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80079dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079de:	f043 0310 	orr.w	r3, r3, #16
 80079e2:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80079e4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	bd10      	pop	{r4, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ee:	6821      	ldr	r1, [r4, #0]
 80079f0:	680a      	ldr	r2, [r1, #0]
 80079f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079f6:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hi2c);
 80079f8:	2200      	movs	r2, #0
 80079fa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	684a      	ldr	r2, [r1, #4]
 8007a02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007a06:	604a      	str	r2, [r1, #4]
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	684a      	ldr	r2, [r1, #4]
 8007a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a10:	604a      	str	r2, [r1, #4]
      return HAL_OK;
 8007a12:	e7ea      	b.n	80079ea <HAL_I2C_Slave_Receive_DMA+0xaa>
      return  HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e799      	b.n	800794c <HAL_I2C_Slave_Receive_DMA+0xc>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e797      	b.n	800794c <HAL_I2C_Slave_Receive_DMA+0xc>
    __HAL_LOCK(hi2c);
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e795      	b.n	800794c <HAL_I2C_Slave_Receive_DMA+0xc>
 8007a20:	ffff0000 	.word	0xffff0000
 8007a24:	08009567 	.word	0x08009567
 8007a28:	08009523 	.word	0x08009523

08007a2c <HAL_I2C_Mem_Write>:
{
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	4604      	mov	r4, r0
 8007a34:	460e      	mov	r6, r1
 8007a36:	4617      	mov	r7, r2
 8007a38:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8007a3a:	f7f9 fce3 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a3e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d004      	beq.n	8007a52 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	b002      	add	sp, #8
 8007a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a52:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a54:	9000      	str	r0, [sp, #0]
 8007a56:	2319      	movs	r3, #25
 8007a58:	2201      	movs	r2, #1
 8007a5a:	494c      	ldr	r1, [pc, #304]	; (8007b8c <HAL_I2C_Mem_Write+0x160>)
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7fe fc2a 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8007a62:	b108      	cbz	r0, 8007a68 <HAL_I2C_Mem_Write+0x3c>
      return HAL_BUSY;
 8007a64:	2302      	movs	r3, #2
 8007a66:	e7f0      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8007a68:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f000 8088 	beq.w	8007b82 <HAL_I2C_Mem_Write+0x156>
 8007a72:	2301      	movs	r3, #1
 8007a74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f012 0f01 	tst.w	r2, #1
 8007a80:	d103      	bne.n	8007a8a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a92:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a94:	2321      	movs	r3, #33	; 0x21
 8007a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007aa4:	9b08      	ldr	r3, [sp, #32]
 8007aa6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007aa8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8007aac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ab0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ab2:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <HAL_I2C_Mem_Write+0x164>)
 8007ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ab6:	9501      	str	r5, [sp, #4]
 8007ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4643      	mov	r3, r8
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fe fd9e 	bl	8006604 <I2C_RequestMemoryWrite>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d15c      	bne.n	8007b86 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8007acc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d036      	beq.n	8007b40 <HAL_I2C_Mem_Write+0x114>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7fe fd6a 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007adc:	bb20      	cbnz	r0, 8007b28 <HAL_I2C_Mem_Write+0xfc>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007ae6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ae8:	1c4b      	adds	r3, r1, #1
 8007aea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007aec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007aee:	3a01      	subs	r2, #1
 8007af0:	b292      	uxth	r2, r2
 8007af2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	6958      	ldr	r0, [r3, #20]
 8007b02:	f010 0f04 	tst.w	r0, #4
 8007b06:	d0e1      	beq.n	8007acc <HAL_I2C_Mem_Write+0xa0>
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	d0df      	beq.n	8007acc <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b0c:	784a      	ldrb	r2, [r1, #1]
 8007b0e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b12:	3301      	adds	r3, #1
 8007b14:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007b16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007b1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007b26:	e7d1      	b.n	8007acc <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d001      	beq.n	8007b32 <HAL_I2C_Mem_Write+0x106>
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e78b      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	6813      	ldr	r3, [r2, #0]
 8007b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b3a:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e784      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b40:	462a      	mov	r2, r5
 8007b42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b44:	4620      	mov	r0, r4
 8007b46:	f7fe fe7b 	bl	8006840 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	b158      	cbz	r0, 8007b66 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d001      	beq.n	8007b58 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e778      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b60:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e771      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	680a      	ldr	r2, [r1, #0]
 8007b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b6e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b70:	2220      	movs	r2, #32
 8007b72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b76:	2200      	movs	r2, #0
 8007b78:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8007b7c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8007b80:	e763      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8007b82:	2302      	movs	r3, #2
 8007b84:	e761      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e75f      	b.n	8007a4a <HAL_I2C_Mem_Write+0x1e>
 8007b8a:	bf00      	nop
 8007b8c:	00100002 	.word	0x00100002
 8007b90:	ffff0000 	.word	0xffff0000

08007b94 <HAL_I2C_Mem_Read>:
{
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4617      	mov	r7, r2
 8007ba0:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8007ba2:	f7f9 fc2f 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d004      	beq.n	8007bba <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8007bb0:	2502      	movs	r5, #2
}
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	b006      	add	sp, #24
 8007bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bba:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bbc:	9000      	str	r0, [sp, #0]
 8007bbe:	2319      	movs	r3, #25
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4988      	ldr	r1, [pc, #544]	; (8007de4 <HAL_I2C_Mem_Read+0x250>)
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f7fe fb76 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8007bca:	b108      	cbz	r0, 8007bd0 <HAL_I2C_Mem_Read+0x3c>
      return HAL_BUSY;
 8007bcc:	2502      	movs	r5, #2
 8007bce:	e7f0      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8007bd0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	f000 813d 	beq.w	8007e54 <HAL_I2C_Mem_Read+0x2c0>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	f012 0f01 	tst.w	r2, #1
 8007be8:	d103      	bne.n	8007bf2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f042 0201 	orr.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	6813      	ldr	r3, [r2, #0]
 8007bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfa:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bfc:	2322      	movs	r3, #34	; 0x22
 8007bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c02:	2340      	movs	r3, #64	; 0x40
 8007c04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c0e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c10:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8007c14:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c18:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c1a:	4b73      	ldr	r3, [pc, #460]	; (8007de8 <HAL_I2C_Mem_Read+0x254>)
 8007c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c1e:	9601      	str	r6, [sp, #4]
 8007c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4643      	mov	r3, r8
 8007c26:	463a      	mov	r2, r7
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7fe fd58 	bl	80066e0 <I2C_RequestMemoryRead>
 8007c30:	4605      	mov	r5, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f040 8110 	bne.w	8007e58 <HAL_I2C_Mem_Read+0x2c4>
    if (hi2c->XferSize == 0U)
 8007c38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c3a:	b95b      	cbnz	r3, 8007c54 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	695a      	ldr	r2, [r3, #20]
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	9202      	str	r2, [sp, #8]
 8007c48:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e075      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d00a      	beq.n	8007c6e <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d01a      	beq.n	8007c92 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	695a      	ldr	r2, [r3, #20]
 8007c64:	9205      	str	r2, [sp, #20]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	9305      	str	r3, [sp, #20]
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	e068      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	6813      	ldr	r3, [r2, #0]
 8007c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c76:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9303      	str	r3, [sp, #12]
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	695a      	ldr	r2, [r3, #20]
 8007c80:	9203      	str	r2, [sp, #12]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	9203      	str	r2, [sp, #12]
 8007c86:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e056      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	6813      	ldr	r3, [r2, #0]
 8007c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c9a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ca4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	9204      	str	r2, [sp, #16]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	e043      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb8:	4632      	mov	r2, r6
 8007cba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7fe fde9 	bl	8006894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f040 80ca 	bne.w	8007e5c <HAL_I2C_Mem_Read+0x2c8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	6912      	ldr	r2, [r2, #16]
 8007cce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007ce6:	e02b      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ce8:	9600      	str	r6, [sp, #0]
 8007cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cec:	2200      	movs	r2, #0
 8007cee:	493f      	ldr	r1, [pc, #252]	; (8007dec <HAL_I2C_Mem_Read+0x258>)
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7fe fae0 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f040 80b2 	bne.w	8007e60 <HAL_I2C_Mem_Read+0x2cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	6813      	ldr	r3, [r2, #0]
 8007d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d04:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	6912      	ldr	r2, [r2, #16]
 8007d0c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007d0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d10:	1c53      	adds	r3, r2, #1
 8007d12:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007d14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d16:	3b01      	subs	r3, #1
 8007d18:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007d1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007d30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d32:	3b01      	subs	r3, #1
 8007d34:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007d36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d07d      	beq.n	8007e42 <HAL_I2C_Mem_Read+0x2ae>
      if (hi2c->XferSize <= 3U)
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d852      	bhi.n	8007df0 <HAL_I2C_Mem_Read+0x25c>
        if (hi2c->XferSize == 1U)
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d0b4      	beq.n	8007cb8 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d0ca      	beq.n	8007ce8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d52:	9600      	str	r6, [sp, #0]
 8007d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d56:	2200      	movs	r2, #0
 8007d58:	4924      	ldr	r1, [pc, #144]	; (8007dec <HAL_I2C_Mem_Read+0x258>)
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7fe faab 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d17f      	bne.n	8007e64 <HAL_I2C_Mem_Read+0x2d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d6c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d70:	6822      	ldr	r2, [r4, #0]
 8007d72:	6912      	ldr	r2, [r2, #16]
 8007d74:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d78:	3301      	adds	r3, #1
 8007d7a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007d7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007d82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d8c:	9600      	str	r6, [sp, #0]
 8007d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d90:	2200      	movs	r2, #0
 8007d92:	4916      	ldr	r1, [pc, #88]	; (8007dec <HAL_I2C_Mem_Read+0x258>)
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7fe fa8e 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d164      	bne.n	8007e68 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9e:	6822      	ldr	r2, [r4, #0]
 8007da0:	6813      	ldr	r3, [r2, #0]
 8007da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007da6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	6912      	ldr	r2, [r2, #16]
 8007dae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007db0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007db2:	1c53      	adds	r3, r2, #1
 8007db4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007db6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007db8:	3b01      	subs	r3, #1
 8007dba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007dbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dce:	3301      	adds	r3, #1
 8007dd0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007dd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007dd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007de2:	e7ad      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
 8007de4:	00100002 	.word	0x00100002
 8007de8:	ffff0000 	.word	0xffff0000
 8007dec:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007df0:	4632      	mov	r2, r6
 8007df2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007df4:	4620      	mov	r0, r4
 8007df6:	f7fe fd4d 	bl	8006894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d136      	bne.n	8007e6c <HAL_I2C_Mem_Read+0x2d8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e00:	6822      	ldr	r2, [r4, #0]
 8007e02:	6912      	ldr	r2, [r2, #16]
 8007e04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e08:	1c53      	adds	r3, r2, #1
 8007e0a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007e0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007e12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	6959      	ldr	r1, [r3, #20]
 8007e20:	f011 0f04 	tst.w	r1, #4
 8007e24:	d08c      	beq.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007e30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007e32:	3b01      	subs	r3, #1
 8007e34:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007e40:	e77e      	b.n	8007d40 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8007e42:	2320      	movs	r3, #32
 8007e44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8007e4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8007e52:	e6ae      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8007e54:	2502      	movs	r5, #2
 8007e56:	e6ac      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8007e58:	2501      	movs	r5, #1
 8007e5a:	e6aa      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8007e5c:	2501      	movs	r5, #1
 8007e5e:	e6a8      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8007e60:	2501      	movs	r5, #1
 8007e62:	e6a6      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8007e64:	2501      	movs	r5, #1
 8007e66:	e6a4      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8007e68:	2501      	movs	r5, #1
 8007e6a:	e6a2      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8007e6c:	2501      	movs	r5, #1
 8007e6e:	e6a0      	b.n	8007bb2 <HAL_I2C_Mem_Read+0x1e>

08007e70 <HAL_I2C_Mem_Write_IT>:
{
 8007e70:	b430      	push	{r4, r5}
 8007e72:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007e74:	2400      	movs	r4, #0
 8007e76:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e78:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8007e7c:	b2e4      	uxtb	r4, r4
 8007e7e:	2c20      	cmp	r4, #32
 8007e80:	d003      	beq.n	8007e8a <HAL_I2C_Mem_Write_IT+0x1a>
    return HAL_BUSY;
 8007e82:	2002      	movs	r0, #2
}
 8007e84:	b002      	add	sp, #8
 8007e86:	bc30      	pop	{r4, r5}
 8007e88:	4770      	bx	lr
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e8a:	4c2f      	ldr	r4, [pc, #188]	; (8007f48 <HAL_I2C_Mem_Write_IT+0xd8>)
 8007e8c:	6824      	ldr	r4, [r4, #0]
 8007e8e:	08e4      	lsrs	r4, r4, #3
 8007e90:	4d2e      	ldr	r5, [pc, #184]	; (8007f4c <HAL_I2C_Mem_Write_IT+0xdc>)
 8007e92:	fba5 5404 	umull	r5, r4, r5, r4
 8007e96:	0a24      	lsrs	r4, r4, #8
 8007e98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007e9c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007ea0:	9401      	str	r4, [sp, #4]
      count--;
 8007ea2:	9c01      	ldr	r4, [sp, #4]
 8007ea4:	3c01      	subs	r4, #1
 8007ea6:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8007ea8:	9c01      	ldr	r4, [sp, #4]
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	d03b      	beq.n	8007f26 <HAL_I2C_Mem_Write_IT+0xb6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007eae:	6804      	ldr	r4, [r0, #0]
 8007eb0:	69a5      	ldr	r5, [r4, #24]
 8007eb2:	f015 0f02 	tst.w	r5, #2
 8007eb6:	d1f4      	bne.n	8007ea2 <HAL_I2C_Mem_Write_IT+0x32>
    __HAL_LOCK(hi2c);
 8007eb8:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8007ebc:	2d01      	cmp	r5, #1
 8007ebe:	d041      	beq.n	8007f44 <HAL_I2C_Mem_Write_IT+0xd4>
 8007ec0:	2501      	movs	r5, #1
 8007ec2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ec6:	6825      	ldr	r5, [r4, #0]
 8007ec8:	f015 0f01 	tst.w	r5, #1
 8007ecc:	d103      	bne.n	8007ed6 <HAL_I2C_Mem_Write_IT+0x66>
      __HAL_I2C_ENABLE(hi2c);
 8007ece:	6825      	ldr	r5, [r4, #0]
 8007ed0:	f045 0501 	orr.w	r5, r5, #1
 8007ed4:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ed6:	6805      	ldr	r5, [r0, #0]
 8007ed8:	682c      	ldr	r4, [r5, #0]
 8007eda:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8007ede:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ee0:	2421      	movs	r4, #33	; 0x21
 8007ee2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ee6:	2440      	movs	r4, #64	; 0x40
 8007ee8:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eec:	2400      	movs	r4, #0
 8007eee:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007ef0:	9d04      	ldr	r5, [sp, #16]
 8007ef2:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ef4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8007ef8:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007efa:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8007efc:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007efe:	4d14      	ldr	r5, [pc, #80]	; (8007f50 <HAL_I2C_Mem_Write_IT+0xe0>)
 8007f00:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007f02:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007f04:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007f06:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8007f08:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f0a:	6802      	ldr	r2, [r0, #0]
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f12:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007f14:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f18:	6802      	ldr	r2, [r0, #0]
 8007f1a:	6853      	ldr	r3, [r2, #4]
 8007f1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f20:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8007f22:	4620      	mov	r0, r4
 8007f24:	e7ae      	b.n	8007e84 <HAL_I2C_Mem_Write_IT+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f30:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007f3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8007f40:	2001      	movs	r0, #1
 8007f42:	e79f      	b.n	8007e84 <HAL_I2C_Mem_Write_IT+0x14>
    __HAL_LOCK(hi2c);
 8007f44:	2002      	movs	r0, #2
 8007f46:	e79d      	b.n	8007e84 <HAL_I2C_Mem_Write_IT+0x14>
 8007f48:	20000008 	.word	0x20000008
 8007f4c:	14f8b589 	.word	0x14f8b589
 8007f50:	ffff0000 	.word	0xffff0000

08007f54 <HAL_I2C_Mem_Read_IT>:
{
 8007f54:	b430      	push	{r4, r5}
 8007f56:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007f58:	2400      	movs	r4, #0
 8007f5a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f5c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8007f60:	b2e4      	uxtb	r4, r4
 8007f62:	2c20      	cmp	r4, #32
 8007f64:	d003      	beq.n	8007f6e <HAL_I2C_Mem_Read_IT+0x1a>
    return HAL_BUSY;
 8007f66:	2002      	movs	r0, #2
}
 8007f68:	b002      	add	sp, #8
 8007f6a:	bc30      	pop	{r4, r5}
 8007f6c:	4770      	bx	lr
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f6e:	4c34      	ldr	r4, [pc, #208]	; (8008040 <HAL_I2C_Mem_Read_IT+0xec>)
 8007f70:	6824      	ldr	r4, [r4, #0]
 8007f72:	08e4      	lsrs	r4, r4, #3
 8007f74:	4d33      	ldr	r5, [pc, #204]	; (8008044 <HAL_I2C_Mem_Read_IT+0xf0>)
 8007f76:	fba5 5404 	umull	r5, r4, r5, r4
 8007f7a:	0a24      	lsrs	r4, r4, #8
 8007f7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007f80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007f84:	9401      	str	r4, [sp, #4]
      count--;
 8007f86:	9c01      	ldr	r4, [sp, #4]
 8007f88:	3c01      	subs	r4, #1
 8007f8a:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8007f8c:	9c01      	ldr	r4, [sp, #4]
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d042      	beq.n	8008018 <HAL_I2C_Mem_Read_IT+0xc4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007f92:	6804      	ldr	r4, [r0, #0]
 8007f94:	69a5      	ldr	r5, [r4, #24]
 8007f96:	f015 0f02 	tst.w	r5, #2
 8007f9a:	d1f4      	bne.n	8007f86 <HAL_I2C_Mem_Read_IT+0x32>
    __HAL_LOCK(hi2c);
 8007f9c:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8007fa0:	2d01      	cmp	r5, #1
 8007fa2:	d048      	beq.n	8008036 <HAL_I2C_Mem_Read_IT+0xe2>
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007faa:	6825      	ldr	r5, [r4, #0]
 8007fac:	f015 0f01 	tst.w	r5, #1
 8007fb0:	d103      	bne.n	8007fba <HAL_I2C_Mem_Read_IT+0x66>
      __HAL_I2C_ENABLE(hi2c);
 8007fb2:	6825      	ldr	r5, [r4, #0]
 8007fb4:	f045 0501 	orr.w	r5, r5, #1
 8007fb8:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fba:	6805      	ldr	r5, [r0, #0]
 8007fbc:	682c      	ldr	r4, [r5, #0]
 8007fbe:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8007fc2:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fc4:	2422      	movs	r4, #34	; 0x22
 8007fc6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fca:	2440      	movs	r4, #64	; 0x40
 8007fcc:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd0:	2400      	movs	r4, #0
 8007fd2:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007fd4:	9d04      	ldr	r5, [sp, #16]
 8007fd6:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fd8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8007fdc:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fde:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8007fe0:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fe2:	4d19      	ldr	r5, [pc, #100]	; (8008048 <HAL_I2C_Mem_Read_IT+0xf4>)
 8007fe4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007fe6:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007fe8:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007fea:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8007fec:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fee:	6802      	ldr	r2, [r0, #0]
 8007ff0:	6813      	ldr	r3, [r2, #0]
 8007ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ff6:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ff8:	6802      	ldr	r2, [r0, #0]
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008000:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8008002:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if (hi2c->XferSize > 0U)
 8008006:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008008:	b1bb      	cbz	r3, 800803a <HAL_I2C_Mem_Read_IT+0xe6>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800800a:	6802      	ldr	r2, [r0, #0]
 800800c:	6853      	ldr	r3, [r2, #4]
 800800e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008012:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8008014:	4620      	mov	r0, r4
 8008016:	e7a7      	b.n	8007f68 <HAL_I2C_Mem_Read_IT+0x14>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008018:	2300      	movs	r3, #0
 800801a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800801c:	2220      	movs	r2, #32
 800801e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008022:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008026:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008028:	f042 0220 	orr.w	r2, r2, #32
 800802c:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800802e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8008032:	2001      	movs	r0, #1
 8008034:	e798      	b.n	8007f68 <HAL_I2C_Mem_Read_IT+0x14>
    __HAL_LOCK(hi2c);
 8008036:	2002      	movs	r0, #2
 8008038:	e796      	b.n	8007f68 <HAL_I2C_Mem_Read_IT+0x14>
    return HAL_OK;
 800803a:	2000      	movs	r0, #0
 800803c:	e794      	b.n	8007f68 <HAL_I2C_Mem_Read_IT+0x14>
 800803e:	bf00      	nop
 8008040:	20000008 	.word	0x20000008
 8008044:	14f8b589 	.word	0x14f8b589
 8008048:	ffff0000 	.word	0xffff0000

0800804c <HAL_I2C_Mem_Write_DMA>:
{
 800804c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	4604      	mov	r4, r0
 8008054:	460d      	mov	r5, r1
 8008056:	4616      	mov	r6, r2
 8008058:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	9303      	str	r3, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 800805e:	f7f9 f9d1 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008062:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b20      	cmp	r3, #32
 800806a:	d004      	beq.n	8008076 <HAL_I2C_Mem_Write_DMA+0x2a>
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
}
 800806e:	4618      	mov	r0, r3
 8008070:	b004      	add	sp, #16
 8008072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008076:	4680      	mov	r8, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008078:	4b51      	ldr	r3, [pc, #324]	; (80081c0 <HAL_I2C_Mem_Write_DMA+0x174>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	08db      	lsrs	r3, r3, #3
 800807e:	4a51      	ldr	r2, [pc, #324]	; (80081c4 <HAL_I2C_Mem_Write_DMA+0x178>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800808a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800808e:	9303      	str	r3, [sp, #12]
      count--;
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3b01      	subs	r3, #1
 8008094:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d03a      	beq.n	8008112 <HAL_I2C_Mem_Write_DMA+0xc6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	f012 0f02 	tst.w	r2, #2
 80080a4:	d1f4      	bne.n	8008090 <HAL_I2C_Mem_Write_DMA+0x44>
    __HAL_LOCK(hi2c);
 80080a6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80080aa:	2a01      	cmp	r2, #1
 80080ac:	f000 8084 	beq.w	80081b8 <HAL_I2C_Mem_Write_DMA+0x16c>
 80080b0:	2201      	movs	r2, #1
 80080b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	f012 0f01 	tst.w	r2, #1
 80080bc:	d103      	bne.n	80080c6 <HAL_I2C_Mem_Write_DMA+0x7a>
      __HAL_I2C_ENABLE(hi2c);
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	f042 0201 	orr.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	6813      	ldr	r3, [r2, #0]
 80080ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ce:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080d0:	2321      	movs	r3, #33	; 0x21
 80080d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080dc:	2300      	movs	r3, #0
 80080de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80080e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80080e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80080e8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080f0:	4a35      	ldr	r2, [pc, #212]	; (80081c8 <HAL_I2C_Mem_Write_DMA+0x17c>)
 80080f2:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 80080f4:	b9db      	cbnz	r3, 800812e <HAL_I2C_Mem_Write_DMA+0xe2>
      hi2c->State     = HAL_I2C_STATE_READY;
 80080f6:	2320      	movs	r3, #32
 80080f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080fc:	2200      	movs	r2, #0
 80080fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008108:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800810a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e7ad      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008112:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008114:	2220      	movs	r2, #32
 8008116:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800811a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800811e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008120:	f042 0220 	orr.w	r2, r2, #32
 8008124:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008126:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e79f      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800812e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008130:	4a26      	ldr	r2, [pc, #152]	; (80081cc <HAL_I2C_Mem_Write_DMA+0x180>)
 8008132:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008136:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <HAL_I2C_Mem_Write_DMA+0x184>)
 8008138:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800813a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800813c:	2300      	movs	r3, #0
 800813e:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008140:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008142:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008144:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008146:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008148:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800814a:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800814c:	6822      	ldr	r2, [r4, #0]
 800814e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008150:	3210      	adds	r2, #16
 8008152:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008154:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008156:	f7fb fda8 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800815a:	b168      	cbz	r0, 8008178 <HAL_I2C_Mem_Write_DMA+0x12c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800815c:	2320      	movs	r3, #32
 800815e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008162:	2200      	movs	r2, #0
 8008164:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816a:	f043 0310 	orr.w	r3, r3, #16
 800816e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008170:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e77a      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008178:	f8cd 8004 	str.w	r8, [sp, #4]
 800817c:	2323      	movs	r3, #35	; 0x23
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	463b      	mov	r3, r7
 8008182:	4632      	mov	r2, r6
 8008184:	4629      	mov	r1, r5
 8008186:	4620      	mov	r0, r4
 8008188:	f7fe fa3c 	bl	8006604 <I2C_RequestMemoryWrite>
 800818c:	4603      	mov	r3, r0
 800818e:	b9a8      	cbnz	r0, 80081bc <HAL_I2C_Mem_Write_DMA+0x170>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008190:	2100      	movs	r1, #0
 8008192:	9102      	str	r1, [sp, #8]
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	6950      	ldr	r0, [r2, #20]
 8008198:	9002      	str	r0, [sp, #8]
 800819a:	6990      	ldr	r0, [r2, #24]
 800819c:	9002      	str	r0, [sp, #8]
 800819e:	9802      	ldr	r0, [sp, #8]
        __HAL_UNLOCK(hi2c);
 80081a0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80081a4:	6851      	ldr	r1, [r2, #4]
 80081a6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80081aa:	6051      	str	r1, [r2, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081ac:	6821      	ldr	r1, [r4, #0]
 80081ae:	684a      	ldr	r2, [r1, #4]
 80081b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081b4:	604a      	str	r2, [r1, #4]
        return HAL_OK;
 80081b6:	e75a      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
    __HAL_LOCK(hi2c);
 80081b8:	2302      	movs	r3, #2
 80081ba:	e758      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
          return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e756      	b.n	800806e <HAL_I2C_Mem_Write_DMA+0x22>
 80081c0:	20000008 	.word	0x20000008
 80081c4:	14f8b589 	.word	0x14f8b589
 80081c8:	ffff0000 	.word	0xffff0000
 80081cc:	08009567 	.word	0x08009567
 80081d0:	08009523 	.word	0x08009523

080081d4 <HAL_I2C_Mem_Read_DMA>:
{
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	4604      	mov	r4, r0
 80081dc:	460d      	mov	r5, r1
 80081de:	4616      	mov	r6, r2
 80081e0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80081e2:	f7f9 f90f 	bl	8001404 <HAL_GetTick>
  __IO uint32_t count = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d004      	beq.n	80081fe <HAL_I2C_Mem_Read_DMA+0x2a>
    return HAL_BUSY;
 80081f4:	2302      	movs	r3, #2
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	b006      	add	sp, #24
 80081fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fe:	4680      	mov	r8, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008200:	4b62      	ldr	r3, [pc, #392]	; (800838c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	4a62      	ldr	r2, [pc, #392]	; (8008390 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8008208:	fba2 2303 	umull	r2, r3, r2, r3
 800820c:	0a1b      	lsrs	r3, r3, #8
 800820e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008212:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008216:	9305      	str	r3, [sp, #20]
      count--;
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	3b01      	subs	r3, #1
 800821c:	9305      	str	r3, [sp, #20]
      if (count == 0U)
 800821e:	9b05      	ldr	r3, [sp, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d052      	beq.n	80082ca <HAL_I2C_Mem_Read_DMA+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	f012 0f02 	tst.w	r2, #2
 800822c:	d1f4      	bne.n	8008218 <HAL_I2C_Mem_Read_DMA+0x44>
    __HAL_LOCK(hi2c);
 800822e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8008232:	2a01      	cmp	r2, #1
 8008234:	f000 80a3 	beq.w	800837e <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008238:	2201      	movs	r2, #1
 800823a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	f012 0f01 	tst.w	r2, #1
 8008244:	d103      	bne.n	800824e <HAL_I2C_Mem_Read_DMA+0x7a>
      __HAL_I2C_ENABLE(hi2c);
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	f042 0201 	orr.w	r2, r2, #1
 800824c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	6813      	ldr	r3, [r2, #0]
 8008252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008256:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800825e:	2340      	movs	r3, #64	; 0x40
 8008260:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008264:	2300      	movs	r3, #0
 8008266:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800826c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8008270:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008278:	4a46      	ldr	r2, [pc, #280]	; (8008394 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800827a:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 800827c:	2b00      	cmp	r3, #0
 800827e:	d061      	beq.n	8008344 <HAL_I2C_Mem_Read_DMA+0x170>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008282:	4a45      	ldr	r2, [pc, #276]	; (8008398 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008284:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008288:	4a44      	ldr	r2, [pc, #272]	; (800839c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800828a:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800828c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800828e:	2300      	movs	r3, #0
 8008290:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008294:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008296:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008298:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800829a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800829c:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800829e:	6821      	ldr	r1, [r4, #0]
 80082a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80082a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082a4:	3110      	adds	r1, #16
 80082a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80082a8:	f7fb fcff 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80082ac:	b1d8      	cbz	r0, 80082e6 <HAL_I2C_Mem_Read_DMA+0x112>
        hi2c->State     = HAL_I2C_STATE_READY;
 80082ae:	2320      	movs	r3, #32
 80082b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80082b4:	2200      	movs	r2, #0
 80082b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80082ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082bc:	f043 0310 	orr.w	r3, r3, #16
 80082c0:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80082c2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e795      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082cc:	2220      	movs	r2, #32
 80082ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80082d8:	f042 0220 	orr.w	r2, r2, #32
 80082dc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80082de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e787      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80082e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80082ea:	2323      	movs	r3, #35	; 0x23
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	463b      	mov	r3, r7
 80082f0:	4632      	mov	r2, r6
 80082f2:	4629      	mov	r1, r5
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7fe f9f3 	bl	80066e0 <I2C_RequestMemoryRead>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d140      	bne.n	8008382 <HAL_I2C_Mem_Read_DMA+0x1ae>
        if (hi2c->XferSize == 1U)
 8008300:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008302:	2a01      	cmp	r2, #1
 8008304:	d018      	beq.n	8008338 <HAL_I2C_Mem_Read_DMA+0x164>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008306:	6821      	ldr	r1, [r4, #0]
 8008308:	684a      	ldr	r2, [r1, #4]
 800830a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800830e:	604a      	str	r2, [r1, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008310:	2100      	movs	r1, #0
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	6822      	ldr	r2, [r4, #0]
 8008316:	6950      	ldr	r0, [r2, #20]
 8008318:	9003      	str	r0, [sp, #12]
 800831a:	6990      	ldr	r0, [r2, #24]
 800831c:	9003      	str	r0, [sp, #12]
 800831e:	9803      	ldr	r0, [sp, #12]
        __HAL_UNLOCK(hi2c);
 8008320:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008324:	6851      	ldr	r1, [r2, #4]
 8008326:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800832a:	6051      	str	r1, [r2, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800832c:	6821      	ldr	r1, [r4, #0]
 800832e:	684a      	ldr	r2, [r1, #4]
 8008330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008334:	604a      	str	r2, [r1, #4]
 8008336:	e75e      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008338:	6821      	ldr	r1, [r4, #0]
 800833a:	680a      	ldr	r2, [r1, #0]
 800833c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008340:	600a      	str	r2, [r1, #0]
 8008342:	e7e5      	b.n	8008310 <HAL_I2C_Mem_Read_DMA+0x13c>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008344:	f8cd 8004 	str.w	r8, [sp, #4]
 8008348:	2323      	movs	r3, #35	; 0x23
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	463b      	mov	r3, r7
 800834e:	4632      	mov	r2, r6
 8008350:	4629      	mov	r1, r5
 8008352:	4620      	mov	r0, r4
 8008354:	f7fe f9c4 	bl	80066e0 <I2C_RequestMemoryRead>
 8008358:	4603      	mov	r3, r0
 800835a:	b9a0      	cbnz	r0, 8008386 <HAL_I2C_Mem_Read_DMA+0x1b2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835c:	9004      	str	r0, [sp, #16]
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	6951      	ldr	r1, [r2, #20]
 8008362:	9104      	str	r1, [sp, #16]
 8008364:	6991      	ldr	r1, [r2, #24]
 8008366:	9104      	str	r1, [sp, #16]
 8008368:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800836a:	6811      	ldr	r1, [r2, #0]
 800836c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008370:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8008372:	2220      	movs	r2, #32
 8008374:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8008378:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800837c:	e73b      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
    __HAL_LOCK(hi2c);
 800837e:	2302      	movs	r3, #2
 8008380:	e739      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
          return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e737      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e735      	b.n	80081f6 <HAL_I2C_Mem_Read_DMA+0x22>
 800838a:	bf00      	nop
 800838c:	20000008 	.word	0x20000008
 8008390:	14f8b589 	.word	0x14f8b589
 8008394:	ffff0000 	.word	0xffff0000
 8008398:	08009567 	.word	0x08009567
 800839c:	08009523 	.word	0x08009523

080083a0 <HAL_I2C_IsDeviceReady>:
{
 80083a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083a4:	b085      	sub	sp, #20
 80083a6:	4604      	mov	r4, r0
 80083a8:	460f      	mov	r7, r1
 80083aa:	4690      	mov	r8, r2
 80083ac:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80083ae:	f7f9 f829 	bl	8001404 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d004      	beq.n	80083c6 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80083bc:	2302      	movs	r3, #2
}
 80083be:	4618      	mov	r0, r3
 80083c0:	b005      	add	sp, #20
 80083c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083c8:	9000      	str	r0, [sp, #0]
 80083ca:	2319      	movs	r3, #25
 80083cc:	2201      	movs	r2, #1
 80083ce:	4959      	ldr	r1, [pc, #356]	; (8008534 <HAL_I2C_IsDeviceReady+0x194>)
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7fd ff70 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80083d6:	b108      	cbz	r0, 80083dc <HAL_I2C_IsDeviceReady+0x3c>
      return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
 80083da:	e7f0      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80083dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f000 809e 	beq.w	8008522 <HAL_I2C_IsDeviceReady+0x182>
 80083e6:	2301      	movs	r3, #1
 80083e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	f012 0f01 	tst.w	r2, #1
 80083f4:	d103      	bne.n	80083fe <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	f042 0201 	orr.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008406:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008408:	2324      	movs	r3, #36	; 0x24
 800840a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008412:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8008416:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8008418:	f04f 0901 	mov.w	r9, #1
 800841c:	e03f      	b.n	800849e <HAL_I2C_IsDeviceReady+0xfe>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008426:	d07e      	beq.n	8008526 <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e7c5      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008432:	23a0      	movs	r3, #160	; 0xa0
 8008434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008440:	6959      	ldr	r1, [r3, #20]
 8008442:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008446:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2ba0      	cmp	r3, #160	; 0xa0
 800844e:	d009      	beq.n	8008464 <HAL_I2C_IsDeviceReady+0xc4>
 8008450:	b942      	cbnz	r2, 8008464 <HAL_I2C_IsDeviceReady+0xc4>
 8008452:	b939      	cbnz	r1, 8008464 <HAL_I2C_IsDeviceReady+0xc4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7f8 ffd6 	bl	8001404 <HAL_GetTick>
 8008458:	1b80      	subs	r0, r0, r6
 800845a:	4285      	cmp	r5, r0
 800845c:	d3e9      	bcc.n	8008432 <HAL_I2C_IsDeviceReady+0x92>
 800845e:	2d00      	cmp	r5, #0
 8008460:	d1ea      	bne.n	8008438 <HAL_I2C_IsDeviceReady+0x98>
 8008462:	e7e6      	b.n	8008432 <HAL_I2C_IsDeviceReady+0x92>
      hi2c->State = HAL_I2C_STATE_READY;
 8008464:	2320      	movs	r3, #32
 8008466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	f012 0f02 	tst.w	r2, #2
 8008472:	d132      	bne.n	80084da <HAL_I2C_IsDeviceReady+0x13a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800847a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008482:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008484:	9600      	str	r6, [sp, #0]
 8008486:	2319      	movs	r3, #25
 8008488:	2201      	movs	r2, #1
 800848a:	492a      	ldr	r1, [pc, #168]	; (8008534 <HAL_I2C_IsDeviceReady+0x194>)
 800848c:	4620      	mov	r0, r4
 800848e:	f7fd ff12 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8008492:	2800      	cmp	r0, #0
 8008494:	d14b      	bne.n	800852e <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 8008496:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 800849a:	45c1      	cmp	r9, r8
 800849c:	d239      	bcs.n	8008512 <HAL_I2C_IsDeviceReady+0x172>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	6813      	ldr	r3, [r2, #0]
 80084a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80084a8:	9600      	str	r6, [sp, #0]
 80084aa:	462b      	mov	r3, r5
 80084ac:	2200      	movs	r2, #0
 80084ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7fd feff 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1b0      	bne.n	800841e <HAL_I2C_IsDeviceReady+0x7e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80084c2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80084c4:	f7f8 ff9e 	bl	8001404 <HAL_GetTick>
 80084c8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	695a      	ldr	r2, [r3, #20]
 80084ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80084d2:	6959      	ldr	r1, [r3, #20]
 80084d4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80084d8:	e7b5      	b.n	8008446 <HAL_I2C_IsDeviceReady+0xa6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e2:	2300      	movs	r3, #0
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	695a      	ldr	r2, [r3, #20]
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084f2:	9600      	str	r6, [sp, #0]
 80084f4:	2319      	movs	r3, #25
 80084f6:	2201      	movs	r2, #1
 80084f8:	490e      	ldr	r1, [pc, #56]	; (8008534 <HAL_I2C_IsDeviceReady+0x194>)
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7fd fedb 	bl	80062b6 <I2C_WaitOnFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	b990      	cbnz	r0, 800852a <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8008504:	2220      	movs	r2, #32
 8008506:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800850a:	2200      	movs	r2, #0
 800850c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8008510:	e755      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008512:	2320      	movs	r3, #32
 8008514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008518:	2300      	movs	r3, #0
 800851a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e74d      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8008522:	2302      	movs	r3, #2
 8008524:	e74b      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e749      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e747      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e745      	b.n	80083be <HAL_I2C_IsDeviceReady+0x1e>
 8008532:	bf00      	nop
 8008534:	00100002 	.word	0x00100002

08008538 <HAL_I2C_Master_Seq_Transmit_IT>:
{
 8008538:	b430      	push	{r4, r5}
 800853a:	b082      	sub	sp, #8
  __IO uint32_t Prev_State = 0x00U;
 800853c:	2400      	movs	r4, #0
 800853e:	9401      	str	r4, [sp, #4]
  __IO uint32_t count      = 0x00U;
 8008540:	9400      	str	r4, [sp, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008542:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008546:	b2e4      	uxtb	r4, r4
 8008548:	2c20      	cmp	r4, #32
 800854a:	d003      	beq.n	8008554 <HAL_I2C_Master_Seq_Transmit_IT+0x1c>
    return HAL_BUSY;
 800854c:	2002      	movs	r0, #2
}
 800854e:	b002      	add	sp, #8
 8008550:	bc30      	pop	{r4, r5}
 8008552:	4770      	bx	lr
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008554:	9c04      	ldr	r4, [sp, #16]
 8008556:	2c08      	cmp	r4, #8
 8008558:	d039      	beq.n	80085ce <HAL_I2C_Master_Seq_Transmit_IT+0x96>
 800855a:	2c01      	cmp	r4, #1
 800855c:	d037      	beq.n	80085ce <HAL_I2C_Master_Seq_Transmit_IT+0x96>
    __HAL_LOCK(hi2c);
 800855e:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008562:	2c01      	cmp	r4, #1
 8008564:	d068      	beq.n	8008638 <HAL_I2C_Master_Seq_Transmit_IT+0x100>
 8008566:	2401      	movs	r4, #1
 8008568:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800856c:	6804      	ldr	r4, [r0, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0f01 	tst.w	r5, #1
 8008574:	d103      	bne.n	800857e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
      __HAL_I2C_ENABLE(hi2c);
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f045 0501 	orr.w	r5, r5, #1
 800857c:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800857e:	6805      	ldr	r5, [r0, #0]
 8008580:	682c      	ldr	r4, [r5, #0]
 8008582:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8008586:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008588:	2421      	movs	r4, #33	; 0x21
 800858a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800858e:	2410      	movs	r4, #16
 8008590:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008594:	2400      	movs	r4, #0
 8008596:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008598:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800859a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800859c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800859e:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80085a4:	6441      	str	r1, [r0, #68]	; 0x44
    Prev_State = hi2c->PreviousState;
 80085a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80085a8:	9301      	str	r3, [sp, #4]
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	2b11      	cmp	r3, #17
 80085ae:	d034      	beq.n	800861a <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b0:	6802      	ldr	r2, [r0, #0]
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80085ba:	2300      	movs	r3, #0
 80085bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085c0:	6801      	ldr	r1, [r0, #0]
 80085c2:	684a      	ldr	r2, [r1, #4]
 80085c4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80085c8:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 80085ca:	4618      	mov	r0, r3
 80085cc:	e7bf      	b.n	800854e <HAL_I2C_Master_Seq_Transmit_IT+0x16>
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80085ce:	4c1b      	ldr	r4, [pc, #108]	; (800863c <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 80085d0:	6824      	ldr	r4, [r4, #0]
 80085d2:	08e4      	lsrs	r4, r4, #3
 80085d4:	4d1a      	ldr	r5, [pc, #104]	; (8008640 <HAL_I2C_Master_Seq_Transmit_IT+0x108>)
 80085d6:	fba5 5404 	umull	r5, r4, r5, r4
 80085da:	0a24      	lsrs	r4, r4, #8
 80085dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80085e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80085e4:	9400      	str	r4, [sp, #0]
        count--;
 80085e6:	9c00      	ldr	r4, [sp, #0]
 80085e8:	3c01      	subs	r4, #1
 80085ea:	9400      	str	r4, [sp, #0]
        if (count == 0U)
 80085ec:	9c00      	ldr	r4, [sp, #0]
 80085ee:	b12c      	cbz	r4, 80085fc <HAL_I2C_Master_Seq_Transmit_IT+0xc4>
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80085f0:	6804      	ldr	r4, [r0, #0]
 80085f2:	69a4      	ldr	r4, [r4, #24]
 80085f4:	f014 0f02 	tst.w	r4, #2
 80085f8:	d1f5      	bne.n	80085e6 <HAL_I2C_Master_Seq_Transmit_IT+0xae>
 80085fa:	e7b0      	b.n	800855e <HAL_I2C_Master_Seq_Transmit_IT+0x26>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	6303      	str	r3, [r0, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008600:	2220      	movs	r2, #32
 8008602:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008606:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800860a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800860c:	f042 0220 	orr.w	r2, r2, #32
 8008610:	6402      	str	r2, [r0, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008612:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          return HAL_ERROR;
 8008616:	2001      	movs	r0, #1
 8008618:	e799      	b.n	800854e <HAL_I2C_Master_Seq_Transmit_IT+0x16>
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008620:	d008      	beq.n	8008634 <HAL_I2C_Master_Seq_Transmit_IT+0xfc>
 8008622:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008626:	d003      	beq.n	8008630 <HAL_I2C_Master_Seq_Transmit_IT+0xf8>
 8008628:	2300      	movs	r3, #0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0c5      	beq.n	80085ba <HAL_I2C_Master_Seq_Transmit_IT+0x82>
 800862e:	e7bf      	b.n	80085b0 <HAL_I2C_Master_Seq_Transmit_IT+0x78>
 8008630:	2301      	movs	r3, #1
 8008632:	e7fa      	b.n	800862a <HAL_I2C_Master_Seq_Transmit_IT+0xf2>
 8008634:	2301      	movs	r3, #1
 8008636:	e7f8      	b.n	800862a <HAL_I2C_Master_Seq_Transmit_IT+0xf2>
    __HAL_LOCK(hi2c);
 8008638:	2002      	movs	r0, #2
 800863a:	e788      	b.n	800854e <HAL_I2C_Master_Seq_Transmit_IT+0x16>
 800863c:	20000008 	.word	0x20000008
 8008640:	14f8b589 	.word	0x14f8b589

08008644 <HAL_I2C_Master_Seq_Transmit_DMA>:
{
 8008644:	b530      	push	{r4, r5, lr}
 8008646:	b083      	sub	sp, #12
  __IO uint32_t Prev_State = 0x00U;
 8008648:	2400      	movs	r4, #0
 800864a:	9401      	str	r4, [sp, #4]
  __IO uint32_t count      = 0x00U;
 800864c:	9400      	str	r4, [sp, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800864e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008652:	b2e4      	uxtb	r4, r4
 8008654:	2c20      	cmp	r4, #32
 8008656:	d003      	beq.n	8008660 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c>
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
}
 800865a:	4618      	mov	r0, r3
 800865c:	b003      	add	sp, #12
 800865e:	bd30      	pop	{r4, r5, pc}
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008660:	9c06      	ldr	r4, [sp, #24]
 8008662:	2c08      	cmp	r4, #8
 8008664:	d042      	beq.n	80086ec <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
 8008666:	2c01      	cmp	r4, #1
 8008668:	d040      	beq.n	80086ec <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    __HAL_LOCK(hi2c);
 800866a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800866e:	2c01      	cmp	r4, #1
 8008670:	f000 80c7 	beq.w	8008802 <HAL_I2C_Master_Seq_Transmit_DMA+0x1be>
 8008674:	2401      	movs	r4, #1
 8008676:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800867a:	6804      	ldr	r4, [r0, #0]
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	f015 0f01 	tst.w	r5, #1
 8008682:	d103      	bne.n	800868c <HAL_I2C_Master_Seq_Transmit_DMA+0x48>
      __HAL_I2C_ENABLE(hi2c);
 8008684:	6825      	ldr	r5, [r4, #0]
 8008686:	f045 0501 	orr.w	r5, r5, #1
 800868a:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800868c:	6805      	ldr	r5, [r0, #0]
 800868e:	682c      	ldr	r4, [r5, #0]
 8008690:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8008694:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008696:	2421      	movs	r4, #33	; 0x21
 8008698:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800869c:	2410      	movs	r4, #16
 800869e:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086a2:	2400      	movs	r4, #0
 80086a4:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80086a6:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086a8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80086b4:	6441      	str	r1, [r0, #68]	; 0x44
    Prev_State = hi2c->PreviousState;
 80086b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80086b8:	9201      	str	r2, [sp, #4]
    if (hi2c->XferSize > 0U)
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d13c      	bne.n	8008738 <HAL_I2C_Master_Seq_Transmit_DMA+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086be:	6802      	ldr	r2, [r0, #0]
 80086c0:	6813      	ldr	r3, [r2, #0]
 80086c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086c6:	6013      	str	r3, [r2, #0]
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	2b11      	cmp	r3, #17
 80086cc:	f000 8089 	beq.w	80087e2 <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086d0:	6802      	ldr	r2, [r0, #0]
 80086d2:	6813      	ldr	r3, [r2, #0]
 80086d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d8:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80086da:	2300      	movs	r3, #0
 80086dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086e0:	6801      	ldr	r1, [r0, #0]
 80086e2:	684a      	ldr	r2, [r1, #4]
 80086e4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80086e8:	604a      	str	r2, [r1, #4]
 80086ea:	e7b6      	b.n	800865a <HAL_I2C_Master_Seq_Transmit_DMA+0x16>
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80086ec:	4c46      	ldr	r4, [pc, #280]	; (8008808 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c4>)
 80086ee:	6824      	ldr	r4, [r4, #0]
 80086f0:	08e4      	lsrs	r4, r4, #3
 80086f2:	4d46      	ldr	r5, [pc, #280]	; (800880c <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>)
 80086f4:	fba5 5404 	umull	r5, r4, r5, r4
 80086f8:	0a24      	lsrs	r4, r4, #8
 80086fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80086fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008702:	9400      	str	r4, [sp, #0]
        count--;
 8008704:	9c00      	ldr	r4, [sp, #0]
 8008706:	3c01      	subs	r4, #1
 8008708:	9400      	str	r4, [sp, #0]
        if (count == 0U)
 800870a:	9c00      	ldr	r4, [sp, #0]
 800870c:	b12c      	cbz	r4, 800871a <HAL_I2C_Master_Seq_Transmit_DMA+0xd6>
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800870e:	6804      	ldr	r4, [r0, #0]
 8008710:	69a4      	ldr	r4, [r4, #24]
 8008712:	f014 0f02 	tst.w	r4, #2
 8008716:	d1f5      	bne.n	8008704 <HAL_I2C_Master_Seq_Transmit_DMA+0xc0>
 8008718:	e7a7      	b.n	800866a <HAL_I2C_Master_Seq_Transmit_DMA+0x26>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800871a:	2300      	movs	r3, #0
 800871c:	6303      	str	r3, [r0, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800871e:	2220      	movs	r2, #32
 8008720:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008724:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008728:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800872a:	f042 0220 	orr.w	r2, r2, #32
 800872e:	6402      	str	r2, [r0, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008730:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e790      	b.n	800865a <HAL_I2C_Master_Seq_Transmit_DMA+0x16>
 8008738:	4604      	mov	r4, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800873a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800873c:	4a34      	ldr	r2, [pc, #208]	; (8008810 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>)
 800873e:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008742:	4a34      	ldr	r2, [pc, #208]	; (8008814 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>)
 8008744:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008746:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008748:	2300      	movs	r3, #0
 800874a:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800874c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800874e:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008750:	6802      	ldr	r2, [r0, #0]
 8008752:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008754:	3210      	adds	r2, #16
 8008756:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008758:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800875a:	f7fb faa6 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800875e:	4603      	mov	r3, r0
 8008760:	2800      	cmp	r0, #0
 8008762:	d130      	bne.n	80087c6 <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008764:	6821      	ldr	r1, [r4, #0]
 8008766:	680a      	ldr	r2, [r1, #0]
 8008768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800876c:	600a      	str	r2, [r1, #0]
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800876e:	9a01      	ldr	r2, [sp, #4]
 8008770:	2a11      	cmp	r2, #17
 8008772:	d019      	beq.n	80087a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x164>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008774:	6821      	ldr	r1, [r4, #0]
 8008776:	680a      	ldr	r2, [r1, #0]
 8008778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800877c:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hi2c);
 800877e:	2200      	movs	r2, #0
 8008780:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008784:	9a06      	ldr	r2, [sp, #24]
 8008786:	2a04      	cmp	r2, #4
 8008788:	d003      	beq.n	8008792 <HAL_I2C_Master_Seq_Transmit_DMA+0x14e>
 800878a:	2a20      	cmp	r2, #32
 800878c:	d001      	beq.n	8008792 <HAL_I2C_Master_Seq_Transmit_DMA+0x14e>
 800878e:	2a10      	cmp	r2, #16
 8008790:	d104      	bne.n	800879c <HAL_I2C_Master_Seq_Transmit_DMA+0x158>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	684a      	ldr	r2, [r1, #4]
 8008796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800879a:	604a      	str	r2, [r1, #4]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800879c:	6821      	ldr	r1, [r4, #0]
 800879e:	684a      	ldr	r2, [r1, #4]
 80087a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80087a4:	604a      	str	r2, [r1, #4]
 80087a6:	e758      	b.n	800865a <HAL_I2C_Master_Seq_Transmit_DMA+0x16>
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80087a8:	9a06      	ldr	r2, [sp, #24]
 80087aa:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80087ae:	d008      	beq.n	80087c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x17e>
 80087b0:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80087b4:	d003      	beq.n	80087be <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
 80087b6:	2200      	movs	r2, #0
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d0e0      	beq.n	800877e <HAL_I2C_Master_Seq_Transmit_DMA+0x13a>
 80087bc:	e7da      	b.n	8008774 <HAL_I2C_Master_Seq_Transmit_DMA+0x130>
 80087be:	2201      	movs	r2, #1
 80087c0:	e7fa      	b.n	80087b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x174>
 80087c2:	2201      	movs	r2, #1
 80087c4:	e7f8      	b.n	80087b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x174>
        hi2c->State     = HAL_I2C_STATE_READY;
 80087c6:	2320      	movs	r3, #32
 80087c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087cc:	2200      	movs	r2, #0
 80087ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d4:	f043 0310 	orr.w	r3, r3, #16
 80087d8:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80087da:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e73b      	b.n	800865a <HAL_I2C_Master_Seq_Transmit_DMA+0x16>
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80087e8:	d009      	beq.n	80087fe <HAL_I2C_Master_Seq_Transmit_DMA+0x1ba>
 80087ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80087ee:	d004      	beq.n	80087fa <HAL_I2C_Master_Seq_Transmit_DMA+0x1b6>
 80087f0:	2300      	movs	r3, #0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f43f af71 	beq.w	80086da <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
 80087f8:	e76a      	b.n	80086d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x8c>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e7f9      	b.n	80087f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ae>
 80087fe:	2301      	movs	r3, #1
 8008800:	e7f7      	b.n	80087f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ae>
    __HAL_LOCK(hi2c);
 8008802:	2302      	movs	r3, #2
 8008804:	e729      	b.n	800865a <HAL_I2C_Master_Seq_Transmit_DMA+0x16>
 8008806:	bf00      	nop
 8008808:	20000008 	.word	0x20000008
 800880c:	14f8b589 	.word	0x14f8b589
 8008810:	08009567 	.word	0x08009567
 8008814:	08009523 	.word	0x08009523

08008818 <HAL_I2C_Master_Seq_Receive_IT>:
{
 8008818:	b430      	push	{r4, r5}
 800881a:	b082      	sub	sp, #8
  __IO uint32_t Prev_State = 0x00U;
 800881c:	2400      	movs	r4, #0
 800881e:	9401      	str	r4, [sp, #4]
  __IO uint32_t count = 0U;
 8008820:	9400      	str	r4, [sp, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008822:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008826:	b2e4      	uxtb	r4, r4
 8008828:	2c20      	cmp	r4, #32
 800882a:	d003      	beq.n	8008834 <HAL_I2C_Master_Seq_Receive_IT+0x1c>
    return HAL_BUSY;
 800882c:	2002      	movs	r0, #2
}
 800882e:	b002      	add	sp, #8
 8008830:	bc30      	pop	{r4, r5}
 8008832:	4770      	bx	lr
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008834:	9c04      	ldr	r4, [sp, #16]
 8008836:	2c08      	cmp	r4, #8
 8008838:	d044      	beq.n	80088c4 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800883a:	2c01      	cmp	r4, #1
 800883c:	d042      	beq.n	80088c4 <HAL_I2C_Master_Seq_Receive_IT+0xac>
    __HAL_LOCK(hi2c);
 800883e:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008842:	2c01      	cmp	r4, #1
 8008844:	f000 8090 	beq.w	8008968 <HAL_I2C_Master_Seq_Receive_IT+0x150>
 8008848:	2401      	movs	r4, #1
 800884a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800884e:	6804      	ldr	r4, [r0, #0]
 8008850:	6825      	ldr	r5, [r4, #0]
 8008852:	f015 0f01 	tst.w	r5, #1
 8008856:	d103      	bne.n	8008860 <HAL_I2C_Master_Seq_Receive_IT+0x48>
      __HAL_I2C_ENABLE(hi2c);
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	f045 0501 	orr.w	r5, r5, #1
 800885e:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008860:	6805      	ldr	r5, [r0, #0]
 8008862:	682c      	ldr	r4, [r5, #0]
 8008864:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8008868:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800886a:	2422      	movs	r4, #34	; 0x22
 800886c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008870:	2410      	movs	r4, #16
 8008872:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008876:	2400      	movs	r4, #0
 8008878:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800887a:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800887c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800887e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008880:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008886:	6441      	str	r1, [r0, #68]	; 0x44
    Prev_State = hi2c->PreviousState;
 8008888:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800888a:	9301      	str	r3, [sp, #4]
    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800888c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d03d      	beq.n	8008910 <HAL_I2C_Master_Seq_Receive_IT+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008894:	6802      	ldr	r2, [r0, #0]
 8008896:	6813      	ldr	r3, [r2, #0]
 8008898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800889c:	6013      	str	r3, [r2, #0]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800889e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	2b12      	cmp	r3, #18
 80088a6:	d050      	beq.n	800894a <HAL_I2C_Master_Seq_Receive_IT+0x132>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088a8:	6801      	ldr	r1, [r0, #0]
 80088aa:	680b      	ldr	r3, [r1, #0]
 80088ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b0:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80088b2:	2300      	movs	r3, #0
 80088b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	6848      	ldr	r0, [r1, #4]
 80088bc:	4302      	orrs	r2, r0
 80088be:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 80088c0:	4618      	mov	r0, r3
 80088c2:	e7b4      	b.n	800882e <HAL_I2C_Master_Seq_Receive_IT+0x16>
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80088c4:	4c29      	ldr	r4, [pc, #164]	; (800896c <HAL_I2C_Master_Seq_Receive_IT+0x154>)
 80088c6:	6824      	ldr	r4, [r4, #0]
 80088c8:	08e4      	lsrs	r4, r4, #3
 80088ca:	4d29      	ldr	r5, [pc, #164]	; (8008970 <HAL_I2C_Master_Seq_Receive_IT+0x158>)
 80088cc:	fba5 5404 	umull	r5, r4, r5, r4
 80088d0:	0a24      	lsrs	r4, r4, #8
 80088d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80088d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80088da:	9400      	str	r4, [sp, #0]
        count--;
 80088dc:	9c00      	ldr	r4, [sp, #0]
 80088de:	3c01      	subs	r4, #1
 80088e0:	9400      	str	r4, [sp, #0]
        if (count == 0U)
 80088e2:	9c00      	ldr	r4, [sp, #0]
 80088e4:	b12c      	cbz	r4, 80088f2 <HAL_I2C_Master_Seq_Receive_IT+0xda>
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80088e6:	6804      	ldr	r4, [r0, #0]
 80088e8:	69a4      	ldr	r4, [r4, #24]
 80088ea:	f014 0f02 	tst.w	r4, #2
 80088ee:	d1f5      	bne.n	80088dc <HAL_I2C_Master_Seq_Receive_IT+0xc4>
 80088f0:	e7a5      	b.n	800883e <HAL_I2C_Master_Seq_Receive_IT+0x26>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088f2:	2300      	movs	r3, #0
 80088f4:	6303      	str	r3, [r0, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088f6:	2220      	movs	r2, #32
 80088f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008900:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008902:	f042 0220 	orr.w	r2, r2, #32
 8008906:	6402      	str	r2, [r0, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008908:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          return HAL_ERROR;
 800890c:	2001      	movs	r0, #1
 800890e:	e78e      	b.n	800882e <HAL_I2C_Master_Seq_Receive_IT+0x16>
    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	2b20      	cmp	r3, #32
 8008914:	d001      	beq.n	800891a <HAL_I2C_Master_Seq_Receive_IT+0x102>
 8008916:	2b10      	cmp	r3, #16
 8008918:	d1bc      	bne.n	8008894 <HAL_I2C_Master_Seq_Receive_IT+0x7c>
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	2b12      	cmp	r3, #18
 800891e:	d007      	beq.n	8008930 <HAL_I2C_Master_Seq_Receive_IT+0x118>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008920:	6802      	ldr	r2, [r0, #0]
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008928:	6013      	str	r3, [r2, #0]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800892a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800892e:	e7b8      	b.n	80088a2 <HAL_I2C_Master_Seq_Receive_IT+0x8a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008930:	6802      	ldr	r2, [r0, #0]
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008938:	6013      	str	r3, [r2, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800893a:	6802      	ldr	r2, [r0, #0]
 800893c:	6813      	ldr	r3, [r2, #0]
 800893e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008942:	6013      	str	r3, [r2, #0]
        enableIT &= ~I2C_IT_BUF;
 8008944:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008948:	e7ab      	b.n	80088a2 <HAL_I2C_Master_Seq_Receive_IT+0x8a>
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008950:	d008      	beq.n	8008964 <HAL_I2C_Master_Seq_Receive_IT+0x14c>
 8008952:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008956:	d003      	beq.n	8008960 <HAL_I2C_Master_Seq_Receive_IT+0x148>
 8008958:	2300      	movs	r3, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0a9      	beq.n	80088b2 <HAL_I2C_Master_Seq_Receive_IT+0x9a>
 800895e:	e7a3      	b.n	80088a8 <HAL_I2C_Master_Seq_Receive_IT+0x90>
 8008960:	2301      	movs	r3, #1
 8008962:	e7fa      	b.n	800895a <HAL_I2C_Master_Seq_Receive_IT+0x142>
 8008964:	2301      	movs	r3, #1
 8008966:	e7f8      	b.n	800895a <HAL_I2C_Master_Seq_Receive_IT+0x142>
    __HAL_LOCK(hi2c);
 8008968:	2002      	movs	r0, #2
 800896a:	e760      	b.n	800882e <HAL_I2C_Master_Seq_Receive_IT+0x16>
 800896c:	20000008 	.word	0x20000008
 8008970:	14f8b589 	.word	0x14f8b589

08008974 <HAL_I2C_Master_Seq_Receive_DMA>:
{
 8008974:	b530      	push	{r4, r5, lr}
 8008976:	b083      	sub	sp, #12
  __IO uint32_t Prev_State = 0x00U;
 8008978:	2400      	movs	r4, #0
 800897a:	9401      	str	r4, [sp, #4]
  __IO uint32_t count = 0U;
 800897c:	9400      	str	r4, [sp, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800897e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008982:	b2e4      	uxtb	r4, r4
 8008984:	2c20      	cmp	r4, #32
 8008986:	d003      	beq.n	8008990 <HAL_I2C_Master_Seq_Receive_DMA+0x1c>
    return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
}
 800898a:	4618      	mov	r0, r3
 800898c:	b003      	add	sp, #12
 800898e:	bd30      	pop	{r4, r5, pc}
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008990:	9c06      	ldr	r4, [sp, #24]
 8008992:	2c08      	cmp	r4, #8
 8008994:	d07b      	beq.n	8008a8e <HAL_I2C_Master_Seq_Receive_DMA+0x11a>
 8008996:	2c01      	cmp	r4, #1
 8008998:	d079      	beq.n	8008a8e <HAL_I2C_Master_Seq_Receive_DMA+0x11a>
    __HAL_LOCK(hi2c);
 800899a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800899e:	2c01      	cmp	r4, #1
 80089a0:	f000 80fd 	beq.w	8008b9e <HAL_I2C_Master_Seq_Receive_DMA+0x22a>
 80089a4:	2401      	movs	r4, #1
 80089a6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089aa:	6804      	ldr	r4, [r0, #0]
 80089ac:	6825      	ldr	r5, [r4, #0]
 80089ae:	f015 0f01 	tst.w	r5, #1
 80089b2:	d103      	bne.n	80089bc <HAL_I2C_Master_Seq_Receive_DMA+0x48>
      __HAL_I2C_ENABLE(hi2c);
 80089b4:	6825      	ldr	r5, [r4, #0]
 80089b6:	f045 0501 	orr.w	r5, r5, #1
 80089ba:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089bc:	6805      	ldr	r5, [r0, #0]
 80089be:	682c      	ldr	r4, [r5, #0]
 80089c0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80089c4:	602c      	str	r4, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80089c6:	6805      	ldr	r5, [r0, #0]
 80089c8:	686c      	ldr	r4, [r5, #4]
 80089ca:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80089ce:	606c      	str	r4, [r5, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089d0:	2422      	movs	r4, #34	; 0x22
 80089d2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089d6:	2410      	movs	r4, #16
 80089d8:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089dc:	2400      	movs	r4, #0
 80089de:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80089e0:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089e2:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80089ea:	9a06      	ldr	r2, [sp, #24]
 80089ec:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80089ee:	6441      	str	r1, [r0, #68]	; 0x44
    Prev_State = hi2c->PreviousState;
 80089f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80089f2:	9201      	str	r2, [sp, #4]
    if (hi2c->XferSize > 0U)
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80ad 	beq.w	8008b54 <HAL_I2C_Master_Seq_Receive_DMA+0x1e0>
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80089fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d06b      	beq.n	8008ada <HAL_I2C_Master_Seq_Receive_DMA+0x166>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a02:	6802      	ldr	r2, [r0, #0]
 8008a04:	6813      	ldr	r3, [r2, #0]
 8008a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a0a:	6013      	str	r3, [r2, #0]
        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d004      	beq.n	8008a1c <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8008a12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a16:	d001      	beq.n	8008a1c <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d104      	bne.n	8008a26 <HAL_I2C_Master_Seq_Receive_DMA+0xb2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a1c:	6802      	ldr	r2, [r0, #0]
 8008a1e:	6853      	ldr	r3, [r2, #4]
 8008a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a24:	6053      	str	r3, [r2, #4]
 8008a26:	4604      	mov	r4, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008a28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a2a:	4a5e      	ldr	r2, [pc, #376]	; (8008ba4 <HAL_I2C_Master_Seq_Receive_DMA+0x230>)
 8008a2c:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008a2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a30:	4a5d      	ldr	r2, [pc, #372]	; (8008ba8 <HAL_I2C_Master_Seq_Receive_DMA+0x234>)
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008a34:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008a36:	2300      	movs	r3, #0
 8008a38:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008a3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008a3c:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008a3e:	6801      	ldr	r1, [r0, #0]
 8008a40:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008a42:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008a44:	3110      	adds	r1, #16
 8008a46:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008a48:	f7fb f92f 	bl	8003caa <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d172      	bne.n	8008b38 <HAL_I2C_Master_Seq_Receive_DMA+0x1c4>
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008a52:	9a01      	ldr	r2, [sp, #4]
 8008a54:	2a12      	cmp	r2, #18
 8008a56:	d05e      	beq.n	8008b16 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a58:	6821      	ldr	r1, [r4, #0]
 8008a5a:	680a      	ldr	r2, [r1, #0]
 8008a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a60:	600a      	str	r2, [r1, #0]
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8008a62:	f44f 7240 	mov.w	r2, #768	; 0x300
        __HAL_UNLOCK(hi2c);
 8008a66:	2100      	movs	r1, #0
 8008a68:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008a6c:	9906      	ldr	r1, [sp, #24]
 8008a6e:	2904      	cmp	r1, #4
 8008a70:	d003      	beq.n	8008a7a <HAL_I2C_Master_Seq_Receive_DMA+0x106>
 8008a72:	2920      	cmp	r1, #32
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Master_Seq_Receive_DMA+0x106>
 8008a76:	2910      	cmp	r1, #16
 8008a78:	d104      	bne.n	8008a84 <HAL_I2C_Master_Seq_Receive_DMA+0x110>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a7a:	6820      	ldr	r0, [r4, #0]
 8008a7c:	6841      	ldr	r1, [r0, #4]
 8008a7e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008a82:	6041      	str	r1, [r0, #4]
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8008a84:	6821      	ldr	r1, [r4, #0]
 8008a86:	6848      	ldr	r0, [r1, #4]
 8008a88:	4302      	orrs	r2, r0
 8008a8a:	604a      	str	r2, [r1, #4]
 8008a8c:	e77d      	b.n	800898a <HAL_I2C_Master_Seq_Receive_DMA+0x16>
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a8e:	4c47      	ldr	r4, [pc, #284]	; (8008bac <HAL_I2C_Master_Seq_Receive_DMA+0x238>)
 8008a90:	6824      	ldr	r4, [r4, #0]
 8008a92:	08e4      	lsrs	r4, r4, #3
 8008a94:	4d46      	ldr	r5, [pc, #280]	; (8008bb0 <HAL_I2C_Master_Seq_Receive_DMA+0x23c>)
 8008a96:	fba5 5404 	umull	r5, r4, r5, r4
 8008a9a:	0a24      	lsrs	r4, r4, #8
 8008a9c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008aa0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008aa4:	9400      	str	r4, [sp, #0]
        count--;
 8008aa6:	9c00      	ldr	r4, [sp, #0]
 8008aa8:	3c01      	subs	r4, #1
 8008aaa:	9400      	str	r4, [sp, #0]
        if (count == 0U)
 8008aac:	9c00      	ldr	r4, [sp, #0]
 8008aae:	b12c      	cbz	r4, 8008abc <HAL_I2C_Master_Seq_Receive_DMA+0x148>
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008ab0:	6804      	ldr	r4, [r0, #0]
 8008ab2:	69a4      	ldr	r4, [r4, #24]
 8008ab4:	f014 0f02 	tst.w	r4, #2
 8008ab8:	d1f5      	bne.n	8008aa6 <HAL_I2C_Master_Seq_Receive_DMA+0x132>
 8008aba:	e76e      	b.n	800899a <HAL_I2C_Master_Seq_Receive_DMA+0x26>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	6303      	str	r3, [r0, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008acc:	f042 0220 	orr.w	r2, r2, #32
 8008ad0:	6402      	str	r2, [r0, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008ad2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e757      	b.n	800898a <HAL_I2C_Master_Seq_Receive_DMA+0x16>
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d001      	beq.n	8008ae4 <HAL_I2C_Master_Seq_Receive_DMA+0x170>
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d18e      	bne.n	8008a02 <HAL_I2C_Master_Seq_Receive_DMA+0x8e>
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	2b12      	cmp	r3, #18
 8008ae8:	d005      	beq.n	8008af6 <HAL_I2C_Master_Seq_Receive_DMA+0x182>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aea:	6802      	ldr	r2, [r0, #0]
 8008aec:	6813      	ldr	r3, [r2, #0]
 8008aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	e797      	b.n	8008a26 <HAL_I2C_Master_Seq_Receive_DMA+0xb2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008af6:	6802      	ldr	r2, [r0, #0]
 8008af8:	6813      	ldr	r3, [r2, #0]
 8008afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008afe:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b00:	6802      	ldr	r2, [r0, #0]
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b08:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008b0a:	6802      	ldr	r2, [r0, #0]
 8008b0c:	6853      	ldr	r3, [r2, #4]
 8008b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b12:	6053      	str	r3, [r2, #4]
 8008b14:	e787      	b.n	8008a26 <HAL_I2C_Master_Seq_Receive_DMA+0xb2>
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008b16:	9a06      	ldr	r2, [sp, #24]
 8008b18:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8008b1c:	d00a      	beq.n	8008b34 <HAL_I2C_Master_Seq_Receive_DMA+0x1c0>
 8008b1e:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8008b22:	d005      	beq.n	8008b30 <HAL_I2C_Master_Seq_Receive_DMA+0x1bc>
 8008b24:	2200      	movs	r2, #0
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	d196      	bne.n	8008a58 <HAL_I2C_Master_Seq_Receive_DMA+0xe4>
          enableIT = I2C_IT_ERR;
 8008b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b2e:	e79a      	b.n	8008a66 <HAL_I2C_Master_Seq_Receive_DMA+0xf2>
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008b30:	2201      	movs	r2, #1
 8008b32:	e7f8      	b.n	8008b26 <HAL_I2C_Master_Seq_Receive_DMA+0x1b2>
 8008b34:	2201      	movs	r2, #1
 8008b36:	e7f6      	b.n	8008b26 <HAL_I2C_Master_Seq_Receive_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008b38:	2320      	movs	r3, #32
 8008b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b46:	f043 0310 	orr.w	r3, r3, #16
 8008b4a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008b4c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e71a      	b.n	800898a <HAL_I2C_Master_Seq_Receive_DMA+0x16>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b54:	6802      	ldr	r2, [r0, #0]
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b5c:	6013      	str	r3, [r2, #0]
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	2b12      	cmp	r3, #18
 8008b62:	d00d      	beq.n	8008b80 <HAL_I2C_Master_Seq_Receive_DMA+0x20c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b64:	6802      	ldr	r2, [r0, #0]
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6c:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8008b74:	6801      	ldr	r1, [r0, #0]
 8008b76:	684a      	ldr	r2, [r1, #4]
 8008b78:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008b7c:	604a      	str	r2, [r1, #4]
 8008b7e:	e704      	b.n	800898a <HAL_I2C_Master_Seq_Receive_DMA+0x16>
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b86:	d008      	beq.n	8008b9a <HAL_I2C_Master_Seq_Receive_DMA+0x226>
 8008b88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b8c:	d003      	beq.n	8008b96 <HAL_I2C_Master_Seq_Receive_DMA+0x222>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0ec      	beq.n	8008b6e <HAL_I2C_Master_Seq_Receive_DMA+0x1fa>
 8008b94:	e7e6      	b.n	8008b64 <HAL_I2C_Master_Seq_Receive_DMA+0x1f0>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e7fa      	b.n	8008b90 <HAL_I2C_Master_Seq_Receive_DMA+0x21c>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f8      	b.n	8008b90 <HAL_I2C_Master_Seq_Receive_DMA+0x21c>
    __HAL_LOCK(hi2c);
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e6f3      	b.n	800898a <HAL_I2C_Master_Seq_Receive_DMA+0x16>
 8008ba2:	bf00      	nop
 8008ba4:	08009567 	.word	0x08009567
 8008ba8:	08009523 	.word	0x08009523
 8008bac:	20000008 	.word	0x20000008
 8008bb0:	14f8b589 	.word	0x14f8b589

08008bb4 <HAL_I2C_Slave_Seq_Transmit_IT>:
{
 8008bb4:	b430      	push	{r4, r5}
 8008bb6:	b082      	sub	sp, #8
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bb8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008bbc:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008bc0:	2c28      	cmp	r4, #40	; 0x28
 8008bc2:	d003      	beq.n	8008bcc <HAL_I2C_Slave_Seq_Transmit_IT+0x18>
    return HAL_BUSY;
 8008bc4:	2002      	movs	r0, #2
}
 8008bc6:	b002      	add	sp, #8
 8008bc8:	bc30      	pop	{r4, r5}
 8008bca:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d032      	beq.n	8008c36 <HAL_I2C_Slave_Seq_Transmit_IT+0x82>
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	d032      	beq.n	8008c3a <HAL_I2C_Slave_Seq_Transmit_IT+0x86>
    __HAL_LOCK(hi2c);
 8008bd4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008bd8:	2c01      	cmp	r4, #1
 8008bda:	d030      	beq.n	8008c3e <HAL_I2C_Slave_Seq_Transmit_IT+0x8a>
 8008bdc:	2401      	movs	r4, #1
 8008bde:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008be2:	6804      	ldr	r4, [r0, #0]
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	f015 0f01 	tst.w	r5, #1
 8008bea:	d103      	bne.n	8008bf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x40>
      __HAL_I2C_ENABLE(hi2c);
 8008bec:	6825      	ldr	r5, [r4, #0]
 8008bee:	f045 0501 	orr.w	r5, r5, #1
 8008bf2:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bf4:	6805      	ldr	r5, [r0, #0]
 8008bf6:	682c      	ldr	r4, [r5, #0]
 8008bf8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8008bfc:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8008bfe:	2429      	movs	r4, #41	; 0x29
 8008c00:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008c04:	2420      	movs	r4, #32
 8008c06:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c0a:	2400      	movs	r4, #0
 8008c0c:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008c0e:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c10:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c12:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008c14:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008c16:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c18:	9401      	str	r4, [sp, #4]
 8008c1a:	6803      	ldr	r3, [r0, #0]
 8008c1c:	695a      	ldr	r2, [r3, #20]
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8008c26:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008c30:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8008c32:	4620      	mov	r0, r4
 8008c34:	e7c7      	b.n	8008bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
      return  HAL_ERROR;
 8008c36:	2001      	movs	r0, #1
 8008c38:	e7c5      	b.n	8008bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	e7c3      	b.n	8008bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
    __HAL_LOCK(hi2c);
 8008c3e:	2002      	movs	r0, #2
 8008c40:	e7c1      	b.n	8008bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x12>

08008c42 <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
 8008c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c44:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c46:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008c4a:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008c4e:	2c28      	cmp	r4, #40	; 0x28
 8008c50:	d003      	beq.n	8008c5a <HAL_I2C_Slave_Seq_Transmit_DMA+0x18>
    return HAL_BUSY;
 8008c52:	2302      	movs	r3, #2
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	b003      	add	sp, #12
 8008c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8008c5a:	2900      	cmp	r1, #0
 8008c5c:	f000 80a3 	beq.w	8008da6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x164>
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	f000 80a2 	beq.w	8008daa <HAL_I2C_Slave_Seq_Transmit_DMA+0x168>
    __HAL_LOCK(hi2c);
 8008c66:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008c6a:	2c01      	cmp	r4, #1
 8008c6c:	f000 809f 	beq.w	8008dae <HAL_I2C_Slave_Seq_Transmit_DMA+0x16c>
 8008c70:	461f      	mov	r7, r3
 8008c72:	4616      	mov	r6, r2
 8008c74:	460d      	mov	r5, r1
 8008c76:	4604      	mov	r4, r0
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c7e:	6802      	ldr	r2, [r0, #0]
 8008c80:	6853      	ldr	r3, [r2, #4]
 8008c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c86:	6053      	str	r3, [r2, #4]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c90:	d041      	beq.n	8008d16 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd4>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008c92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b29      	cmp	r3, #41	; 0x29
 8008c9a:	d054      	beq.n	8008d46 <HAL_I2C_Slave_Seq_Transmit_DMA+0x104>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	f012 0f01 	tst.w	r2, #1
 8008ca4:	d103      	bne.n	8008cae <HAL_I2C_Slave_Seq_Transmit_DMA+0x6c>
      __HAL_I2C_ENABLE(hi2c);
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
 8008cac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	6813      	ldr	r3, [r2, #0]
 8008cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cb6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8008cb8:	2329      	movs	r3, #41	; 0x29
 8008cba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008cbe:	2320      	movs	r3, #32
 8008cc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008cc8:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cca:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ccc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008cce:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008cd0:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008cd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008cd4:	4937      	ldr	r1, [pc, #220]	; (8008db4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x172>)
 8008cd6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008cd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008cda:	4937      	ldr	r1, [pc, #220]	; (8008db8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x176>)
 8008cdc:	64d1      	str	r1, [r2, #76]	; 0x4c
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008cde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ce0:	6413      	str	r3, [r2, #64]	; 0x40
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ce2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ce4:	6513      	str	r3, [r2, #80]	; 0x50
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008cea:	3210      	adds	r2, #16
 8008cec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008cf0:	f7fa ffdb 	bl	8003caa <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d03c      	beq.n	8008d74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x132>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008d00:	2200      	movs	r2, #0
 8008d02:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d08:	f043 0310 	orr.w	r3, r3, #16
 8008d0c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008d0e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e79e      	b.n	8008c54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d16:	6803      	ldr	r3, [r0, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008d1e:	d0bd      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
        if (hi2c->hdmarx != NULL)
 8008d20:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d0ba      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d2c:	605a      	str	r2, [r3, #4]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d30:	4a22      	ldr	r2, [pc, #136]	; (8008dbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x17a>)
 8008d32:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d34:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008d36:	f7fb f837 	bl	8003da8 <HAL_DMA_Abort_IT>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0ae      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008d40:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d42:	4798      	blx	r3
 8008d44:	e7aa      	b.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d46:	6803      	ldr	r3, [r0, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008d4e:	d0a5      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d56:	605a      	str	r2, [r3, #4]
        if (hi2c->hdmatx != NULL)
 8008d58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d09e      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d5e:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x17a>)
 8008d60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008d62:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008d64:	f7fb f820 	bl	8003da8 <HAL_DMA_Abort_IT>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d097      	beq.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008d6c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008d6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d70:	4798      	blx	r3
 8008d72:	e793      	b.n	8008c9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	680a      	ldr	r2, [r1, #0]
 8008d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d7c:	600a      	str	r2, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d7e:	2100      	movs	r1, #0
 8008d80:	9101      	str	r1, [sp, #4]
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	6950      	ldr	r0, [r2, #20]
 8008d86:	9001      	str	r0, [sp, #4]
 8008d88:	6990      	ldr	r0, [r2, #24]
 8008d8a:	9001      	str	r0, [sp, #4]
 8008d8c:	9801      	ldr	r0, [sp, #4]
      __HAL_UNLOCK(hi2c);
 8008d8e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d92:	6851      	ldr	r1, [r2, #4]
 8008d94:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8008d98:	6051      	str	r1, [r2, #4]
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008d9a:	6821      	ldr	r1, [r4, #0]
 8008d9c:	684a      	ldr	r2, [r1, #4]
 8008d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008da2:	604a      	str	r2, [r1, #4]
      return HAL_OK;
 8008da4:	e756      	b.n	8008c54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12>
      return  HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e754      	b.n	8008c54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e752      	b.n	8008c54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12>
    __HAL_LOCK(hi2c);
 8008dae:	2302      	movs	r3, #2
 8008db0:	e750      	b.n	8008c54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12>
 8008db2:	bf00      	nop
 8008db4:	08009567 	.word	0x08009567
 8008db8:	08009523 	.word	0x08009523
 8008dbc:	0800968b 	.word	0x0800968b

08008dc0 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 8008dc0:	b430      	push	{r4, r5}
 8008dc2:	b082      	sub	sp, #8
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dc4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008dc8:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008dcc:	2c28      	cmp	r4, #40	; 0x28
 8008dce:	d003      	beq.n	8008dd8 <HAL_I2C_Slave_Seq_Receive_IT+0x18>
    return HAL_BUSY;
 8008dd0:	2002      	movs	r0, #2
}
 8008dd2:	b002      	add	sp, #8
 8008dd4:	bc30      	pop	{r4, r5}
 8008dd6:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	d032      	beq.n	8008e42 <HAL_I2C_Slave_Seq_Receive_IT+0x82>
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	d032      	beq.n	8008e46 <HAL_I2C_Slave_Seq_Receive_IT+0x86>
    __HAL_LOCK(hi2c);
 8008de0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008de4:	2c01      	cmp	r4, #1
 8008de6:	d030      	beq.n	8008e4a <HAL_I2C_Slave_Seq_Receive_IT+0x8a>
 8008de8:	2401      	movs	r4, #1
 8008dea:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dee:	6804      	ldr	r4, [r0, #0]
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	f015 0f01 	tst.w	r5, #1
 8008df6:	d103      	bne.n	8008e00 <HAL_I2C_Slave_Seq_Receive_IT+0x40>
      __HAL_I2C_ENABLE(hi2c);
 8008df8:	6825      	ldr	r5, [r4, #0]
 8008dfa:	f045 0501 	orr.w	r5, r5, #1
 8008dfe:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e00:	6805      	ldr	r5, [r0, #0]
 8008e02:	682c      	ldr	r4, [r5, #0]
 8008e04:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8008e08:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8008e0a:	242a      	movs	r4, #42	; 0x2a
 8008e0c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008e10:	2420      	movs	r4, #32
 8008e12:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e16:	2400      	movs	r4, #0
 8008e18:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008e1a:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e1c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e1e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008e20:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008e22:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e24:	9401      	str	r4, [sp, #4]
 8008e26:	6803      	ldr	r3, [r0, #0]
 8008e28:	695a      	ldr	r2, [r3, #20]
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	9201      	str	r2, [sp, #4]
 8008e30:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8008e32:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008e3c:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8008e3e:	4620      	mov	r0, r4
 8008e40:	e7c7      	b.n	8008dd2 <HAL_I2C_Slave_Seq_Receive_IT+0x12>
      return  HAL_ERROR;
 8008e42:	2001      	movs	r0, #1
 8008e44:	e7c5      	b.n	8008dd2 <HAL_I2C_Slave_Seq_Receive_IT+0x12>
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7c3      	b.n	8008dd2 <HAL_I2C_Slave_Seq_Receive_IT+0x12>
    __HAL_LOCK(hi2c);
 8008e4a:	2002      	movs	r0, #2
 8008e4c:	e7c1      	b.n	8008dd2 <HAL_I2C_Slave_Seq_Receive_IT+0x12>

08008e4e <HAL_I2C_Slave_Seq_Receive_DMA>:
{
 8008e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e50:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e52:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008e56:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008e5a:	2c28      	cmp	r4, #40	; 0x28
 8008e5c:	d003      	beq.n	8008e66 <HAL_I2C_Slave_Seq_Receive_DMA+0x18>
    return HAL_BUSY;
 8008e5e:	2302      	movs	r3, #2
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	b003      	add	sp, #12
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8008e66:	2900      	cmp	r1, #0
 8008e68:	f000 80a3 	beq.w	8008fb2 <HAL_I2C_Slave_Seq_Receive_DMA+0x164>
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	f000 80a2 	beq.w	8008fb6 <HAL_I2C_Slave_Seq_Receive_DMA+0x168>
    __HAL_LOCK(hi2c);
 8008e72:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008e76:	2c01      	cmp	r4, #1
 8008e78:	f000 809f 	beq.w	8008fba <HAL_I2C_Slave_Seq_Receive_DMA+0x16c>
 8008e7c:	461f      	mov	r7, r3
 8008e7e:	4616      	mov	r6, r2
 8008e80:	460d      	mov	r5, r1
 8008e82:	4604      	mov	r4, r0
 8008e84:	2301      	movs	r3, #1
 8008e86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e8a:	6802      	ldr	r2, [r0, #0]
 8008e8c:	6853      	ldr	r3, [r2, #4]
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e92:	6053      	str	r3, [r2, #4]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9c:	d041      	beq.n	8008f22 <HAL_I2C_Slave_Seq_Receive_DMA+0xd4>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b29      	cmp	r3, #41	; 0x29
 8008ea6:	d054      	beq.n	8008f52 <HAL_I2C_Slave_Seq_Receive_DMA+0x104>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	f012 0f01 	tst.w	r2, #1
 8008eb0:	d103      	bne.n	8008eba <HAL_I2C_Slave_Seq_Receive_DMA+0x6c>
      __HAL_I2C_ENABLE(hi2c);
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	f042 0201 	orr.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	6813      	ldr	r3, [r2, #0]
 8008ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ec2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8008ec4:	232a      	movs	r3, #42	; 0x2a
 8008ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008eca:	2320      	movs	r3, #32
 8008ecc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008ed4:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ed6:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ed8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008eda:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008edc:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ee0:	4937      	ldr	r1, [pc, #220]	; (8008fc0 <HAL_I2C_Slave_Seq_Receive_DMA+0x172>)
 8008ee2:	63d1      	str	r1, [r2, #60]	; 0x3c
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008ee4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ee6:	4937      	ldr	r1, [pc, #220]	; (8008fc4 <HAL_I2C_Slave_Seq_Receive_DMA+0x176>)
 8008ee8:	64d1      	str	r1, [r2, #76]	; 0x4c
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008eea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008eec:	6413      	str	r3, [r2, #64]	; 0x40
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008eee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ef0:	6513      	str	r3, [r2, #80]	; 0x50
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008ef2:	6821      	ldr	r1, [r4, #0]
 8008ef4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ef8:	3110      	adds	r1, #16
 8008efa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008efc:	f7fa fed5 	bl	8003caa <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8008f00:	4603      	mov	r3, r0
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d03c      	beq.n	8008f80 <HAL_I2C_Slave_Seq_Receive_DMA+0x132>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008f06:	2320      	movs	r3, #32
 8008f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f14:	f043 0310 	orr.w	r3, r3, #16
 8008f18:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008f1a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e79e      	b.n	8008e60 <HAL_I2C_Slave_Seq_Receive_DMA+0x12>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f22:	6803      	ldr	r3, [r0, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008f2a:	d0bd      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
        if (hi2c->hdmarx != NULL)
 8008f2c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d0ba      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f38:	605a      	str	r2, [r3, #4]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f3c:	4a22      	ldr	r2, [pc, #136]	; (8008fc8 <HAL_I2C_Slave_Seq_Receive_DMA+0x17a>)
 8008f3e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f40:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008f42:	f7fa ff31 	bl	8003da8 <HAL_DMA_Abort_IT>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0ae      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008f4e:	4798      	blx	r3
 8008f50:	e7aa      	b.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f52:	6803      	ldr	r3, [r0, #0]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008f5a:	d0a5      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f62:	605a      	str	r2, [r3, #4]
        if (hi2c->hdmatx != NULL)
 8008f64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d09e      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f6a:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <HAL_I2C_Slave_Seq_Receive_DMA+0x17a>)
 8008f6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f6e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008f70:	f7fa ff1a 	bl	8003da8 <HAL_DMA_Abort_IT>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d097      	beq.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f78:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008f7c:	4798      	blx	r3
 8008f7e:	e793      	b.n	8008ea8 <HAL_I2C_Slave_Seq_Receive_DMA+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f80:	6821      	ldr	r1, [r4, #0]
 8008f82:	680a      	ldr	r2, [r1, #0]
 8008f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f88:	600a      	str	r2, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	9101      	str	r1, [sp, #4]
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	6950      	ldr	r0, [r2, #20]
 8008f92:	9001      	str	r0, [sp, #4]
 8008f94:	6990      	ldr	r0, [r2, #24]
 8008f96:	9001      	str	r0, [sp, #4]
 8008f98:	9801      	ldr	r0, [sp, #4]
      __HAL_UNLOCK(hi2c);
 8008f9a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f9e:	6851      	ldr	r1, [r2, #4]
 8008fa0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008fa4:	6051      	str	r1, [r2, #4]
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008fa6:	6821      	ldr	r1, [r4, #0]
 8008fa8:	684a      	ldr	r2, [r1, #4]
 8008faa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008fae:	604a      	str	r2, [r1, #4]
      return HAL_OK;
 8008fb0:	e756      	b.n	8008e60 <HAL_I2C_Slave_Seq_Receive_DMA+0x12>
      return  HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e754      	b.n	8008e60 <HAL_I2C_Slave_Seq_Receive_DMA+0x12>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e752      	b.n	8008e60 <HAL_I2C_Slave_Seq_Receive_DMA+0x12>
    __HAL_LOCK(hi2c);
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e750      	b.n	8008e60 <HAL_I2C_Slave_Seq_Receive_DMA+0x12>
 8008fbe:	bf00      	nop
 8008fc0:	08009567 	.word	0x08009567
 8008fc4:	08009523 	.word	0x08009523
 8008fc8:	0800968b 	.word	0x0800968b

08008fcc <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d001      	beq.n	8008fda <HAL_I2C_EnableListen_IT+0xe>
    return HAL_BUSY;
 8008fd6:	2002      	movs	r0, #2
}
 8008fd8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008fda:	2328      	movs	r3, #40	; 0x28
 8008fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fe0:	6803      	ldr	r3, [r0, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	f012 0f01 	tst.w	r2, #1
 8008fe8:	d103      	bne.n	8008ff2 <HAL_I2C_EnableListen_IT+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ff2:	6802      	ldr	r2, [r0, #0]
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ffa:	6013      	str	r3, [r2, #0]
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008ffc:	6802      	ldr	r2, [r0, #0]
 8008ffe:	6853      	ldr	r3, [r2, #4]
 8009000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009004:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8009006:	2000      	movs	r0, #0
 8009008:	4770      	bx	lr

0800900a <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800900a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b28      	cmp	r3, #40	; 0x28
 8009012:	d001      	beq.n	8009018 <HAL_I2C_DisableListen_IT+0xe>
    return HAL_BUSY;
 8009014:	2002      	movs	r0, #2
}
 8009016:	4770      	bx	lr
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8009018:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800901c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009020:	f002 0203 	and.w	r2, r2, #3
 8009024:	4313      	orrs	r3, r2
 8009026:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8009028:	2320      	movs	r3, #32
 800902a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800902e:	2300      	movs	r3, #0
 8009030:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009034:	6801      	ldr	r1, [r0, #0]
 8009036:	680a      	ldr	r2, [r1, #0]
 8009038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800903c:	600a      	str	r2, [r1, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800903e:	6801      	ldr	r1, [r0, #0]
 8009040:	684a      	ldr	r2, [r1, #4]
 8009042:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009046:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 8009048:	4618      	mov	r0, r3
 800904a:	4770      	bx	lr

0800904c <HAL_I2C_MasterTxCpltCallback>:
{
 800904c:	4770      	bx	lr

0800904e <HAL_I2C_MasterRxCpltCallback>:
{
 800904e:	4770      	bx	lr

08009050 <HAL_I2C_SlaveTxCpltCallback>:
{
 8009050:	4770      	bx	lr

08009052 <I2C_SlaveTransmit_TXE>:
{
 8009052:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009054:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009058:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800905a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800905c:	b29b      	uxth	r3, r3
 800905e:	b183      	cbz	r3, 8009082 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009060:	6803      	ldr	r3, [r0, #0]
 8009062:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009064:	7809      	ldrb	r1, [r1, #0]
 8009066:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8009068:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800906a:	3301      	adds	r3, #1
 800906c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800906e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009078:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800907a:	b29b      	uxth	r3, r3
 800907c:	b90b      	cbnz	r3, 8009082 <I2C_SlaveTransmit_TXE+0x30>
 800907e:	2a29      	cmp	r2, #41	; 0x29
 8009080:	d000      	beq.n	8009084 <I2C_SlaveTransmit_TXE+0x32>
 8009082:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009084:	6802      	ldr	r2, [r0, #0]
 8009086:	6853      	ldr	r3, [r2, #4]
 8009088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800908c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800908e:	2321      	movs	r3, #33	; 0x21
 8009090:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009092:	2328      	movs	r3, #40	; 0x28
 8009094:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009098:	f7ff ffda 	bl	8009050 <HAL_I2C_SlaveTxCpltCallback>
}
 800909c:	e7f1      	b.n	8009082 <I2C_SlaveTransmit_TXE+0x30>

0800909e <HAL_I2C_SlaveRxCpltCallback>:
{
 800909e:	4770      	bx	lr

080090a0 <I2C_SlaveReceive_RXNE>:
{
 80090a0:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80090a6:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80090a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	b183      	cbz	r3, 80090d0 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090b0:	6801      	ldr	r1, [r0, #0]
 80090b2:	6909      	ldr	r1, [r1, #16]
 80090b4:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80090b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090b8:	3301      	adds	r3, #1
 80090ba:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80090bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090c6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	b90b      	cbnz	r3, 80090d0 <I2C_SlaveReceive_RXNE+0x30>
 80090cc:	2a2a      	cmp	r2, #42	; 0x2a
 80090ce:	d000      	beq.n	80090d2 <I2C_SlaveReceive_RXNE+0x32>
 80090d0:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80090d2:	6802      	ldr	r2, [r0, #0]
 80090d4:	6853      	ldr	r3, [r2, #4]
 80090d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090da:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090dc:	2322      	movs	r3, #34	; 0x22
 80090de:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090e0:	2328      	movs	r3, #40	; 0x28
 80090e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090e6:	f7ff ffda 	bl	800909e <HAL_I2C_SlaveRxCpltCallback>
}
 80090ea:	e7f1      	b.n	80090d0 <I2C_SlaveReceive_RXNE+0x30>

080090ec <HAL_I2C_AddrCallback>:
{
 80090ec:	4770      	bx	lr

080090ee <I2C_Slave_ADDR>:
{
 80090ee:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80090f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090f8:	2b28      	cmp	r3, #40	; 0x28
 80090fa:	d007      	beq.n	800910c <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80090fc:	6803      	ldr	r3, [r0, #0]
 80090fe:	f06f 0202 	mvn.w	r2, #2
 8009102:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8009104:	2300      	movs	r3, #0
 8009106:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800910a:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800910c:	6802      	ldr	r2, [r0, #0]
 800910e:	6853      	ldr	r3, [r2, #4]
 8009110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009114:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009116:	f011 0f04 	tst.w	r1, #4
 800911a:	d00b      	beq.n	8009134 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800911c:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800911e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009122:	d109      	bne.n	8009138 <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009124:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8009126:	2100      	movs	r1, #0
 8009128:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800912c:	4619      	mov	r1, r3
 800912e:	f7ff ffdd 	bl	80090ec <HAL_I2C_AddrCallback>
 8009132:	bd08      	pop	{r3, pc}
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009134:	2301      	movs	r3, #1
 8009136:	e7f2      	b.n	800911e <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009138:	8b02      	ldrh	r2, [r0, #24]
 800913a:	e7f4      	b.n	8009126 <I2C_Slave_ADDR+0x38>

0800913c <HAL_I2C_ListenCpltCallback>:
{
 800913c:	4770      	bx	lr

0800913e <I2C_Slave_AF>:
{
 800913e:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009140:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009144:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009146:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009148:	2a08      	cmp	r2, #8
 800914a:	d008      	beq.n	800915e <I2C_Slave_AF+0x20>
 800914c:	2a20      	cmp	r2, #32
 800914e:	d006      	beq.n	800915e <I2C_Slave_AF+0x20>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009150:	2b21      	cmp	r3, #33	; 0x21
 8009152:	d020      	beq.n	8009196 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009154:	6803      	ldr	r3, [r0, #0]
 8009156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800915a:	615a      	str	r2, [r3, #20]
 800915c:	bd08      	pop	{r3, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800915e:	2b28      	cmp	r3, #40	; 0x28
 8009160:	d1f6      	bne.n	8009150 <I2C_Slave_AF+0x12>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009162:	4b1a      	ldr	r3, [pc, #104]	; (80091cc <I2C_Slave_AF+0x8e>)
 8009164:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009166:	6802      	ldr	r2, [r0, #0]
 8009168:	6853      	ldr	r3, [r2, #4]
 800916a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800916e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009170:	6803      	ldr	r3, [r0, #0]
 8009172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009176:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009178:	6802      	ldr	r2, [r0, #0]
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009180:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009182:	2300      	movs	r3, #0
 8009184:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009186:	2220      	movs	r2, #32
 8009188:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800918c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009190:	f7ff ffd4 	bl	800913c <HAL_I2C_ListenCpltCallback>
 8009194:	bd08      	pop	{r3, pc}
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <I2C_Slave_AF+0x8e>)
 8009198:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800919a:	2321      	movs	r3, #33	; 0x21
 800919c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800919e:	2320      	movs	r3, #32
 80091a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091aa:	6802      	ldr	r2, [r0, #0]
 80091ac:	6853      	ldr	r3, [r2, #4]
 80091ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091b2:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091b4:	6803      	ldr	r3, [r0, #0]
 80091b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091ba:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091bc:	6802      	ldr	r2, [r0, #0]
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091c4:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091c6:	f7ff ff43 	bl	8009050 <HAL_I2C_SlaveTxCpltCallback>
 80091ca:	bd08      	pop	{r3, pc}
 80091cc:	ffff0000 	.word	0xffff0000

080091d0 <HAL_I2C_MemTxCpltCallback>:
{
 80091d0:	4770      	bx	lr

080091d2 <I2C_MasterTransmit_TXE>:
{
 80091d2:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80091d8:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091da:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80091de:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80091e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091e2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80091e4:	b909      	cbnz	r1, 80091ea <I2C_MasterTransmit_TXE+0x18>
 80091e6:	2b21      	cmp	r3, #33	; 0x21
 80091e8:	d004      	beq.n	80091f4 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80091ea:	2b21      	cmp	r3, #33	; 0x21
 80091ec:	d03b      	beq.n	8009266 <I2C_MasterTransmit_TXE+0x94>
 80091ee:	2a40      	cmp	r2, #64	; 0x40
 80091f0:	d037      	beq.n	8009262 <I2C_MasterTransmit_TXE+0x90>
 80091f2:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091f4:	2c08      	cmp	r4, #8
 80091f6:	d004      	beq.n	8009202 <I2C_MasterTransmit_TXE+0x30>
 80091f8:	2c20      	cmp	r4, #32
 80091fa:	d002      	beq.n	8009202 <I2C_MasterTransmit_TXE+0x30>
 80091fc:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8009200:	d119      	bne.n	8009236 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009202:	6802      	ldr	r2, [r0, #0]
 8009204:	6853      	ldr	r3, [r2, #4]
 8009206:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800920a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800920c:	6802      	ldr	r2, [r0, #0]
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009214:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009216:	2300      	movs	r3, #0
 8009218:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800921a:	2320      	movs	r3, #32
 800921c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009220:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b40      	cmp	r3, #64	; 0x40
 8009228:	d015      	beq.n	8009256 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800922a:	2300      	movs	r3, #0
 800922c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009230:	f7ff ff0c 	bl	800904c <HAL_I2C_MasterTxCpltCallback>
 8009234:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009236:	6802      	ldr	r2, [r0, #0]
 8009238:	6853      	ldr	r3, [r2, #4]
 800923a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800923e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009240:	2311      	movs	r3, #17
 8009242:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009244:	2300      	movs	r3, #0
 8009246:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800924a:	2320      	movs	r3, #32
 800924c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009250:	f7ff fefc 	bl	800904c <HAL_I2C_MasterTxCpltCallback>
 8009254:	bd10      	pop	{r4, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009256:	2300      	movs	r3, #0
 8009258:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800925c:	f7ff ffb8 	bl	80091d0 <HAL_I2C_MemTxCpltCallback>
 8009260:	bd10      	pop	{r4, pc}
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009262:	2b22      	cmp	r3, #34	; 0x22
 8009264:	d1c5      	bne.n	80091f2 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8009266:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009268:	b29b      	uxth	r3, r3
 800926a:	b18b      	cbz	r3, 8009290 <I2C_MasterTransmit_TXE+0xbe>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800926c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d012      	beq.n	800929c <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009276:	6803      	ldr	r3, [r0, #0]
 8009278:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800927a:	7812      	ldrb	r2, [r2, #0]
 800927c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800927e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009280:	3301      	adds	r3, #1
 8009282:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8009284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009286:	b29b      	uxth	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	b29b      	uxth	r3, r3
 800928c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800928e:	e7b0      	b.n	80091f2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009290:	6802      	ldr	r2, [r0, #0]
 8009292:	6853      	ldr	r3, [r2, #4]
 8009294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009298:	6053      	str	r3, [r2, #4]
 800929a:	bd10      	pop	{r4, pc}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800929c:	f7fc fe12 	bl	8005ec4 <I2C_MemoryTransmit_TXE_BTF>
 80092a0:	bd10      	pop	{r4, pc}

080092a2 <I2C_MasterTransmit_BTF>:
{
 80092a2:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80092a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b21      	cmp	r3, #33	; 0x21
 80092ae:	d005      	beq.n	80092bc <I2C_MasterTransmit_BTF+0x1a>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092b0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b40      	cmp	r3, #64	; 0x40
 80092b8:	d047      	beq.n	800934a <I2C_MasterTransmit_BTF+0xa8>
 80092ba:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 80092bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	bb03      	cbnz	r3, 8009304 <I2C_MasterTransmit_BTF+0x62>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092c2:	2a08      	cmp	r2, #8
 80092c4:	d004      	beq.n	80092d0 <I2C_MasterTransmit_BTF+0x2e>
 80092c6:	2a20      	cmp	r2, #32
 80092c8:	d002      	beq.n	80092d0 <I2C_MasterTransmit_BTF+0x2e>
 80092ca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80092ce:	d126      	bne.n	800931e <I2C_MasterTransmit_BTF+0x7c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092d0:	6802      	ldr	r2, [r0, #0]
 80092d2:	6853      	ldr	r3, [r2, #4]
 80092d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80092d8:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092da:	6802      	ldr	r2, [r0, #0]
 80092dc:	6813      	ldr	r3, [r2, #0]
 80092de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092e2:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80092e8:	2320      	movs	r3, #32
 80092ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092ee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d022      	beq.n	800933e <I2C_MasterTransmit_BTF+0x9c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80092fe:	f7ff fea5 	bl	800904c <HAL_I2C_MasterTxCpltCallback>
 8009302:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009304:	6803      	ldr	r3, [r0, #0]
 8009306:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009308:	7812      	ldrb	r2, [r2, #0]
 800930a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800930c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800930e:	3301      	adds	r3, #1
 8009310:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8009312:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29b      	uxth	r3, r3
 800931a:	8543      	strh	r3, [r0, #42]	; 0x2a
 800931c:	bd08      	pop	{r3, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800931e:	6802      	ldr	r2, [r0, #0]
 8009320:	6853      	ldr	r3, [r2, #4]
 8009322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009326:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009328:	2311      	movs	r3, #17
 800932a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800932c:	2300      	movs	r3, #0
 800932e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009332:	2320      	movs	r3, #32
 8009334:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009338:	f7ff fe88 	bl	800904c <HAL_I2C_MasterTxCpltCallback>
 800933c:	bd08      	pop	{r3, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009344:	f7ff ff44 	bl	80091d0 <HAL_I2C_MemTxCpltCallback>
 8009348:	bd08      	pop	{r3, pc}
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800934a:	f7fc fdbb 	bl	8005ec4 <I2C_MemoryTransmit_TXE_BTF>
}
 800934e:	e7b4      	b.n	80092ba <I2C_MasterTransmit_BTF+0x18>

08009350 <HAL_I2C_MemRxCpltCallback>:
{
 8009350:	4770      	bx	lr

08009352 <I2C_MasterReceive_RXNE>:
{
 8009352:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009354:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b22      	cmp	r3, #34	; 0x22
 800935c:	d000      	beq.n	8009360 <I2C_MasterReceive_RXNE+0xe>
 800935e:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8009360:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009362:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8009364:	2b03      	cmp	r3, #3
 8009366:	d915      	bls.n	8009394 <I2C_MasterReceive_RXNE+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800936a:	6802      	ldr	r2, [r0, #0]
 800936c:	6912      	ldr	r2, [r2, #16]
 800936e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009370:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009372:	3301      	adds	r3, #1
 8009374:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8009376:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009378:	b29b      	uxth	r3, r3
 800937a:	3b01      	subs	r3, #1
 800937c:	b29b      	uxth	r3, r3
 800937e:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8009380:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b03      	cmp	r3, #3
 8009386:	d1ea      	bne.n	800935e <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009388:	6802      	ldr	r2, [r0, #0]
 800938a:	6853      	ldr	r3, [r2, #4]
 800938c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009390:	6053      	str	r3, [r2, #4]
 8009392:	bd08      	pop	{r3, pc}
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009394:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009396:	2a02      	cmp	r2, #2
 8009398:	d0e1      	beq.n	800935e <I2C_MasterReceive_RXNE+0xc>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d8df      	bhi.n	800935e <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800939e:	6802      	ldr	r2, [r0, #0]
 80093a0:	6813      	ldr	r3, [r2, #0]
 80093a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093a8:	6802      	ldr	r2, [r0, #0]
 80093aa:	6853      	ldr	r3, [r2, #4]
 80093ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80093b0:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093b4:	6802      	ldr	r2, [r0, #0]
 80093b6:	6912      	ldr	r2, [r2, #16]
 80093b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80093ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093bc:	3301      	adds	r3, #1
 80093be:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80093c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80093ca:	2320      	movs	r3, #32
 80093cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b40      	cmp	r3, #64	; 0x40
 80093d8:	d007      	beq.n	80093ea <I2C_MasterReceive_RXNE+0x98>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093da:	2300      	movs	r3, #0
 80093dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093e0:	2312      	movs	r3, #18
 80093e2:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80093e4:	f7ff fe33 	bl	800904e <HAL_I2C_MasterRxCpltCallback>
}
 80093e8:	e7b9      	b.n	800935e <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80093f0:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80093f2:	f7ff ffad 	bl	8009350 <HAL_I2C_MemRxCpltCallback>
 80093f6:	bd08      	pop	{r3, pc}

080093f8 <I2C_MasterReceive_BTF>:
{
 80093f8:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80093fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b04      	cmp	r3, #4
 8009402:	d014      	beq.n	800942e <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8009404:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009406:	b29b      	uxth	r3, r3
 8009408:	2b03      	cmp	r3, #3
 800940a:	d022      	beq.n	8009452 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 800940c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d039      	beq.n	8009488 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009414:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009416:	6802      	ldr	r2, [r0, #0]
 8009418:	6912      	ldr	r2, [r2, #16]
 800941a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800941c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800941e:	3301      	adds	r3, #1
 8009420:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009422:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29b      	uxth	r3, r3
 800942a:	8543      	strh	r3, [r0, #42]	; 0x2a
 800942c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800942e:	6802      	ldr	r2, [r0, #0]
 8009430:	6853      	ldr	r3, [r2, #4]
 8009432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009436:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009438:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800943a:	6802      	ldr	r2, [r0, #0]
 800943c:	6912      	ldr	r2, [r2, #16]
 800943e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009440:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009442:	3301      	adds	r3, #1
 8009444:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009446:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8009450:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009452:	6801      	ldr	r1, [r0, #0]
 8009454:	684b      	ldr	r3, [r1, #4]
 8009456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800945a:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800945c:	2a04      	cmp	r2, #4
 800945e:	d006      	beq.n	800946e <I2C_MasterReceive_BTF+0x76>
 8009460:	2a02      	cmp	r2, #2
 8009462:	d004      	beq.n	800946e <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009464:	6802      	ldr	r2, [r0, #0]
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800946c:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	6912      	ldr	r2, [r2, #16]
 8009474:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009476:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009478:	3301      	adds	r3, #1
 800947a:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800947c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29b      	uxth	r3, r3
 8009484:	8543      	strh	r3, [r0, #42]	; 0x2a
 8009486:	bd08      	pop	{r3, pc}
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009488:	2a01      	cmp	r2, #1
 800948a:	d00b      	beq.n	80094a4 <I2C_MasterReceive_BTF+0xac>
 800948c:	2a10      	cmp	r2, #16
 800948e:	d009      	beq.n	80094a4 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009490:	2a04      	cmp	r2, #4
 8009492:	d038      	beq.n	8009506 <I2C_MasterReceive_BTF+0x10e>
 8009494:	2a02      	cmp	r2, #2
 8009496:	d036      	beq.n	8009506 <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009498:	6802      	ldr	r2, [r0, #0]
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	e004      	b.n	80094ae <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094a4:	6802      	ldr	r2, [r0, #0]
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094ac:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094b0:	6802      	ldr	r2, [r0, #0]
 80094b2:	6912      	ldr	r2, [r2, #16]
 80094b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80094b8:	1c53      	adds	r3, r2, #1
 80094ba:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80094bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80094cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094ce:	3301      	adds	r3, #1
 80094d0:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80094d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29b      	uxth	r3, r3
 80094da:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80094dc:	6802      	ldr	r2, [r0, #0]
 80094de:	6853      	ldr	r3, [r2, #4]
 80094e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80094e6:	2320      	movs	r3, #32
 80094e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80094ec:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d00d      	beq.n	8009512 <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80094fc:	2312      	movs	r3, #18
 80094fe:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009500:	f7ff fda5 	bl	800904e <HAL_I2C_MasterRxCpltCallback>
 8009504:	bd08      	pop	{r3, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009506:	6802      	ldr	r2, [r0, #0]
 8009508:	6813      	ldr	r3, [r2, #0]
 800950a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	e7cd      	b.n	80094ae <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009512:	2300      	movs	r3, #0
 8009514:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009518:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800951a:	f7ff ff19 	bl	8009350 <HAL_I2C_MemRxCpltCallback>
 800951e:	bd08      	pop	{r3, pc}

08009520 <HAL_I2C_ErrorCallback>:
{
 8009520:	4770      	bx	lr

08009522 <I2C_DMAError>:
{
 8009522:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009524:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8009526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009528:	b10b      	cbz	r3, 800952e <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800952a:	2200      	movs	r2, #0
 800952c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 800952e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009530:	b10b      	cbz	r3, 8009536 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009532:	2200      	movs	r2, #0
 8009534:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009536:	f7fa fe35 	bl	80041a4 <HAL_DMA_GetError>
 800953a:	2802      	cmp	r0, #2
 800953c:	d012      	beq.n	8009564 <I2C_DMAError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	6813      	ldr	r3, [r2, #0]
 8009542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009546:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 800954c:	2220      	movs	r2, #32
 800954e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009552:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009558:	f043 0310 	orr.w	r3, r3, #16
 800955c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff ffde 	bl	8009520 <HAL_I2C_ErrorCallback>
 8009564:	bd10      	pop	{r4, pc}

08009566 <I2C_DMAXferCplt>:
{
 8009566:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009568:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800956a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800956e:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009570:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8009574:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009576:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	6842      	ldr	r2, [r0, #4]
 800957c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009580:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 8009582:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009584:	b10a      	cbz	r2, 800958a <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009586:	2000      	movs	r0, #0
 8009588:	63d0      	str	r0, [r2, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 800958a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800958c:	b10a      	cbz	r2, 8009592 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800958e:	2000      	movs	r0, #0
 8009590:	63d0      	str	r0, [r2, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009592:	f003 0221 	and.w	r2, r3, #33	; 0x21
 8009596:	2a21      	cmp	r2, #33	; 0x21
 8009598:	d041      	beq.n	800961e <I2C_DMAXferCplt+0xb8>
 800959a:	f003 0222 	and.w	r2, r3, #34	; 0x22
 800959e:	2a22      	cmp	r2, #34	; 0x22
 80095a0:	d03b      	beq.n	800961a <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80095a2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d036      	beq.n	8009618 <I2C_DMAXferCplt+0xb2>
    if (hi2c->XferCount == (uint16_t)1)
 80095aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d058      	beq.n	8009664 <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	6853      	ldr	r3, [r2, #4]
 80095b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ba:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80095bc:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80095c0:	d006      	beq.n	80095d0 <I2C_DMAXferCplt+0x6a>
 80095c2:	2d08      	cmp	r5, #8
 80095c4:	d004      	beq.n	80095d0 <I2C_DMAXferCplt+0x6a>
 80095c6:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80095ca:	d001      	beq.n	80095d0 <I2C_DMAXferCplt+0x6a>
 80095cc:	2d20      	cmp	r5, #32
 80095ce:	d104      	bne.n	80095da <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d0:	6822      	ldr	r2, [r4, #0]
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095d8:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	6853      	ldr	r3, [r2, #4]
 80095de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095e2:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	6853      	ldr	r3, [r2, #4]
 80095e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095ec:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80095f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d13b      	bne.n	8009670 <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 80095f8:	2320      	movs	r3, #32
 80095fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	d037      	beq.n	8009678 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009608:	2300      	movs	r3, #0
 800960a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800960e:	2312      	movs	r3, #18
 8009610:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009612:	4620      	mov	r0, r4
 8009614:	f7ff fd1b 	bl	800904e <HAL_I2C_MasterRxCpltCallback>
 8009618:	bd38      	pop	{r3, r4, r5, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800961a:	2920      	cmp	r1, #32
 800961c:	d1c1      	bne.n	80095a2 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800961e:	6821      	ldr	r1, [r4, #0]
 8009620:	684a      	ldr	r2, [r1, #4]
 8009622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009626:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 8009628:	2200      	movs	r2, #0
 800962a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800962c:	2b29      	cmp	r3, #41	; 0x29
 800962e:	d007      	beq.n	8009640 <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009630:	2b2a      	cmp	r3, #42	; 0x2a
 8009632:	d00e      	beq.n	8009652 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009634:	6822      	ldr	r2, [r4, #0]
 8009636:	6853      	ldr	r3, [r2, #4]
 8009638:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800963c:	6053      	str	r3, [r2, #4]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009640:	2321      	movs	r3, #33	; 0x21
 8009642:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009644:	2328      	movs	r3, #40	; 0x28
 8009646:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff fd00 	bl	8009050 <HAL_I2C_SlaveTxCpltCallback>
 8009650:	e7f0      	b.n	8009634 <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009652:	2322      	movs	r3, #34	; 0x22
 8009654:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009656:	2328      	movs	r3, #40	; 0x28
 8009658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800965c:	4620      	mov	r0, r4
 800965e:	f7ff fd1e 	bl	800909e <HAL_I2C_SlaveRxCpltCallback>
 8009662:	e7e7      	b.n	8009634 <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009664:	6822      	ldr	r2, [r4, #0]
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	e7a0      	b.n	80095b2 <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff ff55 	bl	8009520 <HAL_I2C_ErrorCallback>
 8009676:	bd38      	pop	{r3, r4, r5, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009678:	2300      	movs	r3, #0
 800967a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800967e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff fe65 	bl	8009350 <HAL_I2C_MemRxCpltCallback>
 8009686:	bd38      	pop	{r3, r4, r5, pc}

08009688 <HAL_I2C_AbortCpltCallback>:
{
 8009688:	4770      	bx	lr

0800968a <I2C_DMAAbort>:
{
 800968a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800968c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800968e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009692:	b2db      	uxtb	r3, r3
  if (hi2c->hdmatx != NULL)
 8009694:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009696:	b10a      	cbz	r2, 800969c <I2C_DMAAbort+0x12>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009698:	2100      	movs	r1, #0
 800969a:	63d1      	str	r1, [r2, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 800969c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800969e:	b10a      	cbz	r2, 80096a4 <I2C_DMAAbort+0x1a>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80096a0:	2100      	movs	r1, #0
 80096a2:	63d1      	str	r1, [r2, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a4:	6801      	ldr	r1, [r0, #0]
 80096a6:	680a      	ldr	r2, [r1, #0]
 80096a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ac:	600a      	str	r2, [r1, #0]
  hi2c->XferCount = 0U;
 80096ae:	2200      	movs	r2, #0
 80096b0:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80096b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80096b4:	b10a      	cbz	r2, 80096ba <I2C_DMAAbort+0x30>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80096b6:	2100      	movs	r1, #0
 80096b8:	6511      	str	r1, [r2, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80096ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80096bc:	b10a      	cbz	r2, 80096c2 <I2C_DMAAbort+0x38>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80096be:	2100      	movs	r1, #0
 80096c0:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80096c2:	6801      	ldr	r1, [r0, #0]
 80096c4:	680a      	ldr	r2, [r1, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	600a      	str	r2, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80096cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80096d0:	b2d2      	uxtb	r2, r2
 80096d2:	2a60      	cmp	r2, #96	; 0x60
 80096d4:	d00c      	beq.n	80096f0 <I2C_DMAAbort+0x66>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80096d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80096da:	2b28      	cmp	r3, #40	; 0x28
 80096dc:	d012      	beq.n	8009704 <I2C_DMAAbort+0x7a>
      hi2c->State = HAL_I2C_STATE_READY;
 80096de:	2320      	movs	r3, #32
 80096e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80096ea:	f7ff ff19 	bl	8009520 <HAL_I2C_ErrorCallback>
 80096ee:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80096f0:	2320      	movs	r3, #32
 80096f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096fc:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80096fe:	f7ff ffc3 	bl	8009688 <HAL_I2C_AbortCpltCallback>
 8009702:	bd08      	pop	{r3, pc}
      __HAL_I2C_ENABLE(hi2c);
 8009704:	6802      	ldr	r2, [r0, #0]
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800970e:	6802      	ldr	r2, [r0, #0]
 8009710:	6813      	ldr	r3, [r2, #0]
 8009712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009716:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009718:	2300      	movs	r3, #0
 800971a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800971c:	2328      	movs	r3, #40	; 0x28
 800971e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8009722:	e7e2      	b.n	80096ea <I2C_DMAAbort+0x60>

08009724 <I2C_ITError>:
{
 8009724:	b510      	push	{r4, lr}
 8009726:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009728:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800972c:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800972e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8009732:	b2d2      	uxtb	r2, r2
 8009734:	2a10      	cmp	r2, #16
 8009736:	d033      	beq.n	80097a0 <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009738:	f003 0228 	and.w	r2, r3, #40	; 0x28
 800973c:	2a28      	cmp	r2, #40	; 0x28
 800973e:	d037      	beq.n	80097b0 <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	6852      	ldr	r2, [r2, #4]
 8009744:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009748:	d104      	bne.n	8009754 <I2C_ITError+0x30>
 800974a:	2b60      	cmp	r3, #96	; 0x60
 800974c:	d002      	beq.n	8009754 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 800974e:	2320      	movs	r3, #32
 8009750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8009754:	2300      	movs	r3, #0
 8009756:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009764:	d048      	beq.n	80097f8 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800976c:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800976e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009770:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d020      	beq.n	80097bc <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800977a:	4b44      	ldr	r3, [pc, #272]	; (800988c <I2C_ITError+0x168>)
 800977c:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800977e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009780:	f7fa fb12 	bl	8003da8 <HAL_DMA_Abort_IT>
 8009784:	2800      	cmp	r0, #0
 8009786:	d049      	beq.n	800981c <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8009792:	2320      	movs	r3, #32
 8009794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009798:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800979a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800979c:	4798      	blx	r3
 800979e:	e03d      	b.n	800981c <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80097a0:	2b22      	cmp	r3, #34	; 0x22
 80097a2:	d1c9      	bne.n	8009738 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80097a4:	6801      	ldr	r1, [r0, #0]
 80097a6:	680a      	ldr	r2, [r1, #0]
 80097a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097ac:	600a      	str	r2, [r1, #0]
 80097ae:	e7c3      	b.n	8009738 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80097b4:	2328      	movs	r3, #40	; 0x28
 80097b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80097ba:	e7cf      	b.n	800975c <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80097bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097be:	4a33      	ldr	r2, [pc, #204]	; (800988c <I2C_ITError+0x168>)
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80097c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097c4:	f7fa faf0 	bl	8003da8 <HAL_DMA_Abort_IT>
 80097c8:	b340      	cbz	r0, 800981c <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80097d2:	d005      	beq.n	80097e0 <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80097da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097dc:	3301      	adds	r3, #1
 80097de:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80097ea:	2320      	movs	r3, #32
 80097ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80097f4:	4798      	blx	r3
 80097f6:	e011      	b.n	800981c <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097f8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	2a60      	cmp	r2, #96	; 0x60
 8009800:	d01f      	beq.n	8009842 <I2C_ITError+0x11e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009802:	695a      	ldr	r2, [r3, #20]
 8009804:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009808:	d005      	beq.n	8009816 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800980a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8009810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009812:	3301      	adds	r3, #1
 8009814:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff fe82 	bl	8009520 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800981c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800981e:	f013 0f0f 	tst.w	r3, #15
 8009822:	d004      	beq.n	800982e <I2C_ITError+0x10a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	6853      	ldr	r3, [r2, #4]
 8009828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800982c:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800982e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009832:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009834:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009836:	f012 0f04 	tst.w	r2, #4
 800983a:	d001      	beq.n	8009840 <I2C_ITError+0x11c>
 800983c:	2b28      	cmp	r3, #40	; 0x28
 800983e:	d018      	beq.n	8009872 <I2C_ITError+0x14e>
 8009840:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8009842:	2220      	movs	r2, #32
 8009844:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009848:	2200      	movs	r2, #0
 800984a:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009852:	d005      	beq.n	8009860 <I2C_ITError+0x13c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009854:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800985a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985c:	3301      	adds	r3, #1
 800985e:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	6813      	ldr	r3, [r2, #0]
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800986a:	4620      	mov	r0, r4
 800986c:	f7ff ff0c 	bl	8009688 <HAL_I2C_AbortCpltCallback>
 8009870:	e7d4      	b.n	800981c <I2C_ITError+0xf8>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <I2C_ITError+0x16c>)
 8009874:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800987a:	2220      	movs	r2, #32
 800987c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009880:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009884:	4620      	mov	r0, r4
 8009886:	f7ff fc59 	bl	800913c <HAL_I2C_ListenCpltCallback>
}
 800988a:	e7d9      	b.n	8009840 <I2C_ITError+0x11c>
 800988c:	0800968b 	.word	0x0800968b
 8009890:	ffff0000 	.word	0xffff0000

08009894 <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8009894:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b10      	cmp	r3, #16
 800989c:	d001      	beq.n	80098a2 <HAL_I2C_Master_Abort_IT+0xe>
    return HAL_ERROR;
 800989e:	2001      	movs	r0, #1
 80098a0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80098a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_I2C_Master_Abort_IT+0x1a>
 80098aa:	2002      	movs	r0, #2
 80098ac:	4770      	bx	lr
{
 80098ae:	b510      	push	{r4, lr}
    __HAL_LOCK(hi2c);
 80098b0:	2301      	movs	r3, #1
 80098b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 80098b6:	2400      	movs	r4, #0
 80098b8:	6304      	str	r4, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 80098ba:	2360      	movs	r3, #96	; 0x60
 80098bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c0:	6802      	ldr	r2, [r0, #0]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098c8:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ca:	6802      	ldr	r2, [r0, #0]
 80098cc:	6813      	ldr	r3, [r2, #0]
 80098ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098d2:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 80098d4:	8544      	strh	r4, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098d6:	6802      	ldr	r2, [r0, #0]
 80098d8:	6853      	ldr	r3, [r2, #4]
 80098da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80098de:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 80098e0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    I2C_ITError(hi2c);
 80098e4:	f7ff ff1e 	bl	8009724 <I2C_ITError>
    return HAL_OK;
 80098e8:	4620      	mov	r0, r4
 80098ea:	bd10      	pop	{r4, pc}

080098ec <I2C_Slave_STOPF>:
{
 80098ec:	b530      	push	{r4, r5, lr}
 80098ee:	b083      	sub	sp, #12
 80098f0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098f2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80098f6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098f8:	6802      	ldr	r2, [r0, #0]
 80098fa:	6853      	ldr	r3, [r2, #4]
 80098fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009900:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009902:	2300      	movs	r3, #0
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	6803      	ldr	r3, [r0, #0]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009916:	6802      	ldr	r2, [r0, #0]
 8009918:	6813      	ldr	r3, [r2, #0]
 800991a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800991e:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009920:	6803      	ldr	r3, [r0, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009928:	d020      	beq.n	800996c <I2C_Slave_STOPF+0x80>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800992a:	2d22      	cmp	r5, #34	; 0x22
 800992c:	d059      	beq.n	80099e2 <I2C_Slave_STOPF+0xf6>
 800992e:	2d2a      	cmp	r5, #42	; 0x2a
 8009930:	d057      	beq.n	80099e2 <I2C_Slave_STOPF+0xf6>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009932:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	6852      	ldr	r2, [r2, #4]
 8009938:	b292      	uxth	r2, r2
 800993a:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800993c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800993e:	b292      	uxth	r2, r2
 8009940:	b11a      	cbz	r2, 800994a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009942:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009944:	f042 0204 	orr.w	r2, r2, #4
 8009948:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009950:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009952:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009954:	f7fa fc23 	bl	800419e <HAL_DMA_GetState>
 8009958:	2801      	cmp	r0, #1
 800995a:	d007      	beq.n	800996c <I2C_Slave_STOPF+0x80>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800995c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800995e:	4a46      	ldr	r2, [pc, #280]	; (8009a78 <I2C_Slave_STOPF+0x18c>)
 8009960:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009962:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009964:	f7fa fa20 	bl	8003da8 <HAL_DMA_Abort_IT>
 8009968:	2800      	cmp	r0, #0
 800996a:	d15b      	bne.n	8009a24 <I2C_Slave_STOPF+0x138>
  if (hi2c->XferCount != 0U)
 800996c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800996e:	b29b      	uxth	r3, r3
 8009970:	b333      	cbz	r3, 80099c0 <I2C_Slave_STOPF+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	695a      	ldr	r2, [r3, #20]
 8009976:	f012 0f04 	tst.w	r2, #4
 800997a:	d00a      	beq.n	8009992 <I2C_Slave_STOPF+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800997c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8009982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009984:	3301      	adds	r3, #1
 8009986:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	b29b      	uxth	r3, r3
 8009990:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	695a      	ldr	r2, [r3, #20]
 8009996:	f012 0f40 	tst.w	r2, #64	; 0x40
 800999a:	d00a      	beq.n	80099b2 <I2C_Slave_STOPF+0xc6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800999c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80099a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a4:	3301      	adds	r3, #1
 80099a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80099a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80099b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	b11b      	cbz	r3, 80099c0 <I2C_Slave_STOPF+0xd4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099ba:	f043 0304 	orr.w	r3, r3, #4
 80099be:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80099c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d132      	bne.n	8009a2c <I2C_Slave_STOPF+0x140>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80099c6:	2d2a      	cmp	r5, #42	; 0x2a
 80099c8:	d034      	beq.n	8009a34 <I2C_Slave_STOPF+0x148>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80099ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b28      	cmp	r3, #40	; 0x28
 80099d2:	d038      	beq.n	8009a46 <I2C_Slave_STOPF+0x15a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80099d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80099d6:	2b22      	cmp	r3, #34	; 0x22
 80099d8:	d042      	beq.n	8009a60 <I2C_Slave_STOPF+0x174>
 80099da:	2d22      	cmp	r5, #34	; 0x22
 80099dc:	d040      	beq.n	8009a60 <I2C_Slave_STOPF+0x174>
}
 80099de:	b003      	add	sp, #12
 80099e0:	bd30      	pop	{r4, r5, pc}
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80099e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	6852      	ldr	r2, [r2, #4]
 80099e8:	b292      	uxth	r2, r2
 80099ea:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80099ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80099ee:	b292      	uxth	r2, r2
 80099f0:	b11a      	cbz	r2, 80099fa <I2C_Slave_STOPF+0x10e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099f4:	f042 0204 	orr.w	r2, r2, #4
 80099f8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a00:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009a04:	f7fa fbcb 	bl	800419e <HAL_DMA_GetState>
 8009a08:	2801      	cmp	r0, #1
 8009a0a:	d0af      	beq.n	800996c <I2C_Slave_STOPF+0x80>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a0e:	4a1a      	ldr	r2, [pc, #104]	; (8009a78 <I2C_Slave_STOPF+0x18c>)
 8009a10:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009a14:	f7fa f9c8 	bl	8003da8 <HAL_DMA_Abort_IT>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d0a7      	beq.n	800996c <I2C_Slave_STOPF+0x80>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a1c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009a1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009a20:	4798      	blx	r3
 8009a22:	e7a3      	b.n	800996c <I2C_Slave_STOPF+0x80>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009a24:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009a26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009a28:	4798      	blx	r3
 8009a2a:	e79f      	b.n	800996c <I2C_Slave_STOPF+0x80>
    I2C_ITError(hi2c);
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7ff fe79 	bl	8009724 <I2C_ITError>
 8009a32:	e7d4      	b.n	80099de <I2C_Slave_STOPF+0xf2>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a38:	2328      	movs	r3, #40	; 0x28
 8009a3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f7ff fb2d 	bl	800909e <HAL_I2C_SlaveRxCpltCallback>
 8009a44:	e7c1      	b.n	80099ca <I2C_Slave_STOPF+0xde>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a46:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <I2C_Slave_STOPF+0x190>)
 8009a48:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7ff fb6f 	bl	800913c <HAL_I2C_ListenCpltCallback>
 8009a5e:	e7be      	b.n	80099de <I2C_Slave_STOPF+0xf2>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009a64:	2220      	movs	r2, #32
 8009a66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff fb15 	bl	800909e <HAL_I2C_SlaveRxCpltCallback>
}
 8009a74:	e7b3      	b.n	80099de <I2C_Slave_STOPF+0xf2>
 8009a76:	bf00      	nop
 8009a78:	0800968b 	.word	0x0800968b
 8009a7c:	ffff0000 	.word	0xffff0000

08009a80 <HAL_I2C_EV_IRQHandler>:
{
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009a88:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009a8a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009a8e:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a90:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009a94:	2b10      	cmp	r3, #16
 8009a96:	d014      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0x42>
 8009a98:	b2c8      	uxtb	r0, r1
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	d011      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d079      	beq.n	8009b98 <HAL_I2C_EV_IRQHandler+0x118>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009aa4:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8009aa6:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009aa8:	f013 0f02 	tst.w	r3, #2
 8009aac:	d077      	beq.n	8009b9e <HAL_I2C_EV_IRQHandler+0x11e>
 8009aae:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009ab2:	d074      	beq.n	8009b9e <HAL_I2C_EV_IRQHandler+0x11e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ab6:	b103      	cbz	r3, 8009aba <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009ab8:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff fb17 	bl	80090ee <I2C_Slave_ADDR>
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009ac2:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009ac4:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009ac6:	f013 0101 	ands.w	r1, r3, #1
 8009aca:	d109      	bne.n	8009ae0 <HAL_I2C_EV_IRQHandler+0x60>
 8009acc:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8009ad0:	d032      	beq.n	8009b38 <HAL_I2C_EV_IRQHandler+0xb8>
 8009ad2:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8009ad6:	d02d      	beq.n	8009b34 <HAL_I2C_EV_IRQHandler+0xb4>
 8009ad8:	2600      	movs	r6, #0
 8009ada:	2e00      	cmp	r6, #0
 8009adc:	f040 808f 	bne.w	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ae0:	b111      	cbz	r1, 8009ae8 <HAL_I2C_EV_IRQHandler+0x68>
 8009ae2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009ae6:	d129      	bne.n	8009b3c <HAL_I2C_EV_IRQHandler+0xbc>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ae8:	f013 0f08 	tst.w	r3, #8
 8009aec:	d002      	beq.n	8009af4 <HAL_I2C_EV_IRQHandler+0x74>
 8009aee:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009af2:	d12a      	bne.n	8009b4a <HAL_I2C_EV_IRQHandler+0xca>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009af4:	f013 0f02 	tst.w	r3, #2
 8009af8:	d002      	beq.n	8009b00 <HAL_I2C_EV_IRQHandler+0x80>
 8009afa:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009afe:	d128      	bne.n	8009b52 <HAL_I2C_EV_IRQHandler+0xd2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009b00:	f010 0f04 	tst.w	r0, #4
 8009b04:	d02d      	beq.n	8009b62 <HAL_I2C_EV_IRQHandler+0xe2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009b06:	6852      	ldr	r2, [r2, #4]
 8009b08:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009b0c:	d177      	bne.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b12:	d005      	beq.n	8009b20 <HAL_I2C_EV_IRQHandler+0xa0>
 8009b14:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009b18:	d002      	beq.n	8009b20 <HAL_I2C_EV_IRQHandler+0xa0>
 8009b1a:	f013 0f04 	tst.w	r3, #4
 8009b1e:	d01c      	beq.n	8009b5a <HAL_I2C_EV_IRQHandler+0xda>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b20:	f013 0f04 	tst.w	r3, #4
 8009b24:	d06b      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8009b26:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009b2a:	d068      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
          I2C_MasterTransmit_BTF(hi2c);
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff fbb8 	bl	80092a2 <I2C_MasterTransmit_BTF>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009b34:	2601      	movs	r6, #1
 8009b36:	e7d0      	b.n	8009ada <HAL_I2C_EV_IRQHandler+0x5a>
 8009b38:	2601      	movs	r6, #1
 8009b3a:	e7ce      	b.n	8009ada <HAL_I2C_EV_IRQHandler+0x5a>
      I2C_ConvertOtherXferOptions(hi2c);
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fc fbab 	bl	8006298 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7fc fa00 	bl	8005f48 <I2C_Master_SB>
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
      I2C_Master_ADD10(hi2c);
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7fc fa51 	bl	8005ff2 <I2C_Master_ADD10>
 8009b50:	bd70      	pop	{r4, r5, r6, pc}
      I2C_Master_ADDR(hi2c);
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7fc fa64 	bl	8006020 <I2C_Master_ADDR>
 8009b58:	bd70      	pop	{r4, r5, r6, pc}
          I2C_MasterTransmit_TXE(hi2c);
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f7ff fb39 	bl	80091d2 <I2C_MasterTransmit_TXE>
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009b62:	6852      	ldr	r2, [r2, #4]
 8009b64:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009b68:	d149      	bne.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b6e:	d005      	beq.n	8009b7c <HAL_I2C_EV_IRQHandler+0xfc>
 8009b70:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009b74:	d002      	beq.n	8009b7c <HAL_I2C_EV_IRQHandler+0xfc>
 8009b76:	f013 0f04 	tst.w	r3, #4
 8009b7a:	d009      	beq.n	8009b90 <HAL_I2C_EV_IRQHandler+0x110>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b7c:	f013 0f04 	tst.w	r3, #4
 8009b80:	d03d      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8009b82:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009b86:	d03a      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
          I2C_MasterReceive_BTF(hi2c);
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7ff fc35 	bl	80093f8 <I2C_MasterReceive_BTF>
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
          I2C_MasterReceive_RXNE(hi2c);
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7ff fbde 	bl	8009352 <I2C_MasterReceive_RXNE>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009b98:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009b9a:	6953      	ldr	r3, [r2, #20]
 8009b9c:	e784      	b.n	8009aa8 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b9e:	f013 0f10 	tst.w	r3, #16
 8009ba2:	d002      	beq.n	8009baa <HAL_I2C_EV_IRQHandler+0x12a>
 8009ba4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009ba8:	d116      	bne.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x158>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009baa:	2821      	cmp	r0, #33	; 0x21
 8009bac:	d018      	beq.n	8009be0 <HAL_I2C_EV_IRQHandler+0x160>
 8009bae:	2829      	cmp	r0, #41	; 0x29
 8009bb0:	d016      	beq.n	8009be0 <HAL_I2C_EV_IRQHandler+0x160>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009bb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009bb6:	d005      	beq.n	8009bc4 <HAL_I2C_EV_IRQHandler+0x144>
 8009bb8:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009bbc:	d002      	beq.n	8009bc4 <HAL_I2C_EV_IRQHandler+0x144>
 8009bbe:	f013 0f04 	tst.w	r3, #4
 8009bc2:	d025      	beq.n	8009c10 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bc4:	f013 0f04 	tst.w	r3, #4
 8009bc8:	d019      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8009bca:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009bce:	d016      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
        I2C_SlaveReceive_BTF(hi2c);
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7fc fb38 	bl	8006246 <I2C_SlaveReceive_BTF>
 8009bd6:	e012      	b.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
      I2C_Slave_STOPF(hi2c);
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff fe87 	bl	80098ec <I2C_Slave_STOPF>
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009be0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009be4:	d005      	beq.n	8009bf2 <HAL_I2C_EV_IRQHandler+0x172>
 8009be6:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009bea:	d002      	beq.n	8009bf2 <HAL_I2C_EV_IRQHandler+0x172>
 8009bec:	f013 0f04 	tst.w	r3, #4
 8009bf0:	d006      	beq.n	8009c00 <HAL_I2C_EV_IRQHandler+0x180>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bf2:	f013 0f04 	tst.w	r3, #4
 8009bf6:	d002      	beq.n	8009bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8009bf8:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009bfc:	d104      	bne.n	8009c08 <HAL_I2C_EV_IRQHandler+0x188>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
        I2C_SlaveTransmit_TXE(hi2c);
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff fa26 	bl	8009052 <I2C_SlaveTransmit_TXE>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
        I2C_SlaveTransmit_BTF(hi2c);
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7fc fb0c 	bl	8006226 <I2C_SlaveTransmit_BTF>
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
        I2C_SlaveReceive_RXNE(hi2c);
 8009c10:	4620      	mov	r0, r4
 8009c12:	f7ff fa45 	bl	80090a0 <I2C_SlaveReceive_RXNE>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}

08009c18 <HAL_I2C_ER_IRQHandler>:
{
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009c1c:	6803      	ldr	r3, [r0, #0]
 8009c1e:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009c20:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009c22:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8009c26:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c28:	f415 7f80 	tst.w	r5, #256	; 0x100
 8009c2c:	d007      	beq.n	8009c3e <HAL_I2C_ER_IRQHandler+0x26>
 8009c2e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8009c32:	d037      	beq.n	8009ca4 <HAL_I2C_ER_IRQHandler+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c34:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8009c38:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8009c3a:	2601      	movs	r6, #1
 8009c3c:	e000      	b.n	8009c40 <HAL_I2C_ER_IRQHandler+0x28>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009c3e:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c40:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009c44:	d008      	beq.n	8009c58 <HAL_I2C_ER_IRQHandler+0x40>
 8009c46:	f417 7f80 	tst.w	r7, #256	; 0x100
 8009c4a:	d005      	beq.n	8009c58 <HAL_I2C_ER_IRQHandler+0x40>
    error |= HAL_I2C_ERROR_ARLO;
 8009c4c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8009c56:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c58:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009c5c:	d014      	beq.n	8009c88 <HAL_I2C_ER_IRQHandler+0x70>
 8009c5e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8009c62:	d011      	beq.n	8009c88 <HAL_I2C_ER_IRQHandler+0x70>
    tmp2 = hi2c->XferCount;
 8009c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c66:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8009c68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009c6c:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8009c6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009c70:	2a20      	cmp	r2, #32
 8009c72:	d019      	beq.n	8009ca8 <HAL_I2C_ER_IRQHandler+0x90>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8009c7a:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009c7c:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009c80:	2a10      	cmp	r2, #16
 8009c82:	d01f      	beq.n	8009cc4 <HAL_I2C_ER_IRQHandler+0xac>
 8009c84:	2a40      	cmp	r2, #64	; 0x40
 8009c86:	d01d      	beq.n	8009cc4 <HAL_I2C_ER_IRQHandler+0xac>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c88:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009c8c:	d008      	beq.n	8009ca0 <HAL_I2C_ER_IRQHandler+0x88>
 8009c8e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8009c92:	d005      	beq.n	8009ca0 <HAL_I2C_ER_IRQHandler+0x88>
    error |= HAL_I2C_ERROR_OVR;
 8009c94:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009c9e:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8009ca0:	b9b6      	cbnz	r6, 8009cd0 <HAL_I2C_ER_IRQHandler+0xb8>
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	e7cb      	b.n	8009c40 <HAL_I2C_ER_IRQHandler+0x28>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	d1e3      	bne.n	8009c74 <HAL_I2C_ER_IRQHandler+0x5c>
 8009cac:	2b21      	cmp	r3, #33	; 0x21
 8009cae:	d005      	beq.n	8009cbc <HAL_I2C_ER_IRQHandler+0xa4>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009cb0:	2b29      	cmp	r3, #41	; 0x29
 8009cb2:	d003      	beq.n	8009cbc <HAL_I2C_ER_IRQHandler+0xa4>
 8009cb4:	2b28      	cmp	r3, #40	; 0x28
 8009cb6:	d1dd      	bne.n	8009c74 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009cb8:	2821      	cmp	r0, #33	; 0x21
 8009cba:	d1db      	bne.n	8009c74 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff fa3e 	bl	800913e <I2C_Slave_AF>
 8009cc2:	e7e1      	b.n	8009c88 <HAL_I2C_ER_IRQHandler+0x70>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	6813      	ldr	r3, [r2, #0]
 8009cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	e7db      	b.n	8009c88 <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= error;
 8009cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd2:	431e      	orrs	r6, r3
 8009cd4:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff fd24 	bl	8009724 <I2C_ITError>
}
 8009cdc:	e7e1      	b.n	8009ca2 <HAL_I2C_ER_IRQHandler+0x8a>

08009cde <HAL_I2C_GetState>:
  return hi2c->State;
 8009cde:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_I2C_GetMode>:
  return hi2c->Mode;
 8009ce4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8009ce8:	4770      	bx	lr

08009cea <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8009cea:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop

08009cf0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf4:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cf6:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8009cfa:	00ca      	lsls	r2, r1, #3
 8009cfc:	1a52      	subs	r2, r2, r1
 8009cfe:	0093      	lsls	r3, r2, #2
 8009d00:	4403      	add	r3, r0
 8009d02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d855      	bhi.n	8009db6 <PCD_WriteEmptyTxFifo+0xc6>
 8009d0a:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8009d0c:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8009d0e:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8009d12:	00a2      	lsls	r2, r4, #2
 8009d14:	4402      	add	r2, r0
 8009d16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d800      	bhi.n	8009d1e <PCD_WriteEmptyTxFifo+0x2e>
  len = ep->xfer_len - ep->xfer_count;
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	460c      	mov	r4, r1
 8009d20:	4607      	mov	r7, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8009d22:	f102 0a03 	add.w	sl, r2, #3
 8009d26:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d2a:	e015      	b.n	8009d58 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8009d2c:	f106 0a03 	add.w	sl, r6, #3
 8009d30:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d34:	00e3      	lsls	r3, r4, #3
 8009d36:	1b1b      	subs	r3, r3, r4
 8009d38:	009d      	lsls	r5, r3, #2
 8009d3a:	443d      	add	r5, r7
 8009d3c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8009d3e:	7c3b      	ldrb	r3, [r7, #16]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	b2b3      	uxth	r3, r6
 8009d44:	b2e2      	uxtb	r2, r4
 8009d46:	4640      	mov	r0, r8
 8009d48:	f005 fb0a 	bl	800f360 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8009d4c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009d4e:	4433      	add	r3, r6
 8009d50:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8009d52:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009d54:	441e      	add	r6, r3
 8009d56:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d58:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	459a      	cmp	sl, r3
 8009d66:	d812      	bhi.n	8009d8e <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d68:	00e3      	lsls	r3, r4, #3
 8009d6a:	1b1b      	subs	r3, r3, r4
 8009d6c:	009a      	lsls	r2, r3, #2
 8009d6e:	443a      	add	r2, r7
 8009d70:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009d72:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d74:	4299      	cmp	r1, r3
 8009d76:	d20a      	bcs.n	8009d8e <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d78:	b14b      	cbz	r3, 8009d8e <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8009d7a:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8009d7c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8009d80:	008a      	lsls	r2, r1, #2
 8009d82:	443a      	add	r2, r7
 8009d84:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8009d86:	42b3      	cmp	r3, r6
 8009d88:	d8d0      	bhi.n	8009d2c <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8009d8a:	461e      	mov	r6, r3
 8009d8c:	e7ce      	b.n	8009d2c <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009d8e:	00e3      	lsls	r3, r4, #3
 8009d90:	1b1b      	subs	r3, r3, r4
 8009d92:	0098      	lsls	r0, r3, #2
 8009d94:	4407      	add	r7, r0
 8009d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d80f      	bhi.n	8009dbe <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d9e:	f004 040f 	and.w	r4, r4, #15
 8009da2:	2301      	movs	r3, #1
 8009da4:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009da6:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8009daa:	ea24 0403 	bic.w	r4, r4, r3
 8009dae:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8009db2:	2000      	movs	r0, #0
 8009db4:	e000      	b.n	8009db8 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8009db6:	2001      	movs	r0, #1
}
 8009db8:	b002      	add	sp, #8
 8009dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e7fa      	b.n	8009db8 <PCD_WriteEmptyTxFifo+0xc8>
{
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_PCD_Init>:
{
 8009dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dc6:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f000 808a 	beq.w	8009ee2 <HAL_PCD_Init+0x11e>
 8009dce:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8009dd0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009dd2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8009dd6:	b323      	cbz	r3, 8009e22 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009dde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009de0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009de4:	d101      	bne.n	8009dea <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8009dea:	6820      	ldr	r0, [r4, #0]
 8009dec:	f004 fff2 	bl	800edd4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009df0:	4625      	mov	r5, r4
 8009df2:	f855 7b10 	ldr.w	r7, [r5], #16
 8009df6:	466e      	mov	r6, sp
 8009df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e04:	e886 0003 	stmia.w	r6, {r0, r1}
 8009e08:	1d23      	adds	r3, r4, #4
 8009e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f004 ff1f 	bl	800ec50 <USB_CoreInit>
 8009e12:	b158      	cbz	r0, 8009e2c <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e14:	2302      	movs	r3, #2
 8009e16:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8009e1a:	2501      	movs	r5, #1
}
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	b00b      	add	sp, #44	; 0x2c
 8009e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009e22:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8009e26:	f00d fe89 	bl	8017b3c <HAL_PCD_MspInit>
 8009e2a:	e7d5      	b.n	8009dd8 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	6820      	ldr	r0, [r4, #0]
 8009e30:	f004 ffd6 	bl	800ede0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e34:	2300      	movs	r3, #0
 8009e36:	e015      	b.n	8009e64 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8009e38:	00d9      	lsls	r1, r3, #3
 8009e3a:	1ac8      	subs	r0, r1, r3
 8009e3c:	0082      	lsls	r2, r0, #2
 8009e3e:	4422      	add	r2, r4
 8009e40:	2001      	movs	r0, #1
 8009e42:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8009e46:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e4a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e4e:	2000      	movs	r0, #0
 8009e50:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e54:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e56:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e58:	1aca      	subs	r2, r1, r3
 8009e5a:	0091      	lsls	r1, r2, #2
 8009e5c:	4421      	add	r1, r4
 8009e5e:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e60:	3301      	adds	r3, #1
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	6865      	ldr	r5, [r4, #4]
 8009e66:	42ab      	cmp	r3, r5
 8009e68:	d3e6      	bcc.n	8009e38 <HAL_PCD_Init+0x74>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e015      	b.n	8009e9a <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8009e6e:	00d8      	lsls	r0, r3, #3
 8009e70:	1ac1      	subs	r1, r0, r3
 8009e72:	008a      	lsls	r2, r1, #2
 8009e74:	4422      	add	r2, r4
 8009e76:	2100      	movs	r1, #0
 8009e78:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8009e7c:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009e80:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009e84:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009e88:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009e8c:	1ac2      	subs	r2, r0, r3
 8009e8e:	0090      	lsls	r0, r2, #2
 8009e90:	4420      	add	r0, r4
 8009e92:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e96:	3301      	adds	r3, #1
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	d8e7      	bhi.n	8009e6e <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e9e:	4625      	mov	r5, r4
 8009ea0:	f855 7b10 	ldr.w	r7, [r5], #16
 8009ea4:	466e      	mov	r6, sp
 8009ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ea8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009eb2:	e886 0003 	stmia.w	r6, {r0, r1}
 8009eb6:	1d23      	adds	r3, r4, #4
 8009eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f004 ffd5 	bl	800ee6a <USB_DevInit>
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	b120      	cbz	r0, 8009ece <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8009eca:	2501      	movs	r5, #1
 8009ecc:	e7a6      	b.n	8009e1c <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	f005 fc11 	bl	800f702 <USB_DevDisconnect>
  return HAL_OK;
 8009ee0:	e79c      	b.n	8009e1c <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 8009ee2:	2501      	movs	r5, #1
 8009ee4:	e79a      	b.n	8009e1c <HAL_PCD_Init+0x58>
{
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ee8:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8009eea:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d019      	beq.n	8009f26 <HAL_PCD_Start+0x3e>
{
 8009ef2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009efa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d00a      	beq.n	8009f16 <HAL_PCD_Start+0x2e>
 8009f00:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	f005 fbf1 	bl	800f6ea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	f004 ff5d 	bl	800edc8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8009f14:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009f16:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d0f1      	beq.n	8009f00 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f22:	6393      	str	r3, [r2, #56]	; 0x38
 8009f24:	e7ec      	b.n	8009f00 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8009f26:	2002      	movs	r0, #2
 8009f28:	4770      	bx	lr

08009f2a <HAL_PCD_Stop>:
{
 8009f2a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8009f2c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d102      	bne.n	8009f3a <HAL_PCD_Stop+0x10>
 8009f34:	2502      	movs	r5, #2
}
 8009f36:	4628      	mov	r0, r5
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8009f42:	6800      	ldr	r0, [r0, #0]
 8009f44:	f004 ff46 	bl	800edd4 <USB_DisableGlobalInt>
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	f005 fb9a 	bl	800f682 <USB_StopDevice>
 8009f4e:	4605      	mov	r5, r0
 8009f50:	b120      	cbz	r0, 8009f5c <HAL_PCD_Stop+0x32>
    __HAL_UNLOCK(hpcd);
 8009f52:	2300      	movs	r3, #0
 8009f54:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
    return HAL_ERROR;
 8009f58:	2501      	movs	r5, #1
 8009f5a:	e7ec      	b.n	8009f36 <HAL_PCD_Stop+0xc>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	f005 fbd0 	bl	800f702 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8009f62:	2300      	movs	r3, #0
 8009f64:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  return HAL_OK;
 8009f68:	e7e5      	b.n	8009f36 <HAL_PCD_Stop+0xc>

08009f6a <HAL_PCD_DeInit>:
  if (hpcd == NULL)
 8009f6a:	b168      	cbz	r0, 8009f88 <HAL_PCD_DeInit+0x1e>
{
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f70:	2303      	movs	r3, #3
 8009f72:	f880 33bd 	strb.w	r3, [r0, #957]	; 0x3bd
  (void)HAL_PCD_Stop(hpcd);
 8009f76:	f7ff ffd8 	bl	8009f2a <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f00d fe20 	bl	8017bc0 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 8009f80:	2000      	movs	r0, #0
 8009f82:	f884 03bd 	strb.w	r0, [r4, #957]	; 0x3bd
  return HAL_OK;
 8009f86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009f88:	2001      	movs	r0, #1
 8009f8a:	4770      	bx	lr
{
 8009f8c:	4770      	bx	lr
{
 8009f8e:	4770      	bx	lr
{
 8009f90:	4770      	bx	lr

08009f92 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	4605      	mov	r5, r0
 8009f96:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f98:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f9c:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8009fa0:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8009fa4:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009fa6:	6902      	ldr	r2, [r0, #16]
 8009fa8:	2a01      	cmp	r2, #1
 8009faa:	d007      	beq.n	8009fbc <PCD_EP_OutXfrComplete_int+0x2a>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009fac:	4a35      	ldr	r2, [pc, #212]	; (800a084 <PCD_EP_OutXfrComplete_int+0xf2>)
 8009fae:	4291      	cmp	r1, r2
 8009fb0:	d057      	beq.n	800a062 <PCD_EP_OutXfrComplete_int+0xd0>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009fb2:	b2f1      	uxtb	r1, r6
 8009fb4:	f00d fe24 	bl	8017c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8009fb8:	2000      	movs	r0, #0
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009fbc:	f013 0f08 	tst.w	r3, #8
 8009fc0:	d014      	beq.n	8009fec <PCD_EP_OutXfrComplete_int+0x5a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fc2:	4a31      	ldr	r2, [pc, #196]	; (800a088 <PCD_EP_OutXfrComplete_int+0xf6>)
 8009fc4:	4291      	cmp	r1, r2
 8009fc6:	d905      	bls.n	8009fd4 <PCD_EP_OutXfrComplete_int+0x42>
 8009fc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009fcc:	d002      	beq.n	8009fd4 <PCD_EP_OutXfrComplete_int+0x42>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fd2:	60a3      	str	r3, [r4, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f00d fe0b 	bl	8017bf0 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009fda:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8009fde:	2101      	movs	r1, #1
 8009fe0:	6828      	ldr	r0, [r5, #0]
 8009fe2:	f005 fbee 	bl	800f7c2 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	e7e5      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009fec:	f013 0f20 	tst.w	r3, #32
 8009ff0:	d130      	bne.n	800a054 <PCD_EP_OutXfrComplete_int+0xc2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009ff2:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009ff6:	d1df      	bne.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ff8:	4a23      	ldr	r2, [pc, #140]	; (800a088 <PCD_EP_OutXfrComplete_int+0xf6>)
 8009ffa:	4291      	cmp	r1, r2
 8009ffc:	d902      	bls.n	800a004 <PCD_EP_OutXfrComplete_int+0x72>
 8009ffe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a002:	d12a      	bne.n	800a05a <PCD_EP_OutXfrComplete_int+0xc8>
          hpcd->OUT_ep[epnum].maxpacket -
 800a004:	00f2      	lsls	r2, r6, #3
 800a006:	1b92      	subs	r2, r2, r6
 800a008:	0093      	lsls	r3, r2, #2
 800a00a:	442b      	add	r3, r5
 800a00c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a010:	6921      	ldr	r1, [r4, #16]
 800a012:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a016:	1a52      	subs	r2, r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 800a018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a01c:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800a020:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a024:	440a      	add	r2, r1
 800a026:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a02a:	b2f1      	uxtb	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	f00d fde7 	bl	8017c00 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a032:	2e00      	cmp	r6, #0
 800a034:	d1c0      	bne.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
 800a036:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800a03a:	00b3      	lsls	r3, r6, #2
 800a03c:	442b      	add	r3, r5
 800a03e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1b8      	bne.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a046:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 800a04a:	2101      	movs	r1, #1
 800a04c:	6828      	ldr	r0, [r5, #0]
 800a04e:	f005 fbb8 	bl	800f7c2 <USB_EP0_OutStart>
 800a052:	e7b1      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a054:	2320      	movs	r3, #32
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	e7ae      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a05a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a05e:	60a3      	str	r3, [r4, #8]
 800a060:	e7aa      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a062:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a066:	d109      	bne.n	800a07c <PCD_EP_OutXfrComplete_int+0xea>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a068:	f013 0f20 	tst.w	r3, #32
 800a06c:	d001      	beq.n	800a072 <PCD_EP_OutXfrComplete_int+0xe0>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a06e:	2320      	movs	r3, #32
 800a070:	60a3      	str	r3, [r4, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a072:	b2f1      	uxtb	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	f00d fdc3 	bl	8017c00 <HAL_PCD_DataOutStageCallback>
 800a07a:	e79d      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a07c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	e799      	b.n	8009fb8 <PCD_EP_OutXfrComplete_int+0x26>
 800a084:	4f54310a 	.word	0x4f54310a
 800a088:	4f54300a 	.word	0x4f54300a

0800a08c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a090:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a092:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a094:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800a098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a09c:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a09e:	6903      	ldr	r3, [r0, #16]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d00d      	beq.n	800a0c0 <PCD_EP_OutSetupPacket_int+0x34>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800a0a4:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <PCD_EP_OutSetupPacket_int+0x64>)
 800a0a6:	429d      	cmp	r5, r3
 800a0a8:	d014      	beq.n	800a0d4 <PCD_EP_OutSetupPacket_int+0x48>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f00d fda0 	bl	8017bf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <PCD_EP_OutSetupPacket_int+0x68>)
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	d902      	bls.n	800a0bc <PCD_EP_OutSetupPacket_int+0x30>
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d012      	beq.n	800a0e2 <PCD_EP_OutSetupPacket_int+0x56>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800a0bc:	2000      	movs	r0, #0
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <PCD_EP_OutSetupPacket_int+0x68>)
 800a0c2:	429d      	cmp	r5, r3
 800a0c4:	d9f1      	bls.n	800a0aa <PCD_EP_OutSetupPacket_int+0x1e>
 800a0c6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a0ca:	d0ee      	beq.n	800a0aa <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d0:	608b      	str	r3, [r1, #8]
 800a0d2:	e7ea      	b.n	800a0aa <PCD_EP_OutSetupPacket_int+0x1e>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800a0d4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a0d8:	d0e7      	beq.n	800a0aa <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0de:	608b      	str	r3, [r1, #8]
 800a0e0:	e7e3      	b.n	800a0aa <PCD_EP_OutSetupPacket_int+0x1e>
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0e2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	f005 fb6a 	bl	800f7c2 <USB_EP0_OutStart>
 800a0ee:	e7e5      	b.n	800a0bc <PCD_EP_OutSetupPacket_int+0x30>
 800a0f0:	4f54310a 	.word	0x4f54310a
 800a0f4:	4f54300a 	.word	0x4f54300a
{
 800a0f8:	4770      	bx	lr
{
 800a0fa:	4770      	bx	lr
{
 800a0fc:	4770      	bx	lr
{
 800a0fe:	4770      	bx	lr
{
 800a100:	4770      	bx	lr
{
 800a102:	4770      	bx	lr
{
 800a104:	4770      	bx	lr
{
 800a106:	4770      	bx	lr

0800a108 <HAL_PCD_IRQHandler>:
{
 800a108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a10e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a110:	4628      	mov	r0, r5
 800a112:	f005 fb36 	bl	800f782 <USB_GetMode>
 800a116:	b108      	cbz	r0, 800a11c <HAL_PCD_IRQHandler+0x14>
 800a118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	462f      	mov	r7, r5
 800a11e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	f005 fafa 	bl	800f71a <USB_ReadInterrupts>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0f6      	beq.n	800a118 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	f005 faf5 	bl	800f71a <USB_ReadInterrupts>
 800a130:	f010 0f02 	tst.w	r0, #2
 800a134:	d004      	beq.n	800a140 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	6953      	ldr	r3, [r2, #20]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	f005 faea 	bl	800f71a <USB_ReadInterrupts>
 800a146:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800a14a:	d174      	bne.n	800a236 <HAL_PCD_IRQHandler+0x12e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	f005 fae4 	bl	800f71a <USB_ReadInterrupts>
 800a152:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800a156:	f040 80c2 	bne.w	800a2de <HAL_PCD_IRQHandler+0x1d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a15a:	6820      	ldr	r0, [r4, #0]
 800a15c:	f005 fadd 	bl	800f71a <USB_ReadInterrupts>
 800a160:	2800      	cmp	r0, #0
 800a162:	f2c0 8134 	blt.w	800a3ce <HAL_PCD_IRQHandler+0x2c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	f005 fad7 	bl	800f71a <USB_ReadInterrupts>
 800a16c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800a170:	d00a      	beq.n	800a188 <HAL_PCD_IRQHandler+0x80>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a172:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800a176:	f013 0f01 	tst.w	r3, #1
 800a17a:	f040 8142 	bne.w	800a402 <HAL_PCD_IRQHandler+0x2fa>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	6953      	ldr	r3, [r2, #20]
 800a182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a186:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a188:	6820      	ldr	r0, [r4, #0]
 800a18a:	f005 fac6 	bl	800f71a <USB_ReadInterrupts>
 800a18e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800a192:	f040 813a 	bne.w	800a40a <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	f005 fabf 	bl	800f71a <USB_ReadInterrupts>
 800a19c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800a1a0:	f040 818d 	bne.w	800a4be <HAL_PCD_IRQHandler+0x3b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	f005 fab8 	bl	800f71a <USB_ReadInterrupts>
 800a1aa:	f010 0f10 	tst.w	r0, #16
 800a1ae:	d014      	beq.n	800a1da <HAL_PCD_IRQHandler+0xd2>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	6993      	ldr	r3, [r2, #24]
 800a1b4:	f023 0310 	bic.w	r3, r3, #16
 800a1b8:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800a1ba:	6a2e      	ldr	r6, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a1bc:	f006 070f 	and.w	r7, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a1c0:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	f000 8192 	beq.w	800a4ee <HAL_PCD_IRQHandler+0x3e6>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a1ca:	2b06      	cmp	r3, #6
 800a1cc:	f000 81b0 	beq.w	800a530 <HAL_PCD_IRQHandler+0x428>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	6993      	ldr	r3, [r2, #24]
 800a1d4:	f043 0310 	orr.w	r3, r3, #16
 800a1d8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	f005 fa9d 	bl	800f71a <USB_ReadInterrupts>
 800a1e0:	f010 0f08 	tst.w	r0, #8
 800a1e4:	f040 81b6 	bne.w	800a554 <HAL_PCD_IRQHandler+0x44c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	f005 fa96 	bl	800f71a <USB_ReadInterrupts>
 800a1ee:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800a1f2:	f040 81b8 	bne.w	800a566 <HAL_PCD_IRQHandler+0x45e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a1f6:	6820      	ldr	r0, [r4, #0]
 800a1f8:	f005 fa8f 	bl	800f71a <USB_ReadInterrupts>
 800a1fc:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800a200:	f040 81bb 	bne.w	800a57a <HAL_PCD_IRQHandler+0x472>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	f005 fa88 	bl	800f71a <USB_ReadInterrupts>
 800a20a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a20e:	f040 81be 	bne.w	800a58e <HAL_PCD_IRQHandler+0x486>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a212:	6820      	ldr	r0, [r4, #0]
 800a214:	f005 fa81 	bl	800f71a <USB_ReadInterrupts>
 800a218:	f010 0f04 	tst.w	r0, #4
 800a21c:	f43f af7c 	beq.w	800a118 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a224:	f015 0f04 	tst.w	r5, #4
 800a228:	f040 81ba 	bne.w	800a5a0 <HAL_PCD_IRQHandler+0x498>
      hpcd->Instance->GOTGINT |= temp;
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	4315      	orrs	r5, r2
 800a232:	605d      	str	r5, [r3, #4]
 800a234:	e770      	b.n	800a118 <HAL_PCD_IRQHandler+0x10>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a236:	6820      	ldr	r0, [r4, #0]
 800a238:	f005 fa73 	bl	800f722 <USB_ReadDevAllOutEpInterrupt>
 800a23c:	4680      	mov	r8, r0
      epnum = 0U;
 800a23e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800a240:	e025      	b.n	800a28e <HAL_PCD_IRQHandler+0x186>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a242:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a246:	2201      	movs	r2, #1
 800a248:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a24c:	4649      	mov	r1, r9
 800a24e:	4620      	mov	r0, r4
 800a250:	f7ff fe9f 	bl	8009f92 <PCD_EP_OutXfrComplete_int>
 800a254:	e02b      	b.n	800a2ae <HAL_PCD_IRQHandler+0x1a6>
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a256:	4649      	mov	r1, r9
 800a258:	4620      	mov	r0, r4
 800a25a:	f7ff ff17 	bl	800a08c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a25e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a262:	2208      	movs	r2, #8
 800a264:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 800a268:	e024      	b.n	800a2b4 <HAL_PCD_IRQHandler+0x1ac>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a26a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a274:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800a278:	d005      	beq.n	800a286 <HAL_PCD_IRQHandler+0x17e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a27a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a27e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a282:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 800a286:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800a28a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800a28e:	f1b8 0f00 	cmp.w	r8, #0
 800a292:	f43f af5b 	beq.w	800a14c <HAL_PCD_IRQHandler+0x44>
        if ((ep_intr & 0x1U) != 0U)
 800a296:	f018 0f01 	tst.w	r8, #1
 800a29a:	d0f4      	beq.n	800a286 <HAL_PCD_IRQHandler+0x17e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a29c:	fa5f f189 	uxtb.w	r1, r9
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	f005 fa4e 	bl	800f742 <USB_ReadDevOutEPInterrupt>
 800a2a6:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a2a8:	f010 0f01 	tst.w	r0, #1
 800a2ac:	d1c9      	bne.n	800a242 <HAL_PCD_IRQHandler+0x13a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a2ae:	f01a 0f08 	tst.w	sl, #8
 800a2b2:	d1d0      	bne.n	800a256 <HAL_PCD_IRQHandler+0x14e>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a2b4:	f01a 0f10 	tst.w	sl, #16
 800a2b8:	d004      	beq.n	800a2c4 <HAL_PCD_IRQHandler+0x1bc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a2ba:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a2be:	2210      	movs	r2, #16
 800a2c0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a2c4:	f01a 0f20 	tst.w	sl, #32
 800a2c8:	d0d4      	beq.n	800a274 <HAL_PCD_IRQHandler+0x16c>
            if (hpcd->Init.dma_enable == 1U)
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d1cc      	bne.n	800a26a <HAL_PCD_IRQHandler+0x162>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2d0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	f005 fa73 	bl	800f7c2 <USB_EP0_OutStart>
 800a2dc:	e7c5      	b.n	800a26a <HAL_PCD_IRQHandler+0x162>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a2de:	6820      	ldr	r0, [r4, #0]
 800a2e0:	f005 fa27 	bl	800f732 <USB_ReadDevAllInEpInterrupt>
 800a2e4:	4680      	mov	r8, r0
      epnum = 0U;
 800a2e6:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800a2e8:	e031      	b.n	800a34e <HAL_PCD_IRQHandler+0x246>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a2ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a2ee:	eba2 0209 	sub.w	r2, r2, r9
 800a2f2:	0093      	lsls	r3, r2, #2
 800a2f4:	4423      	add	r3, r4
 800a2f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a2f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2fa:	440a      	add	r2, r1
 800a2fc:	649a      	str	r2, [r3, #72]	; 0x48
 800a2fe:	e049      	b.n	800a394 <HAL_PCD_IRQHandler+0x28c>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a300:	f01a 0f08 	tst.w	sl, #8
 800a304:	d004      	beq.n	800a310 <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a306:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a30a:	2208      	movs	r2, #8
 800a30c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a310:	f01a 0f10 	tst.w	sl, #16
 800a314:	d004      	beq.n	800a320 <HAL_PCD_IRQHandler+0x218>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a316:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a31a:	2210      	movs	r2, #16
 800a31c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a320:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a324:	d004      	beq.n	800a330 <HAL_PCD_IRQHandler+0x228>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a326:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a32a:	2240      	movs	r2, #64	; 0x40
 800a32c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a330:	f01a 0f02 	tst.w	sl, #2
 800a334:	d004      	beq.n	800a340 <HAL_PCD_IRQHandler+0x238>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a336:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a33a:	2202      	movs	r2, #2
 800a33c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a340:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800a344:	d13e      	bne.n	800a3c4 <HAL_PCD_IRQHandler+0x2bc>
        epnum++;
 800a346:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800a34a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	f43f af02 	beq.w	800a15a <HAL_PCD_IRQHandler+0x52>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a356:	f018 0f01 	tst.w	r8, #1
 800a35a:	d0f4      	beq.n	800a346 <HAL_PCD_IRQHandler+0x23e>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a35c:	fa5f fb89 	uxtb.w	fp, r9
 800a360:	4659      	mov	r1, fp
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	f005 f9f6 	bl	800f754 <USB_ReadDevInEPInterrupt>
 800a368:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a36a:	f010 0f01 	tst.w	r0, #1
 800a36e:	d0c7      	beq.n	800a300 <HAL_PCD_IRQHandler+0x1f8>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a370:	f009 030f 	and.w	r3, r9, #15
 800a374:	2101      	movs	r1, #1
 800a376:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a37a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800a37e:	ea23 0302 	bic.w	r3, r3, r2
 800a382:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a386:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800a38a:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	428b      	cmp	r3, r1
 800a392:	d0aa      	beq.n	800a2ea <HAL_PCD_IRQHandler+0x1e2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a394:	4659      	mov	r1, fp
 800a396:	4620      	mov	r0, r4
 800a398:	f00d fc3e 	bl	8017c18 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d1ae      	bne.n	800a300 <HAL_PCD_IRQHandler+0x1f8>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a3a2:	f1b9 0f00 	cmp.w	r9, #0
 800a3a6:	d1ab      	bne.n	800a300 <HAL_PCD_IRQHandler+0x1f8>
 800a3a8:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 800a3ac:	0093      	lsls	r3, r2, #2
 800a3ae:	4423      	add	r3, r4
 800a3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1a4      	bne.n	800a300 <HAL_PCD_IRQHandler+0x1f8>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3b6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	f005 fa00 	bl	800f7c2 <USB_EP0_OutStart>
 800a3c2:	e79d      	b.n	800a300 <HAL_PCD_IRQHandler+0x1f8>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff fc92 	bl	8009cf0 <PCD_WriteEmptyTxFifo>
 800a3cc:	e7bb      	b.n	800a346 <HAL_PCD_IRQHandler+0x23e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a3ce:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800a3d2:	f023 0301 	bic.w	r3, r3, #1
 800a3d6:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800a3da:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d008      	beq.n	800a3f4 <HAL_PCD_IRQHandler+0x2ec>
        HAL_PCD_ResumeCallback(hpcd);
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f00d fc56 	bl	8017c94 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	6953      	ldr	r3, [r2, #20]
 800a3ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3f0:	6153      	str	r3, [r2, #20]
 800a3f2:	e6b8      	b.n	800a166 <HAL_PCD_IRQHandler+0x5e>
        hpcd->LPM_State = LPM_L0;
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 faba 	bl	800a974 <HAL_PCDEx_LPM_Callback>
 800a400:	e7f2      	b.n	800a3e8 <HAL_PCD_IRQHandler+0x2e0>
        HAL_PCD_SuspendCallback(hpcd);
 800a402:	4620      	mov	r0, r4
 800a404:	f00d fc2f 	bl	8017c66 <HAL_PCD_SuspendCallback>
 800a408:	e6b9      	b.n	800a17e <HAL_PCD_IRQHandler+0x76>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a40a:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 800a40e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a412:	f023 0301 	bic.w	r3, r3, #1
 800a416:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a41a:	2110      	movs	r1, #16
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	f004 fcf7 	bl	800ee10 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a422:	e014      	b.n	800a44e <HAL_PCD_IRQHandler+0x346>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a424:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800a428:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800a42c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a430:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a434:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a438:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a43c:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a440:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a444:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a448:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a44c:	3601      	adds	r6, #1
 800a44e:	6863      	ldr	r3, [r4, #4]
 800a450:	429e      	cmp	r6, r3
 800a452:	d3e7      	bcc.n	800a424 <HAL_PCD_IRQHandler+0x31c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a454:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800a458:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a45c:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a460:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a462:	b1eb      	cbz	r3, 800a4a0 <HAL_PCD_IRQHandler+0x398>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a464:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800a468:	f043 030b 	orr.w	r3, r3, #11
 800a46c:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a470:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a474:	f043 030b 	orr.w	r3, r3, #11
 800a478:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a47c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800a480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a484:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a488:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a48c:	7c21      	ldrb	r1, [r4, #16]
 800a48e:	6820      	ldr	r0, [r4, #0]
 800a490:	f005 f997 	bl	800f7c2 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	6953      	ldr	r3, [r2, #20]
 800a498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a49c:	6153      	str	r3, [r2, #20]
 800a49e:	e67a      	b.n	800a196 <HAL_PCD_IRQHandler+0x8e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a4a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a4a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a4ac:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a4b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a4b4:	f043 030b 	orr.w	r3, r3, #11
 800a4b8:	f8c8 3010 	str.w	r3, [r8, #16]
 800a4bc:	e7de      	b.n	800a47c <HAL_PCD_IRQHandler+0x374>
      (void)USB_ActivateSetup(hpcd->Instance);
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	f005 f963 	bl	800f78a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	f004 fd9f 	bl	800f008 <USB_GetDevSpeed>
 800a4ca:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a4cc:	6826      	ldr	r6, [r4, #0]
 800a4ce:	f000 ff1d 	bl	800b30c <HAL_RCC_GetHCLKFreq>
 800a4d2:	7b22      	ldrb	r2, [r4, #12]
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f004 fbff 	bl	800ecda <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f00d fbac 	bl	8017c3a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a4e2:	6822      	ldr	r2, [r4, #0]
 800a4e4:	6953      	ldr	r3, [r2, #20]
 800a4e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ea:	6153      	str	r3, [r2, #20]
 800a4ec:	e65a      	b.n	800a1a4 <HAL_PCD_IRQHandler+0x9c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a4ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a4f2:	421e      	tst	r6, r3
 800a4f4:	f43f ae6c 	beq.w	800a1d0 <HAL_PCD_IRQHandler+0xc8>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a4f8:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800a4fc:	eba9 0307 	sub.w	r3, r9, r7
 800a500:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800a504:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a506:	0936      	lsrs	r6, r6, #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a508:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800a50c:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 800a510:	4628      	mov	r0, r5
 800a512:	f005 f847 	bl	800f5a4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a516:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800a51a:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800a51e:	4433      	add	r3, r6
 800a520:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a524:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800a528:	441e      	add	r6, r3
 800a52a:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 800a52e:	e64f      	b.n	800a1d0 <HAL_PCD_IRQHandler+0xc8>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a530:	2208      	movs	r2, #8
 800a532:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800a536:	4628      	mov	r0, r5
 800a538:	f005 f834 	bl	800f5a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a53c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800a540:	00fb      	lsls	r3, r7, #3
 800a542:	1bd9      	subs	r1, r3, r7
 800a544:	008a      	lsls	r2, r1, #2
 800a546:	4422      	add	r2, r4
 800a548:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800a54c:	441e      	add	r6, r3
 800a54e:	f8c2 6214 	str.w	r6, [r2, #532]	; 0x214
 800a552:	e63d      	b.n	800a1d0 <HAL_PCD_IRQHandler+0xc8>
      HAL_PCD_SOFCallback(hpcd);
 800a554:	4620      	mov	r0, r4
 800a556:	f00d fb6a 	bl	8017c2e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	6953      	ldr	r3, [r2, #20]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	6153      	str	r3, [r2, #20]
 800a564:	e640      	b.n	800a1e8 <HAL_PCD_IRQHandler+0xe0>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a566:	2100      	movs	r1, #0
 800a568:	4620      	mov	r0, r4
 800a56a:	f00d fb9f 	bl	8017cac <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	6953      	ldr	r3, [r2, #20]
 800a572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a576:	6153      	str	r3, [r2, #20]
 800a578:	e63d      	b.n	800a1f6 <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a57a:	2100      	movs	r1, #0
 800a57c:	4620      	mov	r0, r4
 800a57e:	f00d fb8f 	bl	8017ca0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	6953      	ldr	r3, [r2, #20]
 800a586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a58a:	6153      	str	r3, [r2, #20]
 800a58c:	e63a      	b.n	800a204 <HAL_PCD_IRQHandler+0xfc>
      HAL_PCD_ConnectCallback(hpcd);
 800a58e:	4620      	mov	r0, r4
 800a590:	f00d fb92 	bl	8017cb8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	6953      	ldr	r3, [r2, #20]
 800a598:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a59c:	6153      	str	r3, [r2, #20]
 800a59e:	e638      	b.n	800a212 <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_DisconnectCallback(hpcd);
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f00d fb8f 	bl	8017cc4 <HAL_PCD_DisconnectCallback>
 800a5a6:	e641      	b.n	800a22c <HAL_PCD_IRQHandler+0x124>

0800a5a8 <HAL_PCD_DevConnect>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5a8:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 800a5aa:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d016      	beq.n	800a5e0 <HAL_PCD_DevConnect+0x38>
{
 800a5b2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a5ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d007      	beq.n	800a5d0 <HAL_PCD_DevConnect+0x28>
 800a5c0:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 800a5c2:	6800      	ldr	r0, [r0, #0]
 800a5c4:	f005 f891 	bl	800f6ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a5ce:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a5d0:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d0f4      	beq.n	800a5c0 <HAL_PCD_DevConnect+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5dc:	6393      	str	r3, [r2, #56]	; 0x38
 800a5de:	e7ef      	b.n	800a5c0 <HAL_PCD_DevConnect+0x18>
  __HAL_LOCK(hpcd);
 800a5e0:	2002      	movs	r0, #2
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_PCD_DevDisconnect>:
  __HAL_LOCK(hpcd);
 800a5e4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_PCD_DevDisconnect+0xc>
 800a5ec:	2002      	movs	r0, #2
 800a5ee:	4770      	bx	lr
{
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevDisconnect(hpcd->Instance);
 800a5fa:	6800      	ldr	r0, [r0, #0]
 800a5fc:	f005 f881 	bl	800f702 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800a600:	2000      	movs	r0, #0
 800a602:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a606:	bd10      	pop	{r4, pc}

0800a608 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800a608:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <HAL_PCD_SetAddress+0xc>
 800a610:	2002      	movs	r0, #2
 800a612:	4770      	bx	lr
{
 800a614:	b510      	push	{r4, lr}
 800a616:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a618:	2301      	movs	r3, #1
 800a61a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a61e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	f005 f851 	bl	800f6ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a628:	2000      	movs	r0, #0
 800a62a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a62e:	bd10      	pop	{r4, pc}

0800a630 <HAL_PCD_EP_Open>:
{
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800a632:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a636:	d11e      	bne.n	800a676 <HAL_PCD_EP_Open+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a638:	f001 060f 	and.w	r6, r1, #15
 800a63c:	00f5      	lsls	r5, r6, #3
 800a63e:	1baf      	subs	r7, r5, r6
 800a640:	00bc      	lsls	r4, r7, #2
 800a642:	4627      	mov	r7, r4
 800a644:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800a648:	4404      	add	r4, r0
 800a64a:	3404      	adds	r4, #4
    ep->is_in = 0U;
 800a64c:	463e      	mov	r6, r7
 800a64e:	4406      	add	r6, r0
 800a650:	2500      	movs	r5, #0
 800a652:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800a656:	f001 010f 	and.w	r1, r1, #15
 800a65a:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 800a65c:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800a65e:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 800a660:	7862      	ldrb	r2, [r4, #1]
 800a662:	b102      	cbz	r2, 800a666 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800a664:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 800a666:	2b02      	cmp	r3, #2
 800a668:	d014      	beq.n	800a694 <HAL_PCD_EP_Open+0x64>
  __HAL_LOCK(hpcd);
 800a66a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d113      	bne.n	800a69a <HAL_PCD_EP_Open+0x6a>
 800a672:	2002      	movs	r0, #2
}
 800a674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a676:	f001 060f 	and.w	r6, r1, #15
 800a67a:	00f5      	lsls	r5, r6, #3
 800a67c:	1baf      	subs	r7, r5, r6
 800a67e:	00bc      	lsls	r4, r7, #2
 800a680:	4627      	mov	r7, r4
 800a682:	3438      	adds	r4, #56	; 0x38
 800a684:	4404      	add	r4, r0
 800a686:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800a688:	463e      	mov	r6, r7
 800a68a:	4406      	add	r6, r0
 800a68c:	2501      	movs	r5, #1
 800a68e:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 800a692:	e7e0      	b.n	800a656 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	7123      	strb	r3, [r4, #4]
 800a698:	e7e7      	b.n	800a66a <HAL_PCD_EP_Open+0x3a>
 800a69a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 800a69c:	2301      	movs	r3, #1
 800a69e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	6800      	ldr	r0, [r0, #0]
 800a6a6:	f004 fcc0 	bl	800f02a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
  return ret;
 800a6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6b2 <HAL_PCD_EP_Close>:
{
 800a6b2:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800a6b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a6b8:	d117      	bne.n	800a6ea <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6ba:	f001 040f 	and.w	r4, r1, #15
 800a6be:	00e2      	lsls	r2, r4, #3
 800a6c0:	1b15      	subs	r5, r2, r4
 800a6c2:	00ab      	lsls	r3, r5, #2
 800a6c4:	461d      	mov	r5, r3
 800a6c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6ca:	4403      	add	r3, r0
 800a6cc:	3304      	adds	r3, #4
    ep->is_in = 0U;
 800a6ce:	462c      	mov	r4, r5
 800a6d0:	4404      	add	r4, r0
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a6d8:	f001 010f 	and.w	r1, r1, #15
 800a6dc:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 800a6de:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800a6e2:	2a01      	cmp	r2, #1
 800a6e4:	d110      	bne.n	800a708 <HAL_PCD_EP_Close+0x56>
 800a6e6:	2002      	movs	r0, #2
}
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6ea:	f001 040f 	and.w	r4, r1, #15
 800a6ee:	00e2      	lsls	r2, r4, #3
 800a6f0:	1b15      	subs	r5, r2, r4
 800a6f2:	00ab      	lsls	r3, r5, #2
 800a6f4:	461d      	mov	r5, r3
 800a6f6:	3338      	adds	r3, #56	; 0x38
 800a6f8:	4403      	add	r3, r0
 800a6fa:	3304      	adds	r3, #4
    ep->is_in = 1U;
 800a6fc:	462c      	mov	r4, r5
 800a6fe:	4404      	add	r4, r0
 800a700:	2201      	movs	r2, #1
 800a702:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800a706:	e7e7      	b.n	800a6d8 <HAL_PCD_EP_Close+0x26>
 800a708:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a70a:	2201      	movs	r2, #1
 800a70c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a710:	4619      	mov	r1, r3
 800a712:	6800      	ldr	r0, [r0, #0]
 800a714:	f004 fd20 	bl	800f158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a718:	2000      	movs	r0, #0
 800a71a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a71e:	bd38      	pop	{r3, r4, r5, pc}

0800a720 <HAL_PCD_EP_Receive>:
{
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a726:	00ee      	lsls	r6, r5, #3
 800a728:	1b71      	subs	r1, r6, r5
 800a72a:	008c      	lsls	r4, r1, #2
 800a72c:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800a730:	4404      	add	r4, r0
 800a732:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 800a734:	1b76      	subs	r6, r6, r5
 800a736:	00b4      	lsls	r4, r6, #2
 800a738:	4404      	add	r4, r0
 800a73a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800a73e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800a748:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800a74c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 800a750:	6903      	ldr	r3, [r0, #16]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d006      	beq.n	800a764 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a756:	b165      	cbz	r5, 800a772 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	f004 fe14 	bl	800f388 <USB_EPStartXfer>
}
 800a760:	2000      	movs	r0, #0
 800a762:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800a764:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800a768:	00b4      	lsls	r4, r6, #2
 800a76a:	4404      	add	r4, r0
 800a76c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 800a770:	e7f1      	b.n	800a756 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a772:	b2da      	uxtb	r2, r3
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f004 fd65 	bl	800f244 <USB_EP0StartXfer>
 800a77a:	e7f1      	b.n	800a760 <HAL_PCD_EP_Receive+0x40>

0800a77c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a77c:	f001 010f 	and.w	r1, r1, #15
 800a780:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a784:	008b      	lsls	r3, r1, #2
 800a786:	4418      	add	r0, r3
}
 800a788:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800a78c:	4770      	bx	lr

0800a78e <HAL_PCD_EP_Transmit>:
{
 800a78e:	b570      	push	{r4, r5, r6, lr}
 800a790:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a794:	00ee      	lsls	r6, r5, #3
 800a796:	1b71      	subs	r1, r6, r5
 800a798:	008c      	lsls	r4, r1, #2
 800a79a:	3438      	adds	r4, #56	; 0x38
 800a79c:	4404      	add	r4, r0
 800a79e:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 800a7a0:	1b76      	subs	r6, r6, r5
 800a7a2:	00b4      	lsls	r4, r6, #2
 800a7a4:	4404      	add	r4, r0
 800a7a6:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800a7a8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7b4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800a7b8:	6903      	ldr	r3, [r0, #16]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d006      	beq.n	800a7cc <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a7be:	b15d      	cbz	r5, 800a7d8 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	6800      	ldr	r0, [r0, #0]
 800a7c4:	f004 fde0 	bl	800f388 <USB_EPStartXfer>
}
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800a7cc:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800a7d0:	00b4      	lsls	r4, r6, #2
 800a7d2:	4404      	add	r4, r0
 800a7d4:	64e2      	str	r2, [r4, #76]	; 0x4c
 800a7d6:	e7f2      	b.n	800a7be <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	6800      	ldr	r0, [r0, #0]
 800a7dc:	f004 fd32 	bl	800f244 <USB_EP0StartXfer>
 800a7e0:	e7f2      	b.n	800a7c8 <HAL_PCD_EP_Transmit+0x3a>

0800a7e2 <HAL_PCD_EP_SetStall>:
{
 800a7e2:	b538      	push	{r3, r4, r5, lr}
 800a7e4:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a7e8:	6843      	ldr	r3, [r0, #4]
 800a7ea:	429d      	cmp	r5, r3
 800a7ec:	d838      	bhi.n	800a860 <HAL_PCD_EP_SetStall+0x7e>
  if ((0x80U & ep_addr) == 0x80U)
 800a7ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a7f2:	d115      	bne.n	800a820 <HAL_PCD_EP_SetStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 800a7f4:	00ca      	lsls	r2, r1, #3
 800a7f6:	1a54      	subs	r4, r2, r1
 800a7f8:	00a3      	lsls	r3, r4, #2
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a800:	4403      	add	r3, r0
 800a802:	3304      	adds	r3, #4
    ep->is_in = 0U;
 800a804:	4622      	mov	r2, r4
 800a806:	4402      	add	r2, r0
 800a808:	2100      	movs	r1, #0
 800a80a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 800a80e:	2201      	movs	r2, #1
 800a810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a812:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800a814:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800a818:	2a01      	cmp	r2, #1
 800a81a:	d10d      	bne.n	800a838 <HAL_PCD_EP_SetStall+0x56>
 800a81c:	2002      	movs	r0, #2
}
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a820:	00ea      	lsls	r2, r5, #3
 800a822:	1b51      	subs	r1, r2, r5
 800a824:	008b      	lsls	r3, r1, #2
 800a826:	4619      	mov	r1, r3
 800a828:	3338      	adds	r3, #56	; 0x38
 800a82a:	4403      	add	r3, r0
 800a82c:	3304      	adds	r3, #4
    ep->is_in = 1U;
 800a82e:	4401      	add	r1, r0
 800a830:	2201      	movs	r2, #1
 800a832:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 800a836:	e7ea      	b.n	800a80e <HAL_PCD_EP_SetStall+0x2c>
 800a838:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a83a:	2201      	movs	r2, #1
 800a83c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a840:	4619      	mov	r1, r3
 800a842:	6800      	ldr	r0, [r0, #0]
 800a844:	f004 fec2 	bl	800f5cc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a848:	b11d      	cbz	r5, 800a852 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800a84a:	2000      	movs	r0, #0
 800a84c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a850:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a852:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a856:	7c21      	ldrb	r1, [r4, #16]
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	f004 ffb2 	bl	800f7c2 <USB_EP0_OutStart>
 800a85e:	e7f4      	b.n	800a84a <HAL_PCD_EP_SetStall+0x68>
    return HAL_ERROR;
 800a860:	2001      	movs	r0, #1
 800a862:	bd38      	pop	{r3, r4, r5, pc}

0800a864 <HAL_PCD_EP_ClrStall>:
{
 800a864:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a868:	6842      	ldr	r2, [r0, #4]
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d82f      	bhi.n	800a8ce <HAL_PCD_EP_ClrStall+0x6a>
{
 800a86e:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800a870:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a874:	d114      	bne.n	800a8a0 <HAL_PCD_EP_ClrStall+0x3c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a876:	00da      	lsls	r2, r3, #3
 800a878:	1ad4      	subs	r4, r2, r3
 800a87a:	00a1      	lsls	r1, r4, #2
 800a87c:	460c      	mov	r4, r1
 800a87e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800a882:	4401      	add	r1, r0
 800a884:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800a886:	4404      	add	r4, r0
 800a888:	2200      	movs	r2, #0
 800a88a:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 800a88e:	2200      	movs	r2, #0
 800a890:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a892:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a894:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d10d      	bne.n	800a8b8 <HAL_PCD_EP_ClrStall+0x54>
 800a89c:	2002      	movs	r0, #2
}
 800a89e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8a0:	00da      	lsls	r2, r3, #3
 800a8a2:	1ad4      	subs	r4, r2, r3
 800a8a4:	00a1      	lsls	r1, r4, #2
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	3138      	adds	r1, #56	; 0x38
 800a8aa:	4401      	add	r1, r0
 800a8ac:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800a8ae:	4404      	add	r4, r0
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800a8b6:	e7ea      	b.n	800a88e <HAL_PCD_EP_ClrStall+0x2a>
 800a8b8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a8c0:	6800      	ldr	r0, [r0, #0]
 800a8c2:	f004 feb0 	bl	800f626 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a8cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	4770      	bx	lr

0800a8d2 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 800a8d2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d014      	beq.n	800a904 <HAL_PCD_EP_Flush+0x32>
{
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 800a8e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a8e8:	d106      	bne.n	800a8f8 <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	f004 faa4 	bl	800ee38 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800a8f6:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a8f8:	f001 010f 	and.w	r1, r1, #15
 800a8fc:	6800      	ldr	r0, [r0, #0]
 800a8fe:	f004 fa87 	bl	800ee10 <USB_FlushTxFifo>
 800a902:	e7f5      	b.n	800a8f0 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 800a904:	2002      	movs	r0, #2
 800a906:	4770      	bx	lr

0800a908 <HAL_PCD_ActivateRemoteWakeup>:
{
 800a908:	b508      	push	{r3, lr}
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 800a90a:	6800      	ldr	r0, [r0, #0]
 800a90c:	f005 fa63 	bl	800fdd6 <USB_ActivateRemoteWakeup>
}
 800a910:	bd08      	pop	{r3, pc}

0800a912 <HAL_PCD_DeActivateRemoteWakeup>:
{
 800a912:	b508      	push	{r3, lr}
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 800a914:	6800      	ldr	r0, [r0, #0]
 800a916:	f005 fa6b 	bl	800fdf0 <USB_DeActivateRemoteWakeup>
}
 800a91a:	bd08      	pop	{r3, pc}

0800a91c <HAL_PCD_GetState>:
  return hpcd->State;
 800a91c:	f890 03bd 	ldrb.w	r0, [r0, #957]	; 0x3bd
}
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop

0800a924 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a924:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a926:	6804      	ldr	r4, [r0, #0]
 800a928:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800a92a:	b129      	cbz	r1, 800a938 <HAL_PCDEx_SetTxFiFo+0x14>
 800a92c:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a92e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a930:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800a934:	2300      	movs	r3, #0
 800a936:	e00c      	b.n	800a952 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a938:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a93c:	62a0      	str	r0, [r4, #40]	; 0x28
 800a93e:	e012      	b.n	800a966 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a940:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a944:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a948:	6849      	ldr	r1, [r1, #4]
 800a94a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800a94e:	3301      	adds	r3, #1
 800a950:	b2db      	uxtb	r3, r3
 800a952:	1e69      	subs	r1, r5, #1
 800a954:	428b      	cmp	r3, r1
 800a956:	d3f3      	bcc.n	800a940 <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a958:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a95c:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 800a960:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a964:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 800a966:	2000      	movs	r0, #0
 800a968:	bc30      	pop	{r4, r5}
 800a96a:	4770      	bx	lr

0800a96c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 800a970:	2000      	movs	r0, #0
 800a972:	4770      	bx	lr

0800a974 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a974:	4770      	bx	lr

0800a976 <HAL_PCDEx_BCD_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
{
 800a976:	4770      	bx	lr

0800a978 <HAL_PWR_DeInit>:
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <HAL_PWR_DeInit+0x14>)
 800a97a:	6a1a      	ldr	r2, [r3, #32]
 800a97c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a980:	621a      	str	r2, [r3, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 800a982:	6a1a      	ldr	r2, [r3, #32]
 800a984:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a988:	621a      	str	r2, [r3, #32]
 800a98a:	4770      	bx	lr
 800a98c:	40023800 	.word	0x40023800

0800a990 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a990:	2201      	movs	r2, #1
 800a992:	4b01      	ldr	r3, [pc, #4]	; (800a998 <HAL_PWR_EnableBkUpAccess+0x8>)
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	4770      	bx	lr
 800a998:	420e0020 	.word	0x420e0020

0800a99c <HAL_PWR_DisableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800a99c:	2200      	movs	r2, #0
 800a99e:	4b01      	ldr	r3, [pc, #4]	; (800a9a4 <HAL_PWR_DisableBkUpAccess+0x8>)
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	4770      	bx	lr
 800a9a4:	420e0020 	.word	0x420e0020

0800a9a8 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800a9a8:	4a1e      	ldr	r2, [pc, #120]	; (800aa24 <HAL_PWR_ConfigPVD+0x7c>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a9b0:	6801      	ldr	r1, [r0, #0]
 800a9b2:	430b      	orrs	r3, r1
 800a9b4:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800a9b6:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <HAL_PWR_ConfigPVD+0x80>)
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9be:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9c6:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9ce:	609a      	str	r2, [r3, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9d6:	60da      	str	r2, [r3, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a9de:	d004      	beq.n	800a9ea <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800a9e0:	4a11      	ldr	r2, [pc, #68]	; (800aa28 <HAL_PWR_ConfigPVD+0x80>)
 800a9e2:	6813      	ldr	r3, [r2, #0]
 800a9e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e8:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800a9ea:	6843      	ldr	r3, [r0, #4]
 800a9ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a9f0:	d004      	beq.n	800a9fc <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800a9f2:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <HAL_PWR_ConfigPVD+0x80>)
 800a9f4:	6853      	ldr	r3, [r2, #4]
 800a9f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9fa:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800a9fc:	6843      	ldr	r3, [r0, #4]
 800a9fe:	f013 0f01 	tst.w	r3, #1
 800aa02:	d004      	beq.n	800aa0e <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800aa04:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <HAL_PWR_ConfigPVD+0x80>)
 800aa06:	6893      	ldr	r3, [r2, #8]
 800aa08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa0c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800aa0e:	6843      	ldr	r3, [r0, #4]
 800aa10:	f013 0f02 	tst.w	r3, #2
 800aa14:	d004      	beq.n	800aa20 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800aa16:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <HAL_PWR_ConfigPVD+0x80>)
 800aa18:	68d3      	ldr	r3, [r2, #12]
 800aa1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa1e:	60d3      	str	r3, [r2, #12]
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	40007000 	.word	0x40007000
 800aa28:	40013c00 	.word	0x40013c00

0800aa2c <HAL_PWR_EnablePVD>:
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	4b01      	ldr	r3, [pc, #4]	; (800aa34 <HAL_PWR_EnablePVD+0x8>)
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	4770      	bx	lr
 800aa34:	420e0010 	.word	0x420e0010

0800aa38 <HAL_PWR_DisablePVD>:
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4b01      	ldr	r3, [pc, #4]	; (800aa40 <HAL_PWR_DisablePVD+0x8>)
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	4770      	bx	lr
 800aa40:	420e0010 	.word	0x420e0010

0800aa44 <HAL_PWR_EnableWakeUpPin>:
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800aa44:	4a02      	ldr	r2, [pc, #8]	; (800aa50 <HAL_PWR_EnableWakeUpPin+0xc>)
 800aa46:	6853      	ldr	r3, [r2, #4]
 800aa48:	4318      	orrs	r0, r3
 800aa4a:	6050      	str	r0, [r2, #4]
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40007000 	.word	0x40007000

0800aa54 <HAL_PWR_DisableWakeUpPin>:
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800aa54:	4a02      	ldr	r2, [pc, #8]	; (800aa60 <HAL_PWR_DisableWakeUpPin+0xc>)
 800aa56:	6853      	ldr	r3, [r2, #4]
 800aa58:	ea23 0000 	bic.w	r0, r3, r0
 800aa5c:	6050      	str	r0, [r2, #4]
 800aa5e:	4770      	bx	lr
 800aa60:	40007000 	.word	0x40007000

0800aa64 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aa64:	4a06      	ldr	r2, [pc, #24]	; (800aa80 <HAL_PWR_EnterSLEEPMode+0x1c>)
 800aa66:	6913      	ldr	r3, [r2, #16]
 800aa68:	f023 0304 	bic.w	r3, r3, #4
 800aa6c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800aa6e:	2901      	cmp	r1, #1
 800aa70:	d003      	beq.n	800aa7a <HAL_PWR_EnterSLEEPMode+0x16>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800aa72:	bf40      	sev
    __WFE();
 800aa74:	bf20      	wfe
    __WFE();
 800aa76:	bf20      	wfe
 800aa78:	4770      	bx	lr
    __WFI();
 800aa7a:	bf30      	wfi
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	e000ed00 	.word	0xe000ed00

0800aa84 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800aa84:	4a0b      	ldr	r2, [pc, #44]	; (800aab4 <HAL_PWR_EnterSTOPMode+0x30>)
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	f023 0303 	bic.w	r3, r3, #3
 800aa8c:	4318      	orrs	r0, r3
 800aa8e:	6010      	str	r0, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aa90:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <HAL_PWR_EnterSTOPMode+0x34>)
 800aa92:	6913      	ldr	r3, [r2, #16]
 800aa94:	f043 0304 	orr.w	r3, r3, #4
 800aa98:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800aa9a:	2901      	cmp	r1, #1
 800aa9c:	d008      	beq.n	800aab0 <HAL_PWR_EnterSTOPMode+0x2c>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800aa9e:	bf40      	sev
    __WFE();
 800aaa0:	bf20      	wfe
    __WFE();
 800aaa2:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800aaa4:	4a04      	ldr	r2, [pc, #16]	; (800aab8 <HAL_PWR_EnterSTOPMode+0x34>)
 800aaa6:	6913      	ldr	r3, [r2, #16]
 800aaa8:	f023 0304 	bic.w	r3, r3, #4
 800aaac:	6113      	str	r3, [r2, #16]
 800aaae:	4770      	bx	lr
    __WFI();
 800aab0:	bf30      	wfi
 800aab2:	e7f7      	b.n	800aaa4 <HAL_PWR_EnterSTOPMode+0x20>
 800aab4:	40007000 	.word	0x40007000
 800aab8:	e000ed00 	.word	0xe000ed00

0800aabc <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800aabc:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <HAL_PWR_EnterSTANDBYMode+0x18>)
 800aabe:	6813      	ldr	r3, [r2, #0]
 800aac0:	f043 0302 	orr.w	r3, r3, #2
 800aac4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aac6:	4a04      	ldr	r2, [pc, #16]	; (800aad8 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800aac8:	6913      	ldr	r3, [r2, #16]
 800aaca:	f043 0304 	orr.w	r3, r3, #4
 800aace:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800aad0:	bf30      	wfi
 800aad2:	4770      	bx	lr
 800aad4:	40007000 	.word	0x40007000
 800aad8:	e000ed00 	.word	0xe000ed00

0800aadc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800aadc:	4770      	bx	lr

0800aade <HAL_PWR_PVD_IRQHandler>:
{
 800aade:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800aae0:	4b06      	ldr	r3, [pc, #24]	; (800aafc <HAL_PWR_PVD_IRQHandler+0x1e>)
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800aae8:	d100      	bne.n	800aaec <HAL_PWR_PVD_IRQHandler+0xe>
 800aaea:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 800aaec:	f7ff fff6 	bl	800aadc <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800aaf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aaf4:	4b01      	ldr	r3, [pc, #4]	; (800aafc <HAL_PWR_PVD_IRQHandler+0x1e>)
 800aaf6:	615a      	str	r2, [r3, #20]
}
 800aaf8:	e7f7      	b.n	800aaea <HAL_PWR_PVD_IRQHandler+0xc>
 800aafa:	bf00      	nop
 800aafc:	40013c00 	.word	0x40013c00

0800ab00 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800ab00:	4a02      	ldr	r2, [pc, #8]	; (800ab0c <HAL_PWR_EnableSleepOnExit+0xc>)
 800ab02:	6913      	ldr	r3, [r2, #16]
 800ab04:	f043 0302 	orr.w	r3, r3, #2
 800ab08:	6113      	str	r3, [r2, #16]
 800ab0a:	4770      	bx	lr
 800ab0c:	e000ed00 	.word	0xe000ed00

0800ab10 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800ab10:	4a02      	ldr	r2, [pc, #8]	; (800ab1c <HAL_PWR_DisableSleepOnExit+0xc>)
 800ab12:	6913      	ldr	r3, [r2, #16]
 800ab14:	f023 0302 	bic.w	r3, r3, #2
 800ab18:	6113      	str	r3, [r2, #16]
 800ab1a:	4770      	bx	lr
 800ab1c:	e000ed00 	.word	0xe000ed00

0800ab20 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800ab20:	4a02      	ldr	r2, [pc, #8]	; (800ab2c <HAL_PWR_EnableSEVOnPend+0xc>)
 800ab22:	6913      	ldr	r3, [r2, #16]
 800ab24:	f043 0310 	orr.w	r3, r3, #16
 800ab28:	6113      	str	r3, [r2, #16]
 800ab2a:	4770      	bx	lr
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800ab30:	4a02      	ldr	r2, [pc, #8]	; (800ab3c <HAL_PWR_DisableSEVOnPend+0xc>)
 800ab32:	6913      	ldr	r3, [r2, #16]
 800ab34:	f023 0310 	bic.w	r3, r3, #16
 800ab38:	6113      	str	r3, [r2, #16]
 800ab3a:	4770      	bx	lr
 800ab3c:	e000ed00 	.word	0xe000ed00

0800ab40 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 800ab40:	b510      	push	{r4, lr}
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800ab42:	2201      	movs	r2, #1
 800ab44:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <HAL_PWREx_EnableBkUpReg+0x2c>)
 800ab46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab48:	f7f6 fc5c 	bl	8001404 <HAL_GetTick>
 800ab4c:	4604      	mov	r4, r0

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <HAL_PWREx_EnableBkUpReg+0x30>)
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f013 0f08 	tst.w	r3, #8
 800ab56:	d107      	bne.n	800ab68 <HAL_PWREx_EnableBkUpReg+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800ab58:	f7f6 fc54 	bl	8001404 <HAL_GetTick>
 800ab5c:	1b00      	subs	r0, r0, r4
 800ab5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab62:	d9f4      	bls.n	800ab4e <HAL_PWREx_EnableBkUpReg+0xe>
    {
      return HAL_TIMEOUT;
 800ab64:	2003      	movs	r0, #3
    } 
  }
  return HAL_OK;
}
 800ab66:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	420e00a4 	.word	0x420e00a4
 800ab70:	40007000 	.word	0x40007000

0800ab74 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 800ab74:	b510      	push	{r4, lr}
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 800ab76:	2200      	movs	r2, #0
 800ab78:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <HAL_PWREx_DisableBkUpReg+0x2c>)
 800ab7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab7c:	f7f6 fc42 	bl	8001404 <HAL_GetTick>
 800ab80:	4604      	mov	r4, r0

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 800ab82:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <HAL_PWREx_DisableBkUpReg+0x30>)
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f013 0f08 	tst.w	r3, #8
 800ab8a:	d007      	beq.n	800ab9c <HAL_PWREx_DisableBkUpReg+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800ab8c:	f7f6 fc3a 	bl	8001404 <HAL_GetTick>
 800ab90:	1b00      	subs	r0, r0, r4
 800ab92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab96:	d9f4      	bls.n	800ab82 <HAL_PWREx_DisableBkUpReg+0xe>
    {
      return HAL_TIMEOUT;
 800ab98:	2003      	movs	r0, #3
    } 
  }
  return HAL_OK;
}
 800ab9a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	bd10      	pop	{r4, pc}
 800aba0:	420e00a4 	.word	0x420e00a4
 800aba4:	40007000 	.word	0x40007000

0800aba8 <HAL_PWREx_EnableFlashPowerDown>:
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 800aba8:	2201      	movs	r2, #1
 800abaa:	4b01      	ldr	r3, [pc, #4]	; (800abb0 <HAL_PWREx_EnableFlashPowerDown+0x8>)
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	4770      	bx	lr
 800abb0:	420e0024 	.word	0x420e0024

0800abb4 <HAL_PWREx_DisableFlashPowerDown>:
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 800abb4:	2200      	movs	r2, #0
 800abb6:	4b01      	ldr	r3, [pc, #4]	; (800abbc <HAL_PWREx_DisableFlashPowerDown+0x8>)
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	4770      	bx	lr
 800abbc:	420e0024 	.word	0x420e0024

0800abc0 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR & PWR_CR_VOS);
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <HAL_PWREx_GetVoltageRange+0xc>)
 800abc2:	6818      	ldr	r0, [r3, #0]
}
 800abc4:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40007000 	.word	0x40007000

0800abd0 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800abd0:	b510      	push	{r4, lr}
 800abd2:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 800abd4:	2100      	movs	r1, #0
 800abd6:	9100      	str	r1, [sp, #0]
 800abd8:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 800abda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800abe0:	641a      	str	r2, [r3, #64]	; 0x40
 800abe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	9b00      	ldr	r3, [sp, #0]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 800abec:	9101      	str	r1, [sp, #4]
 800abee:	4a10      	ldr	r2, [pc, #64]	; (800ac30 <HAL_PWREx_ControlVoltageScaling+0x60>)
 800abf0:	6813      	ldr	r3, [r2, #0]
 800abf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abf6:	4318      	orrs	r0, r3
 800abf8:	6010      	str	r0, [r2, #0]
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	9b01      	ldr	r3, [sp, #4]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac04:	f7f6 fbfe 	bl	8001404 <HAL_GetTick>
 800ac08:	4604      	mov	r4, r0
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 800ac0a:	4b09      	ldr	r3, [pc, #36]	; (800ac30 <HAL_PWREx_ControlVoltageScaling+0x60>)
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ac12:	d107      	bne.n	800ac24 <HAL_PWREx_ControlVoltageScaling+0x54>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 800ac14:	f7f6 fbf6 	bl	8001404 <HAL_GetTick>
 800ac18:	1b00      	subs	r0, r0, r4
 800ac1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ac1e:	d9f4      	bls.n	800ac0a <HAL_PWREx_ControlVoltageScaling+0x3a>
    {
      return HAL_TIMEOUT;
 800ac20:	2003      	movs	r0, #3
 800ac22:	e000      	b.n	800ac26 <HAL_PWREx_ControlVoltageScaling+0x56>
    } 
  }

  return HAL_OK;
 800ac24:	2000      	movs	r0, #0
}
 800ac26:	b002      	add	sp, #8
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	40023800 	.word	0x40023800
 800ac30:	40007000 	.word	0x40007000
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
  return HAL_OK;
}
 800ac34:	2000      	movs	r0, #0
 800ac36:	4770      	bx	lr

0800ac38 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	f000 81e4 	beq.w	800b006 <HAL_RCC_OscConfig+0x3ce>
{
 800ac3e:	b570      	push	{r4, r5, r6, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac44:	6803      	ldr	r3, [r0, #0]
 800ac46:	f013 0f01 	tst.w	r3, #1
 800ac4a:	d03b      	beq.n	800acc4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac4c:	4ba7      	ldr	r3, [pc, #668]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f003 030c 	and.w	r3, r3, #12
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d02c      	beq.n	800acb2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac58:	4ba4      	ldr	r3, [pc, #656]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d021      	beq.n	800aca8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac64:	6863      	ldr	r3, [r4, #4]
 800ac66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac6a:	d04f      	beq.n	800ad0c <HAL_RCC_OscConfig+0xd4>
 800ac6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac70:	d052      	beq.n	800ad18 <HAL_RCC_OscConfig+0xe0>
 800ac72:	4b9e      	ldr	r3, [pc, #632]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac84:	6863      	ldr	r3, [r4, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d050      	beq.n	800ad2c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac8a:	f7f6 fbbb 	bl	8001404 <HAL_GetTick>
 800ac8e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac90:	4b96      	ldr	r3, [pc, #600]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ac98:	d114      	bne.n	800acc4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac9a:	f7f6 fbb3 	bl	8001404 <HAL_GetTick>
 800ac9e:	1b40      	subs	r0, r0, r5
 800aca0:	2864      	cmp	r0, #100	; 0x64
 800aca2:	d9f5      	bls.n	800ac90 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800aca4:	2003      	movs	r0, #3
 800aca6:	e1b3      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aca8:	4b90      	ldr	r3, [pc, #576]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800acb0:	d0d8      	beq.n	800ac64 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acb2:	4b8e      	ldr	r3, [pc, #568]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800acba:	d003      	beq.n	800acc4 <HAL_RCC_OscConfig+0x8c>
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 81a3 	beq.w	800b00a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	f013 0f02 	tst.w	r3, #2
 800acca:	d055      	beq.n	800ad78 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800accc:	4b87      	ldr	r3, [pc, #540]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f013 0f0c 	tst.w	r3, #12
 800acd4:	d03e      	beq.n	800ad54 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acd6:	4b85      	ldr	r3, [pc, #532]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800acde:	2b08      	cmp	r3, #8
 800ace0:	d033      	beq.n	800ad4a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ace2:	68e3      	ldr	r3, [r4, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d068      	beq.n	800adba <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ace8:	2201      	movs	r2, #1
 800acea:	4b81      	ldr	r3, [pc, #516]	; (800aef0 <HAL_RCC_OscConfig+0x2b8>)
 800acec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acee:	f7f6 fb89 	bl	8001404 <HAL_GetTick>
 800acf2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acf4:	4b7d      	ldr	r3, [pc, #500]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f013 0f02 	tst.w	r3, #2
 800acfc:	d154      	bne.n	800ada8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800acfe:	f7f6 fb81 	bl	8001404 <HAL_GetTick>
 800ad02:	1b40      	subs	r0, r0, r5
 800ad04:	2802      	cmp	r0, #2
 800ad06:	d9f5      	bls.n	800acf4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800ad08:	2003      	movs	r0, #3
 800ad0a:	e181      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad0c:	4a77      	ldr	r2, [pc, #476]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad0e:	6813      	ldr	r3, [r2, #0]
 800ad10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	e7b5      	b.n	800ac84 <HAL_RCC_OscConfig+0x4c>
 800ad18:	4b74      	ldr	r3, [pc, #464]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	e7ab      	b.n	800ac84 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800ad2c:	f7f6 fb6a 	bl	8001404 <HAL_GetTick>
 800ad30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad32:	4b6e      	ldr	r3, [pc, #440]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ad3a:	d0c3      	beq.n	800acc4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad3c:	f7f6 fb62 	bl	8001404 <HAL_GetTick>
 800ad40:	1b40      	subs	r0, r0, r5
 800ad42:	2864      	cmp	r0, #100	; 0x64
 800ad44:	d9f5      	bls.n	800ad32 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800ad46:	2003      	movs	r0, #3
 800ad48:	e162      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad4a:	4b68      	ldr	r3, [pc, #416]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ad52:	d1c6      	bne.n	800ace2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad54:	4b65      	ldr	r3, [pc, #404]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f013 0f02 	tst.w	r3, #2
 800ad5c:	d004      	beq.n	800ad68 <HAL_RCC_OscConfig+0x130>
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d001      	beq.n	800ad68 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800ad64:	2001      	movs	r0, #1
 800ad66:	e153      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad68:	4a60      	ldr	r2, [pc, #384]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ad76:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	f013 0f08 	tst.w	r3, #8
 800ad7e:	d040      	beq.n	800ae02 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad80:	6963      	ldr	r3, [r4, #20]
 800ad82:	b363      	cbz	r3, 800adde <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad84:	2201      	movs	r2, #1
 800ad86:	4b5b      	ldr	r3, [pc, #364]	; (800aef4 <HAL_RCC_OscConfig+0x2bc>)
 800ad88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8a:	f7f6 fb3b 	bl	8001404 <HAL_GetTick>
 800ad8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad90:	4b56      	ldr	r3, [pc, #344]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ad92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad94:	f013 0f02 	tst.w	r3, #2
 800ad98:	d133      	bne.n	800ae02 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad9a:	f7f6 fb33 	bl	8001404 <HAL_GetTick>
 800ad9e:	1b40      	subs	r0, r0, r5
 800ada0:	2802      	cmp	r0, #2
 800ada2:	d9f5      	bls.n	800ad90 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800ada4:	2003      	movs	r0, #3
 800ada6:	e133      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada8:	4a50      	ldr	r2, [pc, #320]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800adaa:	6813      	ldr	r3, [r2, #0]
 800adac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800adb0:	6921      	ldr	r1, [r4, #16]
 800adb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	e7de      	b.n	800ad78 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800adba:	2200      	movs	r2, #0
 800adbc:	4b4c      	ldr	r3, [pc, #304]	; (800aef0 <HAL_RCC_OscConfig+0x2b8>)
 800adbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800adc0:	f7f6 fb20 	bl	8001404 <HAL_GetTick>
 800adc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adc6:	4b49      	ldr	r3, [pc, #292]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f013 0f02 	tst.w	r3, #2
 800adce:	d0d3      	beq.n	800ad78 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800add0:	f7f6 fb18 	bl	8001404 <HAL_GetTick>
 800add4:	1b40      	subs	r0, r0, r5
 800add6:	2802      	cmp	r0, #2
 800add8:	d9f5      	bls.n	800adc6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800adda:	2003      	movs	r0, #3
 800addc:	e118      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adde:	2200      	movs	r2, #0
 800ade0:	4b44      	ldr	r3, [pc, #272]	; (800aef4 <HAL_RCC_OscConfig+0x2bc>)
 800ade2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ade4:	f7f6 fb0e 	bl	8001404 <HAL_GetTick>
 800ade8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adea:	4b40      	ldr	r3, [pc, #256]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800adec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adee:	f013 0f02 	tst.w	r3, #2
 800adf2:	d006      	beq.n	800ae02 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adf4:	f7f6 fb06 	bl	8001404 <HAL_GetTick>
 800adf8:	1b40      	subs	r0, r0, r5
 800adfa:	2802      	cmp	r0, #2
 800adfc:	d9f5      	bls.n	800adea <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800adfe:	2003      	movs	r0, #3
 800ae00:	e106      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	f013 0f04 	tst.w	r3, #4
 800ae08:	d079      	beq.n	800aefe <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae0a:	4b38      	ldr	r3, [pc, #224]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800ae12:	d133      	bne.n	800ae7c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae14:	2300      	movs	r3, #0
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	4b34      	ldr	r3, [pc, #208]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ae1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ae20:	641a      	str	r2, [r3, #64]	; 0x40
 800ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ae2c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae2e:	4b32      	ldr	r3, [pc, #200]	; (800aef8 <HAL_RCC_OscConfig+0x2c0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ae36:	d023      	beq.n	800ae80 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae38:	68a3      	ldr	r3, [r4, #8]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d034      	beq.n	800aea8 <HAL_RCC_OscConfig+0x270>
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d038      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x27c>
 800ae42:	4b2a      	ldr	r3, [pc, #168]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ae44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	671a      	str	r2, [r3, #112]	; 0x70
 800ae4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae4e:	f022 0204 	bic.w	r2, r2, #4
 800ae52:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae54:	68a3      	ldr	r3, [r4, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d036      	beq.n	800aec8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae5a:	f7f6 fad3 	bl	8001404 <HAL_GetTick>
 800ae5e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae60:	4b22      	ldr	r3, [pc, #136]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800ae62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae64:	f013 0f02 	tst.w	r3, #2
 800ae68:	d148      	bne.n	800aefc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae6a:	f7f6 facb 	bl	8001404 <HAL_GetTick>
 800ae6e:	1b80      	subs	r0, r0, r6
 800ae70:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae74:	4298      	cmp	r0, r3
 800ae76:	d9f3      	bls.n	800ae60 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800ae78:	2003      	movs	r0, #3
 800ae7a:	e0c9      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 800ae7c:	2500      	movs	r5, #0
 800ae7e:	e7d6      	b.n	800ae2e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae80:	4a1d      	ldr	r2, [pc, #116]	; (800aef8 <HAL_RCC_OscConfig+0x2c0>)
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae88:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800ae8a:	f7f6 fabb 	bl	8001404 <HAL_GetTick>
 800ae8e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae90:	4b19      	ldr	r3, [pc, #100]	; (800aef8 <HAL_RCC_OscConfig+0x2c0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ae98:	d1ce      	bne.n	800ae38 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae9a:	f7f6 fab3 	bl	8001404 <HAL_GetTick>
 800ae9e:	1b80      	subs	r0, r0, r6
 800aea0:	2802      	cmp	r0, #2
 800aea2:	d9f5      	bls.n	800ae90 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800aea4:	2003      	movs	r0, #3
 800aea6:	e0b3      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aea8:	4a10      	ldr	r2, [pc, #64]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800aeaa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	6713      	str	r3, [r2, #112]	; 0x70
 800aeb2:	e7cf      	b.n	800ae54 <HAL_RCC_OscConfig+0x21c>
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800aeb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aeb8:	f042 0204 	orr.w	r2, r2, #4
 800aebc:	671a      	str	r2, [r3, #112]	; 0x70
 800aebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aec0:	f042 0201 	orr.w	r2, r2, #1
 800aec4:	671a      	str	r2, [r3, #112]	; 0x70
 800aec6:	e7c5      	b.n	800ae54 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aec8:	f7f6 fa9c 	bl	8001404 <HAL_GetTick>
 800aecc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aece:	4b07      	ldr	r3, [pc, #28]	; (800aeec <HAL_RCC_OscConfig+0x2b4>)
 800aed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed2:	f013 0f02 	tst.w	r3, #2
 800aed6:	d011      	beq.n	800aefc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aed8:	f7f6 fa94 	bl	8001404 <HAL_GetTick>
 800aedc:	1b80      	subs	r0, r0, r6
 800aede:	f241 3388 	movw	r3, #5000	; 0x1388
 800aee2:	4298      	cmp	r0, r3
 800aee4:	d9f3      	bls.n	800aece <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800aee6:	2003      	movs	r0, #3
 800aee8:	e092      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
 800aeea:	bf00      	nop
 800aeec:	40023800 	.word	0x40023800
 800aef0:	42470000 	.word	0x42470000
 800aef4:	42470e80 	.word	0x42470e80
 800aef8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aefc:	b9ed      	cbnz	r5, 800af3a <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aefe:	69a3      	ldr	r3, [r4, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8084 	beq.w	800b00e <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af06:	4a45      	ldr	r2, [pc, #276]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af08:	6892      	ldr	r2, [r2, #8]
 800af0a:	f002 020c 	and.w	r2, r2, #12
 800af0e:	2a08      	cmp	r2, #8
 800af10:	d051      	beq.n	800afb6 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af12:	2b02      	cmp	r3, #2
 800af14:	d017      	beq.n	800af46 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af16:	2200      	movs	r2, #0
 800af18:	4b41      	ldr	r3, [pc, #260]	; (800b020 <HAL_RCC_OscConfig+0x3e8>)
 800af1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af1c:	f7f6 fa72 	bl	8001404 <HAL_GetTick>
 800af20:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af22:	4b3e      	ldr	r3, [pc, #248]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800af2a:	d042      	beq.n	800afb2 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af2c:	f7f6 fa6a 	bl	8001404 <HAL_GetTick>
 800af30:	1b00      	subs	r0, r0, r4
 800af32:	2802      	cmp	r0, #2
 800af34:	d9f5      	bls.n	800af22 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800af36:	2003      	movs	r0, #3
 800af38:	e06a      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af3a:	4a38      	ldr	r2, [pc, #224]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af42:	6413      	str	r3, [r2, #64]	; 0x40
 800af44:	e7db      	b.n	800aefe <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800af46:	2200      	movs	r2, #0
 800af48:	4b35      	ldr	r3, [pc, #212]	; (800b020 <HAL_RCC_OscConfig+0x3e8>)
 800af4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800af4c:	f7f6 fa5a 	bl	8001404 <HAL_GetTick>
 800af50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af52:	4b32      	ldr	r3, [pc, #200]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800af5a:	d006      	beq.n	800af6a <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af5c:	f7f6 fa52 	bl	8001404 <HAL_GetTick>
 800af60:	1b40      	subs	r0, r0, r5
 800af62:	2802      	cmp	r0, #2
 800af64:	d9f5      	bls.n	800af52 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800af66:	2003      	movs	r0, #3
 800af68:	e052      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800af6a:	69e3      	ldr	r3, [r4, #28]
 800af6c:	6a22      	ldr	r2, [r4, #32]
 800af6e:	4313      	orrs	r3, r2
 800af70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800af76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800af78:	0852      	lsrs	r2, r2, #1
 800af7a:	3a01      	subs	r2, #1
 800af7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af86:	4a25      	ldr	r2, [pc, #148]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af88:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800af8a:	2201      	movs	r2, #1
 800af8c:	4b24      	ldr	r3, [pc, #144]	; (800b020 <HAL_RCC_OscConfig+0x3e8>)
 800af8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800af90:	f7f6 fa38 	bl	8001404 <HAL_GetTick>
 800af94:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af96:	4b21      	ldr	r3, [pc, #132]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800af9e:	d106      	bne.n	800afae <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afa0:	f7f6 fa30 	bl	8001404 <HAL_GetTick>
 800afa4:	1b00      	subs	r0, r0, r4
 800afa6:	2802      	cmp	r0, #2
 800afa8:	d9f5      	bls.n	800af96 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800afaa:	2003      	movs	r0, #3
 800afac:	e030      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800afae:	2000      	movs	r0, #0
 800afb0:	e02e      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
 800afb2:	2000      	movs	r0, #0
 800afb4:	e02c      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d02c      	beq.n	800b014 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->CFGR;
 800afba:	4b18      	ldr	r3, [pc, #96]	; (800b01c <HAL_RCC_OscConfig+0x3e4>)
 800afbc:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afbe:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800afc2:	69e2      	ldr	r2, [r4, #28]
 800afc4:	4291      	cmp	r1, r2
 800afc6:	d001      	beq.n	800afcc <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 800afc8:	2001      	movs	r0, #1
 800afca:	e021      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afd0:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afd2:	428a      	cmp	r2, r1
 800afd4:	d001      	beq.n	800afda <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 800afd6:	2001      	movs	r0, #1
 800afd8:	e01a      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800afda:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afdc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800afe0:	401a      	ands	r2, r3
 800afe2:	428a      	cmp	r2, r1
 800afe4:	d001      	beq.n	800afea <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 800afe6:	2001      	movs	r0, #1
 800afe8:	e012      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800afea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800afee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800aff0:	428a      	cmp	r2, r1
 800aff2:	d001      	beq.n	800aff8 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 800aff4:	2001      	movs	r0, #1
 800aff6:	e00b      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800aff8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800affc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800affe:	4293      	cmp	r3, r2
 800b000:	d00a      	beq.n	800b018 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 800b002:	2001      	movs	r0, #1
 800b004:	e004      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 800b006:	2001      	movs	r0, #1
 800b008:	4770      	bx	lr
        return HAL_ERROR;
 800b00a:	2001      	movs	r0, #1
 800b00c:	e000      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800b00e:	2000      	movs	r0, #0
}
 800b010:	b002      	add	sp, #8
 800b012:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800b014:	2001      	movs	r0, #1
 800b016:	e7fb      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800b018:	2000      	movs	r0, #0
 800b01a:	e7f9      	b.n	800b010 <HAL_RCC_OscConfig+0x3d8>
 800b01c:	40023800 	.word	0x40023800
 800b020:	42470060 	.word	0x42470060

0800b024 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	460c      	mov	r4, r1
 800b02a:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800b02c:	b308      	cbz	r0, 800b072 <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 800b02e:	2300      	movs	r3, #0
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	4d20      	ldr	r5, [pc, #128]	; (800b0b4 <HAL_RCC_MCOConfig+0x90>)
 800b034:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b036:	f042 0204 	orr.w	r2, r2, #4
 800b03a:	632a      	str	r2, [r5, #48]	; 0x30
 800b03c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b03e:	f002 0204 	and.w	r2, r2, #4
 800b042:	9202      	str	r2, [sp, #8]
 800b044:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b04a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b04c:	2202      	movs	r2, #2
 800b04e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b050:	2203      	movs	r2, #3
 800b052:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b054:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b056:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b058:	a903      	add	r1, sp, #12
 800b05a:	4817      	ldr	r0, [pc, #92]	; (800b0b8 <HAL_RCC_MCOConfig+0x94>)
 800b05c:	f7fa fd6e 	bl	8005b3c <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800b060:	68ab      	ldr	r3, [r5, #8]
 800b062:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b066:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 800b06a:	431c      	orrs	r4, r3
 800b06c:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800b06e:	b008      	add	sp, #32
 800b070:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 800b072:	2300      	movs	r3, #0
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	4d0f      	ldr	r5, [pc, #60]	; (800b0b4 <HAL_RCC_MCOConfig+0x90>)
 800b078:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	632a      	str	r2, [r5, #48]	; 0x30
 800b080:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b082:	f002 0201 	and.w	r2, r2, #1
 800b086:	9201      	str	r2, [sp, #4]
 800b088:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b08a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b08e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b090:	2202      	movs	r2, #2
 800b092:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b094:	2203      	movs	r2, #3
 800b096:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b098:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b09a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b09c:	a903      	add	r1, sp, #12
 800b09e:	4807      	ldr	r0, [pc, #28]	; (800b0bc <HAL_RCC_MCOConfig+0x98>)
 800b0a0:	f7fa fd4c 	bl	8005b3c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b0a4:	68ab      	ldr	r3, [r5, #8]
 800b0a6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800b0aa:	4334      	orrs	r4, r6
 800b0ac:	431c      	orrs	r4, r3
 800b0ae:	60ac      	str	r4, [r5, #8]
 800b0b0:	e7dd      	b.n	800b06e <HAL_RCC_MCOConfig+0x4a>
 800b0b2:	bf00      	nop
 800b0b4:	40023800 	.word	0x40023800
 800b0b8:	40020800 	.word	0x40020800
 800b0bc:	40020000 	.word	0x40020000

0800b0c0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	4b01      	ldr	r3, [pc, #4]	; (800b0c8 <HAL_RCC_EnableCSS+0x8>)
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	4770      	bx	lr
 800b0c8:	4247004c 	.word	0x4247004c

0800b0cc <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4b01      	ldr	r3, [pc, #4]	; (800b0d4 <HAL_RCC_DisableCSS+0x8>)
 800b0d0:	601a      	str	r2, [r3, #0]
 800b0d2:	4770      	bx	lr
 800b0d4:	4247004c 	.word	0x4247004c

0800b0d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0da:	4b31      	ldr	r3, [pc, #196]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f003 030c 	and.w	r3, r3, #12
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d059      	beq.n	800b19a <HAL_RCC_GetSysClockFreq+0xc2>
 800b0e6:	2b08      	cmp	r3, #8
 800b0e8:	d001      	beq.n	800b0ee <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b0ea:	482e      	ldr	r0, [pc, #184]	; (800b1a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0ee:	4b2c      	ldr	r3, [pc, #176]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b0fc:	d02a      	beq.n	800b154 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0fe:	4b28      	ldr	r3, [pc, #160]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800b106:	461e      	mov	r6, r3
 800b108:	2700      	movs	r7, #0
 800b10a:	015c      	lsls	r4, r3, #5
 800b10c:	2500      	movs	r5, #0
 800b10e:	1ae4      	subs	r4, r4, r3
 800b110:	eb65 0507 	sbc.w	r5, r5, r7
 800b114:	01a9      	lsls	r1, r5, #6
 800b116:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800b11a:	01a0      	lsls	r0, r4, #6
 800b11c:	1b00      	subs	r0, r0, r4
 800b11e:	eb61 0105 	sbc.w	r1, r1, r5
 800b122:	00cb      	lsls	r3, r1, #3
 800b124:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b128:	00c4      	lsls	r4, r0, #3
 800b12a:	19a0      	adds	r0, r4, r6
 800b12c:	eb43 0107 	adc.w	r1, r3, r7
 800b130:	024b      	lsls	r3, r1, #9
 800b132:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800b136:	0244      	lsls	r4, r0, #9
 800b138:	4620      	mov	r0, r4
 800b13a:	4619      	mov	r1, r3
 800b13c:	2300      	movs	r3, #0
 800b13e:	f00d fbd1 	bl	80188e4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b142:	4b17      	ldr	r3, [pc, #92]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b14a:	3301      	adds	r3, #1
 800b14c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800b14e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b154:	4b12      	ldr	r3, [pc, #72]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800b15c:	461e      	mov	r6, r3
 800b15e:	2700      	movs	r7, #0
 800b160:	015c      	lsls	r4, r3, #5
 800b162:	2500      	movs	r5, #0
 800b164:	1ae4      	subs	r4, r4, r3
 800b166:	eb65 0507 	sbc.w	r5, r5, r7
 800b16a:	01a9      	lsls	r1, r5, #6
 800b16c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800b170:	01a0      	lsls	r0, r4, #6
 800b172:	1b00      	subs	r0, r0, r4
 800b174:	eb61 0105 	sbc.w	r1, r1, r5
 800b178:	00cb      	lsls	r3, r1, #3
 800b17a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b17e:	00c4      	lsls	r4, r0, #3
 800b180:	19a0      	adds	r0, r4, r6
 800b182:	eb43 0107 	adc.w	r1, r3, r7
 800b186:	028b      	lsls	r3, r1, #10
 800b188:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800b18c:	0284      	lsls	r4, r0, #10
 800b18e:	4620      	mov	r0, r4
 800b190:	4619      	mov	r1, r3
 800b192:	2300      	movs	r3, #0
 800b194:	f00d fba6 	bl	80188e4 <__aeabi_uldivmod>
 800b198:	e7d3      	b.n	800b142 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800b19a:	4803      	ldr	r0, [pc, #12]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	40023800 	.word	0x40023800
 800b1a4:	00f42400 	.word	0x00f42400
 800b1a8:	007a1200 	.word	0x007a1200

0800b1ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f000 809e 	beq.w	800b2ee <HAL_RCC_ClockConfig+0x142>
{
 800b1b2:	b570      	push	{r4, r5, r6, lr}
 800b1b4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1b6:	4b50      	ldr	r3, [pc, #320]	; (800b2f8 <HAL_RCC_ClockConfig+0x14c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 030f 	and.w	r3, r3, #15
 800b1be:	428b      	cmp	r3, r1
 800b1c0:	d209      	bcs.n	800b1d6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1c2:	b2cb      	uxtb	r3, r1
 800b1c4:	4a4c      	ldr	r2, [pc, #304]	; (800b2f8 <HAL_RCC_ClockConfig+0x14c>)
 800b1c6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1c8:	6813      	ldr	r3, [r2, #0]
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	d001      	beq.n	800b1d6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	f013 0f02 	tst.w	r3, #2
 800b1dc:	d017      	beq.n	800b20e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1de:	f013 0f04 	tst.w	r3, #4
 800b1e2:	d004      	beq.n	800b1ee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1e4:	4a45      	ldr	r2, [pc, #276]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b1e6:	6893      	ldr	r3, [r2, #8]
 800b1e8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b1ec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	f013 0f08 	tst.w	r3, #8
 800b1f4:	d004      	beq.n	800b200 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1f6:	4a41      	ldr	r2, [pc, #260]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b1f8:	6893      	ldr	r3, [r2, #8]
 800b1fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1fe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b200:	4a3e      	ldr	r2, [pc, #248]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b202:	6893      	ldr	r3, [r2, #8]
 800b204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b208:	68a0      	ldr	r0, [r4, #8]
 800b20a:	4303      	orrs	r3, r0
 800b20c:	6093      	str	r3, [r2, #8]
 800b20e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	f013 0f01 	tst.w	r3, #1
 800b216:	d032      	beq.n	800b27e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d021      	beq.n	800b262 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b21e:	1e9a      	subs	r2, r3, #2
 800b220:	2a01      	cmp	r2, #1
 800b222:	d925      	bls.n	800b270 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b224:	4a35      	ldr	r2, [pc, #212]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b226:	6812      	ldr	r2, [r2, #0]
 800b228:	f012 0f02 	tst.w	r2, #2
 800b22c:	d061      	beq.n	800b2f2 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b22e:	4933      	ldr	r1, [pc, #204]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b230:	688a      	ldr	r2, [r1, #8]
 800b232:	f022 0203 	bic.w	r2, r2, #3
 800b236:	4313      	orrs	r3, r2
 800b238:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800b23a:	f7f6 f8e3 	bl	8001404 <HAL_GetTick>
 800b23e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b240:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f003 030c 	and.w	r3, r3, #12
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b24e:	d016      	beq.n	800b27e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b250:	f7f6 f8d8 	bl	8001404 <HAL_GetTick>
 800b254:	1b80      	subs	r0, r0, r6
 800b256:	f241 3388 	movw	r3, #5000	; 0x1388
 800b25a:	4298      	cmp	r0, r3
 800b25c:	d9f0      	bls.n	800b240 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800b25e:	2003      	movs	r0, #3
 800b260:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b262:	4a26      	ldr	r2, [pc, #152]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b264:	6812      	ldr	r2, [r2, #0]
 800b266:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800b26a:	d1e0      	bne.n	800b22e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800b26c:	2001      	movs	r0, #1
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b270:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b272:	6812      	ldr	r2, [r2, #0]
 800b274:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800b278:	d1d9      	bne.n	800b22e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800b27a:	2001      	movs	r0, #1
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b27e:	4b1e      	ldr	r3, [pc, #120]	; (800b2f8 <HAL_RCC_ClockConfig+0x14c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	429d      	cmp	r5, r3
 800b288:	d209      	bcs.n	800b29e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b28a:	b2ea      	uxtb	r2, r5
 800b28c:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <HAL_RCC_ClockConfig+0x14c>)
 800b28e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	429d      	cmp	r5, r3
 800b298:	d001      	beq.n	800b29e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800b29a:	2001      	movs	r0, #1
}
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	f013 0f04 	tst.w	r3, #4
 800b2a4:	d006      	beq.n	800b2b4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2a6:	4a15      	ldr	r2, [pc, #84]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b2a8:	6893      	ldr	r3, [r2, #8]
 800b2aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b2ae:	68e1      	ldr	r1, [r4, #12]
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	f013 0f08 	tst.w	r3, #8
 800b2ba:	d007      	beq.n	800b2cc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2bc:	4a0f      	ldr	r2, [pc, #60]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b2be:	6893      	ldr	r3, [r2, #8]
 800b2c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b2c4:	6921      	ldr	r1, [r4, #16]
 800b2c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b2ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2cc:	f7ff ff04 	bl	800b0d8 <HAL_RCC_GetSysClockFreq>
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <HAL_RCC_ClockConfig+0x150>)
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <HAL_RCC_ClockConfig+0x154>)
 800b2da:	5cd3      	ldrb	r3, [r2, r3]
 800b2dc:	40d8      	lsrs	r0, r3
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <HAL_RCC_ClockConfig+0x158>)
 800b2e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <HAL_RCC_ClockConfig+0x15c>)
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	f7f5 fc5b 	bl	8000ba0 <HAL_InitTick>
  return HAL_OK;
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	4770      	bx	lr
        return HAL_ERROR;
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	bf00      	nop
 800b2f8:	40023c00 	.word	0x40023c00
 800b2fc:	40023800 	.word	0x40023800
 800b300:	0801c9d4 	.word	0x0801c9d4
 800b304:	20000008 	.word	0x20000008
 800b308:	20000010 	.word	0x20000010

0800b30c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800b30c:	4b01      	ldr	r3, [pc, #4]	; (800b314 <HAL_RCC_GetHCLKFreq+0x8>)
 800b30e:	6818      	ldr	r0, [r3, #0]
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000008 	.word	0x20000008

0800b318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b318:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b31a:	f7ff fff7 	bl	800b30c <HAL_RCC_GetHCLKFreq>
 800b31e:	4b04      	ldr	r3, [pc, #16]	; (800b330 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b326:	4a03      	ldr	r2, [pc, #12]	; (800b334 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b328:	5cd3      	ldrb	r3, [r2, r3]
}
 800b32a:	40d8      	lsrs	r0, r3
 800b32c:	bd08      	pop	{r3, pc}
 800b32e:	bf00      	nop
 800b330:	40023800 	.word	0x40023800
 800b334:	0801c9e4 	.word	0x0801c9e4

0800b338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b338:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b33a:	f7ff ffe7 	bl	800b30c <HAL_RCC_GetHCLKFreq>
 800b33e:	4b04      	ldr	r3, [pc, #16]	; (800b350 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b346:	4a03      	ldr	r2, [pc, #12]	; (800b354 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b348:	5cd3      	ldrb	r3, [r2, r3]
}
 800b34a:	40d8      	lsrs	r0, r3
 800b34c:	bd08      	pop	{r3, pc}
 800b34e:	bf00      	nop
 800b350:	40023800 	.word	0x40023800
 800b354:	0801c9e4 	.word	0x0801c9e4

0800b358 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 800b358:	230f      	movs	r3, #15
 800b35a:	6003      	str	r3, [r0, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800b35c:	4b30      	ldr	r3, [pc, #192]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b364:	d03c      	beq.n	800b3e0 <HAL_RCC_GetOscConfig+0x88>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800b366:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800b36a:	6043      	str	r3, [r0, #4]
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800b36c:	4b2c      	ldr	r3, [pc, #176]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f013 0f01 	tst.w	r3, #1
 800b374:	d040      	beq.n	800b3f8 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800b376:	2301      	movs	r3, #1
 800b378:	60c3      	str	r3, [r0, #12]
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 800b37a:	4a29      	ldr	r2, [pc, #164]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b37c:	6813      	ldr	r3, [r2, #0]
 800b37e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b382:	6103      	str	r3, [r0, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800b384:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b386:	f013 0f04 	tst.w	r3, #4
 800b38a:	d038      	beq.n	800b3fe <HAL_RCC_GetOscConfig+0xa6>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800b38c:	2305      	movs	r3, #5
 800b38e:	6083      	str	r3, [r0, #8]
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 800b390:	4b23      	ldr	r3, [pc, #140]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b394:	f013 0f01 	tst.w	r3, #1
 800b398:	d03c      	beq.n	800b414 <HAL_RCC_GetOscConfig+0xbc>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800b39a:	2301      	movs	r3, #1
 800b39c:	6143      	str	r3, [r0, #20]
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800b39e:	4b20      	ldr	r3, [pc, #128]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b3a6:	d138      	bne.n	800b41a <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6183      	str	r3, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b3ac:	4a1c      	ldr	r2, [pc, #112]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b3ae:	6853      	ldr	r3, [r2, #4]
 800b3b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3b4:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 800b3b6:	6853      	ldr	r3, [r2, #4]
 800b3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3bc:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b3be:	6853      	ldr	r3, [r2, #4]
 800b3c0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800b3c4:	6243      	str	r3, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 800b3c6:	6853      	ldr	r3, [r2, #4]
 800b3c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b3cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	0c1b      	lsrs	r3, r3, #16
 800b3d4:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 800b3d6:	6853      	ldr	r3, [r2, #4]
 800b3d8:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800b3dc:	62c3      	str	r3, [r0, #44]	; 0x2c
 800b3de:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b3e8:	d003      	beq.n	800b3f2 <HAL_RCC_GetOscConfig+0x9a>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800b3ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3ee:	6043      	str	r3, [r0, #4]
 800b3f0:	e7bc      	b.n	800b36c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	6043      	str	r3, [r0, #4]
 800b3f6:	e7b9      	b.n	800b36c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60c3      	str	r3, [r0, #12]
 800b3fc:	e7bd      	b.n	800b37a <HAL_RCC_GetOscConfig+0x22>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800b3fe:	4b08      	ldr	r3, [pc, #32]	; (800b420 <HAL_RCC_GetOscConfig+0xc8>)
 800b400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b402:	f013 0f01 	tst.w	r3, #1
 800b406:	d002      	beq.n	800b40e <HAL_RCC_GetOscConfig+0xb6>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800b408:	2301      	movs	r3, #1
 800b40a:	6083      	str	r3, [r0, #8]
 800b40c:	e7c0      	b.n	800b390 <HAL_RCC_GetOscConfig+0x38>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800b40e:	2300      	movs	r3, #0
 800b410:	6083      	str	r3, [r0, #8]
 800b412:	e7bd      	b.n	800b390 <HAL_RCC_GetOscConfig+0x38>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800b414:	2300      	movs	r3, #0
 800b416:	6143      	str	r3, [r0, #20]
 800b418:	e7c1      	b.n	800b39e <HAL_RCC_GetOscConfig+0x46>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800b41a:	2302      	movs	r3, #2
 800b41c:	6183      	str	r3, [r0, #24]
 800b41e:	e7c5      	b.n	800b3ac <HAL_RCC_GetOscConfig+0x54>
 800b420:	40023800 	.word	0x40023800

0800b424 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b424:	230f      	movs	r3, #15
 800b426:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <HAL_RCC_GetClockConfig+0x34>)
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	f002 0203 	and.w	r2, r2, #3
 800b430:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b438:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800b440:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	08db      	lsrs	r3, r3, #3
 800b446:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800b44a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b44c:	4b03      	ldr	r3, [pc, #12]	; (800b45c <HAL_RCC_GetClockConfig+0x38>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 030f 	and.w	r3, r3, #15
 800b454:	600b      	str	r3, [r1, #0]
 800b456:	4770      	bx	lr
 800b458:	40023800 	.word	0x40023800
 800b45c:	40023c00 	.word	0x40023c00

0800b460 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b460:	4770      	bx	lr

0800b462 <HAL_RCC_NMI_IRQHandler>:
{
 800b462:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <HAL_RCC_NMI_IRQHandler+0x1a>)
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b46c:	d100      	bne.n	800b470 <HAL_RCC_NMI_IRQHandler+0xe>
 800b46e:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800b470:	f7ff fff6 	bl	800b460 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b474:	2280      	movs	r2, #128	; 0x80
 800b476:	4b02      	ldr	r3, [pc, #8]	; (800b480 <HAL_RCC_NMI_IRQHandler+0x1e>)
 800b478:	701a      	strb	r2, [r3, #0]
}
 800b47a:	e7f8      	b.n	800b46e <HAL_RCC_NMI_IRQHandler+0xc>
 800b47c:	40023800 	.word	0x40023800
 800b480:	4002380e 	.word	0x4002380e

0800b484 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b484:	b530      	push	{r4, r5, lr}
 800b486:	b083      	sub	sp, #12
 800b488:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b48a:	6803      	ldr	r3, [r0, #0]
 800b48c:	f013 0f05 	tst.w	r3, #5
 800b490:	d106      	bne.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	f013 0f02 	tst.w	r3, #2
 800b498:	d12e      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b49a:	2000      	movs	r0, #0
}
 800b49c:	b003      	add	sp, #12
 800b49e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4b49      	ldr	r3, [pc, #292]	; (800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800b4a4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b4a6:	f7f5 ffad 	bl	8001404 <HAL_GetTick>
 800b4aa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b4ac:	4b47      	ldr	r3, [pc, #284]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b4b4:	d006      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b4b6:	f7f5 ffa5 	bl	8001404 <HAL_GetTick>
 800b4ba:	1b00      	subs	r0, r0, r4
 800b4bc:	2802      	cmp	r0, #2
 800b4be:	d9f5      	bls.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 800b4c0:	2003      	movs	r0, #3
 800b4c2:	e7eb      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b4c4:	686a      	ldr	r2, [r5, #4]
 800b4c6:	68ab      	ldr	r3, [r5, #8]
 800b4c8:	071b      	lsls	r3, r3, #28
 800b4ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b4ce:	4a3f      	ldr	r2, [pc, #252]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b4d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	4b3c      	ldr	r3, [pc, #240]	; (800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800b4d8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b4da:	f7f5 ff93 	bl	8001404 <HAL_GetTick>
 800b4de:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b4e8:	d1d3      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b4ea:	f7f5 ff8b 	bl	8001404 <HAL_GetTick>
 800b4ee:	1b00      	subs	r0, r0, r4
 800b4f0:	2802      	cmp	r0, #2
 800b4f2:	d9f5      	bls.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 800b4f4:	2003      	movs	r0, #3
 800b4f6:	e7d1      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	4b33      	ldr	r3, [pc, #204]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b4fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b500:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b504:	641a      	str	r2, [r3, #64]	; 0x40
 800b506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800b510:	4a2f      	ldr	r2, [pc, #188]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b512:	6813      	ldr	r3, [r2, #0]
 800b514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b518:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b51a:	f7f5 ff73 	bl	8001404 <HAL_GetTick>
 800b51e:	4604      	mov	r4, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b520:	4b2b      	ldr	r3, [pc, #172]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b528:	d106      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b52a:	f7f5 ff6b 	bl	8001404 <HAL_GetTick>
 800b52e:	1b00      	subs	r0, r0, r4
 800b530:	2802      	cmp	r0, #2
 800b532:	d9f5      	bls.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 800b534:	2003      	movs	r0, #3
 800b536:	e7b1      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b538:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b53c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b540:	d012      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800b542:	68ea      	ldr	r2, [r5, #12]
 800b544:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800b548:	4293      	cmp	r3, r2
 800b54a:	d00d      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b54c:	4b1f      	ldr	r3, [pc, #124]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b54e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b550:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800b554:	491f      	ldr	r1, [pc, #124]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b556:	2001      	movs	r0, #1
 800b558:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b55a:	2000      	movs	r0, #0
 800b55c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800b55e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b562:	f013 0f01 	tst.w	r3, #1
 800b566:	d113      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b568:	68eb      	ldr	r3, [r5, #12]
 800b56a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b56e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800b572:	d01e      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800b574:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b576:	6893      	ldr	r3, [r2, #8]
 800b578:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b57c:	6093      	str	r3, [r2, #8]
 800b57e:	4913      	ldr	r1, [pc, #76]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b580:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800b582:	68ea      	ldr	r2, [r5, #12]
 800b584:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800b588:	4313      	orrs	r3, r2
 800b58a:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 800b58c:	2000      	movs	r0, #0
 800b58e:	e785      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 800b590:	f7f5 ff38 	bl	8001404 <HAL_GetTick>
 800b594:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b59a:	f013 0f02 	tst.w	r3, #2
 800b59e:	d1e3      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5a0:	f7f5 ff30 	bl	8001404 <HAL_GetTick>
 800b5a4:	1b00      	subs	r0, r0, r4
 800b5a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b5aa:	4298      	cmp	r0, r3
 800b5ac:	d9f3      	bls.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 800b5ae:	2003      	movs	r0, #3
 800b5b0:	e774      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5b2:	4906      	ldr	r1, [pc, #24]	; (800b5cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800b5b4:	688a      	ldr	r2, [r1, #8]
 800b5b6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b5ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	608b      	str	r3, [r1, #8]
 800b5c6:	e7da      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800b5c8:	42470068 	.word	0x42470068
 800b5cc:	40023800 	.word	0x40023800
 800b5d0:	40007000 	.word	0x40007000
 800b5d4:	42470e40 	.word	0x42470e40

0800b5d8 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800b5dc:	4a09      	ldr	r2, [pc, #36]	; (800b604 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
 800b5de:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800b5e2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800b5e6:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b5e8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800b5ec:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b5f0:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800b5f2:	6893      	ldr	r3, [r2, #8]
 800b5f4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800b5f8:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b5fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60c3      	str	r3, [r0, #12]
 800b602:	4770      	bx	lr
 800b604:	40023800 	.word	0x40023800

0800b608 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800b608:	2801      	cmp	r0, #1
 800b60a:	d12a      	bne.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b60c:	4b17      	ldr	r3, [pc, #92]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800b60e:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800b610:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 800b614:	d003      	beq.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800b616:	2b01      	cmp	r3, #1
 800b618:	d125      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b61a:	4815      	ldr	r0, [pc, #84]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800b61c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b61e:	4b13      	ldr	r3, [pc, #76]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b626:	d014      	beq.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b630:	4810      	ldr	r0, [pc, #64]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800b632:	fbb0 f3f3 	udiv	r3, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b636:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800b638:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 800b63c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b640:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b644:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800b648:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b64c:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b650:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b652:	4b06      	ldr	r3, [pc, #24]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b65a:	4807      	ldr	r0, [pc, #28]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 800b65c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b660:	e7e9      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 800b662:	2000      	movs	r0, #0
 800b664:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b666:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	40023800 	.word	0x40023800
 800b670:	00bb8000 	.word	0x00bb8000
 800b674:	007a1200 	.word	0x007a1200
 800b678:	00f42400 	.word	0x00f42400

0800b67c <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4605      	mov	r5, r0
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 800b680:	2200      	movs	r2, #0
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <HAL_RCCEx_EnablePLLI2S+0x60>)
 800b684:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 800b686:	f7f5 febd 	bl	8001404 <HAL_GetTick>
 800b68a:	4604      	mov	r4, r0
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 800b68c:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <HAL_RCCEx_EnablePLLI2S+0x64>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b694:	d006      	beq.n	800b6a4 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b696:	f7f5 feb5 	bl	8001404 <HAL_GetTick>
 800b69a:	1b00      	subs	r0, r0, r4
 800b69c:	2802      	cmp	r0, #2
 800b69e:	d9f5      	bls.n	800b68c <HAL_RCCEx_EnablePLLI2S+0x10>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800b6a0:	2003      	movs	r0, #3
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 800b6a4:	682a      	ldr	r2, [r5, #0]
 800b6a6:	686b      	ldr	r3, [r5, #4]
 800b6a8:	071b      	lsls	r3, r3, #28
 800b6aa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b6ae:	4a0c      	ldr	r2, [pc, #48]	; (800b6e0 <HAL_RCCEx_EnablePLLI2S+0x64>)
 800b6b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <HAL_RCCEx_EnablePLLI2S+0x60>)
 800b6b8:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 800b6ba:	f7f5 fea3 	bl	8001404 <HAL_GetTick>
 800b6be:	4604      	mov	r4, r0
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <HAL_RCCEx_EnablePLLI2S+0x64>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b6c8:	d106      	bne.n	800b6d8 <HAL_RCCEx_EnablePLLI2S+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b6ca:	f7f5 fe9b 	bl	8001404 <HAL_GetTick>
 800b6ce:	1b00      	subs	r0, r0, r4
 800b6d0:	2802      	cmp	r0, #2
 800b6d2:	d9f5      	bls.n	800b6c0 <HAL_RCCEx_EnablePLLI2S+0x44>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800b6d4:	2003      	movs	r0, #3
    }
  }

 return HAL_OK;
}
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 return HAL_OK;
 800b6d8:	2000      	movs	r0, #0
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	42470068 	.word	0x42470068
 800b6e0:	40023800 	.word	0x40023800

0800b6e4 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 800b6e4:	b510      	push	{r4, lr}
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4b09      	ldr	r3, [pc, #36]	; (800b710 <HAL_RCCEx_DisablePLLI2S+0x2c>)
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 800b6ec:	f7f5 fe8a 	bl	8001404 <HAL_GetTick>
 800b6f0:	4604      	mov	r4, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800b6f2:	4b08      	ldr	r3, [pc, #32]	; (800b714 <HAL_RCCEx_DisablePLLI2S+0x30>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b6fa:	d006      	beq.n	800b70a <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b6fc:	f7f5 fe82 	bl	8001404 <HAL_GetTick>
 800b700:	1b00      	subs	r0, r0, r4
 800b702:	2802      	cmp	r0, #2
 800b704:	d9f5      	bls.n	800b6f2 <HAL_RCCEx_DisablePLLI2S+0xe>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800b706:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 800b708:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800b70a:	2000      	movs	r0, #0
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	42470068 	.word	0x42470068
 800b714:	40023800 	.word	0x40023800

0800b718 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800b718:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b71a:	f7f5 fe73 	bl	8001404 <HAL_GetTick>
 800b71e:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b720:	4a47      	ldr	r2, [pc, #284]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b722:	6813      	ldr	r3, [r2, #0]
 800b724:	f043 0301 	orr.w	r3, r3, #1
 800b728:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800b72a:	4b45      	ldr	r3, [pc, #276]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f013 0f02 	tst.w	r3, #2
 800b732:	d107      	bne.n	800b744 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b734:	f7f5 fe66 	bl	8001404 <HAL_GetTick>
 800b738:	1b00      	subs	r0, r0, r4
 800b73a:	2802      	cmp	r0, #2
 800b73c:	d9f5      	bls.n	800b72a <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800b740:	4618      	mov	r0, r3
 800b742:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800b744:	4d3e      	ldr	r5, [pc, #248]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800b74e:	f7f5 fe59 	bl	8001404 <HAL_GetTick>
 800b752:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 800b754:	2300      	movs	r3, #0
 800b756:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800b758:	4b39      	ldr	r3, [pc, #228]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f013 0f0c 	tst.w	r3, #12
 800b760:	d008      	beq.n	800b774 <HAL_RCC_DeInit+0x5c>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b762:	f7f5 fe4f 	bl	8001404 <HAL_GetTick>
 800b766:	1b00      	subs	r0, r0, r4
 800b768:	f241 3388 	movw	r3, #5000	; 0x1388
 800b76c:	4298      	cmp	r0, r3
 800b76e:	d9f3      	bls.n	800b758 <HAL_RCC_DeInit+0x40>
      return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e7e5      	b.n	800b740 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800b774:	f7f5 fe46 	bl	8001404 <HAL_GetTick>
 800b778:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800b77a:	4a31      	ldr	r2, [pc, #196]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b77c:	6813      	ldr	r3, [r2, #0]
 800b77e:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800b782:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800b784:	4b2e      	ldr	r3, [pc, #184]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b78c:	d006      	beq.n	800b79c <HAL_RCC_DeInit+0x84>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b78e:	f7f5 fe39 	bl	8001404 <HAL_GetTick>
 800b792:	1b00      	subs	r0, r0, r4
 800b794:	2864      	cmp	r0, #100	; 0x64
 800b796:	d9f5      	bls.n	800b784 <HAL_RCC_DeInit+0x6c>
      return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e7d1      	b.n	800b740 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800b79c:	f7f5 fe32 	bl	8001404 <HAL_GetTick>
 800b7a0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b7a2:	4a27      	ldr	r2, [pc, #156]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b7a4:	6813      	ldr	r3, [r2, #0]
 800b7a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7aa:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800b7ac:	4b24      	ldr	r3, [pc, #144]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b7b4:	d006      	beq.n	800b7c4 <HAL_RCC_DeInit+0xac>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7b6:	f7f5 fe25 	bl	8001404 <HAL_GetTick>
 800b7ba:	1b00      	subs	r0, r0, r4
 800b7bc:	2802      	cmp	r0, #2
 800b7be:	d9f5      	bls.n	800b7ac <HAL_RCC_DeInit+0x94>
      return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e7bd      	b.n	800b740 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800b7c4:	f7f5 fe1e 	bl	8001404 <HAL_GetTick>
 800b7c8:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800b7ca:	4a1d      	ldr	r2, [pc, #116]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b7cc:	6813      	ldr	r3, [r2, #0]
 800b7ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7d2:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b7dc:	d006      	beq.n	800b7ec <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b7de:	f7f5 fe11 	bl	8001404 <HAL_GetTick>
 800b7e2:	1b00      	subs	r0, r0, r4
 800b7e4:	2802      	cmp	r0, #2
 800b7e6:	d9f5      	bls.n	800b7d4 <HAL_RCC_DeInit+0xbc>
      return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e7a9      	b.n	800b740 <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800b7ec:	4b14      	ldr	r3, [pc, #80]	; (800b840 <HAL_RCC_DeInit+0x128>)
 800b7ee:	4a15      	ldr	r2, [pc, #84]	; (800b844 <HAL_RCC_DeInit+0x12c>)
 800b7f0:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800b7f2:	4a15      	ldr	r2, [pc, #84]	; (800b848 <HAL_RCC_DeInit+0x130>)
 800b7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b7fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800b800:	68da      	ldr	r2, [r3, #12]
 800b802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b806:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800b808:	68da      	ldr	r2, [r3, #12]
 800b80a:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 800b80e:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b816:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800b818:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	675a      	str	r2, [r3, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800b820:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b822:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b826:	675a      	str	r2, [r3, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 800b828:	4a08      	ldr	r2, [pc, #32]	; (800b84c <HAL_RCC_DeInit+0x134>)
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <HAL_RCC_DeInit+0x138>)
 800b82c:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800b82e:	4b09      	ldr	r3, [pc, #36]	; (800b854 <HAL_RCC_DeInit+0x13c>)
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	f7f5 f9b5 	bl	8000ba0 <HAL_InitTick>
 800b836:	4603      	mov	r3, r0
 800b838:	2800      	cmp	r0, #0
 800b83a:	d081      	beq.n	800b740 <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e77f      	b.n	800b740 <HAL_RCC_DeInit+0x28>
 800b840:	40023800 	.word	0x40023800
 800b844:	04003010 	.word	0x04003010
 800b848:	20003000 	.word	0x20003000
 800b84c:	00f42400 	.word	0x00f42400
 800b850:	20000008 	.word	0x20000008
 800b854:	20000010 	.word	0x20000010

0800b858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	f023 0301 	bic.w	r3, r3, #1
 800b860:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b866:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b868:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b86c:	680d      	ldr	r5, [r1, #0]
 800b86e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b870:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b874:	688d      	ldr	r5, [r1, #8]
 800b876:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b878:	4d11      	ldr	r5, [pc, #68]	; (800b8c0 <TIM_OC1_SetConfig+0x68>)
 800b87a:	42a8      	cmp	r0, r5
 800b87c:	d011      	beq.n	800b8a2 <TIM_OC1_SetConfig+0x4a>
 800b87e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b882:	42a8      	cmp	r0, r5
 800b884:	d00d      	beq.n	800b8a2 <TIM_OC1_SetConfig+0x4a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b886:	4d0e      	ldr	r5, [pc, #56]	; (800b8c0 <TIM_OC1_SetConfig+0x68>)
 800b888:	42a8      	cmp	r0, r5
 800b88a:	d011      	beq.n	800b8b0 <TIM_OC1_SetConfig+0x58>
 800b88c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b890:	42a8      	cmp	r0, r5
 800b892:	d00d      	beq.n	800b8b0 <TIM_OC1_SetConfig+0x58>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b894:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b896:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b898:	684a      	ldr	r2, [r1, #4]
 800b89a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b89c:	6203      	str	r3, [r0, #32]
}
 800b89e:	bc30      	pop	{r4, r5}
 800b8a0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8a2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b8a6:	68cd      	ldr	r5, [r1, #12]
 800b8a8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8aa:	f023 0304 	bic.w	r3, r3, #4
 800b8ae:	e7ea      	b.n	800b886 <TIM_OC1_SetConfig+0x2e>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8b0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800b8b4:	694d      	ldr	r5, [r1, #20]
 800b8b6:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8b8:	698d      	ldr	r5, [r1, #24]
 800b8ba:	432c      	orrs	r4, r5
 800b8bc:	e7ea      	b.n	800b894 <TIM_OC1_SetConfig+0x3c>
 800b8be:	bf00      	nop
 800b8c0:	40010000 	.word	0x40010000

0800b8c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8c6:	6a03      	ldr	r3, [r0, #32]
 800b8c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8d4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8d8:	680d      	ldr	r5, [r1, #0]
 800b8da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8e0:	688d      	ldr	r5, [r1, #8]
 800b8e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8e6:	4d13      	ldr	r5, [pc, #76]	; (800b934 <TIM_OC3_SetConfig+0x70>)
 800b8e8:	42a8      	cmp	r0, r5
 800b8ea:	d011      	beq.n	800b910 <TIM_OC3_SetConfig+0x4c>
 800b8ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8f0:	42a8      	cmp	r0, r5
 800b8f2:	d00d      	beq.n	800b910 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8f4:	4d0f      	ldr	r5, [pc, #60]	; (800b934 <TIM_OC3_SetConfig+0x70>)
 800b8f6:	42a8      	cmp	r0, r5
 800b8f8:	d012      	beq.n	800b920 <TIM_OC3_SetConfig+0x5c>
 800b8fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8fe:	42a8      	cmp	r0, r5
 800b900:	d00e      	beq.n	800b920 <TIM_OC3_SetConfig+0x5c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b902:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b904:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b906:	684a      	ldr	r2, [r1, #4]
 800b908:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b90a:	6203      	str	r3, [r0, #32]
}
 800b90c:	bc30      	pop	{r4, r5}
 800b90e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800b910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b914:	68cd      	ldr	r5, [r1, #12]
 800b916:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800b91a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b91e:	e7e9      	b.n	800b8f4 <TIM_OC3_SetConfig+0x30>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b920:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b924:	694d      	ldr	r5, [r1, #20]
 800b926:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b92a:	698d      	ldr	r5, [r1, #24]
 800b92c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800b930:	e7e7      	b.n	800b902 <TIM_OC3_SetConfig+0x3e>
 800b932:	bf00      	nop
 800b934:	40010000 	.word	0x40010000

0800b938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b938:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b93a:	6a03      	ldr	r3, [r0, #32]
 800b93c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b940:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b942:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b944:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b946:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b948:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b94c:	680d      	ldr	r5, [r1, #0]
 800b94e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b956:	688d      	ldr	r5, [r1, #8]
 800b958:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b95c:	4d09      	ldr	r5, [pc, #36]	; (800b984 <TIM_OC4_SetConfig+0x4c>)
 800b95e:	42a8      	cmp	r0, r5
 800b960:	d00a      	beq.n	800b978 <TIM_OC4_SetConfig+0x40>
 800b962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b966:	42a8      	cmp	r0, r5
 800b968:	d006      	beq.n	800b978 <TIM_OC4_SetConfig+0x40>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b96c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b96e:	684a      	ldr	r2, [r1, #4]
 800b970:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b972:	6203      	str	r3, [r0, #32]
}
 800b974:	bc30      	pop	{r4, r5}
 800b976:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b978:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b97c:	694d      	ldr	r5, [r1, #20]
 800b97e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800b982:	e7f2      	b.n	800b96a <TIM_OC4_SetConfig+0x32>
 800b984:	40010000 	.word	0x40010000

0800b988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b988:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b98a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b98c:	6a04      	ldr	r4, [r0, #32]
 800b98e:	f024 0401 	bic.w	r4, r4, #1
 800b992:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b994:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b996:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b99a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b99e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800b9a2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9a4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b9a6:	6203      	str	r3, [r0, #32]
}
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9ae:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9b0:	6a04      	ldr	r4, [r0, #32]
 800b9b2:	f024 0410 	bic.w	r4, r4, #16
 800b9b6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9b8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b9ba:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b9bc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b9c0:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9c4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b9c8:	031b      	lsls	r3, r3, #12
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9ce:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b9d2:	0109      	lsls	r1, r1, #4
 800b9d4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800b9d8:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b9dc:	6205      	str	r5, [r0, #32]
}
 800b9de:	bc30      	pop	{r4, r5}
 800b9e0:	4770      	bx	lr

0800b9e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9e2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9e4:	6a03      	ldr	r3, [r0, #32]
 800b9e6:	f023 0310 	bic.w	r3, r3, #16
 800b9ea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ec:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b9ee:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9f0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9f4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ba02:	6203      	str	r3, [r0, #32]
}
 800ba04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba0a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba0c:	6a04      	ldr	r4, [r0, #32]
 800ba0e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800ba12:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba14:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800ba16:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ba18:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800ba1c:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ba1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ba28:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ba2c:	0209      	lsls	r1, r1, #8
 800ba2e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800ba32:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba34:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800ba36:	6205      	str	r5, [r0, #32]
}
 800ba38:	bc30      	pop	{r4, r5}
 800ba3a:	4770      	bx	lr

0800ba3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba3c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba3e:	6a04      	ldr	r4, [r0, #32]
 800ba40:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800ba44:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba46:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800ba48:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ba4a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ba4e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ba52:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ba56:	031b      	lsls	r3, r3, #12
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ba5c:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ba60:	0309      	lsls	r1, r1, #12
 800ba62:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 800ba66:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba68:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800ba6a:	6205      	str	r5, [r0, #32]
}
 800ba6c:	bc30      	pop	{r4, r5}
 800ba6e:	4770      	bx	lr

0800ba70 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba70:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba76:	4319      	orrs	r1, r3
 800ba78:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba7c:	6081      	str	r1, [r0, #8]
 800ba7e:	4770      	bx	lr
{
 800ba80:	4770      	bx	lr
{
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIM_Base_DeInit>:
{
 800ba84:	b510      	push	{r4, lr}
 800ba86:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	2302      	movs	r3, #2
 800ba8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	6a19      	ldr	r1, [r3, #32]
 800ba92:	f241 1211 	movw	r2, #4369	; 0x1111
 800ba96:	4211      	tst	r1, r2
 800ba98:	d108      	bne.n	800baac <HAL_TIM_Base_DeInit+0x28>
 800ba9a:	6a19      	ldr	r1, [r3, #32]
 800ba9c:	f240 4244 	movw	r2, #1092	; 0x444
 800baa0:	4211      	tst	r1, r2
 800baa2:	d103      	bne.n	800baac <HAL_TIM_Base_DeInit+0x28>
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f022 0201 	bic.w	r2, r2, #1
 800baaa:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800baac:	4620      	mov	r0, r4
 800baae:	f7f5 fc01 	bl	80012b4 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bab2:	2000      	movs	r0, #0
 800bab4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bab8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800babc:	bd10      	pop	{r4, pc}

0800babe <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800babe:	2302      	movs	r3, #2
 800bac0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	6893      	ldr	r3, [r2, #8]
 800bac8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bacc:	2b06      	cmp	r3, #6
 800bace:	d003      	beq.n	800bad8 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800bad0:	6813      	ldr	r3, [r2, #0]
 800bad2:	f043 0301 	orr.w	r3, r3, #1
 800bad6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800bad8:	2301      	movs	r3, #1
 800bada:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800bade:	2000      	movs	r0, #0
 800bae0:	4770      	bx	lr

0800bae2 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 800bae2:	2302      	movs	r3, #2
 800bae4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bae8:	6803      	ldr	r3, [r0, #0]
 800baea:	6a19      	ldr	r1, [r3, #32]
 800baec:	f241 1211 	movw	r2, #4369	; 0x1111
 800baf0:	4211      	tst	r1, r2
 800baf2:	d108      	bne.n	800bb06 <HAL_TIM_Base_Stop+0x24>
 800baf4:	6a19      	ldr	r1, [r3, #32]
 800baf6:	f240 4244 	movw	r2, #1092	; 0x444
 800bafa:	4211      	tst	r1, r2
 800bafc:	d103      	bne.n	800bb06 <HAL_TIM_Base_Stop+0x24>
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	f022 0201 	bic.w	r2, r2, #1
 800bb04:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800bb06:	2301      	movs	r3, #1
 800bb08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb10:	6802      	ldr	r2, [r0, #0]
 800bb12:	68d3      	ldr	r3, [r2, #12]
 800bb14:	f043 0301 	orr.w	r3, r3, #1
 800bb18:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb1a:	6802      	ldr	r2, [r0, #0]
 800bb1c:	6893      	ldr	r3, [r2, #8]
 800bb1e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb22:	2b06      	cmp	r3, #6
 800bb24:	d003      	beq.n	800bb2e <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 800bb26:	6813      	ldr	r3, [r2, #0]
 800bb28:	f043 0301 	orr.w	r3, r3, #1
 800bb2c:	6013      	str	r3, [r2, #0]
}
 800bb2e:	2000      	movs	r0, #0
 800bb30:	4770      	bx	lr

0800bb32 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bb32:	6802      	ldr	r2, [r0, #0]
 800bb34:	68d3      	ldr	r3, [r2, #12]
 800bb36:	f023 0301 	bic.w	r3, r3, #1
 800bb3a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800bb3c:	6803      	ldr	r3, [r0, #0]
 800bb3e:	6a19      	ldr	r1, [r3, #32]
 800bb40:	f241 1211 	movw	r2, #4369	; 0x1111
 800bb44:	4211      	tst	r1, r2
 800bb46:	d108      	bne.n	800bb5a <HAL_TIM_Base_Stop_IT+0x28>
 800bb48:	6a19      	ldr	r1, [r3, #32]
 800bb4a:	f240 4244 	movw	r2, #1092	; 0x444
 800bb4e:	4211      	tst	r1, r2
 800bb50:	d103      	bne.n	800bb5a <HAL_TIM_Base_Stop_IT+0x28>
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	f022 0201 	bic.w	r2, r2, #1
 800bb58:	601a      	str	r2, [r3, #0]
}
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	4770      	bx	lr

0800bb5e <HAL_TIM_Base_Start_DMA>:
{
 800bb5e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800bb60:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800bb64:	b2ed      	uxtb	r5, r5
 800bb66:	2d02      	cmp	r5, #2
 800bb68:	d02f      	beq.n	800bbca <HAL_TIM_Base_Start_DMA+0x6c>
  else if (htim->State == HAL_TIM_STATE_READY)
 800bb6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d021      	beq.n	800bbb8 <HAL_TIM_Base_Start_DMA+0x5a>
 800bb74:	4613      	mov	r3, r2
 800bb76:	4604      	mov	r4, r0
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bb78:	6a02      	ldr	r2, [r0, #32]
 800bb7a:	4816      	ldr	r0, [pc, #88]	; (800bbd4 <HAL_TIM_Base_Start_DMA+0x76>)
 800bb7c:	63d0      	str	r0, [r2, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800bb7e:	6a22      	ldr	r2, [r4, #32]
 800bb80:	4815      	ldr	r0, [pc, #84]	; (800bbd8 <HAL_TIM_Base_Start_DMA+0x7a>)
 800bb82:	6410      	str	r0, [r2, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bb84:	6a22      	ldr	r2, [r4, #32]
 800bb86:	4815      	ldr	r0, [pc, #84]	; (800bbdc <HAL_TIM_Base_Start_DMA+0x7e>)
 800bb88:	64d0      	str	r0, [r2, #76]	; 0x4c
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	322c      	adds	r2, #44	; 0x2c
 800bb8e:	6a20      	ldr	r0, [r4, #32]
 800bb90:	f7f8 f88b 	bl	8003caa <HAL_DMA_Start_IT>
 800bb94:	4603      	mov	r3, r0
 800bb96:	b9d8      	cbnz	r0, 800bbd0 <HAL_TIM_Base_Start_DMA+0x72>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800bb98:	6821      	ldr	r1, [r4, #0]
 800bb9a:	68ca      	ldr	r2, [r1, #12]
 800bb9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bba0:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bba2:	6821      	ldr	r1, [r4, #0]
 800bba4:	688a      	ldr	r2, [r1, #8]
 800bba6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbaa:	2a06      	cmp	r2, #6
 800bbac:	d00e      	beq.n	800bbcc <HAL_TIM_Base_Start_DMA+0x6e>
    __HAL_TIM_ENABLE(htim);
 800bbae:	680a      	ldr	r2, [r1, #0]
 800bbb0:	f042 0201 	orr.w	r2, r2, #1
 800bbb4:	600a      	str	r2, [r1, #0]
 800bbb6:	e009      	b.n	800bbcc <HAL_TIM_Base_Start_DMA+0x6e>
    if ((pData == NULL) && (Length > 0U))
 800bbb8:	b119      	cbz	r1, 800bbc2 <HAL_TIM_Base_Start_DMA+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800bbc0:	e7d8      	b.n	800bb74 <HAL_TIM_Base_Start_DMA+0x16>
    if ((pData == NULL) && (Length > 0U))
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	d0f9      	beq.n	800bbba <HAL_TIM_Base_Start_DMA+0x5c>
      return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <HAL_TIM_Base_Start_DMA+0x6e>
    return HAL_BUSY;
 800bbca:	2302      	movs	r3, #2
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e7fb      	b.n	800bbcc <HAL_TIM_Base_Start_DMA+0x6e>
 800bbd4:	0800c275 	.word	0x0800c275
 800bbd8:	0800c287 	.word	0x0800c287
 800bbdc:	0800c559 	.word	0x0800c559

0800bbe0 <HAL_TIM_Base_Stop_DMA>:
{
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800bbe4:	6802      	ldr	r2, [r0, #0]
 800bbe6:	68d3      	ldr	r3, [r2, #12]
 800bbe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbec:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bbee:	6a00      	ldr	r0, [r0, #32]
 800bbf0:	f7f8 f8da 	bl	8003da8 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	6a19      	ldr	r1, [r3, #32]
 800bbf8:	f241 1211 	movw	r2, #4369	; 0x1111
 800bbfc:	4211      	tst	r1, r2
 800bbfe:	d108      	bne.n	800bc12 <HAL_TIM_Base_Stop_DMA+0x32>
 800bc00:	6a19      	ldr	r1, [r3, #32]
 800bc02:	f240 4244 	movw	r2, #1092	; 0x444
 800bc06:	4211      	tst	r1, r2
 800bc08:	d103      	bne.n	800bc12 <HAL_TIM_Base_Stop_DMA+0x32>
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	f022 0201 	bic.w	r2, r2, #1
 800bc10:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800bc12:	2301      	movs	r3, #1
 800bc14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bc18:	2000      	movs	r0, #0
 800bc1a:	bd10      	pop	{r4, pc}

0800bc1c <HAL_TIM_OC_MspInit>:
{
 800bc1c:	4770      	bx	lr

0800bc1e <HAL_TIM_OC_MspDeInit>:
{
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_TIM_OC_DeInit>:
{
 800bc20:	b510      	push	{r4, lr}
 800bc22:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	2302      	movs	r3, #2
 800bc26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bc2a:	6803      	ldr	r3, [r0, #0]
 800bc2c:	6a19      	ldr	r1, [r3, #32]
 800bc2e:	f241 1211 	movw	r2, #4369	; 0x1111
 800bc32:	4211      	tst	r1, r2
 800bc34:	d108      	bne.n	800bc48 <HAL_TIM_OC_DeInit+0x28>
 800bc36:	6a19      	ldr	r1, [r3, #32]
 800bc38:	f240 4244 	movw	r2, #1092	; 0x444
 800bc3c:	4211      	tst	r1, r2
 800bc3e:	d103      	bne.n	800bc48 <HAL_TIM_OC_DeInit+0x28>
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	f022 0201 	bic.w	r2, r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f7ff ffe8 	bl	800bc1e <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bc4e:	2000      	movs	r0, #0
 800bc50:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bc54:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bc58:	bd10      	pop	{r4, pc}

0800bc5a <HAL_TIM_PWM_MspInit>:
{
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_TIM_PWM_MspDeInit>:
{
 800bc5c:	4770      	bx	lr

0800bc5e <HAL_TIM_PWM_DeInit>:
{
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bc62:	2302      	movs	r3, #2
 800bc64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bc68:	6803      	ldr	r3, [r0, #0]
 800bc6a:	6a19      	ldr	r1, [r3, #32]
 800bc6c:	f241 1211 	movw	r2, #4369	; 0x1111
 800bc70:	4211      	tst	r1, r2
 800bc72:	d108      	bne.n	800bc86 <HAL_TIM_PWM_DeInit+0x28>
 800bc74:	6a19      	ldr	r1, [r3, #32]
 800bc76:	f240 4244 	movw	r2, #1092	; 0x444
 800bc7a:	4211      	tst	r1, r2
 800bc7c:	d103      	bne.n	800bc86 <HAL_TIM_PWM_DeInit+0x28>
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff ffe8 	bl	800bc5c <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bc92:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bc96:	bd10      	pop	{r4, pc}

0800bc98 <HAL_TIM_IC_MspInit>:
{
 800bc98:	4770      	bx	lr

0800bc9a <HAL_TIM_IC_MspDeInit>:
{
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_TIM_IC_DeInit>:
{
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	2302      	movs	r3, #2
 800bca2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bca6:	6803      	ldr	r3, [r0, #0]
 800bca8:	6a19      	ldr	r1, [r3, #32]
 800bcaa:	f241 1211 	movw	r2, #4369	; 0x1111
 800bcae:	4211      	tst	r1, r2
 800bcb0:	d108      	bne.n	800bcc4 <HAL_TIM_IC_DeInit+0x28>
 800bcb2:	6a19      	ldr	r1, [r3, #32]
 800bcb4:	f240 4244 	movw	r2, #1092	; 0x444
 800bcb8:	4211      	tst	r1, r2
 800bcba:	d103      	bne.n	800bcc4 <HAL_TIM_IC_DeInit+0x28>
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	f022 0201 	bic.w	r2, r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f7ff ffe8 	bl	800bc9a <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bcca:	2000      	movs	r0, #0
 800bccc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bcd0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <HAL_TIM_OnePulse_MspInit>:
{
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIM_OnePulse_MspDeInit>:
{
 800bcd8:	4770      	bx	lr

0800bcda <HAL_TIM_OnePulse_DeInit>:
{
 800bcda:	b510      	push	{r4, lr}
 800bcdc:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bcde:	2302      	movs	r3, #2
 800bce0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bce4:	6803      	ldr	r3, [r0, #0]
 800bce6:	6a19      	ldr	r1, [r3, #32]
 800bce8:	f241 1211 	movw	r2, #4369	; 0x1111
 800bcec:	4211      	tst	r1, r2
 800bcee:	d108      	bne.n	800bd02 <HAL_TIM_OnePulse_DeInit+0x28>
 800bcf0:	6a19      	ldr	r1, [r3, #32]
 800bcf2:	f240 4244 	movw	r2, #1092	; 0x444
 800bcf6:	4211      	tst	r1, r2
 800bcf8:	d103      	bne.n	800bd02 <HAL_TIM_OnePulse_DeInit+0x28>
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	f022 0201 	bic.w	r2, r2, #1
 800bd00:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 800bd02:	4620      	mov	r0, r4
 800bd04:	f7ff ffe8 	bl	800bcd8 <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bd08:	2000      	movs	r0, #0
 800bd0a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bd0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bd12:	bd10      	pop	{r4, pc}

0800bd14 <HAL_TIM_Encoder_MspInit>:
{
 800bd14:	4770      	bx	lr

0800bd16 <HAL_TIM_Encoder_MspDeInit>:
{
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIM_Encoder_DeInit>:
{
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bd22:	6803      	ldr	r3, [r0, #0]
 800bd24:	6a19      	ldr	r1, [r3, #32]
 800bd26:	f241 1211 	movw	r2, #4369	; 0x1111
 800bd2a:	4211      	tst	r1, r2
 800bd2c:	d108      	bne.n	800bd40 <HAL_TIM_Encoder_DeInit+0x28>
 800bd2e:	6a19      	ldr	r1, [r3, #32]
 800bd30:	f240 4244 	movw	r2, #1092	; 0x444
 800bd34:	4211      	tst	r1, r2
 800bd36:	d103      	bne.n	800bd40 <HAL_TIM_Encoder_DeInit+0x28>
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	f022 0201 	bic.w	r2, r2, #1
 800bd3e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7ff ffe8 	bl	800bd16 <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800bd46:	2000      	movs	r0, #0
 800bd48:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bd4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bd50:	bd10      	pop	{r4, pc}

0800bd52 <HAL_TIM_DMABurst_WriteStart>:
{
 800bd52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800bd54:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800bd58:	b2ed      	uxtb	r5, r5
 800bd5a:	2d02      	cmp	r5, #2
 800bd5c:	f000 80d5 	beq.w	800bf0a <HAL_TIM_DMABurst_WriteStart+0x1b8>
  else if (htim->State == HAL_TIM_STATE_READY)
 800bd60:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bd64:	b2e4      	uxtb	r4, r4
 800bd66:	2c01      	cmp	r4, #1
 800bd68:	d01e      	beq.n	800bda8 <HAL_TIM_DMABurst_WriteStart+0x56>
 800bd6a:	461e      	mov	r6, r3
 800bd6c:	4615      	mov	r5, r2
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800bd72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bd76:	f000 8083 	beq.w	800be80 <HAL_TIM_DMABurst_WriteStart+0x12e>
 800bd7a:	d81f      	bhi.n	800bdbc <HAL_TIM_DMABurst_WriteStart+0x6a>
 800bd7c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bd80:	d052      	beq.n	800be28 <HAL_TIM_DMABurst_WriteStart+0xd6>
 800bd82:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bd86:	d065      	beq.n	800be54 <HAL_TIM_DMABurst_WriteStart+0x102>
 800bd88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bd8c:	d036      	beq.n	800bdfc <HAL_TIM_DMABurst_WriteStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	9a06      	ldr	r2, [sp, #24]
 800bd92:	4317      	orrs	r7, r2
 800bd94:	649f      	str	r7, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	68da      	ldr	r2, [r3, #12]
 800bd9a:	432a      	orrs	r2, r5
 800bd9c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bda4:	2000      	movs	r0, #0
 800bda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bda8:	b11b      	cbz	r3, 800bdb2 <HAL_TIM_DMABurst_WriteStart+0x60>
      htim->State = HAL_TIM_STATE_BUSY;
 800bdaa:	2402      	movs	r4, #2
 800bdac:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800bdb0:	e7db      	b.n	800bd6a <HAL_TIM_DMABurst_WriteStart+0x18>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bdb2:	9c06      	ldr	r4, [sp, #24]
 800bdb4:	2c00      	cmp	r4, #0
 800bdb6:	d0f8      	beq.n	800bdaa <HAL_TIM_DMABurst_WriteStart+0x58>
      return HAL_ERROR;
 800bdb8:	2001      	movs	r0, #1
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (BurstRequestSrc)
 800bdbc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bdc0:	d075      	beq.n	800beae <HAL_TIM_DMABurst_WriteStart+0x15c>
 800bdc2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800bdc6:	f000 8089 	beq.w	800bedc <HAL_TIM_DMABurst_WriteStart+0x18a>
 800bdca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bdce:	d1de      	bne.n	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bdd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bdd2:	4a4f      	ldr	r2, [pc, #316]	; (800bf10 <HAL_TIM_DMABurst_WriteStart+0x1be>)
 800bdd4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bdd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bdd8:	4a4e      	ldr	r2, [pc, #312]	; (800bf14 <HAL_TIM_DMABurst_WriteStart+0x1c2>)
 800bdda:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bddc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bdde:	4a4e      	ldr	r2, [pc, #312]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800bde0:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bde2:	6802      	ldr	r2, [r0, #0]
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800bde8:	3301      	adds	r3, #1
 800bdea:	324c      	adds	r2, #76	; 0x4c
 800bdec:	4631      	mov	r1, r6
 800bdee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bdf0:	f7f7 ff5b 	bl	8003caa <HAL_DMA_Start_IT>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d0ca      	beq.n	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bdfc:	6a03      	ldr	r3, [r0, #32]
 800bdfe:	4a47      	ldr	r2, [pc, #284]	; (800bf1c <HAL_TIM_DMABurst_WriteStart+0x1ca>)
 800be00:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800be02:	6a03      	ldr	r3, [r0, #32]
 800be04:	4a46      	ldr	r2, [pc, #280]	; (800bf20 <HAL_TIM_DMABurst_WriteStart+0x1ce>)
 800be06:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800be08:	6a03      	ldr	r3, [r0, #32]
 800be0a:	4a43      	ldr	r2, [pc, #268]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800be0c:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be0e:	6802      	ldr	r2, [r0, #0]
 800be10:	9b06      	ldr	r3, [sp, #24]
 800be12:	0a1b      	lsrs	r3, r3, #8
 800be14:	3301      	adds	r3, #1
 800be16:	324c      	adds	r2, #76	; 0x4c
 800be18:	4631      	mov	r1, r6
 800be1a:	6a00      	ldr	r0, [r0, #32]
 800be1c:	f7f7 ff45 	bl	8003caa <HAL_DMA_Start_IT>
 800be20:	2800      	cmp	r0, #0
 800be22:	d0b4      	beq.n	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800be24:	2001      	movs	r0, #1
 800be26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be2a:	4a39      	ldr	r2, [pc, #228]	; (800bf10 <HAL_TIM_DMABurst_WriteStart+0x1be>)
 800be2c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800be2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be30:	4a38      	ldr	r2, [pc, #224]	; (800bf14 <HAL_TIM_DMABurst_WriteStart+0x1c2>)
 800be32:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800be34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be36:	4a38      	ldr	r2, [pc, #224]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800be38:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be3a:	6802      	ldr	r2, [r0, #0]
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800be40:	3301      	adds	r3, #1
 800be42:	324c      	adds	r2, #76	; 0x4c
 800be44:	4631      	mov	r1, r6
 800be46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800be48:	f7f7 ff2f 	bl	8003caa <HAL_DMA_Start_IT>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d09e      	beq.n	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800be50:	2001      	movs	r0, #1
 800be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be56:	4a2e      	ldr	r2, [pc, #184]	; (800bf10 <HAL_TIM_DMABurst_WriteStart+0x1be>)
 800be58:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800be5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be5c:	4a2d      	ldr	r2, [pc, #180]	; (800bf14 <HAL_TIM_DMABurst_WriteStart+0x1c2>)
 800be5e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800be60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be62:	4a2d      	ldr	r2, [pc, #180]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800be64:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be66:	6802      	ldr	r2, [r0, #0]
 800be68:	9b06      	ldr	r3, [sp, #24]
 800be6a:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800be6c:	3301      	adds	r3, #1
 800be6e:	324c      	adds	r2, #76	; 0x4c
 800be70:	4631      	mov	r1, r6
 800be72:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800be74:	f7f7 ff19 	bl	8003caa <HAL_DMA_Start_IT>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d088      	beq.n	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800be7c:	2001      	movs	r0, #1
 800be7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800be82:	4a23      	ldr	r2, [pc, #140]	; (800bf10 <HAL_TIM_DMABurst_WriteStart+0x1be>)
 800be84:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800be86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800be88:	4a22      	ldr	r2, [pc, #136]	; (800bf14 <HAL_TIM_DMABurst_WriteStart+0x1c2>)
 800be8a:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800be8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800be8e:	4a22      	ldr	r2, [pc, #136]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800be90:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be92:	6802      	ldr	r2, [r0, #0]
 800be94:	9b06      	ldr	r3, [sp, #24]
 800be96:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800be98:	3301      	adds	r3, #1
 800be9a:	324c      	adds	r2, #76	; 0x4c
 800be9c:	4631      	mov	r1, r6
 800be9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bea0:	f7f7 ff03 	bl	8003caa <HAL_DMA_Start_IT>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f43f af72 	beq.w	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800beaa:	2001      	movs	r0, #1
 800beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800beae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800beb0:	4a1c      	ldr	r2, [pc, #112]	; (800bf24 <HAL_TIM_DMABurst_WriteStart+0x1d2>)
 800beb2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800beb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800beb6:	4a1c      	ldr	r2, [pc, #112]	; (800bf28 <HAL_TIM_DMABurst_WriteStart+0x1d6>)
 800beb8:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800beba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bebc:	4a16      	ldr	r2, [pc, #88]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800bebe:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bec0:	6802      	ldr	r2, [r0, #0]
 800bec2:	9b06      	ldr	r3, [sp, #24]
 800bec4:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800bec6:	3301      	adds	r3, #1
 800bec8:	324c      	adds	r2, #76	; 0x4c
 800beca:	4631      	mov	r1, r6
 800becc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bece:	f7f7 feec 	bl	8003caa <HAL_DMA_Start_IT>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f43f af5b 	beq.w	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800bed8:	2001      	movs	r0, #1
 800beda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bedc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bede:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <HAL_TIM_DMABurst_WriteStart+0x1da>)
 800bee0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800bee2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bee4:	4a12      	ldr	r2, [pc, #72]	; (800bf30 <HAL_TIM_DMABurst_WriteStart+0x1de>)
 800bee6:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800bee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800beea:	4a0b      	ldr	r2, [pc, #44]	; (800bf18 <HAL_TIM_DMABurst_WriteStart+0x1c6>)
 800beec:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800beee:	6802      	ldr	r2, [r0, #0]
 800bef0:	9b06      	ldr	r3, [sp, #24]
 800bef2:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800bef4:	3301      	adds	r3, #1
 800bef6:	324c      	adds	r2, #76	; 0x4c
 800bef8:	4631      	mov	r1, r6
 800befa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800befc:	f7f7 fed5 	bl	8003caa <HAL_DMA_Start_IT>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f43f af44 	beq.w	800bd8e <HAL_TIM_DMABurst_WriteStart+0x3c>
        return HAL_ERROR;
 800bf06:	2001      	movs	r0, #1
}
 800bf08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800bf0a:	2002      	movs	r0, #2
 800bf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	0800c32b 	.word	0x0800c32b
 800bf14:	0800c373 	.word	0x0800c373
 800bf18:	0800c559 	.word	0x0800c559
 800bf1c:	0800c275 	.word	0x0800c275
 800bf20:	0800c287 	.word	0x0800c287
 800bf24:	0800ebeb 	.word	0x0800ebeb
 800bf28:	0800ebfd 	.word	0x0800ebfd
 800bf2c:	0800c535 	.word	0x0800c535
 800bf30:	0800c547 	.word	0x0800c547

0800bf34 <HAL_TIM_DMABurst_WriteStop>:
{
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4605      	mov	r5, r0
 800bf38:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800bf3a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bf3e:	d02a      	beq.n	800bf96 <HAL_TIM_DMABurst_WriteStop+0x62>
 800bf40:	d80a      	bhi.n	800bf58 <HAL_TIM_DMABurst_WriteStop+0x24>
 800bf42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf46:	d01e      	beq.n	800bf86 <HAL_TIM_DMABurst_WriteStop+0x52>
 800bf48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bf4c:	d01f      	beq.n	800bf8e <HAL_TIM_DMABurst_WriteStop+0x5a>
 800bf4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bf52:	d00e      	beq.n	800bf72 <HAL_TIM_DMABurst_WriteStop+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 800bf54:	2000      	movs	r0, #0
 800bf56:	e00f      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
  switch (BurstRequestSrc)
 800bf58:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bf5c:	d01f      	beq.n	800bf9e <HAL_TIM_DMABurst_WriteStop+0x6a>
 800bf5e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bf62:	d020      	beq.n	800bfa6 <HAL_TIM_DMABurst_WriteStop+0x72>
 800bf64:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bf68:	d1f4      	bne.n	800bf54 <HAL_TIM_DMABurst_WriteStop+0x20>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800bf6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bf6c:	f7f7 ff1c 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bf70:	e002      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bf72:	6a00      	ldr	r0, [r0, #32]
 800bf74:	f7f7 ff18 	bl	8003da8 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800bf78:	b920      	cbnz	r0, 800bf84 <HAL_TIM_DMABurst_WriteStop+0x50>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800bf7a:	682a      	ldr	r2, [r5, #0]
 800bf7c:	68d3      	ldr	r3, [r2, #12]
 800bf7e:	ea23 0404 	bic.w	r4, r3, r4
 800bf82:	60d4      	str	r4, [r2, #12]
}
 800bf84:	bd38      	pop	{r3, r4, r5, pc}
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800bf86:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bf88:	f7f7 ff0e 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bf8c:	e7f4      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bf8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bf90:	f7f7 ff0a 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bf94:	e7f0      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bf96:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bf98:	f7f7 ff06 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bf9c:	e7ec      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800bf9e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bfa0:	f7f7 ff02 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bfa4:	e7e8      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bfa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bfa8:	f7f7 fefe 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800bfac:	e7e4      	b.n	800bf78 <HAL_TIM_DMABurst_WriteStop+0x44>

0800bfae <HAL_TIM_DMABurst_ReadStart>:
{
 800bfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800bfb0:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800bfb4:	b2ed      	uxtb	r5, r5
 800bfb6:	2d02      	cmp	r5, #2
 800bfb8:	f000 80d5 	beq.w	800c166 <HAL_TIM_DMABurst_ReadStart+0x1b8>
  else if (htim->State == HAL_TIM_STATE_READY)
 800bfbc:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bfc0:	b2e4      	uxtb	r4, r4
 800bfc2:	2c01      	cmp	r4, #1
 800bfc4:	d01e      	beq.n	800c004 <HAL_TIM_DMABurst_ReadStart+0x56>
 800bfc6:	461e      	mov	r6, r3
 800bfc8:	4615      	mov	r5, r2
 800bfca:	460f      	mov	r7, r1
 800bfcc:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800bfce:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bfd2:	f000 8083 	beq.w	800c0dc <HAL_TIM_DMABurst_ReadStart+0x12e>
 800bfd6:	d81f      	bhi.n	800c018 <HAL_TIM_DMABurst_ReadStart+0x6a>
 800bfd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bfdc:	d052      	beq.n	800c084 <HAL_TIM_DMABurst_ReadStart+0xd6>
 800bfde:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bfe2:	d065      	beq.n	800c0b0 <HAL_TIM_DMABurst_ReadStart+0x102>
 800bfe4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bfe8:	d036      	beq.n	800c058 <HAL_TIM_DMABurst_ReadStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	9a06      	ldr	r2, [sp, #24]
 800bfee:	4317      	orrs	r7, r2
 800bff0:	649f      	str	r7, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	432a      	orrs	r2, r5
 800bff8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bffa:	2301      	movs	r3, #1
 800bffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c000:	2000      	movs	r0, #0
 800c002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800c004:	b11b      	cbz	r3, 800c00e <HAL_TIM_DMABurst_ReadStart+0x60>
      htim->State = HAL_TIM_STATE_BUSY;
 800c006:	2402      	movs	r4, #2
 800c008:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800c00c:	e7db      	b.n	800bfc6 <HAL_TIM_DMABurst_ReadStart+0x18>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800c00e:	9c06      	ldr	r4, [sp, #24]
 800c010:	2c00      	cmp	r4, #0
 800c012:	d0f8      	beq.n	800c006 <HAL_TIM_DMABurst_ReadStart+0x58>
      return HAL_ERROR;
 800c014:	2001      	movs	r0, #1
 800c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (BurstRequestSrc)
 800c018:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c01c:	d075      	beq.n	800c10a <HAL_TIM_DMABurst_ReadStart+0x15c>
 800c01e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800c022:	f000 8089 	beq.w	800c138 <HAL_TIM_DMABurst_ReadStart+0x18a>
 800c026:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c02a:	d1de      	bne.n	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800c02c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c02e:	4a4f      	ldr	r2, [pc, #316]	; (800c16c <HAL_TIM_DMABurst_ReadStart+0x1be>)
 800c030:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c032:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c034:	4a4e      	ldr	r2, [pc, #312]	; (800c170 <HAL_TIM_DMABurst_ReadStart+0x1c2>)
 800c036:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c038:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c03a:	4a4e      	ldr	r2, [pc, #312]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c03c:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c03e:	6801      	ldr	r1, [r0, #0]
 800c040:	9b06      	ldr	r3, [sp, #24]
 800c042:	0a1b      	lsrs	r3, r3, #8
 800c044:	3301      	adds	r3, #1
 800c046:	4632      	mov	r2, r6
 800c048:	314c      	adds	r1, #76	; 0x4c
 800c04a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c04c:	f7f7 fe2d 	bl	8003caa <HAL_DMA_Start_IT>
 800c050:	2800      	cmp	r0, #0
 800c052:	d0ca      	beq.n	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c054:	2001      	movs	r0, #1
 800c056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800c058:	6a03      	ldr	r3, [r0, #32]
 800c05a:	4a47      	ldr	r2, [pc, #284]	; (800c178 <HAL_TIM_DMABurst_ReadStart+0x1ca>)
 800c05c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800c05e:	6a03      	ldr	r3, [r0, #32]
 800c060:	4a46      	ldr	r2, [pc, #280]	; (800c17c <HAL_TIM_DMABurst_ReadStart+0x1ce>)
 800c062:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800c064:	6a03      	ldr	r3, [r0, #32]
 800c066:	4a43      	ldr	r2, [pc, #268]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c068:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c06a:	6801      	ldr	r1, [r0, #0]
 800c06c:	9b06      	ldr	r3, [sp, #24]
 800c06e:	0a1b      	lsrs	r3, r3, #8
 800c070:	3301      	adds	r3, #1
 800c072:	4632      	mov	r2, r6
 800c074:	314c      	adds	r1, #76	; 0x4c
 800c076:	6a00      	ldr	r0, [r0, #32]
 800c078:	f7f7 fe17 	bl	8003caa <HAL_DMA_Start_IT>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d0b4      	beq.n	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c080:	2001      	movs	r0, #1
 800c082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800c084:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c086:	4a39      	ldr	r2, [pc, #228]	; (800c16c <HAL_TIM_DMABurst_ReadStart+0x1be>)
 800c088:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c08a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c08c:	4a38      	ldr	r2, [pc, #224]	; (800c170 <HAL_TIM_DMABurst_ReadStart+0x1c2>)
 800c08e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c092:	4a38      	ldr	r2, [pc, #224]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c094:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c096:	6801      	ldr	r1, [r0, #0]
 800c098:	9b06      	ldr	r3, [sp, #24]
 800c09a:	0a1b      	lsrs	r3, r3, #8
 800c09c:	3301      	adds	r3, #1
 800c09e:	4632      	mov	r2, r6
 800c0a0:	314c      	adds	r1, #76	; 0x4c
 800c0a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c0a4:	f7f7 fe01 	bl	8003caa <HAL_DMA_Start_IT>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d09e      	beq.n	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800c0b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0b2:	4a2e      	ldr	r2, [pc, #184]	; (800c16c <HAL_TIM_DMABurst_ReadStart+0x1be>)
 800c0b4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c0b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0b8:	4a2d      	ldr	r2, [pc, #180]	; (800c170 <HAL_TIM_DMABurst_ReadStart+0x1c2>)
 800c0ba:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c0bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0be:	4a2d      	ldr	r2, [pc, #180]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c0c0:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c0c2:	6801      	ldr	r1, [r0, #0]
 800c0c4:	9b06      	ldr	r3, [sp, #24]
 800c0c6:	0a1b      	lsrs	r3, r3, #8
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	314c      	adds	r1, #76	; 0x4c
 800c0ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c0d0:	f7f7 fdeb 	bl	8003caa <HAL_DMA_Start_IT>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d088      	beq.n	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c0d8:	2001      	movs	r0, #1
 800c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800c0dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c0de:	4a23      	ldr	r2, [pc, #140]	; (800c16c <HAL_TIM_DMABurst_ReadStart+0x1be>)
 800c0e0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c0e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c0e4:	4a22      	ldr	r2, [pc, #136]	; (800c170 <HAL_TIM_DMABurst_ReadStart+0x1c2>)
 800c0e6:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c0e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c0ea:	4a22      	ldr	r2, [pc, #136]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c0ec:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c0ee:	6801      	ldr	r1, [r0, #0]
 800c0f0:	9b06      	ldr	r3, [sp, #24]
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	314c      	adds	r1, #76	; 0x4c
 800c0fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c0fc:	f7f7 fdd5 	bl	8003caa <HAL_DMA_Start_IT>
 800c100:	2800      	cmp	r0, #0
 800c102:	f43f af72 	beq.w	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c106:	2001      	movs	r0, #1
 800c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800c10a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c10c:	4a1c      	ldr	r2, [pc, #112]	; (800c180 <HAL_TIM_DMABurst_ReadStart+0x1d2>)
 800c10e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800c110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c112:	4a1c      	ldr	r2, [pc, #112]	; (800c184 <HAL_TIM_DMABurst_ReadStart+0x1d6>)
 800c114:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800c116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c118:	4a16      	ldr	r2, [pc, #88]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c11a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c11c:	6801      	ldr	r1, [r0, #0]
 800c11e:	9b06      	ldr	r3, [sp, #24]
 800c120:	0a1b      	lsrs	r3, r3, #8
 800c122:	3301      	adds	r3, #1
 800c124:	4632      	mov	r2, r6
 800c126:	314c      	adds	r1, #76	; 0x4c
 800c128:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c12a:	f7f7 fdbe 	bl	8003caa <HAL_DMA_Start_IT>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f43f af5b 	beq.w	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c134:	2001      	movs	r0, #1
 800c136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800c138:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c13a:	4a13      	ldr	r2, [pc, #76]	; (800c188 <HAL_TIM_DMABurst_ReadStart+0x1da>)
 800c13c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800c13e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c140:	4a12      	ldr	r2, [pc, #72]	; (800c18c <HAL_TIM_DMABurst_ReadStart+0x1de>)
 800c142:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800c144:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c146:	4a0b      	ldr	r2, [pc, #44]	; (800c174 <HAL_TIM_DMABurst_ReadStart+0x1c6>)
 800c148:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800c14a:	6801      	ldr	r1, [r0, #0]
 800c14c:	9b06      	ldr	r3, [sp, #24]
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	3301      	adds	r3, #1
 800c152:	4632      	mov	r2, r6
 800c154:	314c      	adds	r1, #76	; 0x4c
 800c156:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c158:	f7f7 fda7 	bl	8003caa <HAL_DMA_Start_IT>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f43f af44 	beq.w	800bfea <HAL_TIM_DMABurst_ReadStart+0x3c>
        return HAL_ERROR;
 800c162:	2001      	movs	r0, #1
}
 800c164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800c166:	2002      	movs	r0, #2
 800c168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16a:	bf00      	nop
 800c16c:	0800c29b 	.word	0x0800c29b
 800c170:	0800c2e3 	.word	0x0800c2e3
 800c174:	0800c559 	.word	0x0800c559
 800c178:	0800c275 	.word	0x0800c275
 800c17c:	0800c287 	.word	0x0800c287
 800c180:	0800ebeb 	.word	0x0800ebeb
 800c184:	0800ebfd 	.word	0x0800ebfd
 800c188:	0800c535 	.word	0x0800c535
 800c18c:	0800c547 	.word	0x0800c547

0800c190 <HAL_TIM_DMABurst_ReadStop>:
{
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4605      	mov	r5, r0
 800c194:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800c196:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c19a:	d02a      	beq.n	800c1f2 <HAL_TIM_DMABurst_ReadStop+0x62>
 800c19c:	d80a      	bhi.n	800c1b4 <HAL_TIM_DMABurst_ReadStop+0x24>
 800c19e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1a2:	d01e      	beq.n	800c1e2 <HAL_TIM_DMABurst_ReadStop+0x52>
 800c1a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c1a8:	d01f      	beq.n	800c1ea <HAL_TIM_DMABurst_ReadStop+0x5a>
 800c1aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c1ae:	d00e      	beq.n	800c1ce <HAL_TIM_DMABurst_ReadStop+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e00f      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
  switch (BurstRequestSrc)
 800c1b4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c1b8:	d01f      	beq.n	800c1fa <HAL_TIM_DMABurst_ReadStop+0x6a>
 800c1ba:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c1be:	d020      	beq.n	800c202 <HAL_TIM_DMABurst_ReadStop+0x72>
 800c1c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c1c4:	d1f4      	bne.n	800c1b0 <HAL_TIM_DMABurst_ReadStop+0x20>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800c1c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c1c8:	f7f7 fdee 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c1cc:	e002      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800c1ce:	6a00      	ldr	r0, [r0, #32]
 800c1d0:	f7f7 fdea 	bl	8003da8 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800c1d4:	b920      	cbnz	r0, 800c1e0 <HAL_TIM_DMABurst_ReadStop+0x50>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800c1d6:	682a      	ldr	r2, [r5, #0]
 800c1d8:	68d3      	ldr	r3, [r2, #12]
 800c1da:	ea23 0404 	bic.w	r4, r3, r4
 800c1de:	60d4      	str	r4, [r2, #12]
}
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800c1e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c1e4:	f7f7 fde0 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c1e8:	e7f4      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800c1ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c1ec:	f7f7 fddc 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c1f0:	e7f0      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800c1f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c1f4:	f7f7 fdd8 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c1f8:	e7ec      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800c1fa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c1fc:	f7f7 fdd4 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c200:	e7e8      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800c202:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c204:	f7f7 fdd0 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800c208:	e7e4      	b.n	800c1d4 <HAL_TIM_DMABurst_ReadStop+0x44>

0800c20a <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800c20a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d00c      	beq.n	800c22c <HAL_TIM_GenerateEvent+0x22>
  htim->State = HAL_TIM_STATE_BUSY;
 800c212:	2302      	movs	r3, #2
 800c214:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 800c218:	6803      	ldr	r3, [r0, #0]
 800c21a:	6159      	str	r1, [r3, #20]
  htim->State = HAL_TIM_STATE_READY;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c222:	2300      	movs	r3, #0
 800c224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800c228:	4618      	mov	r0, r3
 800c22a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800c22c:	2002      	movs	r0, #2
}
 800c22e:	4770      	bx	lr

0800c230 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 800c230:	6802      	ldr	r2, [r0, #0]
 800c232:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800c234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 800c238:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 800c23a:	6051      	str	r1, [r2, #4]
}
 800c23c:	2000      	movs	r0, #0
 800c23e:	4770      	bx	lr

0800c240 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800c240:	290c      	cmp	r1, #12
 800c242:	d814      	bhi.n	800c26e <HAL_TIM_ReadCapturedValue+0x2e>
 800c244:	e8df f001 	tbb	[pc, r1]
 800c248:	13131307 	.word	0x13131307
 800c24c:	1313130a 	.word	0x1313130a
 800c250:	1313130d 	.word	0x1313130d
 800c254:	10          	.byte	0x10
 800c255:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800c256:	6803      	ldr	r3, [r0, #0]
 800c258:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800c25a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800c25c:	6803      	ldr	r3, [r0, #0]
 800c25e:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800c260:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800c262:	6803      	ldr	r3, [r0, #0]
 800c264:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800c266:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800c268:	6803      	ldr	r3, [r0, #0]
 800c26a:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800c26c:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800c26e:	2000      	movs	r0, #0
}
 800c270:	4770      	bx	lr
{
 800c272:	4770      	bx	lr

0800c274 <TIM_DMAPeriodElapsedCplt>:
{
 800c274:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c276:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c278:	2301      	movs	r3, #1
 800c27a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 800c27e:	f7f4 fc5f 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
 800c282:	bd08      	pop	{r3, pc}

0800c284 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
{
 800c284:	4770      	bx	lr

0800c286 <TIM_DMAPeriodElapsedHalfCplt>:
{
 800c286:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c288:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c28a:	2301      	movs	r3, #1
 800c28c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800c290:	f7ff fff8 	bl	800c284 <HAL_TIM_PeriodElapsedHalfCpltCallback>
 800c294:	bd08      	pop	{r3, pc}

0800c296 <HAL_TIM_OC_DelayElapsedCallback>:
{
 800c296:	4770      	bx	lr

0800c298 <HAL_TIM_IC_CaptureCallback>:
{
 800c298:	4770      	bx	lr

0800c29a <TIM_DMACaptureCplt>:
{
 800c29a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c29c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a6:	4298      	cmp	r0, r3
 800c2a8:	d00e      	beq.n	800c2c8 <TIM_DMACaptureCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c2aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2ac:	4298      	cmp	r0, r3
 800c2ae:	d00e      	beq.n	800c2ce <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c2b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2b2:	4298      	cmp	r0, r3
 800c2b4:	d00e      	beq.n	800c2d4 <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c2b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2b8:	4298      	cmp	r0, r3
 800c2ba:	d00e      	beq.n	800c2da <TIM_DMACaptureCplt+0x40>
  HAL_TIM_IC_CaptureCallback(htim);
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7ff ffeb 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	7723      	strb	r3, [r4, #28]
 800c2c6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	7723      	strb	r3, [r4, #28]
 800c2cc:	e7f6      	b.n	800c2bc <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	7723      	strb	r3, [r4, #28]
 800c2d2:	e7f3      	b.n	800c2bc <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	7723      	strb	r3, [r4, #28]
 800c2d8:	e7f0      	b.n	800c2bc <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2da:	2308      	movs	r3, #8
 800c2dc:	7723      	strb	r3, [r4, #28]
 800c2de:	e7ed      	b.n	800c2bc <TIM_DMACaptureCplt+0x22>

0800c2e0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
{
 800c2e0:	4770      	bx	lr

0800c2e2 <TIM_DMACaptureHalfCplt>:
{
 800c2e2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ee:	4298      	cmp	r0, r3
 800c2f0:	d00e      	beq.n	800c310 <TIM_DMACaptureHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c2f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2f4:	4298      	cmp	r0, r3
 800c2f6:	d00e      	beq.n	800c316 <TIM_DMACaptureHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c2f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2fa:	4298      	cmp	r0, r3
 800c2fc:	d00e      	beq.n	800c31c <TIM_DMACaptureHalfCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c2fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c300:	4298      	cmp	r0, r3
 800c302:	d00e      	beq.n	800c322 <TIM_DMACaptureHalfCplt+0x40>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff ffeb 	bl	800c2e0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30a:	2300      	movs	r3, #0
 800c30c:	7723      	strb	r3, [r4, #28]
 800c30e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c310:	2301      	movs	r3, #1
 800c312:	7723      	strb	r3, [r4, #28]
 800c314:	e7f6      	b.n	800c304 <TIM_DMACaptureHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c316:	2302      	movs	r3, #2
 800c318:	7723      	strb	r3, [r4, #28]
 800c31a:	e7f3      	b.n	800c304 <TIM_DMACaptureHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c31c:	2304      	movs	r3, #4
 800c31e:	7723      	strb	r3, [r4, #28]
 800c320:	e7f0      	b.n	800c304 <TIM_DMACaptureHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c322:	2308      	movs	r3, #8
 800c324:	7723      	strb	r3, [r4, #28]
 800c326:	e7ed      	b.n	800c304 <TIM_DMACaptureHalfCplt+0x22>

0800c328 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 800c328:	4770      	bx	lr

0800c32a <TIM_DMADelayPulseCplt>:
{
 800c32a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c32c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c32e:	2301      	movs	r3, #1
 800c330:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c336:	4298      	cmp	r0, r3
 800c338:	d00e      	beq.n	800c358 <TIM_DMADelayPulseCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c33a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c33c:	4298      	cmp	r0, r3
 800c33e:	d00e      	beq.n	800c35e <TIM_DMADelayPulseCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c342:	4298      	cmp	r0, r3
 800c344:	d00e      	beq.n	800c364 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c348:	4298      	cmp	r0, r3
 800c34a:	d00e      	beq.n	800c36a <TIM_DMADelayPulseCplt+0x40>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c34c:	4620      	mov	r0, r4
 800c34e:	f7ff ffeb 	bl	800c328 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c352:	2300      	movs	r3, #0
 800c354:	7723      	strb	r3, [r4, #28]
 800c356:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c358:	2301      	movs	r3, #1
 800c35a:	7723      	strb	r3, [r4, #28]
 800c35c:	e7f6      	b.n	800c34c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c35e:	2302      	movs	r3, #2
 800c360:	7723      	strb	r3, [r4, #28]
 800c362:	e7f3      	b.n	800c34c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c364:	2304      	movs	r3, #4
 800c366:	7723      	strb	r3, [r4, #28]
 800c368:	e7f0      	b.n	800c34c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c36a:	2308      	movs	r3, #8
 800c36c:	7723      	strb	r3, [r4, #28]
 800c36e:	e7ed      	b.n	800c34c <TIM_DMADelayPulseCplt+0x22>

0800c370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
{
 800c370:	4770      	bx	lr

0800c372 <TIM_DMADelayPulseHalfCplt>:
{
 800c372:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c374:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c376:	2301      	movs	r3, #1
 800c378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c37e:	4298      	cmp	r0, r3
 800c380:	d00e      	beq.n	800c3a0 <TIM_DMADelayPulseHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c384:	4298      	cmp	r0, r3
 800c386:	d00e      	beq.n	800c3a6 <TIM_DMADelayPulseHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c38a:	4298      	cmp	r0, r3
 800c38c:	d00e      	beq.n	800c3ac <TIM_DMADelayPulseHalfCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c38e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c390:	4298      	cmp	r0, r3
 800c392:	d00e      	beq.n	800c3b2 <TIM_DMADelayPulseHalfCplt+0x40>
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff ffeb 	bl	800c370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c39a:	2300      	movs	r3, #0
 800c39c:	7723      	strb	r3, [r4, #28]
 800c39e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	7723      	strb	r3, [r4, #28]
 800c3a4:	e7f6      	b.n	800c394 <TIM_DMADelayPulseHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	7723      	strb	r3, [r4, #28]
 800c3aa:	e7f3      	b.n	800c394 <TIM_DMADelayPulseHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3ac:	2304      	movs	r3, #4
 800c3ae:	7723      	strb	r3, [r4, #28]
 800c3b0:	e7f0      	b.n	800c394 <TIM_DMADelayPulseHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3b2:	2308      	movs	r3, #8
 800c3b4:	7723      	strb	r3, [r4, #28]
 800c3b6:	e7ed      	b.n	800c394 <TIM_DMADelayPulseHalfCplt+0x22>

0800c3b8 <HAL_TIM_TriggerCallback>:
{
 800c3b8:	4770      	bx	lr

0800c3ba <HAL_TIM_IRQHandler>:
{
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3be:	6803      	ldr	r3, [r0, #0]
 800c3c0:	691a      	ldr	r2, [r3, #16]
 800c3c2:	f012 0f02 	tst.w	r2, #2
 800c3c6:	d011      	beq.n	800c3ec <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3c8:	68da      	ldr	r2, [r3, #12]
 800c3ca:	f012 0f02 	tst.w	r2, #2
 800c3ce:	d00d      	beq.n	800c3ec <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3d0:	f06f 0202 	mvn.w	r2, #2
 800c3d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3da:	6803      	ldr	r3, [r0, #0]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	f013 0f03 	tst.w	r3, #3
 800c3e2:	d070      	beq.n	800c4c6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800c3e4:	f7ff ff58 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	f012 0f04 	tst.w	r2, #4
 800c3f4:	d012      	beq.n	800c41c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	f012 0f04 	tst.w	r2, #4
 800c3fc:	d00e      	beq.n	800c41c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3fe:	f06f 0204 	mvn.w	r2, #4
 800c402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c404:	2302      	movs	r3, #2
 800c406:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c410:	d05f      	beq.n	800c4d2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff ff40 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c418:	2300      	movs	r3, #0
 800c41a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	691a      	ldr	r2, [r3, #16]
 800c420:	f012 0f08 	tst.w	r2, #8
 800c424:	d012      	beq.n	800c44c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	f012 0f08 	tst.w	r2, #8
 800c42c:	d00e      	beq.n	800c44c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c42e:	f06f 0208 	mvn.w	r2, #8
 800c432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c434:	2304      	movs	r3, #4
 800c436:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	f013 0f03 	tst.w	r3, #3
 800c440:	d04e      	beq.n	800c4e0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c442:	4620      	mov	r0, r4
 800c444:	f7ff ff28 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c448:	2300      	movs	r3, #0
 800c44a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	691a      	ldr	r2, [r3, #16]
 800c450:	f012 0f10 	tst.w	r2, #16
 800c454:	d012      	beq.n	800c47c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c456:	68da      	ldr	r2, [r3, #12]
 800c458:	f012 0f10 	tst.w	r2, #16
 800c45c:	d00e      	beq.n	800c47c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c45e:	f06f 0210 	mvn.w	r2, #16
 800c462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c464:	2308      	movs	r3, #8
 800c466:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	69db      	ldr	r3, [r3, #28]
 800c46c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c470:	d03d      	beq.n	800c4ee <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff ff10 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c478:	2300      	movs	r3, #0
 800c47a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	691a      	ldr	r2, [r3, #16]
 800c480:	f012 0f01 	tst.w	r2, #1
 800c484:	d003      	beq.n	800c48e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	f012 0f01 	tst.w	r2, #1
 800c48c:	d136      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	691a      	ldr	r2, [r3, #16]
 800c492:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c496:	d003      	beq.n	800c4a0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c49e:	d134      	bne.n	800c50a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	691a      	ldr	r2, [r3, #16]
 800c4a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c4a8:	d003      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c4aa:	68da      	ldr	r2, [r3, #12]
 800c4ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c4b0:	d132      	bne.n	800c518 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	691a      	ldr	r2, [r3, #16]
 800c4b6:	f012 0f20 	tst.w	r2, #32
 800c4ba:	d003      	beq.n	800c4c4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	f012 0f20 	tst.w	r2, #32
 800c4c2:	d130      	bne.n	800c526 <HAL_TIM_IRQHandler+0x16c>
 800c4c4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4c6:	f7ff fee6 	bl	800c296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f7ff ff2c 	bl	800c328 <HAL_TIM_PWM_PulseFinishedCallback>
 800c4d0:	e78a      	b.n	800c3e8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f7ff fedf 	bl	800c296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f7ff ff25 	bl	800c328 <HAL_TIM_PWM_PulseFinishedCallback>
 800c4de:	e79b      	b.n	800c418 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7ff fed8 	bl	800c296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7ff ff1e 	bl	800c328 <HAL_TIM_PWM_PulseFinishedCallback>
 800c4ec:	e7ac      	b.n	800c448 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f7ff fed1 	bl	800c296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f7ff ff17 	bl	800c328 <HAL_TIM_PWM_PulseFinishedCallback>
 800c4fa:	e7bd      	b.n	800c478 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4fc:	f06f 0201 	mvn.w	r2, #1
 800c500:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c502:	4620      	mov	r0, r4
 800c504:	f7f4 fb1c 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
 800c508:	e7c1      	b.n	800c48e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c50a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c50e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c510:	4620      	mov	r0, r4
 800c512:	f002 fb7b 	bl	800ec0c <HAL_TIMEx_BreakCallback>
 800c516:	e7c3      	b.n	800c4a0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c51c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c51e:	4620      	mov	r0, r4
 800c520:	f7ff ff4a 	bl	800c3b8 <HAL_TIM_TriggerCallback>
 800c524:	e7c5      	b.n	800c4b2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c526:	f06f 0220 	mvn.w	r2, #32
 800c52a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c52c:	4620      	mov	r0, r4
 800c52e:	f002 fb5b 	bl	800ebe8 <HAL_TIMEx_CommutCallback>
}
 800c532:	e7c7      	b.n	800c4c4 <HAL_TIM_IRQHandler+0x10a>

0800c534 <TIM_DMATriggerCplt>:
{
 800c534:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c536:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c538:	2301      	movs	r3, #1
 800c53a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 800c53e:	f7ff ff3b 	bl	800c3b8 <HAL_TIM_TriggerCallback>
 800c542:	bd08      	pop	{r3, pc}

0800c544 <HAL_TIM_TriggerHalfCpltCallback>:
{
 800c544:	4770      	bx	lr

0800c546 <TIM_DMATriggerHalfCplt>:
{
 800c546:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c548:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c54a:	2301      	movs	r3, #1
 800c54c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800c550:	f7ff fff8 	bl	800c544 <HAL_TIM_TriggerHalfCpltCallback>
 800c554:	bd08      	pop	{r3, pc}

0800c556 <HAL_TIM_ErrorCallback>:
{
 800c556:	4770      	bx	lr

0800c558 <TIM_DMAError>:
{
 800c558:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c55a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c55c:	2301      	movs	r3, #1
 800c55e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800c562:	f7ff fff8 	bl	800c556 <HAL_TIM_ErrorCallback>
 800c566:	bd08      	pop	{r3, pc}

0800c568 <HAL_TIM_Base_GetState>:
  return htim->State;
 800c568:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c56c:	4770      	bx	lr

0800c56e <HAL_TIM_OC_GetState>:
  return htim->State;
 800c56e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c572:	4770      	bx	lr

0800c574 <HAL_TIM_PWM_GetState>:
  return htim->State;
 800c574:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c578:	4770      	bx	lr

0800c57a <HAL_TIM_IC_GetState>:
  return htim->State;
 800c57a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c57e:	4770      	bx	lr

0800c580 <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 800c580:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c584:	4770      	bx	lr

0800c586 <HAL_TIM_Encoder_GetState>:
  return htim->State;
 800c586:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c58a:	4770      	bx	lr

0800c58c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800c58c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c58e:	4a31      	ldr	r2, [pc, #196]	; (800c654 <TIM_Base_SetConfig+0xc8>)
 800c590:	4290      	cmp	r0, r2
 800c592:	d012      	beq.n	800c5ba <TIM_Base_SetConfig+0x2e>
 800c594:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c598:	d00f      	beq.n	800c5ba <TIM_Base_SetConfig+0x2e>
 800c59a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c59e:	4290      	cmp	r0, r2
 800c5a0:	d00b      	beq.n	800c5ba <TIM_Base_SetConfig+0x2e>
 800c5a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5a6:	4290      	cmp	r0, r2
 800c5a8:	d007      	beq.n	800c5ba <TIM_Base_SetConfig+0x2e>
 800c5aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5ae:	4290      	cmp	r0, r2
 800c5b0:	d003      	beq.n	800c5ba <TIM_Base_SetConfig+0x2e>
 800c5b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c5b6:	4290      	cmp	r0, r2
 800c5b8:	d103      	bne.n	800c5c2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c5be:	684a      	ldr	r2, [r1, #4]
 800c5c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5c2:	4a24      	ldr	r2, [pc, #144]	; (800c654 <TIM_Base_SetConfig+0xc8>)
 800c5c4:	4290      	cmp	r0, r2
 800c5c6:	d02a      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c5cc:	d027      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c5d2:	4290      	cmp	r0, r2
 800c5d4:	d023      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5da:	4290      	cmp	r0, r2
 800c5dc:	d01f      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5e2:	4290      	cmp	r0, r2
 800c5e4:	d01b      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c5ea:	4290      	cmp	r0, r2
 800c5ec:	d017      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5ee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c5f2:	4290      	cmp	r0, r2
 800c5f4:	d013      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5fa:	4290      	cmp	r0, r2
 800c5fc:	d00f      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c5fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c602:	4290      	cmp	r0, r2
 800c604:	d00b      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c606:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c60a:	4290      	cmp	r0, r2
 800c60c:	d007      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c60e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c612:	4290      	cmp	r0, r2
 800c614:	d003      	beq.n	800c61e <TIM_Base_SetConfig+0x92>
 800c616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c61a:	4290      	cmp	r0, r2
 800c61c:	d103      	bne.n	800c626 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c622:	68ca      	ldr	r2, [r1, #12]
 800c624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c62a:	694a      	ldr	r2, [r1, #20]
 800c62c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c62e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c630:	688b      	ldr	r3, [r1, #8]
 800c632:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c634:	680b      	ldr	r3, [r1, #0]
 800c636:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <TIM_Base_SetConfig+0xc8>)
 800c63a:	4298      	cmp	r0, r3
 800c63c:	d006      	beq.n	800c64c <TIM_Base_SetConfig+0xc0>
 800c63e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c642:	4298      	cmp	r0, r3
 800c644:	d002      	beq.n	800c64c <TIM_Base_SetConfig+0xc0>
  TIMx->EGR = TIM_EGR_UG;
 800c646:	2301      	movs	r3, #1
 800c648:	6143      	str	r3, [r0, #20]
 800c64a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800c64c:	690b      	ldr	r3, [r1, #16]
 800c64e:	6303      	str	r3, [r0, #48]	; 0x30
 800c650:	e7f9      	b.n	800c646 <TIM_Base_SetConfig+0xba>
 800c652:	bf00      	nop
 800c654:	40010000 	.word	0x40010000

0800c658 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c658:	b1a8      	cbz	r0, 800c686 <HAL_TIM_Base_Init+0x2e>
{
 800c65a:	b510      	push	{r4, lr}
 800c65c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c65e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c662:	b15b      	cbz	r3, 800c67c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c664:	2302      	movs	r3, #2
 800c666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c66a:	1d21      	adds	r1, r4, #4
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	f7ff ff8d 	bl	800c58c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c672:	2301      	movs	r3, #1
 800c674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c678:	2000      	movs	r0, #0
 800c67a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c67c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c680:	f7f4 fd90 	bl	80011a4 <HAL_TIM_Base_MspInit>
 800c684:	e7ee      	b.n	800c664 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c686:	2001      	movs	r0, #1
 800c688:	4770      	bx	lr

0800c68a <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c68a:	b1a8      	cbz	r0, 800c6b8 <HAL_TIM_OC_Init+0x2e>
{
 800c68c:	b510      	push	{r4, lr}
 800c68e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c690:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c694:	b15b      	cbz	r3, 800c6ae <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c696:	2302      	movs	r3, #2
 800c698:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c69c:	1d21      	adds	r1, r4, #4
 800c69e:	6820      	ldr	r0, [r4, #0]
 800c6a0:	f7ff ff74 	bl	800c58c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c6ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c6b2:	f7ff fab3 	bl	800bc1c <HAL_TIM_OC_MspInit>
 800c6b6:	e7ee      	b.n	800c696 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c6bc:	b1a8      	cbz	r0, 800c6ea <HAL_TIM_PWM_Init+0x2e>
{
 800c6be:	b510      	push	{r4, lr}
 800c6c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c6c6:	b15b      	cbz	r3, 800c6e0 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6ce:	1d21      	adds	r1, r4, #4
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	f7ff ff5b 	bl	800c58c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c6dc:	2000      	movs	r0, #0
 800c6de:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c6e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c6e4:	f7ff fab9 	bl	800bc5a <HAL_TIM_PWM_MspInit>
 800c6e8:	e7ee      	b.n	800c6c8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	4770      	bx	lr

0800c6ee <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800c6ee:	b1a8      	cbz	r0, 800c71c <HAL_TIM_IC_Init+0x2e>
{
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c6f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c6f8:	b15b      	cbz	r3, 800c712 <HAL_TIM_IC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c700:	1d21      	adds	r1, r4, #4
 800c702:	6820      	ldr	r0, [r4, #0]
 800c704:	f7ff ff42 	bl	800c58c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c708:	2301      	movs	r3, #1
 800c70a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c70e:	2000      	movs	r0, #0
 800c710:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c712:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c716:	f7ff fabf 	bl	800bc98 <HAL_TIM_IC_MspInit>
 800c71a:	e7ee      	b.n	800c6fa <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800c71c:	2001      	movs	r0, #1
 800c71e:	4770      	bx	lr

0800c720 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800c720:	b1f8      	cbz	r0, 800c762 <HAL_TIM_OnePulse_Init+0x42>
{
 800c722:	b538      	push	{r3, r4, r5, lr}
 800c724:	4604      	mov	r4, r0
 800c726:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c728:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c72c:	b1a3      	cbz	r3, 800c758 <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800c72e:	2302      	movs	r3, #2
 800c730:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c734:	1d21      	adds	r1, r4, #4
 800c736:	6820      	ldr	r0, [r4, #0]
 800c738:	f7ff ff28 	bl	800c58c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c73c:	6822      	ldr	r2, [r4, #0]
 800c73e:	6813      	ldr	r3, [r2, #0]
 800c740:	f023 0308 	bic.w	r3, r3, #8
 800c744:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	6813      	ldr	r3, [r2, #0]
 800c74a:	432b      	orrs	r3, r5
 800c74c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c74e:	2301      	movs	r3, #1
 800c750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c754:	2000      	movs	r0, #0
 800c756:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c758:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800c75c:	f7ff fabb 	bl	800bcd6 <HAL_TIM_OnePulse_MspInit>
 800c760:	e7e5      	b.n	800c72e <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800c762:	2001      	movs	r0, #1
 800c764:	4770      	bx	lr

0800c766 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c766:	2800      	cmp	r0, #0
 800c768:	d049      	beq.n	800c7fe <HAL_TIM_Encoder_Init+0x98>
{
 800c76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c770:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c774:	2b00      	cmp	r3, #0
 800c776:	d03d      	beq.n	800c7f4 <HAL_TIM_Encoder_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 800c778:	2302      	movs	r3, #2
 800c77a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c77e:	4629      	mov	r1, r5
 800c780:	f851 2b04 	ldr.w	r2, [r1], #4
 800c784:	6893      	ldr	r3, [r2, #8]
 800c786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c78a:	f023 0307 	bic.w	r3, r3, #7
 800c78e:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c790:	6828      	ldr	r0, [r5, #0]
 800c792:	f7ff fefb 	bl	800c58c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c796:	6828      	ldr	r0, [r5, #0]
 800c798:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c79a:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800c79c:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c79e:	6821      	ldr	r1, [r4, #0]
 800c7a0:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7a6:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7aa:	68a1      	ldr	r1, [r4, #8]
 800c7ac:	69a7      	ldr	r7, [r4, #24]
 800c7ae:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800c7b2:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c7b4:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800c7b8:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c7bc:	68e1      	ldr	r1, [r4, #12]
 800c7be:	69e7      	ldr	r7, [r4, #28]
 800c7c0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800c7c4:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c7c6:	6927      	ldr	r7, [r4, #16]
 800c7c8:	6a21      	ldr	r1, [r4, #32]
 800c7ca:	0309      	lsls	r1, r1, #12
 800c7cc:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800c7d0:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c7d2:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c7d6:	6861      	ldr	r1, [r4, #4]
 800c7d8:	6964      	ldr	r4, [r4, #20]
 800c7da:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 800c7de:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800c7e0:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800c7e2:	6829      	ldr	r1, [r5, #0]
 800c7e4:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	621a      	str	r2, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c7f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c7f8:	f7ff fa8c 	bl	800bd14 <HAL_TIM_Encoder_MspInit>
 800c7fc:	e7bc      	b.n	800c778 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800c7fe:	2001      	movs	r0, #1
 800c800:	4770      	bx	lr

0800c802 <TIM_OC2_SetConfig>:
{
 800c802:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c804:	6a03      	ldr	r3, [r0, #32]
 800c806:	f023 0310 	bic.w	r3, r3, #16
 800c80a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c80c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c80e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c810:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c812:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c816:	680d      	ldr	r5, [r1, #0]
 800c818:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800c81c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c820:	688d      	ldr	r5, [r1, #8]
 800c822:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c826:	4d13      	ldr	r5, [pc, #76]	; (800c874 <TIM_OC2_SetConfig+0x72>)
 800c828:	42a8      	cmp	r0, r5
 800c82a:	d011      	beq.n	800c850 <TIM_OC2_SetConfig+0x4e>
 800c82c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c830:	42a8      	cmp	r0, r5
 800c832:	d00d      	beq.n	800c850 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c834:	4d0f      	ldr	r5, [pc, #60]	; (800c874 <TIM_OC2_SetConfig+0x72>)
 800c836:	42a8      	cmp	r0, r5
 800c838:	d012      	beq.n	800c860 <TIM_OC2_SetConfig+0x5e>
 800c83a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c83e:	42a8      	cmp	r0, r5
 800c840:	d00e      	beq.n	800c860 <TIM_OC2_SetConfig+0x5e>
  TIMx->CR2 = tmpcr2;
 800c842:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c844:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c846:	684a      	ldr	r2, [r1, #4]
 800c848:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c84a:	6203      	str	r3, [r0, #32]
}
 800c84c:	bc30      	pop	{r4, r5}
 800c84e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800c850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c854:	68cd      	ldr	r5, [r1, #12]
 800c856:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c85a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c85e:	e7e9      	b.n	800c834 <TIM_OC2_SetConfig+0x32>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c860:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c864:	694d      	ldr	r5, [r1, #20]
 800c866:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c86a:	698d      	ldr	r5, [r1, #24]
 800c86c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800c870:	e7e7      	b.n	800c842 <TIM_OC2_SetConfig+0x40>
 800c872:	bf00      	nop
 800c874:	40010000 	.word	0x40010000

0800c878 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800c878:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d028      	beq.n	800c8d2 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 800c880:	b510      	push	{r4, lr}
 800c882:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800c884:	2301      	movs	r3, #1
 800c886:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c88a:	2302      	movs	r3, #2
 800c88c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c890:	2a0c      	cmp	r2, #12
 800c892:	d80b      	bhi.n	800c8ac <HAL_TIM_OC_ConfigChannel+0x34>
 800c894:	e8df f002 	tbb	[pc, r2]
 800c898:	0a0a0a07 	.word	0x0a0a0a07
 800c89c:	0a0a0a11 	.word	0x0a0a0a11
 800c8a0:	0a0a0a15 	.word	0x0a0a0a15
 800c8a4:	19          	.byte	0x19
 800c8a5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8a6:	6800      	ldr	r0, [r0, #0]
 800c8a8:	f7fe ffd6 	bl	800b858 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800c8b8:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8ba:	6800      	ldr	r0, [r0, #0]
 800c8bc:	f7ff ffa1 	bl	800c802 <TIM_OC2_SetConfig>
      break;
 800c8c0:	e7f4      	b.n	800c8ac <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8c2:	6800      	ldr	r0, [r0, #0]
 800c8c4:	f7fe fffe 	bl	800b8c4 <TIM_OC3_SetConfig>
      break;
 800c8c8:	e7f0      	b.n	800c8ac <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8ca:	6800      	ldr	r0, [r0, #0]
 800c8cc:	f7ff f834 	bl	800b938 <TIM_OC4_SetConfig>
      break;
 800c8d0:	e7ec      	b.n	800c8ac <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 800c8d2:	2002      	movs	r0, #2
 800c8d4:	4770      	bx	lr

0800c8d6 <HAL_TIM_PWM_ConfigChannel>:
{
 800c8d6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c8d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d066      	beq.n	800c9ae <HAL_TIM_PWM_ConfigChannel+0xd8>
 800c8e0:	460d      	mov	r5, r1
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c8f0:	2a0c      	cmp	r2, #12
 800c8f2:	d81a      	bhi.n	800c92a <HAL_TIM_PWM_ConfigChannel+0x54>
 800c8f4:	e8df f002 	tbb	[pc, r2]
 800c8f8:	19191907 	.word	0x19191907
 800c8fc:	19191920 	.word	0x19191920
 800c900:	19191934 	.word	0x19191934
 800c904:	47          	.byte	0x47
 800c905:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c906:	6800      	ldr	r0, [r0, #0]
 800c908:	f7fe ffa6 	bl	800b858 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c90c:	6822      	ldr	r2, [r4, #0]
 800c90e:	6993      	ldr	r3, [r2, #24]
 800c910:	f043 0308 	orr.w	r3, r3, #8
 800c914:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	6993      	ldr	r3, [r2, #24]
 800c91a:	f023 0304 	bic.w	r3, r3, #4
 800c91e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c920:	6822      	ldr	r2, [r4, #0]
 800c922:	6993      	ldr	r3, [r2, #24]
 800c924:	6929      	ldr	r1, [r5, #16]
 800c926:	430b      	orrs	r3, r1
 800c928:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800c92a:	2301      	movs	r3, #1
 800c92c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c930:	2000      	movs	r0, #0
 800c932:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800c936:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c938:	6800      	ldr	r0, [r0, #0]
 800c93a:	f7ff ff62 	bl	800c802 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	6993      	ldr	r3, [r2, #24]
 800c942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c946:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	6993      	ldr	r3, [r2, #24]
 800c94c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c950:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c952:	6822      	ldr	r2, [r4, #0]
 800c954:	6993      	ldr	r3, [r2, #24]
 800c956:	6929      	ldr	r1, [r5, #16]
 800c958:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c95c:	6193      	str	r3, [r2, #24]
      break;
 800c95e:	e7e4      	b.n	800c92a <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c960:	6800      	ldr	r0, [r0, #0]
 800c962:	f7fe ffaf 	bl	800b8c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c966:	6822      	ldr	r2, [r4, #0]
 800c968:	69d3      	ldr	r3, [r2, #28]
 800c96a:	f043 0308 	orr.w	r3, r3, #8
 800c96e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c970:	6822      	ldr	r2, [r4, #0]
 800c972:	69d3      	ldr	r3, [r2, #28]
 800c974:	f023 0304 	bic.w	r3, r3, #4
 800c978:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	69d3      	ldr	r3, [r2, #28]
 800c97e:	6929      	ldr	r1, [r5, #16]
 800c980:	430b      	orrs	r3, r1
 800c982:	61d3      	str	r3, [r2, #28]
      break;
 800c984:	e7d1      	b.n	800c92a <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c986:	6800      	ldr	r0, [r0, #0]
 800c988:	f7fe ffd6 	bl	800b938 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c98c:	6822      	ldr	r2, [r4, #0]
 800c98e:	69d3      	ldr	r3, [r2, #28]
 800c990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c994:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c996:	6822      	ldr	r2, [r4, #0]
 800c998:	69d3      	ldr	r3, [r2, #28]
 800c99a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c99e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9a0:	6822      	ldr	r2, [r4, #0]
 800c9a2:	69d3      	ldr	r3, [r2, #28]
 800c9a4:	6929      	ldr	r1, [r5, #16]
 800c9a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c9aa:	61d3      	str	r3, [r2, #28]
      break;
 800c9ac:	e7bd      	b.n	800c92a <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800c9ae:	2002      	movs	r0, #2
}
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}

0800c9b2 <TIM_TI1_SetConfig>:
{
 800c9b2:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9b4:	6a04      	ldr	r4, [r0, #32]
 800c9b6:	f024 0401 	bic.w	r4, r4, #1
 800c9ba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9bc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c9be:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c9c0:	4e21      	ldr	r6, [pc, #132]	; (800ca48 <TIM_TI1_SetConfig+0x96>)
 800c9c2:	42b0      	cmp	r0, r6
 800c9c4:	d02e      	beq.n	800ca24 <TIM_TI1_SetConfig+0x72>
 800c9c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c9ca:	d02d      	beq.n	800ca28 <TIM_TI1_SetConfig+0x76>
 800c9cc:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c9d0:	42b0      	cmp	r0, r6
 800c9d2:	d02b      	beq.n	800ca2c <TIM_TI1_SetConfig+0x7a>
 800c9d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c9d8:	42b0      	cmp	r0, r6
 800c9da:	d029      	beq.n	800ca30 <TIM_TI1_SetConfig+0x7e>
 800c9dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c9e0:	42b0      	cmp	r0, r6
 800c9e2:	d027      	beq.n	800ca34 <TIM_TI1_SetConfig+0x82>
 800c9e4:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c9e8:	42b0      	cmp	r0, r6
 800c9ea:	d025      	beq.n	800ca38 <TIM_TI1_SetConfig+0x86>
 800c9ec:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c9f0:	42b0      	cmp	r0, r6
 800c9f2:	d023      	beq.n	800ca3c <TIM_TI1_SetConfig+0x8a>
 800c9f4:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800c9f8:	42b0      	cmp	r0, r6
 800c9fa:	d011      	beq.n	800ca20 <TIM_TI1_SetConfig+0x6e>
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	b9fe      	cbnz	r6, 800ca40 <TIM_TI1_SetConfig+0x8e>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ca00:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ca08:	011b      	lsls	r3, r3, #4
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca0e:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ca12:	f001 010a 	and.w	r1, r1, #10
 800ca16:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800ca18:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca1a:	6201      	str	r1, [r0, #32]
}
 800ca1c:	bc70      	pop	{r4, r5, r6}
 800ca1e:	4770      	bx	lr
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ca20:	2601      	movs	r6, #1
 800ca22:	e7ec      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca24:	2601      	movs	r6, #1
 800ca26:	e7ea      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca28:	2601      	movs	r6, #1
 800ca2a:	e7e8      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca2c:	2601      	movs	r6, #1
 800ca2e:	e7e6      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca30:	2601      	movs	r6, #1
 800ca32:	e7e4      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca34:	2601      	movs	r6, #1
 800ca36:	e7e2      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca38:	2601      	movs	r6, #1
 800ca3a:	e7e0      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
 800ca3c:	2601      	movs	r6, #1
 800ca3e:	e7de      	b.n	800c9fe <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ca40:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800ca44:	4322      	orrs	r2, r4
 800ca46:	e7dd      	b.n	800ca04 <TIM_TI1_SetConfig+0x52>
 800ca48:	40010000 	.word	0x40010000

0800ca4c <HAL_TIM_IC_ConfigChannel>:
{
 800ca4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800ca4e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d058      	beq.n	800cb08 <HAL_TIM_IC_ConfigChannel+0xbc>
 800ca56:	460d      	mov	r5, r1
 800ca58:	4604      	mov	r4, r0
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ca60:	2302      	movs	r3, #2
 800ca62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800ca66:	b1da      	cbz	r2, 800caa0 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 800ca68:	2a04      	cmp	r2, #4
 800ca6a:	d02a      	beq.n	800cac2 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 800ca6c:	2a08      	cmp	r2, #8
 800ca6e:	d03a      	beq.n	800cae6 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 800ca70:	68cb      	ldr	r3, [r1, #12]
 800ca72:	684a      	ldr	r2, [r1, #4]
 800ca74:	6809      	ldr	r1, [r1, #0]
 800ca76:	6800      	ldr	r0, [r0, #0]
 800ca78:	f7fe ffe0 	bl	800ba3c <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	69d3      	ldr	r3, [r2, #28]
 800ca80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ca84:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca86:	6822      	ldr	r2, [r4, #0]
 800ca88:	69d3      	ldr	r3, [r2, #28]
 800ca8a:	68a9      	ldr	r1, [r5, #8]
 800ca8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ca90:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800ca92:	2301      	movs	r3, #1
 800ca94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ca98:	2000      	movs	r0, #0
 800ca9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800ca9e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800caa0:	68cb      	ldr	r3, [r1, #12]
 800caa2:	684a      	ldr	r2, [r1, #4]
 800caa4:	6809      	ldr	r1, [r1, #0]
 800caa6:	6800      	ldr	r0, [r0, #0]
 800caa8:	f7ff ff83 	bl	800c9b2 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800caac:	6822      	ldr	r2, [r4, #0]
 800caae:	6993      	ldr	r3, [r2, #24]
 800cab0:	f023 030c 	bic.w	r3, r3, #12
 800cab4:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800cab6:	6822      	ldr	r2, [r4, #0]
 800cab8:	6993      	ldr	r3, [r2, #24]
 800caba:	68a9      	ldr	r1, [r5, #8]
 800cabc:	430b      	orrs	r3, r1
 800cabe:	6193      	str	r3, [r2, #24]
 800cac0:	e7e7      	b.n	800ca92 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 800cac2:	68cb      	ldr	r3, [r1, #12]
 800cac4:	684a      	ldr	r2, [r1, #4]
 800cac6:	6809      	ldr	r1, [r1, #0]
 800cac8:	6800      	ldr	r0, [r0, #0]
 800caca:	f7fe ff70 	bl	800b9ae <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	6993      	ldr	r3, [r2, #24]
 800cad2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cad6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cad8:	6822      	ldr	r2, [r4, #0]
 800cada:	6993      	ldr	r3, [r2, #24]
 800cadc:	68a9      	ldr	r1, [r5, #8]
 800cade:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cae2:	6193      	str	r3, [r2, #24]
 800cae4:	e7d5      	b.n	800ca92 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 800cae6:	68cb      	ldr	r3, [r1, #12]
 800cae8:	684a      	ldr	r2, [r1, #4]
 800caea:	6809      	ldr	r1, [r1, #0]
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f7fe ff8c 	bl	800ba0a <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800caf2:	6822      	ldr	r2, [r4, #0]
 800caf4:	69d3      	ldr	r3, [r2, #28]
 800caf6:	f023 030c 	bic.w	r3, r3, #12
 800cafa:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cafc:	6822      	ldr	r2, [r4, #0]
 800cafe:	69d3      	ldr	r3, [r2, #28]
 800cb00:	68a9      	ldr	r1, [r5, #8]
 800cb02:	430b      	orrs	r3, r1
 800cb04:	61d3      	str	r3, [r2, #28]
 800cb06:	e7c4      	b.n	800ca92 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 800cb08:	2002      	movs	r0, #2
}
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}

0800cb0c <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d072      	beq.n	800cbf6 <HAL_TIM_OnePulse_ConfigChannel+0xea>
{
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	b088      	sub	sp, #32
    __HAL_LOCK(htim);
 800cb14:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800cb18:	2c01      	cmp	r4, #1
 800cb1a:	d06e      	beq.n	800cbfa <HAL_TIM_OnePulse_ConfigChannel+0xee>
 800cb1c:	461e      	mov	r6, r3
 800cb1e:	460d      	mov	r5, r1
 800cb20:	4604      	mov	r4, r0
 800cb22:	2301      	movs	r3, #1
 800cb24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 800cb28:	2302      	movs	r3, #2
 800cb2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    temp1.OCMode = sConfig->OCMode;
 800cb2e:	680b      	ldr	r3, [r1, #0]
 800cb30:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800cb32:	684b      	ldr	r3, [r1, #4]
 800cb34:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 800cb36:	688b      	ldr	r3, [r1, #8]
 800cb38:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800cb3a:	68cb      	ldr	r3, [r1, #12]
 800cb3c:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800cb3e:	690b      	ldr	r3, [r1, #16]
 800cb40:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800cb42:	694b      	ldr	r3, [r1, #20]
 800cb44:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 800cb46:	b162      	cbz	r2, 800cb62 <HAL_TIM_OnePulse_ConfigChannel+0x56>
 800cb48:	2a04      	cmp	r2, #4
 800cb4a:	d00f      	beq.n	800cb6c <HAL_TIM_OnePulse_ConfigChannel+0x60>
    switch (InputChannel)
 800cb4c:	b19e      	cbz	r6, 800cb76 <HAL_TIM_OnePulse_ConfigChannel+0x6a>
 800cb4e:	2e04      	cmp	r6, #4
 800cb50:	d031      	beq.n	800cbb6 <HAL_TIM_OnePulse_ConfigChannel+0xaa>
    htim->State = HAL_TIM_STATE_READY;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800cb5e:	b008      	add	sp, #32
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800cb62:	a901      	add	r1, sp, #4
 800cb64:	6800      	ldr	r0, [r0, #0]
 800cb66:	f7fe fe77 	bl	800b858 <TIM_OC1_SetConfig>
        break;
 800cb6a:	e7ef      	b.n	800cb4c <HAL_TIM_OnePulse_ConfigChannel+0x40>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800cb6c:	a901      	add	r1, sp, #4
 800cb6e:	6800      	ldr	r0, [r0, #0]
 800cb70:	f7ff fe47 	bl	800c802 <TIM_OC2_SetConfig>
        break;
 800cb74:	e7ea      	b.n	800cb4c <HAL_TIM_OnePulse_ConfigChannel+0x40>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800cb76:	6a2b      	ldr	r3, [r5, #32]
 800cb78:	69ea      	ldr	r2, [r5, #28]
 800cb7a:	69a9      	ldr	r1, [r5, #24]
 800cb7c:	6820      	ldr	r0, [r4, #0]
 800cb7e:	f7ff ff18 	bl	800c9b2 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	6993      	ldr	r3, [r2, #24]
 800cb86:	f023 030c 	bic.w	r3, r3, #12
 800cb8a:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800cb8c:	6822      	ldr	r2, [r4, #0]
 800cb8e:	6893      	ldr	r3, [r2, #8]
 800cb90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb94:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	6893      	ldr	r3, [r2, #8]
 800cb9a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800cb9e:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800cba0:	6822      	ldr	r2, [r4, #0]
 800cba2:	6893      	ldr	r3, [r2, #8]
 800cba4:	f023 0307 	bic.w	r3, r3, #7
 800cba8:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800cbaa:	6822      	ldr	r2, [r4, #0]
 800cbac:	6893      	ldr	r3, [r2, #8]
 800cbae:	f043 0306 	orr.w	r3, r3, #6
 800cbb2:	6093      	str	r3, [r2, #8]
        break;
 800cbb4:	e7cd      	b.n	800cb52 <HAL_TIM_OnePulse_ConfigChannel+0x46>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800cbb6:	6a2b      	ldr	r3, [r5, #32]
 800cbb8:	69ea      	ldr	r2, [r5, #28]
 800cbba:	69a9      	ldr	r1, [r5, #24]
 800cbbc:	6820      	ldr	r0, [r4, #0]
 800cbbe:	f7fe fef6 	bl	800b9ae <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	6993      	ldr	r3, [r2, #24]
 800cbc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cbca:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	6893      	ldr	r3, [r2, #8]
 800cbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbd4:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	6893      	ldr	r3, [r2, #8]
 800cbda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cbde:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800cbe0:	6822      	ldr	r2, [r4, #0]
 800cbe2:	6893      	ldr	r3, [r2, #8]
 800cbe4:	f023 0307 	bic.w	r3, r3, #7
 800cbe8:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800cbea:	6822      	ldr	r2, [r4, #0]
 800cbec:	6893      	ldr	r3, [r2, #8]
 800cbee:	f043 0306 	orr.w	r3, r3, #6
 800cbf2:	6093      	str	r3, [r2, #8]
        break;
 800cbf4:	e7ad      	b.n	800cb52 <HAL_TIM_OnePulse_ConfigChannel+0x46>
    return HAL_ERROR;
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	4770      	bx	lr
    __HAL_LOCK(htim);
 800cbfa:	2002      	movs	r0, #2
 800cbfc:	e7af      	b.n	800cb5e <HAL_TIM_OnePulse_ConfigChannel+0x52>

0800cbfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbfe:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc00:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc02:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc06:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800cc0a:	4319      	orrs	r1, r3
 800cc0c:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc0e:	6084      	str	r4, [r0, #8]
}
 800cc10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800cc16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d06b      	beq.n	800ccf6 <HAL_TIM_ConfigOCrefClear+0xe0>
{
 800cc1e:	b570      	push	{r4, r5, r6, lr}
 800cc20:	4616      	mov	r6, r2
 800cc22:	460d      	mov	r5, r1
 800cc24:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cc26:	2301      	movs	r3, #1
 800cc28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 800cc32:	684b      	ldr	r3, [r1, #4]
 800cc34:	b163      	cbz	r3, 800cc50 <HAL_TIM_ConfigOCrefClear+0x3a>
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d010      	beq.n	800cc5c <HAL_TIM_ConfigOCrefClear+0x46>
  switch (Channel)
 800cc3a:	2e0c      	cmp	r6, #12
 800cc3c:	d824      	bhi.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
 800cc3e:	e8df f006 	tbb	[pc, r6]
 800cc42:	231c      	.short	0x231c
 800cc44:	23302323 	.word	0x23302323
 800cc48:	233e2323 	.word	0x233e2323
 800cc4c:	2323      	.short	0x2323
 800cc4e:	4c          	.byte	0x4c
 800cc4f:	00          	.byte	0x00
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800cc50:	6802      	ldr	r2, [r0, #0]
 800cc52:	6893      	ldr	r3, [r2, #8]
 800cc54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc58:	6093      	str	r3, [r2, #8]
      break;
 800cc5a:	e7ee      	b.n	800cc3a <HAL_TIM_ConfigOCrefClear+0x24>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800cc5c:	68c9      	ldr	r1, [r1, #12]
 800cc5e:	b131      	cbz	r1, 800cc6e <HAL_TIM_ConfigOCrefClear+0x58>
        htim->State = HAL_TIM_STATE_READY;
 800cc60:	2001      	movs	r0, #1
 800cc62:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800cc66:	2300      	movs	r3, #0
 800cc68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800cc6c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800cc6e:	692b      	ldr	r3, [r5, #16]
 800cc70:	68aa      	ldr	r2, [r5, #8]
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	f7ff ffc3 	bl	800cbfe <TIM_ETR_SetConfig>
      break;
 800cc78:	e7df      	b.n	800cc3a <HAL_TIM_ConfigOCrefClear+0x24>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cc7a:	682b      	ldr	r3, [r5, #0]
 800cc7c:	b15b      	cbz	r3, 800cc96 <HAL_TIM_ConfigOCrefClear+0x80>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cc7e:	6822      	ldr	r2, [r4, #0]
 800cc80:	6993      	ldr	r3, [r2, #24]
 800cc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc86:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cc8e:	2000      	movs	r0, #0
 800cc90:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cc96:	6822      	ldr	r2, [r4, #0]
 800cc98:	6993      	ldr	r3, [r2, #24]
 800cc9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc9e:	6193      	str	r3, [r2, #24]
 800cca0:	e7f2      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b12b      	cbz	r3, 800ccb2 <HAL_TIM_ConfigOCrefClear+0x9c>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cca6:	6822      	ldr	r2, [r4, #0]
 800cca8:	6993      	ldr	r3, [r2, #24]
 800ccaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccae:	6193      	str	r3, [r2, #24]
 800ccb0:	e7ea      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	6993      	ldr	r3, [r2, #24]
 800ccb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccba:	6193      	str	r3, [r2, #24]
 800ccbc:	e7e4      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b12b      	cbz	r3, 800ccce <HAL_TIM_ConfigOCrefClear+0xb8>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800ccc2:	6822      	ldr	r2, [r4, #0]
 800ccc4:	69d3      	ldr	r3, [r2, #28]
 800ccc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccca:	61d3      	str	r3, [r2, #28]
 800cccc:	e7dc      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	69d3      	ldr	r3, [r2, #28]
 800ccd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd6:	61d3      	str	r3, [r2, #28]
 800ccd8:	e7d6      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b12b      	cbz	r3, 800ccea <HAL_TIM_ConfigOCrefClear+0xd4>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	69d3      	ldr	r3, [r2, #28]
 800cce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cce6:	61d3      	str	r3, [r2, #28]
 800cce8:	e7ce      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800ccea:	6822      	ldr	r2, [r4, #0]
 800ccec:	69d3      	ldr	r3, [r2, #28]
 800ccee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccf2:	61d3      	str	r3, [r2, #28]
 800ccf4:	e7c8      	b.n	800cc88 <HAL_TIM_ConfigOCrefClear+0x72>
  __HAL_LOCK(htim);
 800ccf6:	2002      	movs	r0, #2
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800ccfa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d066      	beq.n	800cdd0 <HAL_TIM_ConfigClockSource+0xd6>
{
 800cd02:	b510      	push	{r4, lr}
 800cd04:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cd06:	2301      	movs	r3, #1
 800cd08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800cd12:	6802      	ldr	r2, [r0, #0]
 800cd14:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800cd1e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cd20:	680b      	ldr	r3, [r1, #0]
 800cd22:	2b40      	cmp	r3, #64	; 0x40
 800cd24:	d04a      	beq.n	800cdbc <HAL_TIM_ConfigClockSource+0xc2>
 800cd26:	d913      	bls.n	800cd50 <HAL_TIM_ConfigClockSource+0x56>
 800cd28:	2b60      	cmp	r3, #96	; 0x60
 800cd2a:	d03d      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xae>
 800cd2c:	d91e      	bls.n	800cd6c <HAL_TIM_ConfigClockSource+0x72>
 800cd2e:	2b70      	cmp	r3, #112	; 0x70
 800cd30:	d028      	beq.n	800cd84 <HAL_TIM_ConfigClockSource+0x8a>
 800cd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd36:	d130      	bne.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800cd38:	68cb      	ldr	r3, [r1, #12]
 800cd3a:	684a      	ldr	r2, [r1, #4]
 800cd3c:	6889      	ldr	r1, [r1, #8]
 800cd3e:	6800      	ldr	r0, [r0, #0]
 800cd40:	f7ff ff5d 	bl	800cbfe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd44:	6822      	ldr	r2, [r4, #0]
 800cd46:	6893      	ldr	r3, [r2, #8]
 800cd48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd4c:	6093      	str	r3, [r2, #8]
      break;
 800cd4e:	e024      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800cd50:	2b10      	cmp	r3, #16
 800cd52:	d006      	beq.n	800cd62 <HAL_TIM_ConfigClockSource+0x68>
 800cd54:	d904      	bls.n	800cd60 <HAL_TIM_ConfigClockSource+0x66>
 800cd56:	2b20      	cmp	r3, #32
 800cd58:	d003      	beq.n	800cd62 <HAL_TIM_ConfigClockSource+0x68>
 800cd5a:	2b30      	cmp	r3, #48	; 0x30
 800cd5c:	d001      	beq.n	800cd62 <HAL_TIM_ConfigClockSource+0x68>
 800cd5e:	e01c      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
 800cd60:	b9db      	cbnz	r3, 800cd9a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd62:	4619      	mov	r1, r3
 800cd64:	6820      	ldr	r0, [r4, #0]
 800cd66:	f7fe fe83 	bl	800ba70 <TIM_ITRx_SetConfig>
      break;
 800cd6a:	e016      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800cd6c:	2b50      	cmp	r3, #80	; 0x50
 800cd6e:	d114      	bne.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd70:	68ca      	ldr	r2, [r1, #12]
 800cd72:	6849      	ldr	r1, [r1, #4]
 800cd74:	6800      	ldr	r0, [r0, #0]
 800cd76:	f7fe fe07 	bl	800b988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd7a:	2150      	movs	r1, #80	; 0x50
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	f7fe fe77 	bl	800ba70 <TIM_ITRx_SetConfig>
      break;
 800cd82:	e00a      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800cd84:	68cb      	ldr	r3, [r1, #12]
 800cd86:	684a      	ldr	r2, [r1, #4]
 800cd88:	6889      	ldr	r1, [r1, #8]
 800cd8a:	6800      	ldr	r0, [r0, #0]
 800cd8c:	f7ff ff37 	bl	800cbfe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800cd98:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cda0:	2000      	movs	r0, #0
 800cda2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800cda6:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cda8:	68ca      	ldr	r2, [r1, #12]
 800cdaa:	6849      	ldr	r1, [r1, #4]
 800cdac:	6800      	ldr	r0, [r0, #0]
 800cdae:	f7fe fe18 	bl	800b9e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdb2:	2160      	movs	r1, #96	; 0x60
 800cdb4:	6820      	ldr	r0, [r4, #0]
 800cdb6:	f7fe fe5b 	bl	800ba70 <TIM_ITRx_SetConfig>
      break;
 800cdba:	e7ee      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbc:	68ca      	ldr	r2, [r1, #12]
 800cdbe:	6849      	ldr	r1, [r1, #4]
 800cdc0:	6800      	ldr	r0, [r0, #0]
 800cdc2:	f7fe fde1 	bl	800b988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdc6:	2140      	movs	r1, #64	; 0x40
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	f7fe fe51 	bl	800ba70 <TIM_ITRx_SetConfig>
      break;
 800cdce:	e7e4      	b.n	800cd9a <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800cdd0:	2002      	movs	r0, #2
 800cdd2:	4770      	bx	lr

0800cdd4 <TIM_SlaveTimer_SetConfig>:
{
 800cdd4:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 800cdd6:	6802      	ldr	r2, [r0, #0]
 800cdd8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cdde:	684c      	ldr	r4, [r1, #4]
 800cde0:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cde2:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cde6:	680c      	ldr	r4, [r1, #0]
 800cde8:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 800cdea:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800cdec:	684b      	ldr	r3, [r1, #4]
 800cdee:	2b50      	cmp	r3, #80	; 0x50
 800cdf0:	d023      	beq.n	800ce3a <TIM_SlaveTimer_SetConfig+0x66>
 800cdf2:	d90b      	bls.n	800ce0c <TIM_SlaveTimer_SetConfig+0x38>
 800cdf4:	2b60      	cmp	r3, #96	; 0x60
 800cdf6:	d027      	beq.n	800ce48 <TIM_SlaveTimer_SetConfig+0x74>
 800cdf8:	2b70      	cmp	r3, #112	; 0x70
 800cdfa:	d12c      	bne.n	800ce56 <TIM_SlaveTimer_SetConfig+0x82>
      TIM_ETR_SetConfig(htim->Instance,
 800cdfc:	690b      	ldr	r3, [r1, #16]
 800cdfe:	688a      	ldr	r2, [r1, #8]
 800ce00:	68c9      	ldr	r1, [r1, #12]
 800ce02:	6800      	ldr	r0, [r0, #0]
 800ce04:	f7ff fefb 	bl	800cbfe <TIM_ETR_SetConfig>
  return HAL_OK;
 800ce08:	2000      	movs	r0, #0
      break;
 800ce0a:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 800ce0c:	2b40      	cmp	r3, #64	; 0x40
 800ce0e:	d122      	bne.n	800ce56 <TIM_SlaveTimer_SetConfig+0x82>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ce10:	680b      	ldr	r3, [r1, #0]
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d021      	beq.n	800ce5a <TIM_SlaveTimer_SetConfig+0x86>
      tmpccer = htim->Instance->CCER;
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ce1a:	6a1a      	ldr	r2, [r3, #32]
 800ce1c:	f022 0201 	bic.w	r2, r2, #1
 800ce20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ce22:	6802      	ldr	r2, [r0, #0]
 800ce24:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ce2a:	6909      	ldr	r1, [r1, #16]
 800ce2c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800ce30:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800ce32:	6803      	ldr	r3, [r0, #0]
 800ce34:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800ce36:	2000      	movs	r0, #0
      break;
 800ce38:	bd10      	pop	{r4, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce3a:	690a      	ldr	r2, [r1, #16]
 800ce3c:	6889      	ldr	r1, [r1, #8]
 800ce3e:	6800      	ldr	r0, [r0, #0]
 800ce40:	f7fe fda2 	bl	800b988 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 800ce44:	2000      	movs	r0, #0
      break;
 800ce46:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce48:	690a      	ldr	r2, [r1, #16]
 800ce4a:	6889      	ldr	r1, [r1, #8]
 800ce4c:	6800      	ldr	r0, [r0, #0]
 800ce4e:	f7fe fdc8 	bl	800b9e2 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 800ce52:	2000      	movs	r0, #0
      break;
 800ce54:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800ce56:	2000      	movs	r0, #0
 800ce58:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 800ce5a:	2001      	movs	r0, #1
}
 800ce5c:	bd10      	pop	{r4, pc}

0800ce5e <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800ce5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d102      	bne.n	800ce6c <HAL_TIM_SlaveConfigSynchro+0xe>
 800ce66:	2302      	movs	r3, #2
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	4770      	bx	lr
{
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ce70:	2301      	movs	r3, #1
 800ce72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ce76:	2302      	movs	r3, #2
 800ce78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce7c:	f7ff ffaa 	bl	800cdd4 <TIM_SlaveTimer_SetConfig>
 800ce80:	4603      	mov	r3, r0
 800ce82:	b988      	cbnz	r0, 800cea8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ce84:	6821      	ldr	r1, [r4, #0]
 800ce86:	68ca      	ldr	r2, [r1, #12]
 800ce88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce8c:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce8e:	6821      	ldr	r1, [r4, #0]
 800ce90:	68ca      	ldr	r2, [r1, #12]
 800ce92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce96:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800ceb4:	e7f6      	b.n	800cea4 <HAL_TIM_SlaveConfigSynchro+0x46>

0800ceb6 <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 800ceb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d102      	bne.n	800cec4 <HAL_TIM_SlaveConfigSynchro_IT+0xe>
 800cebe:	2302      	movs	r3, #2
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	4770      	bx	lr
{
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cec8:	2301      	movs	r3, #1
 800ceca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cece:	2302      	movs	r3, #2
 800ced0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ced4:	f7ff ff7e 	bl	800cdd4 <TIM_SlaveTimer_SetConfig>
 800ced8:	4603      	mov	r3, r0
 800ceda:	b988      	cbnz	r0, 800cf00 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800cedc:	6821      	ldr	r1, [r4, #0]
 800cede:	68ca      	ldr	r2, [r1, #12]
 800cee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cee4:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cee6:	6821      	ldr	r1, [r4, #0]
 800cee8:	68ca      	ldr	r2, [r1, #12]
 800ceea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ceee:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800cef0:	2201      	movs	r2, #1
 800cef2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cef6:	2200      	movs	r2, #0
 800cef8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800cf00:	2301      	movs	r3, #1
 800cf02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cf06:	2200      	movs	r2, #0
 800cf08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800cf0c:	e7f6      	b.n	800cefc <HAL_TIM_SlaveConfigSynchro_IT+0x46>

0800cf0e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf0e:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf10:	f001 011f 	and.w	r1, r1, #31
 800cf14:	2301      	movs	r3, #1
 800cf16:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf1a:	6a03      	ldr	r3, [r0, #32]
 800cf1c:	ea23 0304 	bic.w	r3, r3, r4
 800cf20:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf22:	6a03      	ldr	r3, [r0, #32]
 800cf24:	408a      	lsls	r2, r1
 800cf26:	4313      	orrs	r3, r2
 800cf28:	6203      	str	r3, [r0, #32]
}
 800cf2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <HAL_TIM_OC_Start>:
{
 800cf30:	b510      	push	{r4, lr}
 800cf32:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf34:	2201      	movs	r2, #1
 800cf36:	6800      	ldr	r0, [r0, #0]
 800cf38:	f7ff ffe9 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	4a0e      	ldr	r2, [pc, #56]	; (800cf78 <HAL_TIM_OC_Start+0x48>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d017      	beq.n	800cf74 <HAL_TIM_OC_Start+0x44>
 800cf44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d011      	beq.n	800cf70 <HAL_TIM_OC_Start+0x40>
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	b11a      	cbz	r2, 800cf58 <HAL_TIM_OC_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 800cf50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf56:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf58:	6822      	ldr	r2, [r4, #0]
 800cf5a:	6893      	ldr	r3, [r2, #8]
 800cf5c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf60:	2b06      	cmp	r3, #6
 800cf62:	d003      	beq.n	800cf6c <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 800cf64:	6813      	ldr	r3, [r2, #0]
 800cf66:	f043 0301 	orr.w	r3, r3, #1
 800cf6a:	6013      	str	r3, [r2, #0]
}
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf70:	2201      	movs	r2, #1
 800cf72:	e7ec      	b.n	800cf4e <HAL_TIM_OC_Start+0x1e>
 800cf74:	2201      	movs	r2, #1
 800cf76:	e7ea      	b.n	800cf4e <HAL_TIM_OC_Start+0x1e>
 800cf78:	40010000 	.word	0x40010000

0800cf7c <HAL_TIM_OC_Stop>:
{
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cf80:	2200      	movs	r2, #0
 800cf82:	6800      	ldr	r0, [r0, #0]
 800cf84:	f7ff ffc3 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	4a16      	ldr	r2, [pc, #88]	; (800cfe4 <HAL_TIM_OC_Stop+0x68>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d026      	beq.n	800cfde <HAL_TIM_OC_Stop+0x62>
 800cf90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d020      	beq.n	800cfda <HAL_TIM_OC_Stop+0x5e>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	b16a      	cbz	r2, 800cfb8 <HAL_TIM_OC_Stop+0x3c>
    __HAL_TIM_MOE_DISABLE(htim);
 800cf9c:	6a19      	ldr	r1, [r3, #32]
 800cf9e:	f241 1211 	movw	r2, #4369	; 0x1111
 800cfa2:	4211      	tst	r1, r2
 800cfa4:	d108      	bne.n	800cfb8 <HAL_TIM_OC_Stop+0x3c>
 800cfa6:	6a19      	ldr	r1, [r3, #32]
 800cfa8:	f240 4244 	movw	r2, #1092	; 0x444
 800cfac:	4211      	tst	r1, r2
 800cfae:	d103      	bne.n	800cfb8 <HAL_TIM_OC_Stop+0x3c>
 800cfb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfb6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	6a19      	ldr	r1, [r3, #32]
 800cfbc:	f241 1211 	movw	r2, #4369	; 0x1111
 800cfc0:	4211      	tst	r1, r2
 800cfc2:	d108      	bne.n	800cfd6 <HAL_TIM_OC_Stop+0x5a>
 800cfc4:	6a19      	ldr	r1, [r3, #32]
 800cfc6:	f240 4244 	movw	r2, #1092	; 0x444
 800cfca:	4211      	tst	r1, r2
 800cfcc:	d103      	bne.n	800cfd6 <HAL_TIM_OC_Stop+0x5a>
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	f022 0201 	bic.w	r2, r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]
}
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfda:	2201      	movs	r2, #1
 800cfdc:	e7dd      	b.n	800cf9a <HAL_TIM_OC_Stop+0x1e>
 800cfde:	2201      	movs	r2, #1
 800cfe0:	e7db      	b.n	800cf9a <HAL_TIM_OC_Stop+0x1e>
 800cfe2:	bf00      	nop
 800cfe4:	40010000 	.word	0x40010000

0800cfe8 <HAL_TIM_OC_Start_IT>:
{
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	4604      	mov	r4, r0
  switch (Channel)
 800cfec:	290c      	cmp	r1, #12
 800cfee:	d80d      	bhi.n	800d00c <HAL_TIM_OC_Start_IT+0x24>
 800cff0:	e8df f001 	tbb	[pc, r1]
 800cff4:	0c0c0c07 	.word	0x0c0c0c07
 800cff8:	0c0c0c2a 	.word	0x0c0c0c2a
 800cffc:	0c0c0c30 	.word	0x0c0c0c30
 800d000:	36          	.byte	0x36
 800d001:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d002:	6802      	ldr	r2, [r0, #0]
 800d004:	68d3      	ldr	r3, [r2, #12]
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d00c:	2201      	movs	r2, #1
 800d00e:	6820      	ldr	r0, [r4, #0]
 800d010:	f7ff ff7d 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	4a17      	ldr	r2, [pc, #92]	; (800d074 <HAL_TIM_OC_Start_IT+0x8c>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d029      	beq.n	800d070 <HAL_TIM_OC_Start_IT+0x88>
 800d01c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d020:	4293      	cmp	r3, r2
 800d022:	d023      	beq.n	800d06c <HAL_TIM_OC_Start_IT+0x84>
 800d024:	2200      	movs	r2, #0
 800d026:	b11a      	cbz	r2, 800d030 <HAL_TIM_OC_Start_IT+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800d028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d02a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d02e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d030:	6822      	ldr	r2, [r4, #0]
 800d032:	6893      	ldr	r3, [r2, #8]
 800d034:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d038:	2b06      	cmp	r3, #6
 800d03a:	d003      	beq.n	800d044 <HAL_TIM_OC_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800d03c:	6813      	ldr	r3, [r2, #0]
 800d03e:	f043 0301 	orr.w	r3, r3, #1
 800d042:	6013      	str	r3, [r2, #0]
}
 800d044:	2000      	movs	r0, #0
 800d046:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d048:	6802      	ldr	r2, [r0, #0]
 800d04a:	68d3      	ldr	r3, [r2, #12]
 800d04c:	f043 0304 	orr.w	r3, r3, #4
 800d050:	60d3      	str	r3, [r2, #12]
      break;
 800d052:	e7db      	b.n	800d00c <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d054:	6802      	ldr	r2, [r0, #0]
 800d056:	68d3      	ldr	r3, [r2, #12]
 800d058:	f043 0308 	orr.w	r3, r3, #8
 800d05c:	60d3      	str	r3, [r2, #12]
      break;
 800d05e:	e7d5      	b.n	800d00c <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d060:	6802      	ldr	r2, [r0, #0]
 800d062:	68d3      	ldr	r3, [r2, #12]
 800d064:	f043 0310 	orr.w	r3, r3, #16
 800d068:	60d3      	str	r3, [r2, #12]
      break;
 800d06a:	e7cf      	b.n	800d00c <HAL_TIM_OC_Start_IT+0x24>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d06c:	2201      	movs	r2, #1
 800d06e:	e7da      	b.n	800d026 <HAL_TIM_OC_Start_IT+0x3e>
 800d070:	2201      	movs	r2, #1
 800d072:	e7d8      	b.n	800d026 <HAL_TIM_OC_Start_IT+0x3e>
 800d074:	40010000 	.word	0x40010000

0800d078 <HAL_TIM_OC_Stop_IT>:
{
 800d078:	b510      	push	{r4, lr}
 800d07a:	4604      	mov	r4, r0
  switch (Channel)
 800d07c:	290c      	cmp	r1, #12
 800d07e:	d80d      	bhi.n	800d09c <HAL_TIM_OC_Stop_IT+0x24>
 800d080:	e8df f001 	tbb	[pc, r1]
 800d084:	0c0c0c07 	.word	0x0c0c0c07
 800d088:	0c0c0c39 	.word	0x0c0c0c39
 800d08c:	0c0c0c3f 	.word	0x0c0c0c3f
 800d090:	45          	.byte	0x45
 800d091:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d092:	6802      	ldr	r2, [r0, #0]
 800d094:	68d3      	ldr	r3, [r2, #12]
 800d096:	f023 0302 	bic.w	r3, r3, #2
 800d09a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d09c:	2200      	movs	r2, #0
 800d09e:	6820      	ldr	r0, [r4, #0]
 800d0a0:	f7ff ff35 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	4a1f      	ldr	r2, [pc, #124]	; (800d124 <HAL_TIM_OC_Stop_IT+0xac>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d038      	beq.n	800d11e <HAL_TIM_OC_Stop_IT+0xa6>
 800d0ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d032      	beq.n	800d11a <HAL_TIM_OC_Stop_IT+0xa2>
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	b16a      	cbz	r2, 800d0d4 <HAL_TIM_OC_Stop_IT+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 800d0b8:	6a19      	ldr	r1, [r3, #32]
 800d0ba:	f241 1211 	movw	r2, #4369	; 0x1111
 800d0be:	4211      	tst	r1, r2
 800d0c0:	d108      	bne.n	800d0d4 <HAL_TIM_OC_Stop_IT+0x5c>
 800d0c2:	6a19      	ldr	r1, [r3, #32]
 800d0c4:	f240 4244 	movw	r2, #1092	; 0x444
 800d0c8:	4211      	tst	r1, r2
 800d0ca:	d103      	bne.n	800d0d4 <HAL_TIM_OC_Stop_IT+0x5c>
 800d0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0d2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d0d4:	6823      	ldr	r3, [r4, #0]
 800d0d6:	6a19      	ldr	r1, [r3, #32]
 800d0d8:	f241 1211 	movw	r2, #4369	; 0x1111
 800d0dc:	4211      	tst	r1, r2
 800d0de:	d108      	bne.n	800d0f2 <HAL_TIM_OC_Stop_IT+0x7a>
 800d0e0:	6a19      	ldr	r1, [r3, #32]
 800d0e2:	f240 4244 	movw	r2, #1092	; 0x444
 800d0e6:	4211      	tst	r1, r2
 800d0e8:	d103      	bne.n	800d0f2 <HAL_TIM_OC_Stop_IT+0x7a>
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	f022 0201 	bic.w	r2, r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]
}
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d0f6:	6802      	ldr	r2, [r0, #0]
 800d0f8:	68d3      	ldr	r3, [r2, #12]
 800d0fa:	f023 0304 	bic.w	r3, r3, #4
 800d0fe:	60d3      	str	r3, [r2, #12]
      break;
 800d100:	e7cc      	b.n	800d09c <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d102:	6802      	ldr	r2, [r0, #0]
 800d104:	68d3      	ldr	r3, [r2, #12]
 800d106:	f023 0308 	bic.w	r3, r3, #8
 800d10a:	60d3      	str	r3, [r2, #12]
      break;
 800d10c:	e7c6      	b.n	800d09c <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d10e:	6802      	ldr	r2, [r0, #0]
 800d110:	68d3      	ldr	r3, [r2, #12]
 800d112:	f023 0310 	bic.w	r3, r3, #16
 800d116:	60d3      	str	r3, [r2, #12]
      break;
 800d118:	e7c0      	b.n	800d09c <HAL_TIM_OC_Stop_IT+0x24>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d11a:	2201      	movs	r2, #1
 800d11c:	e7cb      	b.n	800d0b6 <HAL_TIM_OC_Stop_IT+0x3e>
 800d11e:	2201      	movs	r2, #1
 800d120:	e7c9      	b.n	800d0b6 <HAL_TIM_OC_Stop_IT+0x3e>
 800d122:	bf00      	nop
 800d124:	40010000 	.word	0x40010000

0800d128 <HAL_TIM_OC_Start_DMA>:
{
 800d128:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800d12a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800d12e:	b2ed      	uxtb	r5, r5
 800d130:	2d02      	cmp	r5, #2
 800d132:	f000 8098 	beq.w	800d266 <HAL_TIM_OC_Start_DMA+0x13e>
  else if (htim->State == HAL_TIM_STATE_READY)
 800d136:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d13a:	b2f6      	uxtb	r6, r6
 800d13c:	2e01      	cmp	r6, #1
 800d13e:	d00d      	beq.n	800d15c <HAL_TIM_OC_Start_DMA+0x34>
 800d140:	4616      	mov	r6, r2
 800d142:	460d      	mov	r5, r1
 800d144:	4604      	mov	r4, r0
  switch (Channel)
 800d146:	290c      	cmp	r1, #12
 800d148:	d827      	bhi.n	800d19a <HAL_TIM_OC_Start_DMA+0x72>
 800d14a:	e8df f001 	tbb	[pc, r1]
 800d14e:	2610      	.short	0x2610
 800d150:	26452626 	.word	0x26452626
 800d154:	265c2626 	.word	0x265c2626
 800d158:	2626      	.short	0x2626
 800d15a:	72          	.byte	0x72
 800d15b:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d15c:	b11a      	cbz	r2, 800d166 <HAL_TIM_OC_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d15e:	2402      	movs	r4, #2
 800d160:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d164:	e7ec      	b.n	800d140 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d166:	2b00      	cmp	r3, #0
 800d168:	d0f9      	beq.n	800d15e <HAL_TIM_OC_Start_DMA+0x36>
      return HAL_ERROR;
 800d16a:	2001      	movs	r0, #1
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d16e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d170:	4943      	ldr	r1, [pc, #268]	; (800d280 <HAL_TIM_OC_Start_DMA+0x158>)
 800d172:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d174:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d176:	4943      	ldr	r1, [pc, #268]	; (800d284 <HAL_TIM_OC_Start_DMA+0x15c>)
 800d178:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d17a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d17c:	4942      	ldr	r1, [pc, #264]	; (800d288 <HAL_TIM_OC_Start_DMA+0x160>)
 800d17e:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d180:	6802      	ldr	r2, [r0, #0]
 800d182:	3234      	adds	r2, #52	; 0x34
 800d184:	4631      	mov	r1, r6
 800d186:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d188:	f7f6 fd8f 	bl	8003caa <HAL_DMA_Start_IT>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d16c      	bne.n	800d26a <HAL_TIM_OC_Start_DMA+0x142>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d190:	6822      	ldr	r2, [r4, #0]
 800d192:	68d3      	ldr	r3, [r2, #12]
 800d194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d198:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d19a:	2201      	movs	r2, #1
 800d19c:	4629      	mov	r1, r5
 800d19e:	6820      	ldr	r0, [r4, #0]
 800d1a0:	f7ff feb5 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	4a39      	ldr	r2, [pc, #228]	; (800d28c <HAL_TIM_OC_Start_DMA+0x164>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d05a      	beq.n	800d262 <HAL_TIM_OC_Start_DMA+0x13a>
 800d1ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d054      	beq.n	800d25e <HAL_TIM_OC_Start_DMA+0x136>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	b11a      	cbz	r2, 800d1c0 <HAL_TIM_OC_Start_DMA+0x98>
    __HAL_TIM_MOE_ENABLE(htim);
 800d1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1be:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1c0:	6822      	ldr	r2, [r4, #0]
 800d1c2:	6893      	ldr	r3, [r2, #8]
 800d1c4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1c8:	2b06      	cmp	r3, #6
 800d1ca:	d056      	beq.n	800d27a <HAL_TIM_OC_Start_DMA+0x152>
    __HAL_TIM_ENABLE(htim);
 800d1cc:	6813      	ldr	r3, [r2, #0]
 800d1ce:	f043 0301 	orr.w	r3, r3, #1
 800d1d2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1da:	4929      	ldr	r1, [pc, #164]	; (800d280 <HAL_TIM_OC_Start_DMA+0x158>)
 800d1dc:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1e0:	4928      	ldr	r1, [pc, #160]	; (800d284 <HAL_TIM_OC_Start_DMA+0x15c>)
 800d1e2:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d1e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1e6:	4928      	ldr	r1, [pc, #160]	; (800d288 <HAL_TIM_OC_Start_DMA+0x160>)
 800d1e8:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d1ea:	6802      	ldr	r2, [r0, #0]
 800d1ec:	3238      	adds	r2, #56	; 0x38
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d1f2:	f7f6 fd5a 	bl	8003caa <HAL_DMA_Start_IT>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d139      	bne.n	800d26e <HAL_TIM_OC_Start_DMA+0x146>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d1fa:	6822      	ldr	r2, [r4, #0]
 800d1fc:	68d3      	ldr	r3, [r2, #12]
 800d1fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d202:	60d3      	str	r3, [r2, #12]
      break;
 800d204:	e7c9      	b.n	800d19a <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d206:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d208:	491d      	ldr	r1, [pc, #116]	; (800d280 <HAL_TIM_OC_Start_DMA+0x158>)
 800d20a:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d20c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d20e:	491d      	ldr	r1, [pc, #116]	; (800d284 <HAL_TIM_OC_Start_DMA+0x15c>)
 800d210:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d212:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d214:	491c      	ldr	r1, [pc, #112]	; (800d288 <HAL_TIM_OC_Start_DMA+0x160>)
 800d216:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d218:	6802      	ldr	r2, [r0, #0]
 800d21a:	323c      	adds	r2, #60	; 0x3c
 800d21c:	4631      	mov	r1, r6
 800d21e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d220:	f7f6 fd43 	bl	8003caa <HAL_DMA_Start_IT>
 800d224:	bb28      	cbnz	r0, 800d272 <HAL_TIM_OC_Start_DMA+0x14a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d226:	6822      	ldr	r2, [r4, #0]
 800d228:	68d3      	ldr	r3, [r2, #12]
 800d22a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d22e:	60d3      	str	r3, [r2, #12]
      break;
 800d230:	e7b3      	b.n	800d19a <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d232:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d234:	4912      	ldr	r1, [pc, #72]	; (800d280 <HAL_TIM_OC_Start_DMA+0x158>)
 800d236:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d238:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d23a:	4912      	ldr	r1, [pc, #72]	; (800d284 <HAL_TIM_OC_Start_DMA+0x15c>)
 800d23c:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d23e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d240:	4911      	ldr	r1, [pc, #68]	; (800d288 <HAL_TIM_OC_Start_DMA+0x160>)
 800d242:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d244:	6802      	ldr	r2, [r0, #0]
 800d246:	3240      	adds	r2, #64	; 0x40
 800d248:	4631      	mov	r1, r6
 800d24a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d24c:	f7f6 fd2d 	bl	8003caa <HAL_DMA_Start_IT>
 800d250:	b988      	cbnz	r0, 800d276 <HAL_TIM_OC_Start_DMA+0x14e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d252:	6822      	ldr	r2, [r4, #0]
 800d254:	68d3      	ldr	r3, [r2, #12]
 800d256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d25a:	60d3      	str	r3, [r2, #12]
      break;
 800d25c:	e79d      	b.n	800d19a <HAL_TIM_OC_Start_DMA+0x72>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d25e:	2201      	movs	r2, #1
 800d260:	e7a9      	b.n	800d1b6 <HAL_TIM_OC_Start_DMA+0x8e>
 800d262:	2201      	movs	r2, #1
 800d264:	e7a7      	b.n	800d1b6 <HAL_TIM_OC_Start_DMA+0x8e>
    return HAL_BUSY;
 800d266:	2002      	movs	r0, #2
 800d268:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d26a:	2001      	movs	r0, #1
 800d26c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d26e:	2001      	movs	r0, #1
 800d270:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d272:	2001      	movs	r0, #1
 800d274:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d276:	2001      	movs	r0, #1
 800d278:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d27a:	2000      	movs	r0, #0
}
 800d27c:	bd70      	pop	{r4, r5, r6, pc}
 800d27e:	bf00      	nop
 800d280:	0800c32b 	.word	0x0800c32b
 800d284:	0800c373 	.word	0x0800c373
 800d288:	0800c559 	.word	0x0800c559
 800d28c:	40010000 	.word	0x40010000

0800d290 <HAL_TIM_OC_Stop_DMA>:
{
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4604      	mov	r4, r0
 800d294:	460d      	mov	r5, r1
  switch (Channel)
 800d296:	290c      	cmp	r1, #12
 800d298:	d810      	bhi.n	800d2bc <HAL_TIM_OC_Stop_DMA+0x2c>
 800d29a:	e8df f001 	tbb	[pc, r1]
 800d29e:	0f07      	.short	0x0f07
 800d2a0:	0f400f0f 	.word	0x0f400f0f
 800d2a4:	0f490f0f 	.word	0x0f490f0f
 800d2a8:	0f0f      	.short	0x0f0f
 800d2aa:	52          	.byte	0x52
 800d2ab:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d2ac:	6802      	ldr	r2, [r0, #0]
 800d2ae:	68d3      	ldr	r3, [r2, #12]
 800d2b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2b4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d2b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d2b8:	f7f6 fd76 	bl	8003da8 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4629      	mov	r1, r5
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	f7ff fe24 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	4a24      	ldr	r2, [pc, #144]	; (800d35c <HAL_TIM_OC_Stop_DMA+0xcc>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d044      	beq.n	800d358 <HAL_TIM_OC_Stop_DMA+0xc8>
 800d2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d03e      	beq.n	800d354 <HAL_TIM_OC_Stop_DMA+0xc4>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	b16a      	cbz	r2, 800d2f6 <HAL_TIM_OC_Stop_DMA+0x66>
    __HAL_TIM_MOE_DISABLE(htim);
 800d2da:	6a19      	ldr	r1, [r3, #32]
 800d2dc:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2e0:	4211      	tst	r1, r2
 800d2e2:	d108      	bne.n	800d2f6 <HAL_TIM_OC_Stop_DMA+0x66>
 800d2e4:	6a19      	ldr	r1, [r3, #32]
 800d2e6:	f240 4244 	movw	r2, #1092	; 0x444
 800d2ea:	4211      	tst	r1, r2
 800d2ec:	d103      	bne.n	800d2f6 <HAL_TIM_OC_Stop_DMA+0x66>
 800d2ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2f4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	6a19      	ldr	r1, [r3, #32]
 800d2fa:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2fe:	4211      	tst	r1, r2
 800d300:	d108      	bne.n	800d314 <HAL_TIM_OC_Stop_DMA+0x84>
 800d302:	6a19      	ldr	r1, [r3, #32]
 800d304:	f240 4244 	movw	r2, #1092	; 0x444
 800d308:	4211      	tst	r1, r2
 800d30a:	d103      	bne.n	800d314 <HAL_TIM_OC_Stop_DMA+0x84>
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	f022 0201 	bic.w	r2, r2, #1
 800d312:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d314:	2301      	movs	r3, #1
 800d316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d31a:	2000      	movs	r0, #0
 800d31c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d31e:	6802      	ldr	r2, [r0, #0]
 800d320:	68d3      	ldr	r3, [r2, #12]
 800d322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d326:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d328:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d32a:	f7f6 fd3d 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d32e:	e7c5      	b.n	800d2bc <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d330:	6802      	ldr	r2, [r0, #0]
 800d332:	68d3      	ldr	r3, [r2, #12]
 800d334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d338:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d33a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d33c:	f7f6 fd34 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d340:	e7bc      	b.n	800d2bc <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d342:	6802      	ldr	r2, [r0, #0]
 800d344:	68d3      	ldr	r3, [r2, #12]
 800d346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d34a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d34c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d34e:	f7f6 fd2b 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d352:	e7b3      	b.n	800d2bc <HAL_TIM_OC_Stop_DMA+0x2c>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d354:	2201      	movs	r2, #1
 800d356:	e7bf      	b.n	800d2d8 <HAL_TIM_OC_Stop_DMA+0x48>
 800d358:	2201      	movs	r2, #1
 800d35a:	e7bd      	b.n	800d2d8 <HAL_TIM_OC_Stop_DMA+0x48>
 800d35c:	40010000 	.word	0x40010000

0800d360 <HAL_TIM_PWM_Start>:
{
 800d360:	b510      	push	{r4, lr}
 800d362:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d364:	2201      	movs	r2, #1
 800d366:	6800      	ldr	r0, [r0, #0]
 800d368:	f7ff fdd1 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	4a0e      	ldr	r2, [pc, #56]	; (800d3a8 <HAL_TIM_PWM_Start+0x48>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d017      	beq.n	800d3a4 <HAL_TIM_PWM_Start+0x44>
 800d374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d378:	4293      	cmp	r3, r2
 800d37a:	d011      	beq.n	800d3a0 <HAL_TIM_PWM_Start+0x40>
 800d37c:	2200      	movs	r2, #0
 800d37e:	b11a      	cbz	r2, 800d388 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 800d380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d386:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	6893      	ldr	r3, [r2, #8]
 800d38c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d390:	2b06      	cmp	r3, #6
 800d392:	d003      	beq.n	800d39c <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 800d394:	6813      	ldr	r3, [r2, #0]
 800d396:	f043 0301 	orr.w	r3, r3, #1
 800d39a:	6013      	str	r3, [r2, #0]
}
 800d39c:	2000      	movs	r0, #0
 800d39e:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	e7ec      	b.n	800d37e <HAL_TIM_PWM_Start+0x1e>
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	e7ea      	b.n	800d37e <HAL_TIM_PWM_Start+0x1e>
 800d3a8:	40010000 	.word	0x40010000

0800d3ac <HAL_TIM_PWM_Stop>:
{
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	6800      	ldr	r0, [r0, #0]
 800d3b4:	f7ff fdab 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	4a17      	ldr	r2, [pc, #92]	; (800d418 <HAL_TIM_PWM_Stop+0x6c>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d029      	beq.n	800d414 <HAL_TIM_PWM_Stop+0x68>
 800d3c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d023      	beq.n	800d410 <HAL_TIM_PWM_Stop+0x64>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	b16a      	cbz	r2, 800d3e8 <HAL_TIM_PWM_Stop+0x3c>
    __HAL_TIM_MOE_DISABLE(htim);
 800d3cc:	6a19      	ldr	r1, [r3, #32]
 800d3ce:	f241 1211 	movw	r2, #4369	; 0x1111
 800d3d2:	4211      	tst	r1, r2
 800d3d4:	d108      	bne.n	800d3e8 <HAL_TIM_PWM_Stop+0x3c>
 800d3d6:	6a19      	ldr	r1, [r3, #32]
 800d3d8:	f240 4244 	movw	r2, #1092	; 0x444
 800d3dc:	4211      	tst	r1, r2
 800d3de:	d103      	bne.n	800d3e8 <HAL_TIM_PWM_Stop+0x3c>
 800d3e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3e6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	6a19      	ldr	r1, [r3, #32]
 800d3ec:	f241 1211 	movw	r2, #4369	; 0x1111
 800d3f0:	4211      	tst	r1, r2
 800d3f2:	d108      	bne.n	800d406 <HAL_TIM_PWM_Stop+0x5a>
 800d3f4:	6a19      	ldr	r1, [r3, #32]
 800d3f6:	f240 4244 	movw	r2, #1092	; 0x444
 800d3fa:	4211      	tst	r1, r2
 800d3fc:	d103      	bne.n	800d406 <HAL_TIM_PWM_Stop+0x5a>
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	f022 0201 	bic.w	r2, r2, #1
 800d404:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d406:	2301      	movs	r3, #1
 800d408:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d40c:	2000      	movs	r0, #0
 800d40e:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d410:	2201      	movs	r2, #1
 800d412:	e7da      	b.n	800d3ca <HAL_TIM_PWM_Stop+0x1e>
 800d414:	2201      	movs	r2, #1
 800d416:	e7d8      	b.n	800d3ca <HAL_TIM_PWM_Stop+0x1e>
 800d418:	40010000 	.word	0x40010000

0800d41c <HAL_TIM_PWM_Start_IT>:
{
 800d41c:	b510      	push	{r4, lr}
 800d41e:	4604      	mov	r4, r0
  switch (Channel)
 800d420:	290c      	cmp	r1, #12
 800d422:	d80d      	bhi.n	800d440 <HAL_TIM_PWM_Start_IT+0x24>
 800d424:	e8df f001 	tbb	[pc, r1]
 800d428:	0c0c0c07 	.word	0x0c0c0c07
 800d42c:	0c0c0c2a 	.word	0x0c0c0c2a
 800d430:	0c0c0c30 	.word	0x0c0c0c30
 800d434:	36          	.byte	0x36
 800d435:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d436:	6802      	ldr	r2, [r0, #0]
 800d438:	68d3      	ldr	r3, [r2, #12]
 800d43a:	f043 0302 	orr.w	r3, r3, #2
 800d43e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d440:	2201      	movs	r2, #1
 800d442:	6820      	ldr	r0, [r4, #0]
 800d444:	f7ff fd63 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <HAL_TIM_PWM_Start_IT+0x8c>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d029      	beq.n	800d4a4 <HAL_TIM_PWM_Start_IT+0x88>
 800d450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d454:	4293      	cmp	r3, r2
 800d456:	d023      	beq.n	800d4a0 <HAL_TIM_PWM_Start_IT+0x84>
 800d458:	2200      	movs	r2, #0
 800d45a:	b11a      	cbz	r2, 800d464 <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800d45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d45e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d462:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d464:	6822      	ldr	r2, [r4, #0]
 800d466:	6893      	ldr	r3, [r2, #8]
 800d468:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d46c:	2b06      	cmp	r3, #6
 800d46e:	d003      	beq.n	800d478 <HAL_TIM_PWM_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800d470:	6813      	ldr	r3, [r2, #0]
 800d472:	f043 0301 	orr.w	r3, r3, #1
 800d476:	6013      	str	r3, [r2, #0]
}
 800d478:	2000      	movs	r0, #0
 800d47a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d47c:	6802      	ldr	r2, [r0, #0]
 800d47e:	68d3      	ldr	r3, [r2, #12]
 800d480:	f043 0304 	orr.w	r3, r3, #4
 800d484:	60d3      	str	r3, [r2, #12]
      break;
 800d486:	e7db      	b.n	800d440 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d488:	6802      	ldr	r2, [r0, #0]
 800d48a:	68d3      	ldr	r3, [r2, #12]
 800d48c:	f043 0308 	orr.w	r3, r3, #8
 800d490:	60d3      	str	r3, [r2, #12]
      break;
 800d492:	e7d5      	b.n	800d440 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d494:	6802      	ldr	r2, [r0, #0]
 800d496:	68d3      	ldr	r3, [r2, #12]
 800d498:	f043 0310 	orr.w	r3, r3, #16
 800d49c:	60d3      	str	r3, [r2, #12]
      break;
 800d49e:	e7cf      	b.n	800d440 <HAL_TIM_PWM_Start_IT+0x24>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	e7da      	b.n	800d45a <HAL_TIM_PWM_Start_IT+0x3e>
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	e7d8      	b.n	800d45a <HAL_TIM_PWM_Start_IT+0x3e>
 800d4a8:	40010000 	.word	0x40010000

0800d4ac <HAL_TIM_PWM_Stop_IT>:
{
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	4604      	mov	r4, r0
  switch (Channel)
 800d4b0:	290c      	cmp	r1, #12
 800d4b2:	d80d      	bhi.n	800d4d0 <HAL_TIM_PWM_Stop_IT+0x24>
 800d4b4:	e8df f001 	tbb	[pc, r1]
 800d4b8:	0c0c0c07 	.word	0x0c0c0c07
 800d4bc:	0c0c0c39 	.word	0x0c0c0c39
 800d4c0:	0c0c0c3f 	.word	0x0c0c0c3f
 800d4c4:	45          	.byte	0x45
 800d4c5:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d4c6:	6802      	ldr	r2, [r0, #0]
 800d4c8:	68d3      	ldr	r3, [r2, #12]
 800d4ca:	f023 0302 	bic.w	r3, r3, #2
 800d4ce:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6820      	ldr	r0, [r4, #0]
 800d4d4:	f7ff fd1b 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	4a1f      	ldr	r2, [pc, #124]	; (800d558 <HAL_TIM_PWM_Stop_IT+0xac>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d038      	beq.n	800d552 <HAL_TIM_PWM_Stop_IT+0xa6>
 800d4e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d032      	beq.n	800d54e <HAL_TIM_PWM_Stop_IT+0xa2>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	b16a      	cbz	r2, 800d508 <HAL_TIM_PWM_Stop_IT+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 800d4ec:	6a19      	ldr	r1, [r3, #32]
 800d4ee:	f241 1211 	movw	r2, #4369	; 0x1111
 800d4f2:	4211      	tst	r1, r2
 800d4f4:	d108      	bne.n	800d508 <HAL_TIM_PWM_Stop_IT+0x5c>
 800d4f6:	6a19      	ldr	r1, [r3, #32]
 800d4f8:	f240 4244 	movw	r2, #1092	; 0x444
 800d4fc:	4211      	tst	r1, r2
 800d4fe:	d103      	bne.n	800d508 <HAL_TIM_PWM_Stop_IT+0x5c>
 800d500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d506:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	6a19      	ldr	r1, [r3, #32]
 800d50c:	f241 1211 	movw	r2, #4369	; 0x1111
 800d510:	4211      	tst	r1, r2
 800d512:	d108      	bne.n	800d526 <HAL_TIM_PWM_Stop_IT+0x7a>
 800d514:	6a19      	ldr	r1, [r3, #32]
 800d516:	f240 4244 	movw	r2, #1092	; 0x444
 800d51a:	4211      	tst	r1, r2
 800d51c:	d103      	bne.n	800d526 <HAL_TIM_PWM_Stop_IT+0x7a>
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	f022 0201 	bic.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]
}
 800d526:	2000      	movs	r0, #0
 800d528:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d52a:	6802      	ldr	r2, [r0, #0]
 800d52c:	68d3      	ldr	r3, [r2, #12]
 800d52e:	f023 0304 	bic.w	r3, r3, #4
 800d532:	60d3      	str	r3, [r2, #12]
      break;
 800d534:	e7cc      	b.n	800d4d0 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d536:	6802      	ldr	r2, [r0, #0]
 800d538:	68d3      	ldr	r3, [r2, #12]
 800d53a:	f023 0308 	bic.w	r3, r3, #8
 800d53e:	60d3      	str	r3, [r2, #12]
      break;
 800d540:	e7c6      	b.n	800d4d0 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d542:	6802      	ldr	r2, [r0, #0]
 800d544:	68d3      	ldr	r3, [r2, #12]
 800d546:	f023 0310 	bic.w	r3, r3, #16
 800d54a:	60d3      	str	r3, [r2, #12]
      break;
 800d54c:	e7c0      	b.n	800d4d0 <HAL_TIM_PWM_Stop_IT+0x24>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d54e:	2201      	movs	r2, #1
 800d550:	e7cb      	b.n	800d4ea <HAL_TIM_PWM_Stop_IT+0x3e>
 800d552:	2201      	movs	r2, #1
 800d554:	e7c9      	b.n	800d4ea <HAL_TIM_PWM_Stop_IT+0x3e>
 800d556:	bf00      	nop
 800d558:	40010000 	.word	0x40010000

0800d55c <HAL_TIM_PWM_Start_DMA>:
{
 800d55c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800d55e:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800d562:	b2ed      	uxtb	r5, r5
 800d564:	2d02      	cmp	r5, #2
 800d566:	f000 8098 	beq.w	800d69a <HAL_TIM_PWM_Start_DMA+0x13e>
  else if (htim->State == HAL_TIM_STATE_READY)
 800d56a:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d56e:	b2f6      	uxtb	r6, r6
 800d570:	2e01      	cmp	r6, #1
 800d572:	d00d      	beq.n	800d590 <HAL_TIM_PWM_Start_DMA+0x34>
 800d574:	4616      	mov	r6, r2
 800d576:	460d      	mov	r5, r1
 800d578:	4604      	mov	r4, r0
  switch (Channel)
 800d57a:	290c      	cmp	r1, #12
 800d57c:	d827      	bhi.n	800d5ce <HAL_TIM_PWM_Start_DMA+0x72>
 800d57e:	e8df f001 	tbb	[pc, r1]
 800d582:	2610      	.short	0x2610
 800d584:	26452626 	.word	0x26452626
 800d588:	265c2626 	.word	0x265c2626
 800d58c:	2626      	.short	0x2626
 800d58e:	72          	.byte	0x72
 800d58f:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d590:	b11a      	cbz	r2, 800d59a <HAL_TIM_PWM_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d592:	2402      	movs	r4, #2
 800d594:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d598:	e7ec      	b.n	800d574 <HAL_TIM_PWM_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0f9      	beq.n	800d592 <HAL_TIM_PWM_Start_DMA+0x36>
      return HAL_ERROR;
 800d59e:	2001      	movs	r0, #1
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d5a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5a4:	4943      	ldr	r1, [pc, #268]	; (800d6b4 <HAL_TIM_PWM_Start_DMA+0x158>)
 800d5a6:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d5a8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5aa:	4943      	ldr	r1, [pc, #268]	; (800d6b8 <HAL_TIM_PWM_Start_DMA+0x15c>)
 800d5ac:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d5ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5b0:	4942      	ldr	r1, [pc, #264]	; (800d6bc <HAL_TIM_PWM_Start_DMA+0x160>)
 800d5b2:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d5b4:	6802      	ldr	r2, [r0, #0]
 800d5b6:	3234      	adds	r2, #52	; 0x34
 800d5b8:	4631      	mov	r1, r6
 800d5ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d5bc:	f7f6 fb75 	bl	8003caa <HAL_DMA_Start_IT>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d16c      	bne.n	800d69e <HAL_TIM_PWM_Start_DMA+0x142>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	68d3      	ldr	r3, [r2, #12]
 800d5c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5cc:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	6820      	ldr	r0, [r4, #0]
 800d5d4:	f7ff fc9b 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	4a39      	ldr	r2, [pc, #228]	; (800d6c0 <HAL_TIM_PWM_Start_DMA+0x164>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d05a      	beq.n	800d696 <HAL_TIM_PWM_Start_DMA+0x13a>
 800d5e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d054      	beq.n	800d692 <HAL_TIM_PWM_Start_DMA+0x136>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	b11a      	cbz	r2, 800d5f4 <HAL_TIM_PWM_Start_DMA+0x98>
    __HAL_TIM_MOE_ENABLE(htim);
 800d5ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5f2:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5f4:	6822      	ldr	r2, [r4, #0]
 800d5f6:	6893      	ldr	r3, [r2, #8]
 800d5f8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5fc:	2b06      	cmp	r3, #6
 800d5fe:	d056      	beq.n	800d6ae <HAL_TIM_PWM_Start_DMA+0x152>
    __HAL_TIM_ENABLE(htim);
 800d600:	6813      	ldr	r3, [r2, #0]
 800d602:	f043 0301 	orr.w	r3, r3, #1
 800d606:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d608:	2000      	movs	r0, #0
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d60c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d60e:	4929      	ldr	r1, [pc, #164]	; (800d6b4 <HAL_TIM_PWM_Start_DMA+0x158>)
 800d610:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d612:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d614:	4928      	ldr	r1, [pc, #160]	; (800d6b8 <HAL_TIM_PWM_Start_DMA+0x15c>)
 800d616:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d618:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d61a:	4928      	ldr	r1, [pc, #160]	; (800d6bc <HAL_TIM_PWM_Start_DMA+0x160>)
 800d61c:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d61e:	6802      	ldr	r2, [r0, #0]
 800d620:	3238      	adds	r2, #56	; 0x38
 800d622:	4631      	mov	r1, r6
 800d624:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d626:	f7f6 fb40 	bl	8003caa <HAL_DMA_Start_IT>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d139      	bne.n	800d6a2 <HAL_TIM_PWM_Start_DMA+0x146>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d62e:	6822      	ldr	r2, [r4, #0]
 800d630:	68d3      	ldr	r3, [r2, #12]
 800d632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d636:	60d3      	str	r3, [r2, #12]
      break;
 800d638:	e7c9      	b.n	800d5ce <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d63a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d63c:	491d      	ldr	r1, [pc, #116]	; (800d6b4 <HAL_TIM_PWM_Start_DMA+0x158>)
 800d63e:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d640:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d642:	491d      	ldr	r1, [pc, #116]	; (800d6b8 <HAL_TIM_PWM_Start_DMA+0x15c>)
 800d644:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d646:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d648:	491c      	ldr	r1, [pc, #112]	; (800d6bc <HAL_TIM_PWM_Start_DMA+0x160>)
 800d64a:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d64c:	6802      	ldr	r2, [r0, #0]
 800d64e:	323c      	adds	r2, #60	; 0x3c
 800d650:	4631      	mov	r1, r6
 800d652:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d654:	f7f6 fb29 	bl	8003caa <HAL_DMA_Start_IT>
 800d658:	bb28      	cbnz	r0, 800d6a6 <HAL_TIM_PWM_Start_DMA+0x14a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d65a:	6822      	ldr	r2, [r4, #0]
 800d65c:	68d3      	ldr	r3, [r2, #12]
 800d65e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d662:	60d3      	str	r3, [r2, #12]
      break;
 800d664:	e7b3      	b.n	800d5ce <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d666:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d668:	4912      	ldr	r1, [pc, #72]	; (800d6b4 <HAL_TIM_PWM_Start_DMA+0x158>)
 800d66a:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d66c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d66e:	4912      	ldr	r1, [pc, #72]	; (800d6b8 <HAL_TIM_PWM_Start_DMA+0x15c>)
 800d670:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d672:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d674:	4911      	ldr	r1, [pc, #68]	; (800d6bc <HAL_TIM_PWM_Start_DMA+0x160>)
 800d676:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d678:	6802      	ldr	r2, [r0, #0]
 800d67a:	3240      	adds	r2, #64	; 0x40
 800d67c:	4631      	mov	r1, r6
 800d67e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d680:	f7f6 fb13 	bl	8003caa <HAL_DMA_Start_IT>
 800d684:	b988      	cbnz	r0, 800d6aa <HAL_TIM_PWM_Start_DMA+0x14e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d686:	6822      	ldr	r2, [r4, #0]
 800d688:	68d3      	ldr	r3, [r2, #12]
 800d68a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d68e:	60d3      	str	r3, [r2, #12]
      break;
 800d690:	e79d      	b.n	800d5ce <HAL_TIM_PWM_Start_DMA+0x72>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d692:	2201      	movs	r2, #1
 800d694:	e7a9      	b.n	800d5ea <HAL_TIM_PWM_Start_DMA+0x8e>
 800d696:	2201      	movs	r2, #1
 800d698:	e7a7      	b.n	800d5ea <HAL_TIM_PWM_Start_DMA+0x8e>
    return HAL_BUSY;
 800d69a:	2002      	movs	r0, #2
 800d69c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d69e:	2001      	movs	r0, #1
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d6a2:	2001      	movs	r0, #1
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d6a6:	2001      	movs	r0, #1
 800d6a8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d6ae:	2000      	movs	r0, #0
}
 800d6b0:	bd70      	pop	{r4, r5, r6, pc}
 800d6b2:	bf00      	nop
 800d6b4:	0800c32b 	.word	0x0800c32b
 800d6b8:	0800c373 	.word	0x0800c373
 800d6bc:	0800c559 	.word	0x0800c559
 800d6c0:	40010000 	.word	0x40010000

0800d6c4 <HAL_TIM_PWM_Stop_DMA>:
{
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	460d      	mov	r5, r1
  switch (Channel)
 800d6ca:	290c      	cmp	r1, #12
 800d6cc:	d810      	bhi.n	800d6f0 <HAL_TIM_PWM_Stop_DMA+0x2c>
 800d6ce:	e8df f001 	tbb	[pc, r1]
 800d6d2:	0f07      	.short	0x0f07
 800d6d4:	0f400f0f 	.word	0x0f400f0f
 800d6d8:	0f490f0f 	.word	0x0f490f0f
 800d6dc:	0f0f      	.short	0x0f0f
 800d6de:	52          	.byte	0x52
 800d6df:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d6e0:	6802      	ldr	r2, [r0, #0]
 800d6e2:	68d3      	ldr	r3, [r2, #12]
 800d6e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6e8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d6ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d6ec:	f7f6 fb5c 	bl	8003da8 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	f7ff fc0a 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	4a24      	ldr	r2, [pc, #144]	; (800d790 <HAL_TIM_PWM_Stop_DMA+0xcc>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d044      	beq.n	800d78c <HAL_TIM_PWM_Stop_DMA+0xc8>
 800d702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d706:	4293      	cmp	r3, r2
 800d708:	d03e      	beq.n	800d788 <HAL_TIM_PWM_Stop_DMA+0xc4>
 800d70a:	2200      	movs	r2, #0
 800d70c:	b16a      	cbz	r2, 800d72a <HAL_TIM_PWM_Stop_DMA+0x66>
    __HAL_TIM_MOE_DISABLE(htim);
 800d70e:	6a19      	ldr	r1, [r3, #32]
 800d710:	f241 1211 	movw	r2, #4369	; 0x1111
 800d714:	4211      	tst	r1, r2
 800d716:	d108      	bne.n	800d72a <HAL_TIM_PWM_Stop_DMA+0x66>
 800d718:	6a19      	ldr	r1, [r3, #32]
 800d71a:	f240 4244 	movw	r2, #1092	; 0x444
 800d71e:	4211      	tst	r1, r2
 800d720:	d103      	bne.n	800d72a <HAL_TIM_PWM_Stop_DMA+0x66>
 800d722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d728:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	6a19      	ldr	r1, [r3, #32]
 800d72e:	f241 1211 	movw	r2, #4369	; 0x1111
 800d732:	4211      	tst	r1, r2
 800d734:	d108      	bne.n	800d748 <HAL_TIM_PWM_Stop_DMA+0x84>
 800d736:	6a19      	ldr	r1, [r3, #32]
 800d738:	f240 4244 	movw	r2, #1092	; 0x444
 800d73c:	4211      	tst	r1, r2
 800d73e:	d103      	bne.n	800d748 <HAL_TIM_PWM_Stop_DMA+0x84>
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	f022 0201 	bic.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d748:	2301      	movs	r3, #1
 800d74a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d74e:	2000      	movs	r0, #0
 800d750:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d752:	6802      	ldr	r2, [r0, #0]
 800d754:	68d3      	ldr	r3, [r2, #12]
 800d756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d75a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d75c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d75e:	f7f6 fb23 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d762:	e7c5      	b.n	800d6f0 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d764:	6802      	ldr	r2, [r0, #0]
 800d766:	68d3      	ldr	r3, [r2, #12]
 800d768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d76c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d76e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d770:	f7f6 fb1a 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d774:	e7bc      	b.n	800d6f0 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d776:	6802      	ldr	r2, [r0, #0]
 800d778:	68d3      	ldr	r3, [r2, #12]
 800d77a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d77e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d780:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d782:	f7f6 fb11 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800d786:	e7b3      	b.n	800d6f0 <HAL_TIM_PWM_Stop_DMA+0x2c>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d788:	2201      	movs	r2, #1
 800d78a:	e7bf      	b.n	800d70c <HAL_TIM_PWM_Stop_DMA+0x48>
 800d78c:	2201      	movs	r2, #1
 800d78e:	e7bd      	b.n	800d70c <HAL_TIM_PWM_Stop_DMA+0x48>
 800d790:	40010000 	.word	0x40010000

0800d794 <HAL_TIM_IC_Start>:
{
 800d794:	b510      	push	{r4, lr}
 800d796:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d798:	2201      	movs	r2, #1
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	f7ff fbb7 	bl	800cf0e <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	6893      	ldr	r3, [r2, #8]
 800d7a4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7a8:	2b06      	cmp	r3, #6
 800d7aa:	d003      	beq.n	800d7b4 <HAL_TIM_IC_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800d7ac:	6813      	ldr	r3, [r2, #0]
 800d7ae:	f043 0301 	orr.w	r3, r3, #1
 800d7b2:	6013      	str	r3, [r2, #0]
}
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	bd10      	pop	{r4, pc}

0800d7b8 <HAL_TIM_IC_Stop>:
{
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d7bc:	2200      	movs	r2, #0
 800d7be:	6800      	ldr	r0, [r0, #0]
 800d7c0:	f7ff fba5 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	6a19      	ldr	r1, [r3, #32]
 800d7c8:	f241 1211 	movw	r2, #4369	; 0x1111
 800d7cc:	4211      	tst	r1, r2
 800d7ce:	d108      	bne.n	800d7e2 <HAL_TIM_IC_Stop+0x2a>
 800d7d0:	6a19      	ldr	r1, [r3, #32]
 800d7d2:	f240 4244 	movw	r2, #1092	; 0x444
 800d7d6:	4211      	tst	r1, r2
 800d7d8:	d103      	bne.n	800d7e2 <HAL_TIM_IC_Stop+0x2a>
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	f022 0201 	bic.w	r2, r2, #1
 800d7e0:	601a      	str	r2, [r3, #0]
}
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	bd10      	pop	{r4, pc}

0800d7e6 <HAL_TIM_IC_Start_IT>:
{
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	4604      	mov	r4, r0
  switch (Channel)
 800d7ea:	290c      	cmp	r1, #12
 800d7ec:	d80d      	bhi.n	800d80a <HAL_TIM_IC_Start_IT+0x24>
 800d7ee:	e8df f001 	tbb	[pc, r1]
 800d7f2:	0c07      	.short	0x0c07
 800d7f4:	0c1c0c0c 	.word	0x0c1c0c0c
 800d7f8:	0c220c0c 	.word	0x0c220c0c
 800d7fc:	0c0c      	.short	0x0c0c
 800d7fe:	28          	.byte	0x28
 800d7ff:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d800:	6802      	ldr	r2, [r0, #0]
 800d802:	68d3      	ldr	r3, [r2, #12]
 800d804:	f043 0302 	orr.w	r3, r3, #2
 800d808:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d80a:	2201      	movs	r2, #1
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	f7ff fb7e 	bl	800cf0e <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d812:	6822      	ldr	r2, [r4, #0]
 800d814:	6893      	ldr	r3, [r2, #8]
 800d816:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d81a:	2b06      	cmp	r3, #6
 800d81c:	d003      	beq.n	800d826 <HAL_TIM_IC_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 800d81e:	6813      	ldr	r3, [r2, #0]
 800d820:	f043 0301 	orr.w	r3, r3, #1
 800d824:	6013      	str	r3, [r2, #0]
}
 800d826:	2000      	movs	r0, #0
 800d828:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d82a:	6802      	ldr	r2, [r0, #0]
 800d82c:	68d3      	ldr	r3, [r2, #12]
 800d82e:	f043 0304 	orr.w	r3, r3, #4
 800d832:	60d3      	str	r3, [r2, #12]
      break;
 800d834:	e7e9      	b.n	800d80a <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d836:	6802      	ldr	r2, [r0, #0]
 800d838:	68d3      	ldr	r3, [r2, #12]
 800d83a:	f043 0308 	orr.w	r3, r3, #8
 800d83e:	60d3      	str	r3, [r2, #12]
      break;
 800d840:	e7e3      	b.n	800d80a <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d842:	6802      	ldr	r2, [r0, #0]
 800d844:	68d3      	ldr	r3, [r2, #12]
 800d846:	f043 0310 	orr.w	r3, r3, #16
 800d84a:	60d3      	str	r3, [r2, #12]
      break;
 800d84c:	e7dd      	b.n	800d80a <HAL_TIM_IC_Start_IT+0x24>

0800d84e <HAL_TIM_IC_Stop_IT>:
{
 800d84e:	b510      	push	{r4, lr}
 800d850:	4604      	mov	r4, r0
  switch (Channel)
 800d852:	290c      	cmp	r1, #12
 800d854:	d80d      	bhi.n	800d872 <HAL_TIM_IC_Stop_IT+0x24>
 800d856:	e8df f001 	tbb	[pc, r1]
 800d85a:	0c07      	.short	0x0c07
 800d85c:	0c210c0c 	.word	0x0c210c0c
 800d860:	0c270c0c 	.word	0x0c270c0c
 800d864:	0c0c      	.short	0x0c0c
 800d866:	2d          	.byte	0x2d
 800d867:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d868:	6802      	ldr	r2, [r0, #0]
 800d86a:	68d3      	ldr	r3, [r2, #12]
 800d86c:	f023 0302 	bic.w	r3, r3, #2
 800d870:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d872:	2200      	movs	r2, #0
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	f7ff fb4a 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	6a19      	ldr	r1, [r3, #32]
 800d87e:	f241 1211 	movw	r2, #4369	; 0x1111
 800d882:	4211      	tst	r1, r2
 800d884:	d108      	bne.n	800d898 <HAL_TIM_IC_Stop_IT+0x4a>
 800d886:	6a19      	ldr	r1, [r3, #32]
 800d888:	f240 4244 	movw	r2, #1092	; 0x444
 800d88c:	4211      	tst	r1, r2
 800d88e:	d103      	bne.n	800d898 <HAL_TIM_IC_Stop_IT+0x4a>
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	f022 0201 	bic.w	r2, r2, #1
 800d896:	601a      	str	r2, [r3, #0]
}
 800d898:	2000      	movs	r0, #0
 800d89a:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d89c:	6802      	ldr	r2, [r0, #0]
 800d89e:	68d3      	ldr	r3, [r2, #12]
 800d8a0:	f023 0304 	bic.w	r3, r3, #4
 800d8a4:	60d3      	str	r3, [r2, #12]
      break;
 800d8a6:	e7e4      	b.n	800d872 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d8a8:	6802      	ldr	r2, [r0, #0]
 800d8aa:	68d3      	ldr	r3, [r2, #12]
 800d8ac:	f023 0308 	bic.w	r3, r3, #8
 800d8b0:	60d3      	str	r3, [r2, #12]
      break;
 800d8b2:	e7de      	b.n	800d872 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d8b4:	6802      	ldr	r2, [r0, #0]
 800d8b6:	68d3      	ldr	r3, [r2, #12]
 800d8b8:	f023 0310 	bic.w	r3, r3, #16
 800d8bc:	60d3      	str	r3, [r2, #12]
      break;
 800d8be:	e7d8      	b.n	800d872 <HAL_TIM_IC_Stop_IT+0x24>

0800d8c0 <HAL_TIM_IC_Start_DMA>:
{
 800d8c0:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800d8c2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d8c6:	b2e4      	uxtb	r4, r4
 800d8c8:	2c02      	cmp	r4, #2
 800d8ca:	f000 8081 	beq.w	800d9d0 <HAL_TIM_IC_Start_DMA+0x110>
  else if (htim->State == HAL_TIM_STATE_READY)
 800d8ce:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d8d2:	b2e4      	uxtb	r4, r4
 800d8d4:	2c01      	cmp	r4, #1
 800d8d6:	d00c      	beq.n	800d8f2 <HAL_TIM_IC_Start_DMA+0x32>
 800d8d8:	460d      	mov	r5, r1
 800d8da:	4604      	mov	r4, r0
  switch (Channel)
 800d8dc:	2d0c      	cmp	r5, #12
 800d8de:	d826      	bhi.n	800d92e <HAL_TIM_IC_Start_DMA+0x6e>
 800d8e0:	e8df f005 	tbb	[pc, r5]
 800d8e4:	25252510 	.word	0x25252510
 800d8e8:	25252536 	.word	0x25252536
 800d8ec:	2525254c 	.word	0x2525254c
 800d8f0:	61          	.byte	0x61
 800d8f1:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d8f2:	b11a      	cbz	r2, 800d8fc <HAL_TIM_IC_Start_DMA+0x3c>
      htim->State = HAL_TIM_STATE_BUSY;
 800d8f4:	2402      	movs	r4, #2
 800d8f6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d8fa:	e7ed      	b.n	800d8d8 <HAL_TIM_IC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0f9      	beq.n	800d8f4 <HAL_TIM_IC_Start_DMA+0x34>
      return HAL_ERROR;
 800d900:	2001      	movs	r0, #1
 800d902:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d904:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d906:	4838      	ldr	r0, [pc, #224]	; (800d9e8 <HAL_TIM_IC_Start_DMA+0x128>)
 800d908:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d90a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d90c:	4837      	ldr	r0, [pc, #220]	; (800d9ec <HAL_TIM_IC_Start_DMA+0x12c>)
 800d90e:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d912:	4837      	ldr	r0, [pc, #220]	; (800d9f0 <HAL_TIM_IC_Start_DMA+0x130>)
 800d914:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d916:	6821      	ldr	r1, [r4, #0]
 800d918:	3134      	adds	r1, #52	; 0x34
 800d91a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d91c:	f7f6 f9c5 	bl	8003caa <HAL_DMA_Start_IT>
 800d920:	2800      	cmp	r0, #0
 800d922:	d157      	bne.n	800d9d4 <HAL_TIM_IC_Start_DMA+0x114>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d924:	6822      	ldr	r2, [r4, #0]
 800d926:	68d3      	ldr	r3, [r2, #12]
 800d928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d92c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d92e:	2201      	movs	r2, #1
 800d930:	4629      	mov	r1, r5
 800d932:	6820      	ldr	r0, [r4, #0]
 800d934:	f7ff faeb 	bl	800cf0e <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d938:	6822      	ldr	r2, [r4, #0]
 800d93a:	6893      	ldr	r3, [r2, #8]
 800d93c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d940:	2b06      	cmp	r3, #6
 800d942:	d04f      	beq.n	800d9e4 <HAL_TIM_IC_Start_DMA+0x124>
    __HAL_TIM_ENABLE(htim);
 800d944:	6813      	ldr	r3, [r2, #0]
 800d946:	f043 0301 	orr.w	r3, r3, #1
 800d94a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d94c:	2000      	movs	r0, #0
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d950:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d952:	4825      	ldr	r0, [pc, #148]	; (800d9e8 <HAL_TIM_IC_Start_DMA+0x128>)
 800d954:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d956:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d958:	4824      	ldr	r0, [pc, #144]	; (800d9ec <HAL_TIM_IC_Start_DMA+0x12c>)
 800d95a:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d95c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d95e:	4824      	ldr	r0, [pc, #144]	; (800d9f0 <HAL_TIM_IC_Start_DMA+0x130>)
 800d960:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d962:	6821      	ldr	r1, [r4, #0]
 800d964:	3138      	adds	r1, #56	; 0x38
 800d966:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d968:	f7f6 f99f 	bl	8003caa <HAL_DMA_Start_IT>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d133      	bne.n	800d9d8 <HAL_TIM_IC_Start_DMA+0x118>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d970:	6822      	ldr	r2, [r4, #0]
 800d972:	68d3      	ldr	r3, [r2, #12]
 800d974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d978:	60d3      	str	r3, [r2, #12]
      break;
 800d97a:	e7d8      	b.n	800d92e <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d97c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d97e:	481a      	ldr	r0, [pc, #104]	; (800d9e8 <HAL_TIM_IC_Start_DMA+0x128>)
 800d980:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d982:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d984:	4819      	ldr	r0, [pc, #100]	; (800d9ec <HAL_TIM_IC_Start_DMA+0x12c>)
 800d986:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d988:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d98a:	4819      	ldr	r0, [pc, #100]	; (800d9f0 <HAL_TIM_IC_Start_DMA+0x130>)
 800d98c:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800d98e:	6821      	ldr	r1, [r4, #0]
 800d990:	313c      	adds	r1, #60	; 0x3c
 800d992:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d994:	f7f6 f989 	bl	8003caa <HAL_DMA_Start_IT>
 800d998:	bb00      	cbnz	r0, 800d9dc <HAL_TIM_IC_Start_DMA+0x11c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	68d3      	ldr	r3, [r2, #12]
 800d99e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d9a2:	60d3      	str	r3, [r2, #12]
      break;
 800d9a4:	e7c3      	b.n	800d92e <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d9a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d9a8:	480f      	ldr	r0, [pc, #60]	; (800d9e8 <HAL_TIM_IC_Start_DMA+0x128>)
 800d9aa:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d9ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d9ae:	480f      	ldr	r0, [pc, #60]	; (800d9ec <HAL_TIM_IC_Start_DMA+0x12c>)
 800d9b0:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d9b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d9b4:	480e      	ldr	r0, [pc, #56]	; (800d9f0 <HAL_TIM_IC_Start_DMA+0x130>)
 800d9b6:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800d9b8:	6821      	ldr	r1, [r4, #0]
 800d9ba:	3140      	adds	r1, #64	; 0x40
 800d9bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d9be:	f7f6 f974 	bl	8003caa <HAL_DMA_Start_IT>
 800d9c2:	b968      	cbnz	r0, 800d9e0 <HAL_TIM_IC_Start_DMA+0x120>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d9c4:	6822      	ldr	r2, [r4, #0]
 800d9c6:	68d3      	ldr	r3, [r2, #12]
 800d9c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9cc:	60d3      	str	r3, [r2, #12]
      break;
 800d9ce:	e7ae      	b.n	800d92e <HAL_TIM_IC_Start_DMA+0x6e>
    return HAL_BUSY;
 800d9d0:	2002      	movs	r0, #2
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800d9d8:	2001      	movs	r0, #1
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800d9dc:	2001      	movs	r0, #1
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800d9e4:	2000      	movs	r0, #0
}
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	0800c29b 	.word	0x0800c29b
 800d9ec:	0800c2e3 	.word	0x0800c2e3
 800d9f0:	0800c559 	.word	0x0800c559

0800d9f4 <HAL_TIM_IC_Stop_DMA>:
{
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460d      	mov	r5, r1
  switch (Channel)
 800d9fa:	290c      	cmp	r1, #12
 800d9fc:	d810      	bhi.n	800da20 <HAL_TIM_IC_Stop_DMA+0x2c>
 800d9fe:	e8df f001 	tbb	[pc, r1]
 800da02:	0f07      	.short	0x0f07
 800da04:	0f280f0f 	.word	0x0f280f0f
 800da08:	0f310f0f 	.word	0x0f310f0f
 800da0c:	0f0f      	.short	0x0f0f
 800da0e:	3a          	.byte	0x3a
 800da0f:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800da10:	6802      	ldr	r2, [r0, #0]
 800da12:	68d3      	ldr	r3, [r2, #12]
 800da14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da18:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800da1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800da1c:	f7f6 f9c4 	bl	8003da8 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800da20:	2200      	movs	r2, #0
 800da22:	4629      	mov	r1, r5
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	f7ff fa72 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	6a19      	ldr	r1, [r3, #32]
 800da2e:	f241 1211 	movw	r2, #4369	; 0x1111
 800da32:	4211      	tst	r1, r2
 800da34:	d108      	bne.n	800da48 <HAL_TIM_IC_Stop_DMA+0x54>
 800da36:	6a19      	ldr	r1, [r3, #32]
 800da38:	f240 4244 	movw	r2, #1092	; 0x444
 800da3c:	4211      	tst	r1, r2
 800da3e:	d103      	bne.n	800da48 <HAL_TIM_IC_Stop_DMA+0x54>
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	f022 0201 	bic.w	r2, r2, #1
 800da46:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800da48:	2301      	movs	r3, #1
 800da4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800da4e:	2000      	movs	r0, #0
 800da50:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800da52:	6802      	ldr	r2, [r0, #0]
 800da54:	68d3      	ldr	r3, [r2, #12]
 800da56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da5a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800da5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800da5e:	f7f6 f9a3 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800da62:	e7dd      	b.n	800da20 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800da64:	6802      	ldr	r2, [r0, #0]
 800da66:	68d3      	ldr	r3, [r2, #12]
 800da68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da6c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800da6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800da70:	f7f6 f99a 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800da74:	e7d4      	b.n	800da20 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800da76:	6802      	ldr	r2, [r0, #0]
 800da78:	68d3      	ldr	r3, [r2, #12]
 800da7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da7e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800da80:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800da82:	f7f6 f991 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800da86:	e7cb      	b.n	800da20 <HAL_TIM_IC_Stop_DMA+0x2c>

0800da88 <HAL_TIM_OnePulse_Start>:
{
 800da88:	b510      	push	{r4, lr}
 800da8a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da8c:	2201      	movs	r2, #1
 800da8e:	2100      	movs	r1, #0
 800da90:	6800      	ldr	r0, [r0, #0]
 800da92:	f7ff fa3c 	bl	800cf0e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da96:	2201      	movs	r2, #1
 800da98:	2104      	movs	r1, #4
 800da9a:	6820      	ldr	r0, [r4, #0]
 800da9c:	f7ff fa37 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	4a09      	ldr	r2, [pc, #36]	; (800dac8 <HAL_TIM_OnePulse_Start+0x40>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d00d      	beq.n	800dac4 <HAL_TIM_OnePulse_Start+0x3c>
 800daa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800daac:	4293      	cmp	r3, r2
 800daae:	d007      	beq.n	800dac0 <HAL_TIM_OnePulse_Start+0x38>
 800dab0:	2200      	movs	r2, #0
 800dab2:	b11a      	cbz	r2, 800dabc <HAL_TIM_OnePulse_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 800dab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800daba:	645a      	str	r2, [r3, #68]	; 0x44
}
 800dabc:	2000      	movs	r0, #0
 800dabe:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dac0:	2201      	movs	r2, #1
 800dac2:	e7f6      	b.n	800dab2 <HAL_TIM_OnePulse_Start+0x2a>
 800dac4:	2201      	movs	r2, #1
 800dac6:	e7f4      	b.n	800dab2 <HAL_TIM_OnePulse_Start+0x2a>
 800dac8:	40010000 	.word	0x40010000

0800dacc <HAL_TIM_OnePulse_Stop>:
{
 800dacc:	b510      	push	{r4, lr}
 800dace:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dad0:	2200      	movs	r2, #0
 800dad2:	4611      	mov	r1, r2
 800dad4:	6800      	ldr	r0, [r0, #0]
 800dad6:	f7ff fa1a 	bl	800cf0e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dada:	2200      	movs	r2, #0
 800dadc:	2104      	movs	r1, #4
 800dade:	6820      	ldr	r0, [r4, #0]
 800dae0:	f7ff fa15 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	4a16      	ldr	r2, [pc, #88]	; (800db40 <HAL_TIM_OnePulse_Stop+0x74>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d026      	beq.n	800db3a <HAL_TIM_OnePulse_Stop+0x6e>
 800daec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d020      	beq.n	800db36 <HAL_TIM_OnePulse_Stop+0x6a>
 800daf4:	2200      	movs	r2, #0
 800daf6:	b16a      	cbz	r2, 800db14 <HAL_TIM_OnePulse_Stop+0x48>
    __HAL_TIM_MOE_DISABLE(htim);
 800daf8:	6a19      	ldr	r1, [r3, #32]
 800dafa:	f241 1211 	movw	r2, #4369	; 0x1111
 800dafe:	4211      	tst	r1, r2
 800db00:	d108      	bne.n	800db14 <HAL_TIM_OnePulse_Stop+0x48>
 800db02:	6a19      	ldr	r1, [r3, #32]
 800db04:	f240 4244 	movw	r2, #1092	; 0x444
 800db08:	4211      	tst	r1, r2
 800db0a:	d103      	bne.n	800db14 <HAL_TIM_OnePulse_Stop+0x48>
 800db0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db12:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	6a19      	ldr	r1, [r3, #32]
 800db18:	f241 1211 	movw	r2, #4369	; 0x1111
 800db1c:	4211      	tst	r1, r2
 800db1e:	d108      	bne.n	800db32 <HAL_TIM_OnePulse_Stop+0x66>
 800db20:	6a19      	ldr	r1, [r3, #32]
 800db22:	f240 4244 	movw	r2, #1092	; 0x444
 800db26:	4211      	tst	r1, r2
 800db28:	d103      	bne.n	800db32 <HAL_TIM_OnePulse_Stop+0x66>
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	f022 0201 	bic.w	r2, r2, #1
 800db30:	601a      	str	r2, [r3, #0]
}
 800db32:	2000      	movs	r0, #0
 800db34:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db36:	2201      	movs	r2, #1
 800db38:	e7dd      	b.n	800daf6 <HAL_TIM_OnePulse_Stop+0x2a>
 800db3a:	2201      	movs	r2, #1
 800db3c:	e7db      	b.n	800daf6 <HAL_TIM_OnePulse_Stop+0x2a>
 800db3e:	bf00      	nop
 800db40:	40010000 	.word	0x40010000

0800db44 <HAL_TIM_OnePulse_Start_IT>:
{
 800db44:	b510      	push	{r4, lr}
 800db46:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db48:	6802      	ldr	r2, [r0, #0]
 800db4a:	68d3      	ldr	r3, [r2, #12]
 800db4c:	f043 0302 	orr.w	r3, r3, #2
 800db50:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800db52:	6802      	ldr	r2, [r0, #0]
 800db54:	68d3      	ldr	r3, [r2, #12]
 800db56:	f043 0304 	orr.w	r3, r3, #4
 800db5a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db5c:	2201      	movs	r2, #1
 800db5e:	2100      	movs	r1, #0
 800db60:	6800      	ldr	r0, [r0, #0]
 800db62:	f7ff f9d4 	bl	800cf0e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db66:	2201      	movs	r2, #1
 800db68:	2104      	movs	r1, #4
 800db6a:	6820      	ldr	r0, [r4, #0]
 800db6c:	f7ff f9cf 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	4a09      	ldr	r2, [pc, #36]	; (800db98 <HAL_TIM_OnePulse_Start_IT+0x54>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d00d      	beq.n	800db94 <HAL_TIM_OnePulse_Start_IT+0x50>
 800db78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d007      	beq.n	800db90 <HAL_TIM_OnePulse_Start_IT+0x4c>
 800db80:	2200      	movs	r2, #0
 800db82:	b11a      	cbz	r2, 800db8c <HAL_TIM_OnePulse_Start_IT+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800db84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db8a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800db8c:	2000      	movs	r0, #0
 800db8e:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db90:	2201      	movs	r2, #1
 800db92:	e7f6      	b.n	800db82 <HAL_TIM_OnePulse_Start_IT+0x3e>
 800db94:	2201      	movs	r2, #1
 800db96:	e7f4      	b.n	800db82 <HAL_TIM_OnePulse_Start_IT+0x3e>
 800db98:	40010000 	.word	0x40010000

0800db9c <HAL_TIM_OnePulse_Stop_IT>:
{
 800db9c:	b510      	push	{r4, lr}
 800db9e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dba0:	6802      	ldr	r2, [r0, #0]
 800dba2:	68d3      	ldr	r3, [r2, #12]
 800dba4:	f023 0302 	bic.w	r3, r3, #2
 800dba8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dbaa:	6802      	ldr	r2, [r0, #0]
 800dbac:	68d3      	ldr	r3, [r2, #12]
 800dbae:	f023 0304 	bic.w	r3, r3, #4
 800dbb2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	6800      	ldr	r0, [r0, #0]
 800dbba:	f7ff f9a8 	bl	800cf0e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2104      	movs	r1, #4
 800dbc2:	6820      	ldr	r0, [r4, #0]
 800dbc4:	f7ff f9a3 	bl	800cf0e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	4a16      	ldr	r2, [pc, #88]	; (800dc24 <HAL_TIM_OnePulse_Stop_IT+0x88>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d026      	beq.n	800dc1e <HAL_TIM_OnePulse_Stop_IT+0x82>
 800dbd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d020      	beq.n	800dc1a <HAL_TIM_OnePulse_Stop_IT+0x7e>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	b16a      	cbz	r2, 800dbf8 <HAL_TIM_OnePulse_Stop_IT+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 800dbdc:	6a19      	ldr	r1, [r3, #32]
 800dbde:	f241 1211 	movw	r2, #4369	; 0x1111
 800dbe2:	4211      	tst	r1, r2
 800dbe4:	d108      	bne.n	800dbf8 <HAL_TIM_OnePulse_Stop_IT+0x5c>
 800dbe6:	6a19      	ldr	r1, [r3, #32]
 800dbe8:	f240 4244 	movw	r2, #1092	; 0x444
 800dbec:	4211      	tst	r1, r2
 800dbee:	d103      	bne.n	800dbf8 <HAL_TIM_OnePulse_Stop_IT+0x5c>
 800dbf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbf6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	6a19      	ldr	r1, [r3, #32]
 800dbfc:	f241 1211 	movw	r2, #4369	; 0x1111
 800dc00:	4211      	tst	r1, r2
 800dc02:	d108      	bne.n	800dc16 <HAL_TIM_OnePulse_Stop_IT+0x7a>
 800dc04:	6a19      	ldr	r1, [r3, #32]
 800dc06:	f240 4244 	movw	r2, #1092	; 0x444
 800dc0a:	4211      	tst	r1, r2
 800dc0c:	d103      	bne.n	800dc16 <HAL_TIM_OnePulse_Stop_IT+0x7a>
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	601a      	str	r2, [r3, #0]
}
 800dc16:	2000      	movs	r0, #0
 800dc18:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	e7dd      	b.n	800dbda <HAL_TIM_OnePulse_Stop_IT+0x3e>
 800dc1e:	2201      	movs	r2, #1
 800dc20:	e7db      	b.n	800dbda <HAL_TIM_OnePulse_Stop_IT+0x3e>
 800dc22:	bf00      	nop
 800dc24:	40010000 	.word	0x40010000

0800dc28 <HAL_TIM_Encoder_Start>:
{
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	4604      	mov	r4, r0
  switch (Channel)
 800dc2c:	b161      	cbz	r1, 800dc48 <HAL_TIM_Encoder_Start+0x20>
 800dc2e:	2904      	cmp	r1, #4
 800dc30:	d016      	beq.n	800dc60 <HAL_TIM_Encoder_Start+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc32:	2201      	movs	r2, #1
 800dc34:	2100      	movs	r1, #0
 800dc36:	6800      	ldr	r0, [r0, #0]
 800dc38:	f7ff f969 	bl	800cf0e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	2104      	movs	r1, #4
 800dc40:	6820      	ldr	r0, [r4, #0]
 800dc42:	f7ff f964 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800dc46:	e004      	b.n	800dc52 <HAL_TIM_Encoder_Start+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc48:	2201      	movs	r2, #1
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	6800      	ldr	r0, [r0, #0]
 800dc4e:	f7ff f95e 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800dc52:	6822      	ldr	r2, [r4, #0]
 800dc54:	6813      	ldr	r3, [r2, #0]
 800dc56:	f043 0301 	orr.w	r3, r3, #1
 800dc5a:	6013      	str	r3, [r2, #0]
}
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc60:	2201      	movs	r2, #1
 800dc62:	2104      	movs	r1, #4
 800dc64:	6800      	ldr	r0, [r0, #0]
 800dc66:	f7ff f952 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800dc6a:	e7f2      	b.n	800dc52 <HAL_TIM_Encoder_Start+0x2a>

0800dc6c <HAL_TIM_Encoder_Stop>:
{
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	4604      	mov	r4, r0
  switch (Channel)
 800dc70:	b161      	cbz	r1, 800dc8c <HAL_TIM_Encoder_Stop+0x20>
 800dc72:	2904      	cmp	r1, #4
 800dc74:	d020      	beq.n	800dcb8 <HAL_TIM_Encoder_Stop+0x4c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dc76:	2200      	movs	r2, #0
 800dc78:	4611      	mov	r1, r2
 800dc7a:	6800      	ldr	r0, [r0, #0]
 800dc7c:	f7ff f947 	bl	800cf0e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dc80:	2200      	movs	r2, #0
 800dc82:	2104      	movs	r1, #4
 800dc84:	6820      	ldr	r0, [r4, #0]
 800dc86:	f7ff f942 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800dc8a:	e004      	b.n	800dc96 <HAL_TIM_Encoder_Stop+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4611      	mov	r1, r2
 800dc90:	6800      	ldr	r0, [r0, #0]
 800dc92:	f7ff f93c 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	6a19      	ldr	r1, [r3, #32]
 800dc9a:	f241 1211 	movw	r2, #4369	; 0x1111
 800dc9e:	4211      	tst	r1, r2
 800dca0:	d108      	bne.n	800dcb4 <HAL_TIM_Encoder_Stop+0x48>
 800dca2:	6a19      	ldr	r1, [r3, #32]
 800dca4:	f240 4244 	movw	r2, #1092	; 0x444
 800dca8:	4211      	tst	r1, r2
 800dcaa:	d103      	bne.n	800dcb4 <HAL_TIM_Encoder_Stop+0x48>
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	f022 0201 	bic.w	r2, r2, #1
 800dcb2:	601a      	str	r2, [r3, #0]
}
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2104      	movs	r1, #4
 800dcbc:	6800      	ldr	r0, [r0, #0]
 800dcbe:	f7ff f926 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800dcc2:	e7e8      	b.n	800dc96 <HAL_TIM_Encoder_Stop+0x2a>

0800dcc4 <HAL_TIM_Encoder_Start_IT>:
{
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	4604      	mov	r4, r0
  switch (Channel)
 800dcc8:	b1b1      	cbz	r1, 800dcf8 <HAL_TIM_Encoder_Start_IT+0x34>
 800dcca:	2904      	cmp	r1, #4
 800dccc:	d025      	beq.n	800dd1a <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcce:	2201      	movs	r2, #1
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	6800      	ldr	r0, [r0, #0]
 800dcd4:	f7ff f91b 	bl	800cf0e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcd8:	2201      	movs	r2, #1
 800dcda:	2104      	movs	r1, #4
 800dcdc:	6820      	ldr	r0, [r4, #0]
 800dcde:	f7ff f916 	bl	800cf0e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	68d3      	ldr	r3, [r2, #12]
 800dce6:	f043 0302 	orr.w	r3, r3, #2
 800dcea:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dcec:	6822      	ldr	r2, [r4, #0]
 800dcee:	68d3      	ldr	r3, [r2, #12]
 800dcf0:	f043 0304 	orr.w	r3, r3, #4
 800dcf4:	60d3      	str	r3, [r2, #12]
      break;
 800dcf6:	e009      	b.n	800dd0c <HAL_TIM_Encoder_Start_IT+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	f7ff f906 	bl	800cf0e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dd02:	6822      	ldr	r2, [r4, #0]
 800dd04:	68d3      	ldr	r3, [r2, #12]
 800dd06:	f043 0302 	orr.w	r3, r3, #2
 800dd0a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800dd0c:	6822      	ldr	r2, [r4, #0]
 800dd0e:	6813      	ldr	r3, [r2, #0]
 800dd10:	f043 0301 	orr.w	r3, r3, #1
 800dd14:	6013      	str	r3, [r2, #0]
}
 800dd16:	2000      	movs	r0, #0
 800dd18:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	2104      	movs	r1, #4
 800dd1e:	6800      	ldr	r0, [r0, #0]
 800dd20:	f7ff f8f5 	bl	800cf0e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dd24:	6822      	ldr	r2, [r4, #0]
 800dd26:	68d3      	ldr	r3, [r2, #12]
 800dd28:	f043 0304 	orr.w	r3, r3, #4
 800dd2c:	60d3      	str	r3, [r2, #12]
      break;
 800dd2e:	e7ed      	b.n	800dd0c <HAL_TIM_Encoder_Start_IT+0x48>

0800dd30 <HAL_TIM_Encoder_Stop_IT>:
{
 800dd30:	b510      	push	{r4, lr}
 800dd32:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800dd34:	b349      	cbz	r1, 800dd8a <HAL_TIM_Encoder_Stop_IT+0x5a>
  else if (Channel == TIM_CHANNEL_2)
 800dd36:	2904      	cmp	r1, #4
 800dd38:	d032      	beq.n	800dda0 <HAL_TIM_Encoder_Stop_IT+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	6800      	ldr	r0, [r0, #0]
 800dd40:	f7ff f8e5 	bl	800cf0e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dd44:	2200      	movs	r2, #0
 800dd46:	2104      	movs	r1, #4
 800dd48:	6820      	ldr	r0, [r4, #0]
 800dd4a:	f7ff f8e0 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dd4e:	6822      	ldr	r2, [r4, #0]
 800dd50:	68d3      	ldr	r3, [r2, #12]
 800dd52:	f023 0302 	bic.w	r3, r3, #2
 800dd56:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dd58:	6822      	ldr	r2, [r4, #0]
 800dd5a:	68d3      	ldr	r3, [r2, #12]
 800dd5c:	f023 0304 	bic.w	r3, r3, #4
 800dd60:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	6a19      	ldr	r1, [r3, #32]
 800dd66:	f241 1211 	movw	r2, #4369	; 0x1111
 800dd6a:	4211      	tst	r1, r2
 800dd6c:	d108      	bne.n	800dd80 <HAL_TIM_Encoder_Stop_IT+0x50>
 800dd6e:	6a19      	ldr	r1, [r3, #32]
 800dd70:	f240 4244 	movw	r2, #1092	; 0x444
 800dd74:	4211      	tst	r1, r2
 800dd76:	d103      	bne.n	800dd80 <HAL_TIM_Encoder_Stop_IT+0x50>
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	f022 0201 	bic.w	r2, r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800dd80:	2301      	movs	r3, #1
 800dd82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dd86:	2000      	movs	r0, #0
 800dd88:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	6800      	ldr	r0, [r0, #0]
 800dd90:	f7ff f8bd 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dd94:	6822      	ldr	r2, [r4, #0]
 800dd96:	68d3      	ldr	r3, [r2, #12]
 800dd98:	f023 0302 	bic.w	r3, r3, #2
 800dd9c:	60d3      	str	r3, [r2, #12]
 800dd9e:	e7e0      	b.n	800dd62 <HAL_TIM_Encoder_Stop_IT+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dda0:	2200      	movs	r2, #0
 800dda2:	2104      	movs	r1, #4
 800dda4:	6800      	ldr	r0, [r0, #0]
 800dda6:	f7ff f8b2 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ddaa:	6822      	ldr	r2, [r4, #0]
 800ddac:	68d3      	ldr	r3, [r2, #12]
 800ddae:	f023 0304 	bic.w	r3, r3, #4
 800ddb2:	60d3      	str	r3, [r2, #12]
 800ddb4:	e7d5      	b.n	800dd62 <HAL_TIM_Encoder_Stop_IT+0x32>

0800ddb6 <HAL_TIM_Encoder_Start_DMA>:
{
 800ddb6:	b570      	push	{r4, r5, r6, lr}
 800ddb8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if (htim->State == HAL_TIM_STATE_BUSY)
 800ddbc:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ddc0:	b2e4      	uxtb	r4, r4
 800ddc2:	2c02      	cmp	r4, #2
 800ddc4:	f000 809f 	beq.w	800df06 <HAL_TIM_Encoder_Start_DMA+0x150>
  else if (htim->State == HAL_TIM_STATE_READY)
 800ddc8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ddcc:	b2e4      	uxtb	r4, r4
 800ddce:	2c01      	cmp	r4, #1
 800ddd0:	d008      	beq.n	800dde4 <HAL_TIM_Encoder_Start_DMA+0x2e>
 800ddd2:	461e      	mov	r6, r3
 800ddd4:	4604      	mov	r4, r0
  switch (Channel)
 800ddd6:	2904      	cmp	r1, #4
 800ddd8:	d031      	beq.n	800de3e <HAL_TIM_Encoder_Start_DMA+0x88>
 800ddda:	293c      	cmp	r1, #60	; 0x3c
 800dddc:	d053      	beq.n	800de86 <HAL_TIM_Encoder_Start_DMA+0xd0>
 800ddde:	b159      	cbz	r1, 800ddf8 <HAL_TIM_Encoder_Start_DMA+0x42>
  return HAL_OK;
 800dde0:	2500      	movs	r5, #0
 800dde2:	e091      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800dde4:	b122      	cbz	r2, 800ddf0 <HAL_TIM_Encoder_Start_DMA+0x3a>
 800dde6:	b11b      	cbz	r3, 800ddf0 <HAL_TIM_Encoder_Start_DMA+0x3a>
      htim->State = HAL_TIM_STATE_BUSY;
 800dde8:	2402      	movs	r4, #2
 800ddea:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800ddee:	e7f0      	b.n	800ddd2 <HAL_TIM_Encoder_Start_DMA+0x1c>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800ddf0:	2d00      	cmp	r5, #0
 800ddf2:	d0f9      	beq.n	800dde8 <HAL_TIM_Encoder_Start_DMA+0x32>
      return HAL_ERROR;
 800ddf4:	2501      	movs	r5, #1
 800ddf6:	e087      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddfa:	4944      	ldr	r1, [pc, #272]	; (800df0c <HAL_TIM_Encoder_Start_DMA+0x156>)
 800ddfc:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddfe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de00:	4943      	ldr	r1, [pc, #268]	; (800df10 <HAL_TIM_Encoder_Start_DMA+0x15a>)
 800de02:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800de04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de06:	4943      	ldr	r1, [pc, #268]	; (800df14 <HAL_TIM_Encoder_Start_DMA+0x15e>)
 800de08:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800de0a:	6801      	ldr	r1, [r0, #0]
 800de0c:	462b      	mov	r3, r5
 800de0e:	3134      	adds	r1, #52	; 0x34
 800de10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800de12:	f7f5 ff4a 	bl	8003caa <HAL_DMA_Start_IT>
 800de16:	4605      	mov	r5, r0
 800de18:	b108      	cbz	r0, 800de1e <HAL_TIM_Encoder_Start_DMA+0x68>
        return HAL_ERROR;
 800de1a:	2501      	movs	r5, #1
 800de1c:	e074      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800de1e:	6822      	ldr	r2, [r4, #0]
 800de20:	68d3      	ldr	r3, [r2, #12]
 800de22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de26:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800de28:	6822      	ldr	r2, [r4, #0]
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800de32:	2201      	movs	r2, #1
 800de34:	2100      	movs	r1, #0
 800de36:	6820      	ldr	r0, [r4, #0]
 800de38:	f7ff f869 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800de3c:	e064      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800de3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de40:	4a32      	ldr	r2, [pc, #200]	; (800df0c <HAL_TIM_Encoder_Start_DMA+0x156>)
 800de42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de46:	4a32      	ldr	r2, [pc, #200]	; (800df10 <HAL_TIM_Encoder_Start_DMA+0x15a>)
 800de48:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800de4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de4c:	4a31      	ldr	r2, [pc, #196]	; (800df14 <HAL_TIM_Encoder_Start_DMA+0x15e>)
 800de4e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800de50:	6801      	ldr	r1, [r0, #0]
 800de52:	462b      	mov	r3, r5
 800de54:	4632      	mov	r2, r6
 800de56:	3138      	adds	r1, #56	; 0x38
 800de58:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800de5a:	f7f5 ff26 	bl	8003caa <HAL_DMA_Start_IT>
 800de5e:	4605      	mov	r5, r0
 800de60:	b108      	cbz	r0, 800de66 <HAL_TIM_Encoder_Start_DMA+0xb0>
        return HAL_ERROR;
 800de62:	2501      	movs	r5, #1
 800de64:	e050      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800de66:	6822      	ldr	r2, [r4, #0]
 800de68:	68d3      	ldr	r3, [r2, #12]
 800de6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800de6e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800de70:	6822      	ldr	r2, [r4, #0]
 800de72:	6813      	ldr	r3, [r2, #0]
 800de74:	f043 0301 	orr.w	r3, r3, #1
 800de78:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800de7a:	2201      	movs	r2, #1
 800de7c:	2104      	movs	r1, #4
 800de7e:	6820      	ldr	r0, [r4, #0]
 800de80:	f7ff f845 	bl	800cf0e <TIM_CCxChannelCmd>
      break;
 800de84:	e040      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800de86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de88:	4920      	ldr	r1, [pc, #128]	; (800df0c <HAL_TIM_Encoder_Start_DMA+0x156>)
 800de8a:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de8e:	4920      	ldr	r1, [pc, #128]	; (800df10 <HAL_TIM_Encoder_Start_DMA+0x15a>)
 800de90:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800de92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de94:	491f      	ldr	r1, [pc, #124]	; (800df14 <HAL_TIM_Encoder_Start_DMA+0x15e>)
 800de96:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800de98:	6801      	ldr	r1, [r0, #0]
 800de9a:	462b      	mov	r3, r5
 800de9c:	3134      	adds	r1, #52	; 0x34
 800de9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dea0:	f7f5 ff03 	bl	8003caa <HAL_DMA_Start_IT>
 800dea4:	b108      	cbz	r0, 800deaa <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 800dea6:	2501      	movs	r5, #1
 800dea8:	e02e      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800deaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800deac:	4a17      	ldr	r2, [pc, #92]	; (800df0c <HAL_TIM_Encoder_Start_DMA+0x156>)
 800deae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800deb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800deb2:	4a17      	ldr	r2, [pc, #92]	; (800df10 <HAL_TIM_Encoder_Start_DMA+0x15a>)
 800deb4:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800deb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800deb8:	4a16      	ldr	r2, [pc, #88]	; (800df14 <HAL_TIM_Encoder_Start_DMA+0x15e>)
 800deba:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800debc:	6821      	ldr	r1, [r4, #0]
 800debe:	462b      	mov	r3, r5
 800dec0:	4632      	mov	r2, r6
 800dec2:	3138      	adds	r1, #56	; 0x38
 800dec4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dec6:	f7f5 fef0 	bl	8003caa <HAL_DMA_Start_IT>
 800deca:	4605      	mov	r5, r0
 800decc:	b108      	cbz	r0, 800ded2 <HAL_TIM_Encoder_Start_DMA+0x11c>
        return HAL_ERROR;
 800dece:	2501      	movs	r5, #1
 800ded0:	e01a      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE(htim);
 800ded2:	6822      	ldr	r2, [r4, #0]
 800ded4:	6813      	ldr	r3, [r2, #0]
 800ded6:	f043 0301 	orr.w	r3, r3, #1
 800deda:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dedc:	2201      	movs	r2, #1
 800dede:	2100      	movs	r1, #0
 800dee0:	6820      	ldr	r0, [r4, #0]
 800dee2:	f7ff f814 	bl	800cf0e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dee6:	2201      	movs	r2, #1
 800dee8:	2104      	movs	r1, #4
 800deea:	6820      	ldr	r0, [r4, #0]
 800deec:	f7ff f80f 	bl	800cf0e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800def0:	6822      	ldr	r2, [r4, #0]
 800def2:	68d3      	ldr	r3, [r2, #12]
 800def4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800def8:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800defa:	6822      	ldr	r2, [r4, #0]
 800defc:	68d3      	ldr	r3, [r2, #12]
 800defe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df02:	60d3      	str	r3, [r2, #12]
      break;
 800df04:	e000      	b.n	800df08 <HAL_TIM_Encoder_Start_DMA+0x152>
    return HAL_BUSY;
 800df06:	2502      	movs	r5, #2
}
 800df08:	4628      	mov	r0, r5
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	0800c29b 	.word	0x0800c29b
 800df10:	0800c2e3 	.word	0x0800c2e3
 800df14:	0800c559 	.word	0x0800c559

0800df18 <HAL_TIM_Encoder_Stop_DMA>:
{
 800df18:	b510      	push	{r4, lr}
 800df1a:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800df1c:	2900      	cmp	r1, #0
 800df1e:	d02f      	beq.n	800df80 <HAL_TIM_Encoder_Stop_DMA+0x68>
  else if (Channel == TIM_CHANNEL_2)
 800df20:	2904      	cmp	r1, #4
 800df22:	d03b      	beq.n	800df9c <HAL_TIM_Encoder_Stop_DMA+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800df24:	2200      	movs	r2, #0
 800df26:	4611      	mov	r1, r2
 800df28:	6800      	ldr	r0, [r0, #0]
 800df2a:	f7fe fff0 	bl	800cf0e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800df2e:	2200      	movs	r2, #0
 800df30:	2104      	movs	r1, #4
 800df32:	6820      	ldr	r0, [r4, #0]
 800df34:	f7fe ffeb 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800df38:	6822      	ldr	r2, [r4, #0]
 800df3a:	68d3      	ldr	r3, [r2, #12]
 800df3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df40:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800df42:	6822      	ldr	r2, [r4, #0]
 800df44:	68d3      	ldr	r3, [r2, #12]
 800df46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df4a:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800df4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800df4e:	f7f5 ff2b 	bl	8003da8 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800df52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800df54:	f7f5 ff28 	bl	8003da8 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	6a19      	ldr	r1, [r3, #32]
 800df5c:	f241 1211 	movw	r2, #4369	; 0x1111
 800df60:	4211      	tst	r1, r2
 800df62:	d108      	bne.n	800df76 <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800df64:	6a19      	ldr	r1, [r3, #32]
 800df66:	f240 4244 	movw	r2, #1092	; 0x444
 800df6a:	4211      	tst	r1, r2
 800df6c:	d103      	bne.n	800df76 <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	f022 0201 	bic.w	r2, r2, #1
 800df74:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800df76:	2301      	movs	r3, #1
 800df78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800df7c:	2000      	movs	r0, #0
 800df7e:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800df80:	2200      	movs	r2, #0
 800df82:	4611      	mov	r1, r2
 800df84:	6800      	ldr	r0, [r0, #0]
 800df86:	f7fe ffc2 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800df8a:	6822      	ldr	r2, [r4, #0]
 800df8c:	68d3      	ldr	r3, [r2, #12]
 800df8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df92:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800df94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800df96:	f7f5 ff07 	bl	8003da8 <HAL_DMA_Abort_IT>
 800df9a:	e7dd      	b.n	800df58 <HAL_TIM_Encoder_Stop_DMA+0x40>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800df9c:	2200      	movs	r2, #0
 800df9e:	2104      	movs	r1, #4
 800dfa0:	6800      	ldr	r0, [r0, #0]
 800dfa2:	f7fe ffb4 	bl	800cf0e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dfa6:	6822      	ldr	r2, [r4, #0]
 800dfa8:	68d3      	ldr	r3, [r2, #12]
 800dfaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfae:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dfb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dfb2:	f7f5 fef9 	bl	8003da8 <HAL_DMA_Abort_IT>
 800dfb6:	e7cf      	b.n	800df58 <HAL_TIM_Encoder_Stop_DMA+0x40>

0800dfb8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dfb8:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dfba:	f001 011f 	and.w	r1, r1, #31
 800dfbe:	2304      	movs	r3, #4
 800dfc0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800dfc4:	6a03      	ldr	r3, [r0, #32]
 800dfc6:	ea23 0304 	bic.w	r3, r3, r4
 800dfca:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dfcc:	6a03      	ldr	r3, [r0, #32]
 800dfce:	408a      	lsls	r2, r1
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	6203      	str	r3, [r0, #32]
}
 800dfd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <HAL_TIMEx_HallSensor_MspInit>:
{
 800dfda:	4770      	bx	lr

0800dfdc <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d05a      	beq.n	800e096 <HAL_TIMEx_HallSensor_Init+0xba>
{
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460e      	mov	r6, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800dfe8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d04d      	beq.n	800e08c <HAL_TIMEx_HallSensor_Init+0xb0>
  htim->State = HAL_TIM_STATE_BUSY;
 800dff0:	2302      	movs	r3, #2
 800dff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dff6:	1d21      	adds	r1, r4, #4
 800dff8:	6820      	ldr	r0, [r4, #0]
 800dffa:	f7fe fac7 	bl	800c58c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800dffe:	68b3      	ldr	r3, [r6, #8]
 800e000:	2203      	movs	r2, #3
 800e002:	6831      	ldr	r1, [r6, #0]
 800e004:	6820      	ldr	r0, [r4, #0]
 800e006:	f7fe fcd4 	bl	800c9b2 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e00a:	6822      	ldr	r2, [r4, #0]
 800e00c:	6993      	ldr	r3, [r2, #24]
 800e00e:	f023 030c 	bic.w	r3, r3, #12
 800e012:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800e014:	6822      	ldr	r2, [r4, #0]
 800e016:	6993      	ldr	r3, [r2, #24]
 800e018:	6871      	ldr	r1, [r6, #4]
 800e01a:	430b      	orrs	r3, r1
 800e01c:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800e01e:	6822      	ldr	r2, [r4, #0]
 800e020:	6853      	ldr	r3, [r2, #4]
 800e022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e026:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e028:	6822      	ldr	r2, [r4, #0]
 800e02a:	6893      	ldr	r3, [r2, #8]
 800e02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e030:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800e032:	6822      	ldr	r2, [r4, #0]
 800e034:	6893      	ldr	r3, [r2, #8]
 800e036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800e03c:	6822      	ldr	r2, [r4, #0]
 800e03e:	6893      	ldr	r3, [r2, #8]
 800e040:	f023 0307 	bic.w	r3, r3, #7
 800e044:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800e046:	6822      	ldr	r2, [r4, #0]
 800e048:	6893      	ldr	r3, [r2, #8]
 800e04a:	f043 0304 	orr.w	r3, r3, #4
 800e04e:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800e050:	2500      	movs	r5, #0
 800e052:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e054:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800e056:	2370      	movs	r3, #112	; 0x70
 800e058:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e05a:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e05c:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e05e:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800e060:	68f3      	ldr	r3, [r6, #12]
 800e062:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800e064:	a901      	add	r1, sp, #4
 800e066:	6820      	ldr	r0, [r4, #0]
 800e068:	f7fe fbcb 	bl	800c802 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800e06c:	6822      	ldr	r2, [r4, #0]
 800e06e:	6853      	ldr	r3, [r2, #4]
 800e070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e074:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800e076:	6822      	ldr	r2, [r4, #0]
 800e078:	6853      	ldr	r3, [r2, #4]
 800e07a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800e07e:	6053      	str	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 800e080:	2301      	movs	r3, #1
 800e082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e086:	4628      	mov	r0, r5
}
 800e088:	b008      	add	sp, #32
 800e08a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800e08c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800e090:	f7ff ffa3 	bl	800dfda <HAL_TIMEx_HallSensor_MspInit>
 800e094:	e7ac      	b.n	800dff0 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 800e096:	2001      	movs	r0, #1
 800e098:	4770      	bx	lr

0800e09a <HAL_TIMEx_HallSensor_MspDeInit>:
{
 800e09a:	4770      	bx	lr

0800e09c <HAL_TIMEx_HallSensor_DeInit>:
{
 800e09c:	b510      	push	{r4, lr}
 800e09e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e0a6:	6803      	ldr	r3, [r0, #0]
 800e0a8:	6a19      	ldr	r1, [r3, #32]
 800e0aa:	f241 1211 	movw	r2, #4369	; 0x1111
 800e0ae:	4211      	tst	r1, r2
 800e0b0:	d108      	bne.n	800e0c4 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e0b2:	6a19      	ldr	r1, [r3, #32]
 800e0b4:	f240 4244 	movw	r2, #1092	; 0x444
 800e0b8:	4211      	tst	r1, r2
 800e0ba:	d103      	bne.n	800e0c4 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	f022 0201 	bic.w	r2, r2, #1
 800e0c2:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7ff ffe8 	bl	800e09a <HAL_TIMEx_HallSensor_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e0d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e0d4:	bd10      	pop	{r4, pc}

0800e0d6 <HAL_TIMEx_HallSensor_Start>:
{
 800e0d6:	b510      	push	{r4, lr}
 800e0d8:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e0da:	2201      	movs	r2, #1
 800e0dc:	2100      	movs	r1, #0
 800e0de:	6800      	ldr	r0, [r0, #0]
 800e0e0:	f7fe ff15 	bl	800cf0e <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	6893      	ldr	r3, [r2, #8]
 800e0e8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ec:	2b06      	cmp	r3, #6
 800e0ee:	d003      	beq.n	800e0f8 <HAL_TIMEx_HallSensor_Start+0x22>
    __HAL_TIM_ENABLE(htim);
 800e0f0:	6813      	ldr	r3, [r2, #0]
 800e0f2:	f043 0301 	orr.w	r3, r3, #1
 800e0f6:	6013      	str	r3, [r2, #0]
}
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	bd10      	pop	{r4, pc}

0800e0fc <HAL_TIMEx_HallSensor_Stop>:
{
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e100:	2200      	movs	r2, #0
 800e102:	4611      	mov	r1, r2
 800e104:	6800      	ldr	r0, [r0, #0]
 800e106:	f7fe ff02 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	6a19      	ldr	r1, [r3, #32]
 800e10e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e112:	4211      	tst	r1, r2
 800e114:	d108      	bne.n	800e128 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e116:	6a19      	ldr	r1, [r3, #32]
 800e118:	f240 4244 	movw	r2, #1092	; 0x444
 800e11c:	4211      	tst	r1, r2
 800e11e:	d103      	bne.n	800e128 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	f022 0201 	bic.w	r2, r2, #1
 800e126:	601a      	str	r2, [r3, #0]
}
 800e128:	2000      	movs	r0, #0
 800e12a:	bd10      	pop	{r4, pc}

0800e12c <HAL_TIMEx_HallSensor_Start_IT>:
{
 800e12c:	b510      	push	{r4, lr}
 800e12e:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e130:	6802      	ldr	r2, [r0, #0]
 800e132:	68d3      	ldr	r3, [r2, #12]
 800e134:	f043 0302 	orr.w	r3, r3, #2
 800e138:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e13a:	2201      	movs	r2, #1
 800e13c:	2100      	movs	r1, #0
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	f7fe fee5 	bl	800cf0e <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e144:	6822      	ldr	r2, [r4, #0]
 800e146:	6893      	ldr	r3, [r2, #8]
 800e148:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e14c:	2b06      	cmp	r3, #6
 800e14e:	d003      	beq.n	800e158 <HAL_TIMEx_HallSensor_Start_IT+0x2c>
    __HAL_TIM_ENABLE(htim);
 800e150:	6813      	ldr	r3, [r2, #0]
 800e152:	f043 0301 	orr.w	r3, r3, #1
 800e156:	6013      	str	r3, [r2, #0]
}
 800e158:	2000      	movs	r0, #0
 800e15a:	bd10      	pop	{r4, pc}

0800e15c <HAL_TIMEx_HallSensor_Stop_IT>:
{
 800e15c:	b510      	push	{r4, lr}
 800e15e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e160:	2200      	movs	r2, #0
 800e162:	4611      	mov	r1, r2
 800e164:	6800      	ldr	r0, [r0, #0]
 800e166:	f7fe fed2 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e16a:	6822      	ldr	r2, [r4, #0]
 800e16c:	68d3      	ldr	r3, [r2, #12]
 800e16e:	f023 0302 	bic.w	r3, r3, #2
 800e172:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	6a19      	ldr	r1, [r3, #32]
 800e178:	f241 1211 	movw	r2, #4369	; 0x1111
 800e17c:	4211      	tst	r1, r2
 800e17e:	d108      	bne.n	800e192 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e180:	6a19      	ldr	r1, [r3, #32]
 800e182:	f240 4244 	movw	r2, #1092	; 0x444
 800e186:	4211      	tst	r1, r2
 800e188:	d103      	bne.n	800e192 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	f022 0201 	bic.w	r2, r2, #1
 800e190:	601a      	str	r2, [r3, #0]
}
 800e192:	2000      	movs	r0, #0
 800e194:	bd10      	pop	{r4, pc}

0800e196 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 800e196:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e198:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e19c:	b2ed      	uxtb	r5, r5
 800e19e:	2d02      	cmp	r5, #2
 800e1a0:	d034      	beq.n	800e20c <HAL_TIMEx_HallSensor_Start_DMA+0x76>
  else if (htim->State == HAL_TIM_STATE_READY)
 800e1a2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e1a6:	b2e4      	uxtb	r4, r4
 800e1a8:	2c01      	cmp	r4, #1
 800e1aa:	d029      	beq.n	800e200 <HAL_TIMEx_HallSensor_Start_DMA+0x6a>
 800e1ac:	4616      	mov	r6, r2
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	6800      	ldr	r0, [r0, #0]
 800e1b8:	f7fe fea9 	bl	800cf0e <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1be:	4a17      	ldr	r2, [pc, #92]	; (800e21c <HAL_TIMEx_HallSensor_Start_DMA+0x86>)
 800e1c0:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e1c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1c4:	4a16      	ldr	r2, [pc, #88]	; (800e220 <HAL_TIMEx_HallSensor_Start_DMA+0x8a>)
 800e1c6:	641a      	str	r2, [r3, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1ca:	4a16      	ldr	r2, [pc, #88]	; (800e224 <HAL_TIMEx_HallSensor_Start_DMA+0x8e>)
 800e1cc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800e1ce:	6821      	ldr	r1, [r4, #0]
 800e1d0:	4633      	mov	r3, r6
 800e1d2:	462a      	mov	r2, r5
 800e1d4:	3134      	adds	r1, #52	; 0x34
 800e1d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e1d8:	f7f5 fd67 	bl	8003caa <HAL_DMA_Start_IT>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	b9d0      	cbnz	r0, 800e216 <HAL_TIMEx_HallSensor_Start_DMA+0x80>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e1e0:	6821      	ldr	r1, [r4, #0]
 800e1e2:	68ca      	ldr	r2, [r1, #12]
 800e1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1e8:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1ea:	6821      	ldr	r1, [r4, #0]
 800e1ec:	688a      	ldr	r2, [r1, #8]
 800e1ee:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1f2:	2a06      	cmp	r2, #6
 800e1f4:	d00b      	beq.n	800e20e <HAL_TIMEx_HallSensor_Start_DMA+0x78>
    __HAL_TIM_ENABLE(htim);
 800e1f6:	680a      	ldr	r2, [r1, #0]
 800e1f8:	f042 0201 	orr.w	r2, r2, #1
 800e1fc:	600a      	str	r2, [r1, #0]
 800e1fe:	e006      	b.n	800e20e <HAL_TIMEx_HallSensor_Start_DMA+0x78>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e200:	b901      	cbnz	r1, 800e204 <HAL_TIMEx_HallSensor_Start_DMA+0x6e>
 800e202:	b932      	cbnz	r2, 800e212 <HAL_TIMEx_HallSensor_Start_DMA+0x7c>
      htim->State = HAL_TIM_STATE_BUSY;
 800e204:	2302      	movs	r3, #2
 800e206:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800e20a:	e7cf      	b.n	800e1ac <HAL_TIMEx_HallSensor_Start_DMA+0x16>
    return HAL_BUSY;
 800e20c:	2302      	movs	r3, #2
}
 800e20e:	4618      	mov	r0, r3
 800e210:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e7fb      	b.n	800e20e <HAL_TIMEx_HallSensor_Start_DMA+0x78>
    return HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	e7f9      	b.n	800e20e <HAL_TIMEx_HallSensor_Start_DMA+0x78>
 800e21a:	bf00      	nop
 800e21c:	0800c29b 	.word	0x0800c29b
 800e220:	0800c2e3 	.word	0x0800c2e3
 800e224:	0800c559 	.word	0x0800c559

0800e228 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 800e228:	b510      	push	{r4, lr}
 800e22a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e22c:	2200      	movs	r2, #0
 800e22e:	4611      	mov	r1, r2
 800e230:	6800      	ldr	r0, [r0, #0]
 800e232:	f7fe fe6c 	bl	800cf0e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e236:	6822      	ldr	r2, [r4, #0]
 800e238:	68d3      	ldr	r3, [r2, #12]
 800e23a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e23e:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e240:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e242:	f7f5 fdb1 	bl	8003da8 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	6a19      	ldr	r1, [r3, #32]
 800e24a:	f241 1211 	movw	r2, #4369	; 0x1111
 800e24e:	4211      	tst	r1, r2
 800e250:	d108      	bne.n	800e264 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e252:	6a19      	ldr	r1, [r3, #32]
 800e254:	f240 4244 	movw	r2, #1092	; 0x444
 800e258:	4211      	tst	r1, r2
 800e25a:	d103      	bne.n	800e264 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	f022 0201 	bic.w	r2, r2, #1
 800e262:	601a      	str	r2, [r3, #0]
}
 800e264:	2000      	movs	r0, #0
 800e266:	bd10      	pop	{r4, pc}

0800e268 <HAL_TIMEx_OCN_Start>:
{
 800e268:	b510      	push	{r4, lr}
 800e26a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e26c:	2204      	movs	r2, #4
 800e26e:	6800      	ldr	r0, [r0, #0]
 800e270:	f7ff fea2 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e274:	6822      	ldr	r2, [r4, #0]
 800e276:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e27c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e27e:	6822      	ldr	r2, [r4, #0]
 800e280:	6893      	ldr	r3, [r2, #8]
 800e282:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e286:	2b06      	cmp	r3, #6
 800e288:	d003      	beq.n	800e292 <HAL_TIMEx_OCN_Start+0x2a>
    __HAL_TIM_ENABLE(htim);
 800e28a:	6813      	ldr	r3, [r2, #0]
 800e28c:	f043 0301 	orr.w	r3, r3, #1
 800e290:	6013      	str	r3, [r2, #0]
}
 800e292:	2000      	movs	r0, #0
 800e294:	bd10      	pop	{r4, pc}

0800e296 <HAL_TIMEx_OCN_Stop>:
{
 800e296:	b510      	push	{r4, lr}
 800e298:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e29a:	2200      	movs	r2, #0
 800e29c:	6800      	ldr	r0, [r0, #0]
 800e29e:	f7ff fe8b 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	6a19      	ldr	r1, [r3, #32]
 800e2a6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e2aa:	4211      	tst	r1, r2
 800e2ac:	d108      	bne.n	800e2c0 <HAL_TIMEx_OCN_Stop+0x2a>
 800e2ae:	6a19      	ldr	r1, [r3, #32]
 800e2b0:	f240 4244 	movw	r2, #1092	; 0x444
 800e2b4:	4211      	tst	r1, r2
 800e2b6:	d103      	bne.n	800e2c0 <HAL_TIMEx_OCN_Stop+0x2a>
 800e2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e2be:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	6a19      	ldr	r1, [r3, #32]
 800e2c4:	f241 1211 	movw	r2, #4369	; 0x1111
 800e2c8:	4211      	tst	r1, r2
 800e2ca:	d108      	bne.n	800e2de <HAL_TIMEx_OCN_Stop+0x48>
 800e2cc:	6a19      	ldr	r1, [r3, #32]
 800e2ce:	f240 4244 	movw	r2, #1092	; 0x444
 800e2d2:	4211      	tst	r1, r2
 800e2d4:	d103      	bne.n	800e2de <HAL_TIMEx_OCN_Stop+0x48>
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	f022 0201 	bic.w	r2, r2, #1
 800e2dc:	601a      	str	r2, [r3, #0]
}
 800e2de:	2000      	movs	r0, #0
 800e2e0:	bd10      	pop	{r4, pc}

0800e2e2 <HAL_TIMEx_OCN_Start_IT>:
{
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	4604      	mov	r4, r0
  switch (Channel)
 800e2e6:	2904      	cmp	r1, #4
 800e2e8:	d022      	beq.n	800e330 <HAL_TIMEx_OCN_Start_IT+0x4e>
 800e2ea:	2908      	cmp	r1, #8
 800e2ec:	d026      	beq.n	800e33c <HAL_TIMEx_OCN_Start_IT+0x5a>
 800e2ee:	b1c9      	cbz	r1, 800e324 <HAL_TIMEx_OCN_Start_IT+0x42>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e2f0:	6822      	ldr	r2, [r4, #0]
 800e2f2:	68d3      	ldr	r3, [r2, #12]
 800e2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f8:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	6820      	ldr	r0, [r4, #0]
 800e2fe:	f7ff fe5b 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e302:	6822      	ldr	r2, [r4, #0]
 800e304:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e30a:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	6893      	ldr	r3, [r2, #8]
 800e310:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e314:	2b06      	cmp	r3, #6
 800e316:	d003      	beq.n	800e320 <HAL_TIMEx_OCN_Start_IT+0x3e>
    __HAL_TIM_ENABLE(htim);
 800e318:	6813      	ldr	r3, [r2, #0]
 800e31a:	f043 0301 	orr.w	r3, r3, #1
 800e31e:	6013      	str	r3, [r2, #0]
}
 800e320:	2000      	movs	r0, #0
 800e322:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e324:	6802      	ldr	r2, [r0, #0]
 800e326:	68d3      	ldr	r3, [r2, #12]
 800e328:	f043 0302 	orr.w	r3, r3, #2
 800e32c:	60d3      	str	r3, [r2, #12]
      break;
 800e32e:	e7df      	b.n	800e2f0 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e330:	6802      	ldr	r2, [r0, #0]
 800e332:	68d3      	ldr	r3, [r2, #12]
 800e334:	f043 0304 	orr.w	r3, r3, #4
 800e338:	60d3      	str	r3, [r2, #12]
      break;
 800e33a:	e7d9      	b.n	800e2f0 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e33c:	6802      	ldr	r2, [r0, #0]
 800e33e:	68d3      	ldr	r3, [r2, #12]
 800e340:	f043 0308 	orr.w	r3, r3, #8
 800e344:	60d3      	str	r3, [r2, #12]
      break;
 800e346:	e7d3      	b.n	800e2f0 <HAL_TIMEx_OCN_Start_IT+0xe>

0800e348 <HAL_TIMEx_OCN_Stop_IT>:
{
 800e348:	b510      	push	{r4, lr}
 800e34a:	4604      	mov	r4, r0
  switch (Channel)
 800e34c:	2904      	cmp	r1, #4
 800e34e:	d037      	beq.n	800e3c0 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800e350:	2908      	cmp	r1, #8
 800e352:	d03b      	beq.n	800e3cc <HAL_TIMEx_OCN_Stop_IT+0x84>
 800e354:	2900      	cmp	r1, #0
 800e356:	d02d      	beq.n	800e3b4 <HAL_TIMEx_OCN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e358:	2200      	movs	r2, #0
 800e35a:	6820      	ldr	r0, [r4, #0]
 800e35c:	f7ff fe2c 	bl	800dfb8 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e364:	f240 4244 	movw	r2, #1092	; 0x444
 800e368:	4211      	tst	r1, r2
 800e36a:	d103      	bne.n	800e374 <HAL_TIMEx_OCN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e372:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e374:	6823      	ldr	r3, [r4, #0]
 800e376:	6a19      	ldr	r1, [r3, #32]
 800e378:	f241 1211 	movw	r2, #4369	; 0x1111
 800e37c:	4211      	tst	r1, r2
 800e37e:	d108      	bne.n	800e392 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e380:	6a19      	ldr	r1, [r3, #32]
 800e382:	f240 4244 	movw	r2, #1092	; 0x444
 800e386:	4211      	tst	r1, r2
 800e388:	d103      	bne.n	800e392 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e38a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e38c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e390:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	6a19      	ldr	r1, [r3, #32]
 800e396:	f241 1211 	movw	r2, #4369	; 0x1111
 800e39a:	4211      	tst	r1, r2
 800e39c:	d108      	bne.n	800e3b0 <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e39e:	6a19      	ldr	r1, [r3, #32]
 800e3a0:	f240 4244 	movw	r2, #1092	; 0x444
 800e3a4:	4211      	tst	r1, r2
 800e3a6:	d103      	bne.n	800e3b0 <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	f022 0201 	bic.w	r2, r2, #1
 800e3ae:	601a      	str	r2, [r3, #0]
}
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e3b4:	6802      	ldr	r2, [r0, #0]
 800e3b6:	68d3      	ldr	r3, [r2, #12]
 800e3b8:	f023 0302 	bic.w	r3, r3, #2
 800e3bc:	60d3      	str	r3, [r2, #12]
      break;
 800e3be:	e7cb      	b.n	800e358 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e3c0:	6802      	ldr	r2, [r0, #0]
 800e3c2:	68d3      	ldr	r3, [r2, #12]
 800e3c4:	f023 0304 	bic.w	r3, r3, #4
 800e3c8:	60d3      	str	r3, [r2, #12]
      break;
 800e3ca:	e7c5      	b.n	800e358 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e3cc:	6802      	ldr	r2, [r0, #0]
 800e3ce:	68d3      	ldr	r3, [r2, #12]
 800e3d0:	f023 0308 	bic.w	r3, r3, #8
 800e3d4:	60d3      	str	r3, [r2, #12]
      break;
 800e3d6:	e7bf      	b.n	800e358 <HAL_TIMEx_OCN_Stop_IT+0x10>

0800e3d8 <HAL_TIMEx_OCN_Start_DMA>:
{
 800e3d8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e3da:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e3de:	b2ed      	uxtb	r5, r5
 800e3e0:	2d02      	cmp	r5, #2
 800e3e2:	d06c      	beq.n	800e4be <HAL_TIMEx_OCN_Start_DMA+0xe6>
  else if (htim->State == HAL_TIM_STATE_READY)
 800e3e4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e3e8:	b2e4      	uxtb	r4, r4
 800e3ea:	2c01      	cmp	r4, #1
 800e3ec:	d01d      	beq.n	800e42a <HAL_TIMEx_OCN_Start_DMA+0x52>
 800e3ee:	4616      	mov	r6, r2
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	4604      	mov	r4, r0
  switch (Channel)
 800e3f4:	2904      	cmp	r1, #4
 800e3f6:	d036      	beq.n	800e466 <HAL_TIMEx_OCN_Start_DMA+0x8e>
 800e3f8:	2908      	cmp	r1, #8
 800e3fa:	d04a      	beq.n	800e492 <HAL_TIMEx_OCN_Start_DMA+0xba>
 800e3fc:	b1e1      	cbz	r1, 800e438 <HAL_TIMEx_OCN_Start_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e3fe:	2204      	movs	r2, #4
 800e400:	4629      	mov	r1, r5
 800e402:	6820      	ldr	r0, [r4, #0]
 800e404:	f7ff fdd8 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e40c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e410:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e412:	6822      	ldr	r2, [r4, #0]
 800e414:	6893      	ldr	r3, [r2, #8]
 800e416:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e41a:	2b06      	cmp	r3, #6
 800e41c:	d059      	beq.n	800e4d2 <HAL_TIMEx_OCN_Start_DMA+0xfa>
    __HAL_TIM_ENABLE(htim);
 800e41e:	6813      	ldr	r3, [r2, #0]
 800e420:	f043 0301 	orr.w	r3, r3, #1
 800e424:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e426:	2000      	movs	r0, #0
 800e428:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e42a:	b90a      	cbnz	r2, 800e430 <HAL_TIMEx_OCN_Start_DMA+0x58>
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d148      	bne.n	800e4c2 <HAL_TIMEx_OCN_Start_DMA+0xea>
      htim->State = HAL_TIM_STATE_BUSY;
 800e430:	2402      	movs	r4, #2
 800e432:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e436:	e7da      	b.n	800e3ee <HAL_TIMEx_OCN_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e438:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e43a:	4927      	ldr	r1, [pc, #156]	; (800e4d8 <HAL_TIMEx_OCN_Start_DMA+0x100>)
 800e43c:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e43e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e440:	4926      	ldr	r1, [pc, #152]	; (800e4dc <HAL_TIMEx_OCN_Start_DMA+0x104>)
 800e442:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e444:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e446:	4926      	ldr	r1, [pc, #152]	; (800e4e0 <HAL_TIMEx_OCN_Start_DMA+0x108>)
 800e448:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e44a:	6802      	ldr	r2, [r0, #0]
 800e44c:	3234      	adds	r2, #52	; 0x34
 800e44e:	4631      	mov	r1, r6
 800e450:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e452:	f7f5 fc2a 	bl	8003caa <HAL_DMA_Start_IT>
 800e456:	2800      	cmp	r0, #0
 800e458:	d135      	bne.n	800e4c6 <HAL_TIMEx_OCN_Start_DMA+0xee>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e45a:	6822      	ldr	r2, [r4, #0]
 800e45c:	68d3      	ldr	r3, [r2, #12]
 800e45e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e462:	60d3      	str	r3, [r2, #12]
      break;
 800e464:	e7cb      	b.n	800e3fe <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e466:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e468:	491b      	ldr	r1, [pc, #108]	; (800e4d8 <HAL_TIMEx_OCN_Start_DMA+0x100>)
 800e46a:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e46c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e46e:	491b      	ldr	r1, [pc, #108]	; (800e4dc <HAL_TIMEx_OCN_Start_DMA+0x104>)
 800e470:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e472:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e474:	491a      	ldr	r1, [pc, #104]	; (800e4e0 <HAL_TIMEx_OCN_Start_DMA+0x108>)
 800e476:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e478:	6802      	ldr	r2, [r0, #0]
 800e47a:	3238      	adds	r2, #56	; 0x38
 800e47c:	4631      	mov	r1, r6
 800e47e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e480:	f7f5 fc13 	bl	8003caa <HAL_DMA_Start_IT>
 800e484:	bb08      	cbnz	r0, 800e4ca <HAL_TIMEx_OCN_Start_DMA+0xf2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e486:	6822      	ldr	r2, [r4, #0]
 800e488:	68d3      	ldr	r3, [r2, #12]
 800e48a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e48e:	60d3      	str	r3, [r2, #12]
      break;
 800e490:	e7b5      	b.n	800e3fe <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e492:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e494:	4910      	ldr	r1, [pc, #64]	; (800e4d8 <HAL_TIMEx_OCN_Start_DMA+0x100>)
 800e496:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e498:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e49a:	4910      	ldr	r1, [pc, #64]	; (800e4dc <HAL_TIMEx_OCN_Start_DMA+0x104>)
 800e49c:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e49e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e4a0:	490f      	ldr	r1, [pc, #60]	; (800e4e0 <HAL_TIMEx_OCN_Start_DMA+0x108>)
 800e4a2:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e4a4:	6802      	ldr	r2, [r0, #0]
 800e4a6:	323c      	adds	r2, #60	; 0x3c
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e4ac:	f7f5 fbfd 	bl	8003caa <HAL_DMA_Start_IT>
 800e4b0:	b968      	cbnz	r0, 800e4ce <HAL_TIMEx_OCN_Start_DMA+0xf6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e4b2:	6822      	ldr	r2, [r4, #0]
 800e4b4:	68d3      	ldr	r3, [r2, #12]
 800e4b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e4ba:	60d3      	str	r3, [r2, #12]
      break;
 800e4bc:	e79f      	b.n	800e3fe <HAL_TIMEx_OCN_Start_DMA+0x26>
    return HAL_BUSY;
 800e4be:	2002      	movs	r0, #2
 800e4c0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800e4c2:	2001      	movs	r0, #1
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e4ca:	2001      	movs	r0, #1
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e4ce:	2001      	movs	r0, #1
 800e4d0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800e4d2:	2000      	movs	r0, #0
}
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800c32b 	.word	0x0800c32b
 800e4dc:	0800c373 	.word	0x0800c373
 800e4e0:	0800c559 	.word	0x0800c559

0800e4e4 <HAL_TIMEx_OCN_Stop_DMA>:
{
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	460d      	mov	r5, r1
  switch (Channel)
 800e4ea:	2904      	cmp	r1, #4
 800e4ec:	d033      	beq.n	800e556 <HAL_TIMEx_OCN_Stop_DMA+0x72>
 800e4ee:	2908      	cmp	r1, #8
 800e4f0:	d03a      	beq.n	800e568 <HAL_TIMEx_OCN_Stop_DMA+0x84>
 800e4f2:	b339      	cbz	r1, 800e544 <HAL_TIMEx_OCN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	6820      	ldr	r0, [r4, #0]
 800e4fa:	f7ff fd5d 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	6a19      	ldr	r1, [r3, #32]
 800e502:	f241 1211 	movw	r2, #4369	; 0x1111
 800e506:	4211      	tst	r1, r2
 800e508:	d108      	bne.n	800e51c <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e50a:	6a19      	ldr	r1, [r3, #32]
 800e50c:	f240 4244 	movw	r2, #1092	; 0x444
 800e510:	4211      	tst	r1, r2
 800e512:	d103      	bne.n	800e51c <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e51a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	6a19      	ldr	r1, [r3, #32]
 800e520:	f241 1211 	movw	r2, #4369	; 0x1111
 800e524:	4211      	tst	r1, r2
 800e526:	d108      	bne.n	800e53a <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e528:	6a19      	ldr	r1, [r3, #32]
 800e52a:	f240 4244 	movw	r2, #1092	; 0x444
 800e52e:	4211      	tst	r1, r2
 800e530:	d103      	bne.n	800e53a <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	f022 0201 	bic.w	r2, r2, #1
 800e538:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e53a:	2301      	movs	r3, #1
 800e53c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e540:	2000      	movs	r0, #0
 800e542:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e544:	6802      	ldr	r2, [r0, #0]
 800e546:	68d3      	ldr	r3, [r2, #12]
 800e548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e54c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e54e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e550:	f7f5 fc2a 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e554:	e7ce      	b.n	800e4f4 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e556:	6802      	ldr	r2, [r0, #0]
 800e558:	68d3      	ldr	r3, [r2, #12]
 800e55a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e55e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e560:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e562:	f7f5 fc21 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e566:	e7c5      	b.n	800e4f4 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e568:	6802      	ldr	r2, [r0, #0]
 800e56a:	68d3      	ldr	r3, [r2, #12]
 800e56c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e570:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e572:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e574:	f7f5 fc18 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e578:	e7bc      	b.n	800e4f4 <HAL_TIMEx_OCN_Stop_DMA+0x10>

0800e57a <HAL_TIMEx_PWMN_Start>:
{
 800e57a:	b510      	push	{r4, lr}
 800e57c:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e57e:	2204      	movs	r2, #4
 800e580:	6800      	ldr	r0, [r0, #0]
 800e582:	f7ff fd19 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e586:	6822      	ldr	r2, [r4, #0]
 800e588:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e58a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e58e:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e590:	6822      	ldr	r2, [r4, #0]
 800e592:	6893      	ldr	r3, [r2, #8]
 800e594:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e598:	2b06      	cmp	r3, #6
 800e59a:	d003      	beq.n	800e5a4 <HAL_TIMEx_PWMN_Start+0x2a>
    __HAL_TIM_ENABLE(htim);
 800e59c:	6813      	ldr	r3, [r2, #0]
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	6013      	str	r3, [r2, #0]
}
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <HAL_TIMEx_PWMN_Stop>:
{
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	6800      	ldr	r0, [r0, #0]
 800e5b0:	f7ff fd02 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	6a19      	ldr	r1, [r3, #32]
 800e5b8:	f241 1211 	movw	r2, #4369	; 0x1111
 800e5bc:	4211      	tst	r1, r2
 800e5be:	d108      	bne.n	800e5d2 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e5c0:	6a19      	ldr	r1, [r3, #32]
 800e5c2:	f240 4244 	movw	r2, #1092	; 0x444
 800e5c6:	4211      	tst	r1, r2
 800e5c8:	d103      	bne.n	800e5d2 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e5ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e5d0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	6a19      	ldr	r1, [r3, #32]
 800e5d6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e5da:	4211      	tst	r1, r2
 800e5dc:	d108      	bne.n	800e5f0 <HAL_TIMEx_PWMN_Stop+0x48>
 800e5de:	6a19      	ldr	r1, [r3, #32]
 800e5e0:	f240 4244 	movw	r2, #1092	; 0x444
 800e5e4:	4211      	tst	r1, r2
 800e5e6:	d103      	bne.n	800e5f0 <HAL_TIMEx_PWMN_Stop+0x48>
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	f022 0201 	bic.w	r2, r2, #1
 800e5ee:	601a      	str	r2, [r3, #0]
}
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	bd10      	pop	{r4, pc}

0800e5f4 <HAL_TIMEx_PWMN_Start_IT>:
{
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	4604      	mov	r4, r0
  switch (Channel)
 800e5f8:	2904      	cmp	r1, #4
 800e5fa:	d022      	beq.n	800e642 <HAL_TIMEx_PWMN_Start_IT+0x4e>
 800e5fc:	2908      	cmp	r1, #8
 800e5fe:	d026      	beq.n	800e64e <HAL_TIMEx_PWMN_Start_IT+0x5a>
 800e600:	b1c9      	cbz	r1, 800e636 <HAL_TIMEx_PWMN_Start_IT+0x42>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e602:	6822      	ldr	r2, [r4, #0]
 800e604:	68d3      	ldr	r3, [r2, #12]
 800e606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e60a:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e60c:	2204      	movs	r2, #4
 800e60e:	6820      	ldr	r0, [r4, #0]
 800e610:	f7ff fcd2 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e614:	6822      	ldr	r2, [r4, #0]
 800e616:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e61c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e61e:	6822      	ldr	r2, [r4, #0]
 800e620:	6893      	ldr	r3, [r2, #8]
 800e622:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e626:	2b06      	cmp	r3, #6
 800e628:	d003      	beq.n	800e632 <HAL_TIMEx_PWMN_Start_IT+0x3e>
    __HAL_TIM_ENABLE(htim);
 800e62a:	6813      	ldr	r3, [r2, #0]
 800e62c:	f043 0301 	orr.w	r3, r3, #1
 800e630:	6013      	str	r3, [r2, #0]
}
 800e632:	2000      	movs	r0, #0
 800e634:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e636:	6802      	ldr	r2, [r0, #0]
 800e638:	68d3      	ldr	r3, [r2, #12]
 800e63a:	f043 0302 	orr.w	r3, r3, #2
 800e63e:	60d3      	str	r3, [r2, #12]
      break;
 800e640:	e7df      	b.n	800e602 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e642:	6802      	ldr	r2, [r0, #0]
 800e644:	68d3      	ldr	r3, [r2, #12]
 800e646:	f043 0304 	orr.w	r3, r3, #4
 800e64a:	60d3      	str	r3, [r2, #12]
      break;
 800e64c:	e7d9      	b.n	800e602 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e64e:	6802      	ldr	r2, [r0, #0]
 800e650:	68d3      	ldr	r3, [r2, #12]
 800e652:	f043 0308 	orr.w	r3, r3, #8
 800e656:	60d3      	str	r3, [r2, #12]
      break;
 800e658:	e7d3      	b.n	800e602 <HAL_TIMEx_PWMN_Start_IT+0xe>

0800e65a <HAL_TIMEx_PWMN_Stop_IT>:
{
 800e65a:	b510      	push	{r4, lr}
 800e65c:	4604      	mov	r4, r0
  switch (Channel)
 800e65e:	2904      	cmp	r1, #4
 800e660:	d037      	beq.n	800e6d2 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 800e662:	2908      	cmp	r1, #8
 800e664:	d03b      	beq.n	800e6de <HAL_TIMEx_PWMN_Stop_IT+0x84>
 800e666:	2900      	cmp	r1, #0
 800e668:	d02d      	beq.n	800e6c6 <HAL_TIMEx_PWMN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e66a:	2200      	movs	r2, #0
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	f7ff fca3 	bl	800dfb8 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e676:	f240 4244 	movw	r2, #1092	; 0x444
 800e67a:	4211      	tst	r1, r2
 800e67c:	d103      	bne.n	800e686 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e67e:	68da      	ldr	r2, [r3, #12]
 800e680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e684:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	6a19      	ldr	r1, [r3, #32]
 800e68a:	f241 1211 	movw	r2, #4369	; 0x1111
 800e68e:	4211      	tst	r1, r2
 800e690:	d108      	bne.n	800e6a4 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e692:	6a19      	ldr	r1, [r3, #32]
 800e694:	f240 4244 	movw	r2, #1092	; 0x444
 800e698:	4211      	tst	r1, r2
 800e69a:	d103      	bne.n	800e6a4 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e69e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e6a2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	6a19      	ldr	r1, [r3, #32]
 800e6a8:	f241 1211 	movw	r2, #4369	; 0x1111
 800e6ac:	4211      	tst	r1, r2
 800e6ae:	d108      	bne.n	800e6c2 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e6b0:	6a19      	ldr	r1, [r3, #32]
 800e6b2:	f240 4244 	movw	r2, #1092	; 0x444
 800e6b6:	4211      	tst	r1, r2
 800e6b8:	d103      	bne.n	800e6c2 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	f022 0201 	bic.w	r2, r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
}
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e6c6:	6802      	ldr	r2, [r0, #0]
 800e6c8:	68d3      	ldr	r3, [r2, #12]
 800e6ca:	f023 0302 	bic.w	r3, r3, #2
 800e6ce:	60d3      	str	r3, [r2, #12]
      break;
 800e6d0:	e7cb      	b.n	800e66a <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e6d2:	6802      	ldr	r2, [r0, #0]
 800e6d4:	68d3      	ldr	r3, [r2, #12]
 800e6d6:	f023 0304 	bic.w	r3, r3, #4
 800e6da:	60d3      	str	r3, [r2, #12]
      break;
 800e6dc:	e7c5      	b.n	800e66a <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e6de:	6802      	ldr	r2, [r0, #0]
 800e6e0:	68d3      	ldr	r3, [r2, #12]
 800e6e2:	f023 0308 	bic.w	r3, r3, #8
 800e6e6:	60d3      	str	r3, [r2, #12]
      break;
 800e6e8:	e7bf      	b.n	800e66a <HAL_TIMEx_PWMN_Stop_IT+0x10>

0800e6ea <HAL_TIMEx_PWMN_Start_DMA>:
{
 800e6ea:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e6ec:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e6f0:	b2ed      	uxtb	r5, r5
 800e6f2:	2d02      	cmp	r5, #2
 800e6f4:	d06c      	beq.n	800e7d0 <HAL_TIMEx_PWMN_Start_DMA+0xe6>
  else if (htim->State == HAL_TIM_STATE_READY)
 800e6f6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e6fa:	b2e4      	uxtb	r4, r4
 800e6fc:	2c01      	cmp	r4, #1
 800e6fe:	d01d      	beq.n	800e73c <HAL_TIMEx_PWMN_Start_DMA+0x52>
 800e700:	4616      	mov	r6, r2
 800e702:	460d      	mov	r5, r1
 800e704:	4604      	mov	r4, r0
  switch (Channel)
 800e706:	2904      	cmp	r1, #4
 800e708:	d036      	beq.n	800e778 <HAL_TIMEx_PWMN_Start_DMA+0x8e>
 800e70a:	2908      	cmp	r1, #8
 800e70c:	d04a      	beq.n	800e7a4 <HAL_TIMEx_PWMN_Start_DMA+0xba>
 800e70e:	b1e1      	cbz	r1, 800e74a <HAL_TIMEx_PWMN_Start_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e710:	2204      	movs	r2, #4
 800e712:	4629      	mov	r1, r5
 800e714:	6820      	ldr	r0, [r4, #0]
 800e716:	f7ff fc4f 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e71a:	6822      	ldr	r2, [r4, #0]
 800e71c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e722:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e724:	6822      	ldr	r2, [r4, #0]
 800e726:	6893      	ldr	r3, [r2, #8]
 800e728:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72c:	2b06      	cmp	r3, #6
 800e72e:	d059      	beq.n	800e7e4 <HAL_TIMEx_PWMN_Start_DMA+0xfa>
    __HAL_TIM_ENABLE(htim);
 800e730:	6813      	ldr	r3, [r2, #0]
 800e732:	f043 0301 	orr.w	r3, r3, #1
 800e736:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e738:	2000      	movs	r0, #0
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e73c:	b90a      	cbnz	r2, 800e742 <HAL_TIMEx_PWMN_Start_DMA+0x58>
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d148      	bne.n	800e7d4 <HAL_TIMEx_PWMN_Start_DMA+0xea>
      htim->State = HAL_TIM_STATE_BUSY;
 800e742:	2402      	movs	r4, #2
 800e744:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e748:	e7da      	b.n	800e700 <HAL_TIMEx_PWMN_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e74a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e74c:	4926      	ldr	r1, [pc, #152]	; (800e7e8 <HAL_TIMEx_PWMN_Start_DMA+0xfe>)
 800e74e:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e750:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e752:	4926      	ldr	r1, [pc, #152]	; (800e7ec <HAL_TIMEx_PWMN_Start_DMA+0x102>)
 800e754:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e756:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e758:	4925      	ldr	r1, [pc, #148]	; (800e7f0 <HAL_TIMEx_PWMN_Start_DMA+0x106>)
 800e75a:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e75c:	6802      	ldr	r2, [r0, #0]
 800e75e:	3234      	adds	r2, #52	; 0x34
 800e760:	4631      	mov	r1, r6
 800e762:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e764:	f7f5 faa1 	bl	8003caa <HAL_DMA_Start_IT>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d135      	bne.n	800e7d8 <HAL_TIMEx_PWMN_Start_DMA+0xee>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e76c:	6822      	ldr	r2, [r4, #0]
 800e76e:	68d3      	ldr	r3, [r2, #12]
 800e770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e774:	60d3      	str	r3, [r2, #12]
      break;
 800e776:	e7cb      	b.n	800e710 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e778:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e77a:	491b      	ldr	r1, [pc, #108]	; (800e7e8 <HAL_TIMEx_PWMN_Start_DMA+0xfe>)
 800e77c:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e77e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e780:	491a      	ldr	r1, [pc, #104]	; (800e7ec <HAL_TIMEx_PWMN_Start_DMA+0x102>)
 800e782:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e784:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e786:	491a      	ldr	r1, [pc, #104]	; (800e7f0 <HAL_TIMEx_PWMN_Start_DMA+0x106>)
 800e788:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e78a:	6802      	ldr	r2, [r0, #0]
 800e78c:	3238      	adds	r2, #56	; 0x38
 800e78e:	4631      	mov	r1, r6
 800e790:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e792:	f7f5 fa8a 	bl	8003caa <HAL_DMA_Start_IT>
 800e796:	bb08      	cbnz	r0, 800e7dc <HAL_TIMEx_PWMN_Start_DMA+0xf2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e798:	6822      	ldr	r2, [r4, #0]
 800e79a:	68d3      	ldr	r3, [r2, #12]
 800e79c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e7a0:	60d3      	str	r3, [r2, #12]
      break;
 800e7a2:	e7b5      	b.n	800e710 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e7a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e7a6:	4910      	ldr	r1, [pc, #64]	; (800e7e8 <HAL_TIMEx_PWMN_Start_DMA+0xfe>)
 800e7a8:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e7aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e7ac:	490f      	ldr	r1, [pc, #60]	; (800e7ec <HAL_TIMEx_PWMN_Start_DMA+0x102>)
 800e7ae:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e7b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e7b2:	490f      	ldr	r1, [pc, #60]	; (800e7f0 <HAL_TIMEx_PWMN_Start_DMA+0x106>)
 800e7b4:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e7b6:	6802      	ldr	r2, [r0, #0]
 800e7b8:	323c      	adds	r2, #60	; 0x3c
 800e7ba:	4631      	mov	r1, r6
 800e7bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e7be:	f7f5 fa74 	bl	8003caa <HAL_DMA_Start_IT>
 800e7c2:	b968      	cbnz	r0, 800e7e0 <HAL_TIMEx_PWMN_Start_DMA+0xf6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e7c4:	6822      	ldr	r2, [r4, #0]
 800e7c6:	68d3      	ldr	r3, [r2, #12]
 800e7c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e7cc:	60d3      	str	r3, [r2, #12]
      break;
 800e7ce:	e79f      	b.n	800e710 <HAL_TIMEx_PWMN_Start_DMA+0x26>
    return HAL_BUSY;
 800e7d0:	2002      	movs	r0, #2
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800e7d4:	2001      	movs	r0, #1
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e7d8:	2001      	movs	r0, #1
 800e7da:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e7dc:	2001      	movs	r0, #1
 800e7de:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800e7e0:	2001      	movs	r0, #1
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800e7e4:	2000      	movs	r0, #0
}
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	0800c32b 	.word	0x0800c32b
 800e7ec:	0800c373 	.word	0x0800c373
 800e7f0:	0800c559 	.word	0x0800c559

0800e7f4 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	460d      	mov	r5, r1
  switch (Channel)
 800e7fa:	2904      	cmp	r1, #4
 800e7fc:	d033      	beq.n	800e866 <HAL_TIMEx_PWMN_Stop_DMA+0x72>
 800e7fe:	2908      	cmp	r1, #8
 800e800:	d03a      	beq.n	800e878 <HAL_TIMEx_PWMN_Stop_DMA+0x84>
 800e802:	b339      	cbz	r1, 800e854 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e804:	2200      	movs	r2, #0
 800e806:	4629      	mov	r1, r5
 800e808:	6820      	ldr	r0, [r4, #0]
 800e80a:	f7ff fbd5 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	6a19      	ldr	r1, [r3, #32]
 800e812:	f241 1211 	movw	r2, #4369	; 0x1111
 800e816:	4211      	tst	r1, r2
 800e818:	d108      	bne.n	800e82c <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e81a:	6a19      	ldr	r1, [r3, #32]
 800e81c:	f240 4244 	movw	r2, #1092	; 0x444
 800e820:	4211      	tst	r1, r2
 800e822:	d103      	bne.n	800e82c <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e82a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	6a19      	ldr	r1, [r3, #32]
 800e830:	f241 1211 	movw	r2, #4369	; 0x1111
 800e834:	4211      	tst	r1, r2
 800e836:	d108      	bne.n	800e84a <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e838:	6a19      	ldr	r1, [r3, #32]
 800e83a:	f240 4244 	movw	r2, #1092	; 0x444
 800e83e:	4211      	tst	r1, r2
 800e840:	d103      	bne.n	800e84a <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	f022 0201 	bic.w	r2, r2, #1
 800e848:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e84a:	2301      	movs	r3, #1
 800e84c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e850:	2000      	movs	r0, #0
 800e852:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e854:	6802      	ldr	r2, [r0, #0]
 800e856:	68d3      	ldr	r3, [r2, #12]
 800e858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e85c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e85e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e860:	f7f5 faa2 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e864:	e7ce      	b.n	800e804 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e866:	6802      	ldr	r2, [r0, #0]
 800e868:	68d3      	ldr	r3, [r2, #12]
 800e86a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e86e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e870:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e872:	f7f5 fa99 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e876:	e7c5      	b.n	800e804 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e878:	6802      	ldr	r2, [r0, #0]
 800e87a:	68d3      	ldr	r3, [r2, #12]
 800e87c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e880:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e882:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e884:	f7f5 fa90 	bl	8003da8 <HAL_DMA_Abort_IT>
      break;
 800e888:	e7bc      	b.n	800e804 <HAL_TIMEx_PWMN_Stop_DMA+0x10>

0800e88a <HAL_TIMEx_OnePulseN_Start>:
{
 800e88a:	b510      	push	{r4, lr}
 800e88c:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800e88e:	2204      	movs	r2, #4
 800e890:	6800      	ldr	r0, [r0, #0]
 800e892:	f7ff fb91 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e896:	6822      	ldr	r2, [r4, #0]
 800e898:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e89a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e89e:	6453      	str	r3, [r2, #68]	; 0x44
}
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	bd10      	pop	{r4, pc}

0800e8a4 <HAL_TIMEx_OnePulseN_Stop>:
{
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	6800      	ldr	r0, [r0, #0]
 800e8ac:	f7ff fb84 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	6a19      	ldr	r1, [r3, #32]
 800e8b4:	f241 1211 	movw	r2, #4369	; 0x1111
 800e8b8:	4211      	tst	r1, r2
 800e8ba:	d108      	bne.n	800e8ce <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e8bc:	6a19      	ldr	r1, [r3, #32]
 800e8be:	f240 4244 	movw	r2, #1092	; 0x444
 800e8c2:	4211      	tst	r1, r2
 800e8c4:	d103      	bne.n	800e8ce <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e8c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e8cc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	6a19      	ldr	r1, [r3, #32]
 800e8d2:	f241 1211 	movw	r2, #4369	; 0x1111
 800e8d6:	4211      	tst	r1, r2
 800e8d8:	d108      	bne.n	800e8ec <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e8da:	6a19      	ldr	r1, [r3, #32]
 800e8dc:	f240 4244 	movw	r2, #1092	; 0x444
 800e8e0:	4211      	tst	r1, r2
 800e8e2:	d103      	bne.n	800e8ec <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	f022 0201 	bic.w	r2, r2, #1
 800e8ea:	601a      	str	r2, [r3, #0]
}
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <HAL_TIMEx_OnePulseN_Start_IT>:
{
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e8f4:	6802      	ldr	r2, [r0, #0]
 800e8f6:	68d3      	ldr	r3, [r2, #12]
 800e8f8:	f043 0302 	orr.w	r3, r3, #2
 800e8fc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e8fe:	6802      	ldr	r2, [r0, #0]
 800e900:	68d3      	ldr	r3, [r2, #12]
 800e902:	f043 0304 	orr.w	r3, r3, #4
 800e906:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800e908:	2204      	movs	r2, #4
 800e90a:	6800      	ldr	r0, [r0, #0]
 800e90c:	f7ff fb54 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e910:	6822      	ldr	r2, [r4, #0]
 800e912:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e918:	6453      	str	r3, [r2, #68]	; 0x44
}
 800e91a:	2000      	movs	r0, #0
 800e91c:	bd10      	pop	{r4, pc}

0800e91e <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 800e91e:	b510      	push	{r4, lr}
 800e920:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e922:	6802      	ldr	r2, [r0, #0]
 800e924:	68d3      	ldr	r3, [r2, #12]
 800e926:	f023 0302 	bic.w	r3, r3, #2
 800e92a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e92c:	6802      	ldr	r2, [r0, #0]
 800e92e:	68d3      	ldr	r3, [r2, #12]
 800e930:	f023 0304 	bic.w	r3, r3, #4
 800e934:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e936:	2200      	movs	r2, #0
 800e938:	6800      	ldr	r0, [r0, #0]
 800e93a:	f7ff fb3d 	bl	800dfb8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e93e:	6823      	ldr	r3, [r4, #0]
 800e940:	6a19      	ldr	r1, [r3, #32]
 800e942:	f241 1211 	movw	r2, #4369	; 0x1111
 800e946:	4211      	tst	r1, r2
 800e948:	d108      	bne.n	800e95c <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800e94a:	6a19      	ldr	r1, [r3, #32]
 800e94c:	f240 4244 	movw	r2, #1092	; 0x444
 800e950:	4211      	tst	r1, r2
 800e952:	d103      	bne.n	800e95c <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800e954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e95a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	6a19      	ldr	r1, [r3, #32]
 800e960:	f241 1211 	movw	r2, #4369	; 0x1111
 800e964:	4211      	tst	r1, r2
 800e966:	d108      	bne.n	800e97a <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800e968:	6a19      	ldr	r1, [r3, #32]
 800e96a:	f240 4244 	movw	r2, #1092	; 0x444
 800e96e:	4211      	tst	r1, r2
 800e970:	d103      	bne.n	800e97a <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	f022 0201 	bic.w	r2, r2, #1
 800e978:	601a      	str	r2, [r3, #0]
}
 800e97a:	2000      	movs	r0, #0
 800e97c:	bd10      	pop	{r4, pc}

0800e97e <HAL_TIMEx_ConfigCommutEvent>:
  __HAL_LOCK(htim);
 800e97e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d032      	beq.n	800e9ec <HAL_TIMEx_ConfigCommutEvent+0x6e>
{
 800e986:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800e988:	2301      	movs	r3, #1
 800e98a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800e98e:	b129      	cbz	r1, 800e99c <HAL_TIMEx_ConfigCommutEvent+0x1e>
 800e990:	2910      	cmp	r1, #16
 800e992:	d003      	beq.n	800e99c <HAL_TIMEx_ConfigCommutEvent+0x1e>
 800e994:	2920      	cmp	r1, #32
 800e996:	d001      	beq.n	800e99c <HAL_TIMEx_ConfigCommutEvent+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800e998:	2930      	cmp	r1, #48	; 0x30
 800e99a:	d108      	bne.n	800e9ae <HAL_TIMEx_ConfigCommutEvent+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e99c:	6804      	ldr	r4, [r0, #0]
 800e99e:	68a3      	ldr	r3, [r4, #8]
 800e9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9a4:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	689c      	ldr	r4, [r3, #8]
 800e9aa:	4321      	orrs	r1, r4
 800e9ac:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800e9ae:	6801      	ldr	r1, [r0, #0]
 800e9b0:	684b      	ldr	r3, [r1, #4]
 800e9b2:	f043 0301 	orr.w	r3, r3, #1
 800e9b6:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800e9b8:	6801      	ldr	r1, [r0, #0]
 800e9ba:	684b      	ldr	r3, [r1, #4]
 800e9bc:	f023 0304 	bic.w	r3, r3, #4
 800e9c0:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800e9c2:	6801      	ldr	r1, [r0, #0]
 800e9c4:	684b      	ldr	r3, [r1, #4]
 800e9c6:	431a      	orrs	r2, r3
 800e9c8:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800e9ca:	6802      	ldr	r2, [r0, #0]
 800e9cc:	68d3      	ldr	r3, [r2, #12]
 800e9ce:	f023 0320 	bic.w	r3, r3, #32
 800e9d2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800e9d4:	6802      	ldr	r2, [r0, #0]
 800e9d6:	68d3      	ldr	r3, [r2, #12]
 800e9d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9dc:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800e9e4:	4618      	mov	r0, r3
}
 800e9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 800e9ec:	2002      	movs	r0, #2
 800e9ee:	4770      	bx	lr

0800e9f0 <HAL_TIMEx_ConfigCommutEvent_IT>:
  __HAL_LOCK(htim);
 800e9f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d032      	beq.n	800ea5e <HAL_TIMEx_ConfigCommutEvent_IT+0x6e>
{
 800e9f8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ea00:	b129      	cbz	r1, 800ea0e <HAL_TIMEx_ConfigCommutEvent_IT+0x1e>
 800ea02:	2910      	cmp	r1, #16
 800ea04:	d003      	beq.n	800ea0e <HAL_TIMEx_ConfigCommutEvent_IT+0x1e>
 800ea06:	2920      	cmp	r1, #32
 800ea08:	d001      	beq.n	800ea0e <HAL_TIMEx_ConfigCommutEvent_IT+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ea0a:	2930      	cmp	r1, #48	; 0x30
 800ea0c:	d108      	bne.n	800ea20 <HAL_TIMEx_ConfigCommutEvent_IT+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ea0e:	6804      	ldr	r4, [r0, #0]
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea16:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ea18:	6803      	ldr	r3, [r0, #0]
 800ea1a:	689c      	ldr	r4, [r3, #8]
 800ea1c:	4321      	orrs	r1, r4
 800ea1e:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ea20:	6801      	ldr	r1, [r0, #0]
 800ea22:	684b      	ldr	r3, [r1, #4]
 800ea24:	f043 0301 	orr.w	r3, r3, #1
 800ea28:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ea2a:	6801      	ldr	r1, [r0, #0]
 800ea2c:	684b      	ldr	r3, [r1, #4]
 800ea2e:	f023 0304 	bic.w	r3, r3, #4
 800ea32:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ea34:	6801      	ldr	r1, [r0, #0]
 800ea36:	684b      	ldr	r3, [r1, #4]
 800ea38:	431a      	orrs	r2, r3
 800ea3a:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800ea3c:	6802      	ldr	r2, [r0, #0]
 800ea3e:	68d3      	ldr	r3, [r2, #12]
 800ea40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea44:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800ea46:	6802      	ldr	r2, [r0, #0]
 800ea48:	68d3      	ldr	r3, [r2, #12]
 800ea4a:	f043 0320 	orr.w	r3, r3, #32
 800ea4e:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800ea50:	2300      	movs	r3, #0
 800ea52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ea56:	4618      	mov	r0, r3
}
 800ea58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea5c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ea5e:	2002      	movs	r0, #2
 800ea60:	4770      	bx	lr

0800ea62 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  __HAL_LOCK(htim);
 800ea62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d03b      	beq.n	800eae2 <HAL_TIMEx_ConfigCommutEvent_DMA+0x80>
{
 800ea6a:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ea72:	b129      	cbz	r1, 800ea80 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1e>
 800ea74:	2910      	cmp	r1, #16
 800ea76:	d003      	beq.n	800ea80 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1e>
 800ea78:	2920      	cmp	r1, #32
 800ea7a:	d001      	beq.n	800ea80 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ea7c:	2930      	cmp	r1, #48	; 0x30
 800ea7e:	d108      	bne.n	800ea92 <HAL_TIMEx_ConfigCommutEvent_DMA+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ea80:	6804      	ldr	r4, [r0, #0]
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea88:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ea8a:	6803      	ldr	r3, [r0, #0]
 800ea8c:	689c      	ldr	r4, [r3, #8]
 800ea8e:	4321      	orrs	r1, r4
 800ea90:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ea92:	6801      	ldr	r1, [r0, #0]
 800ea94:	684b      	ldr	r3, [r1, #4]
 800ea96:	f043 0301 	orr.w	r3, r3, #1
 800ea9a:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ea9c:	6801      	ldr	r1, [r0, #0]
 800ea9e:	684b      	ldr	r3, [r1, #4]
 800eaa0:	f023 0304 	bic.w	r3, r3, #4
 800eaa4:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800eaa6:	6801      	ldr	r1, [r0, #0]
 800eaa8:	684b      	ldr	r3, [r1, #4]
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800eaae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eab0:	4a0d      	ldr	r2, [pc, #52]	; (800eae8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x86>)
 800eab2:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800eab4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eab6:	4a0d      	ldr	r2, [pc, #52]	; (800eaec <HAL_TIMEx_ConfigCommutEvent_DMA+0x8a>)
 800eab8:	641a      	str	r2, [r3, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800eaba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eabc:	4a0c      	ldr	r2, [pc, #48]	; (800eaf0 <HAL_TIMEx_ConfigCommutEvent_DMA+0x8e>)
 800eabe:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800eac0:	6802      	ldr	r2, [r0, #0]
 800eac2:	68d3      	ldr	r3, [r2, #12]
 800eac4:	f023 0320 	bic.w	r3, r3, #32
 800eac8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800eaca:	6802      	ldr	r2, [r0, #0]
 800eacc:	68d3      	ldr	r3, [r2, #12]
 800eace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ead2:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800ead4:	2300      	movs	r3, #0
 800ead6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eada:	4618      	mov	r0, r3
}
 800eadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eae0:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eae2:	2002      	movs	r0, #2
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	0800ebeb 	.word	0x0800ebeb
 800eaec:	0800ebfd 	.word	0x0800ebfd
 800eaf0:	0800c559 	.word	0x0800c559

0800eaf4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800eaf4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d03b      	beq.n	800eb74 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800eafc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800eafe:	2301      	movs	r3, #1
 800eb00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800eb04:	2302      	movs	r3, #2
 800eb06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800eb0a:	6804      	ldr	r4, [r0, #0]
 800eb0c:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800eb0e:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb14:	680d      	ldr	r5, [r1, #0]
 800eb16:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800eb18:	6063      	str	r3, [r4, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb1a:	6803      	ldr	r3, [r0, #0]
 800eb1c:	4c16      	ldr	r4, [pc, #88]	; (800eb78 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800eb1e:	42a3      	cmp	r3, r4
 800eb20:	d01a      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb26:	d017      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb28:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	d013      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800eb34:	42a3      	cmp	r3, r4
 800eb36:	d00f      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800eb3c:	42a3      	cmp	r3, r4
 800eb3e:	d00b      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb40:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d007      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb48:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800eb4c:	42a3      	cmp	r3, r4
 800eb4e:	d003      	beq.n	800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800eb50:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	d104      	bne.n	800eb62 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb5c:	6849      	ldr	r1, [r1, #4]
 800eb5e:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 800eb60:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800eb62:	2301      	movs	r3, #1
 800eb64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eb6e:	4618      	mov	r0, r3
}
 800eb70:	bc30      	pop	{r4, r5}
 800eb72:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eb74:	2002      	movs	r0, #2
 800eb76:	4770      	bx	lr
 800eb78:	40010000 	.word	0x40010000

0800eb7c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800eb7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d022      	beq.n	800ebca <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800eb84:	2301      	movs	r3, #1
 800eb86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb8a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb90:	688a      	ldr	r2, [r1, #8]
 800eb92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb98:	684a      	ldr	r2, [r1, #4]
 800eb9a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eba0:	680a      	ldr	r2, [r1, #0]
 800eba2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eba8:	690a      	ldr	r2, [r1, #16]
 800ebaa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebb0:	694a      	ldr	r2, [r1, #20]
 800ebb2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebb8:	69ca      	ldr	r2, [r1, #28]
 800ebba:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 800ebbc:	6802      	ldr	r2, [r0, #0]
 800ebbe:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ebca:	2002      	movs	r0, #2
}
 800ebcc:	4770      	bx	lr

0800ebce <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 800ebce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d006      	beq.n	800ebe4 <HAL_TIMEx_RemapConfig+0x16>
  WRITE_REG(htim->Instance->OR, Remap);
 800ebd6:	6803      	ldr	r3, [r0, #0]
 800ebd8:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ebe4:	2002      	movs	r0, #2
}
 800ebe6:	4770      	bx	lr

0800ebe8 <HAL_TIMEx_CommutCallback>:
{
 800ebe8:	4770      	bx	lr

0800ebea <TIMEx_DMACommutationCplt>:
{
 800ebea:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebec:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutCallback(htim);
 800ebf4:	f7ff fff8 	bl	800ebe8 <HAL_TIMEx_CommutCallback>
 800ebf8:	bd08      	pop	{r3, pc}

0800ebfa <HAL_TIMEx_CommutHalfCpltCallback>:
{
 800ebfa:	4770      	bx	lr

0800ebfc <TIMEx_DMACommutationHalfCplt>:
{
 800ebfc:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebfe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800ec00:	2301      	movs	r3, #1
 800ec02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800ec06:	f7ff fff8 	bl	800ebfa <HAL_TIMEx_CommutHalfCpltCallback>
 800ec0a:	bd08      	pop	{r3, pc}

0800ec0c <HAL_TIMEx_BreakCallback>:
{
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 800ec0e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ec12:	4770      	bx	lr

0800ec14 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800ec14:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec16:	3301      	adds	r3, #1
 800ec18:	4a0c      	ldr	r2, [pc, #48]	; (800ec4c <USB_CoreReset+0x38>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d811      	bhi.n	800ec42 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec1e:	6902      	ldr	r2, [r0, #16]
 800ec20:	2a00      	cmp	r2, #0
 800ec22:	daf8      	bge.n	800ec16 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec24:	6903      	ldr	r3, [r0, #16]
 800ec26:	f043 0301 	orr.w	r3, r3, #1
 800ec2a:	6103      	str	r3, [r0, #16]
  count = 0U;
 800ec2c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800ec2e:	3301      	adds	r3, #1
 800ec30:	4a06      	ldr	r2, [pc, #24]	; (800ec4c <USB_CoreReset+0x38>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d807      	bhi.n	800ec46 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec36:	6902      	ldr	r2, [r0, #16]
 800ec38:	f012 0f01 	tst.w	r2, #1
 800ec3c:	d1f7      	bne.n	800ec2e <USB_CoreReset+0x1a>

  return HAL_OK;
 800ec3e:	2000      	movs	r0, #0
 800ec40:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ec42:	2003      	movs	r0, #3
 800ec44:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ec46:	2003      	movs	r0, #3
}
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	00030d40 	.word	0x00030d40

0800ec50 <USB_CoreInit>:
{
 800ec50:	b084      	sub	sp, #16
 800ec52:	b510      	push	{r4, lr}
 800ec54:	4604      	mov	r4, r0
 800ec56:	a803      	add	r0, sp, #12
 800ec58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec5c:	9b08      	ldr	r3, [sp, #32]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d00d      	beq.n	800ec7e <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec62:	68e3      	ldr	r3, [r4, #12]
 800ec64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec68:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7ff ffd2 	bl	800ec14 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800ec70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec72:	bb23      	cbnz	r3, 800ecbe <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ec74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec7a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec7c:	e013      	b.n	800eca6 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec84:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ec86:	68e3      	ldr	r3, [r4, #12]
 800ec88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ec8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec90:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ec92:	68e3      	ldr	r3, [r4, #12]
 800ec94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ec98:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800ec9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d009      	beq.n	800ecb4 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 800eca0:	4620      	mov	r0, r4
 800eca2:	f7ff ffb7 	bl	800ec14 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800eca6:	9b06      	ldr	r3, [sp, #24]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d00d      	beq.n	800ecc8 <USB_CoreInit+0x78>
}
 800ecac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb0:	b004      	add	sp, #16
 800ecb2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ecb4:	68e3      	ldr	r3, [r4, #12]
 800ecb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecba:	60e3      	str	r3, [r4, #12]
 800ecbc:	e7f0      	b.n	800eca0 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ecbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ecc4:	63a3      	str	r3, [r4, #56]	; 0x38
 800ecc6:	e7ee      	b.n	800eca6 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ecc8:	68a3      	ldr	r3, [r4, #8]
 800ecca:	f043 0306 	orr.w	r3, r3, #6
 800ecce:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	f043 0320 	orr.w	r3, r3, #32
 800ecd6:	60a3      	str	r3, [r4, #8]
 800ecd8:	e7e8      	b.n	800ecac <USB_CoreInit+0x5c>

0800ecda <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800ecda:	2a02      	cmp	r2, #2
 800ecdc:	d00a      	beq.n	800ecf4 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ecde:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ece0:	68c2      	ldr	r2, [r0, #12]
 800ece2:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800ece6:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ece8:	68c3      	ldr	r3, [r0, #12]
 800ecea:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800ecee:	60c3      	str	r3, [r0, #12]
}
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ecf4:	4b2a      	ldr	r3, [pc, #168]	; (800eda0 <USB_SetTurnaroundTime+0xc6>)
 800ecf6:	440b      	add	r3, r1
 800ecf8:	4a2a      	ldr	r2, [pc, #168]	; (800eda4 <USB_SetTurnaroundTime+0xca>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d93f      	bls.n	800ed7e <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ecfe:	4b2a      	ldr	r3, [pc, #168]	; (800eda8 <USB_SetTurnaroundTime+0xce>)
 800ed00:	440b      	add	r3, r1
 800ed02:	4a2a      	ldr	r2, [pc, #168]	; (800edac <USB_SetTurnaroundTime+0xd2>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d93c      	bls.n	800ed82 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ed08:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800ed0c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800ed10:	4a27      	ldr	r2, [pc, #156]	; (800edb0 <USB_SetTurnaroundTime+0xd6>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d937      	bls.n	800ed86 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ed16:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800ed1a:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800ed1e:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800ed22:	32a0      	adds	r2, #160	; 0xa0
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d930      	bls.n	800ed8a <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ed28:	4b22      	ldr	r3, [pc, #136]	; (800edb4 <USB_SetTurnaroundTime+0xda>)
 800ed2a:	440b      	add	r3, r1
 800ed2c:	4a22      	ldr	r2, [pc, #136]	; (800edb8 <USB_SetTurnaroundTime+0xde>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d92d      	bls.n	800ed8e <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ed32:	4b22      	ldr	r3, [pc, #136]	; (800edbc <USB_SetTurnaroundTime+0xe2>)
 800ed34:	440b      	add	r3, r1
 800ed36:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800ed3a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d927      	bls.n	800ed92 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ed42:	4b1f      	ldr	r3, [pc, #124]	; (800edc0 <USB_SetTurnaroundTime+0xe6>)
 800ed44:	440b      	add	r3, r1
 800ed46:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800ed4a:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d921      	bls.n	800ed96 <USB_SetTurnaroundTime+0xbc>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ed52:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800ed56:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800ed5a:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800ed5e:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d919      	bls.n	800ed9a <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ed66:	4b17      	ldr	r3, [pc, #92]	; (800edc4 <USB_SetTurnaroundTime+0xea>)
 800ed68:	440b      	add	r3, r1
 800ed6a:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 800ed6e:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d901      	bls.n	800ed7a <USB_SetTurnaroundTime+0xa0>
      UsbTrd = 0x6U;
 800ed76:	2106      	movs	r1, #6
 800ed78:	e7b2      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 800ed7a:	2107      	movs	r1, #7
 800ed7c:	e7b0      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800ed7e:	210f      	movs	r1, #15
 800ed80:	e7ae      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800ed82:	210e      	movs	r1, #14
 800ed84:	e7ac      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800ed86:	210d      	movs	r1, #13
 800ed88:	e7aa      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800ed8a:	210c      	movs	r1, #12
 800ed8c:	e7a8      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800ed8e:	210b      	movs	r1, #11
 800ed90:	e7a6      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800ed92:	210a      	movs	r1, #10
 800ed94:	e7a4      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800ed96:	2109      	movs	r1, #9
 800ed98:	e7a2      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800ed9a:	2108      	movs	r1, #8
 800ed9c:	e7a0      	b.n	800ece0 <USB_SetTurnaroundTime+0x6>
 800ed9e:	bf00      	nop
 800eda0:	ff275340 	.word	0xff275340
 800eda4:	000c34ff 	.word	0x000c34ff
 800eda8:	ff1b1e40 	.word	0xff1b1e40
 800edac:	000f423f 	.word	0x000f423f
 800edb0:	00124f7f 	.word	0x00124f7f
 800edb4:	fee5b660 	.word	0xfee5b660
 800edb8:	0016e35f 	.word	0x0016e35f
 800edbc:	feced300 	.word	0xfeced300
 800edc0:	feb35bc0 	.word	0xfeb35bc0
 800edc4:	fe5954e0 	.word	0xfe5954e0

0800edc8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800edc8:	6883      	ldr	r3, [r0, #8]
 800edca:	f043 0301 	orr.w	r3, r3, #1
 800edce:	6083      	str	r3, [r0, #8]
}
 800edd0:	2000      	movs	r0, #0
 800edd2:	4770      	bx	lr

0800edd4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800edd4:	6883      	ldr	r3, [r0, #8]
 800edd6:	f023 0301 	bic.w	r3, r3, #1
 800edda:	6083      	str	r3, [r0, #8]
}
 800eddc:	2000      	movs	r0, #0
 800edde:	4770      	bx	lr

0800ede0 <USB_SetCurrentMode>:
{
 800ede0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ede2:	68c3      	ldr	r3, [r0, #12]
 800ede4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ede8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800edea:	2901      	cmp	r1, #1
 800edec:	d009      	beq.n	800ee02 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800edee:	b969      	cbnz	r1, 800ee0c <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edf0:	68c3      	ldr	r3, [r0, #12]
 800edf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edf6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800edf8:	2032      	movs	r0, #50	; 0x32
 800edfa:	f7f2 fb29 	bl	8001450 <HAL_Delay>
  return HAL_OK;
 800edfe:	2000      	movs	r0, #0
 800ee00:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ee02:	68c3      	ldr	r3, [r0, #12]
 800ee04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee08:	60c3      	str	r3, [r0, #12]
 800ee0a:	e7f5      	b.n	800edf8 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800ee0c:	2001      	movs	r0, #1
}
 800ee0e:	bd08      	pop	{r3, pc}

0800ee10 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee10:	0189      	lsls	r1, r1, #6
 800ee12:	f041 0120 	orr.w	r1, r1, #32
 800ee16:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800ee18:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	4a05      	ldr	r2, [pc, #20]	; (800ee34 <USB_FlushTxFifo+0x24>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d805      	bhi.n	800ee2e <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ee22:	6902      	ldr	r2, [r0, #16]
 800ee24:	f012 0f20 	tst.w	r2, #32
 800ee28:	d1f7      	bne.n	800ee1a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ee2e:	2003      	movs	r0, #3
}
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	00030d40 	.word	0x00030d40

0800ee38 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ee38:	2310      	movs	r3, #16
 800ee3a:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800ee3c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ee3e:	3301      	adds	r3, #1
 800ee40:	4a05      	ldr	r2, [pc, #20]	; (800ee58 <USB_FlushRxFifo+0x20>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d805      	bhi.n	800ee52 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee46:	6902      	ldr	r2, [r0, #16]
 800ee48:	f012 0f10 	tst.w	r2, #16
 800ee4c:	d1f7      	bne.n	800ee3e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ee52:	2003      	movs	r0, #3
}
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	00030d40 	.word	0x00030d40

0800ee5c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800ee5c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ee60:	4319      	orrs	r1, r3
 800ee62:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800ee66:	2000      	movs	r0, #0
 800ee68:	4770      	bx	lr

0800ee6a <USB_DevInit>:
{
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee70:	4604      	mov	r4, r0
 800ee72:	a807      	add	r0, sp, #28
 800ee74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee78:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e006      	b.n	800ee8c <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 800ee7e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800ee82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ee86:	2100      	movs	r1, #0
 800ee88:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	2b0e      	cmp	r3, #14
 800ee8e:	d9f6      	bls.n	800ee7e <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800ee90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee92:	bb73      	cbnz	r3, 800eef2 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ee94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee9a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ee9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800eea2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eeaa:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800eeac:	2300      	movs	r3, #0
 800eeae:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eeb2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800eeb6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800eeba:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d01f      	beq.n	800ef04 <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eec4:	2103      	movs	r1, #3
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7ff ffc8 	bl	800ee5c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eecc:	2110      	movs	r1, #16
 800eece:	4620      	mov	r0, r4
 800eed0:	f7ff ff9e 	bl	800ee10 <USB_FlushTxFifo>
 800eed4:	4680      	mov	r8, r0
 800eed6:	b108      	cbz	r0, 800eedc <USB_DevInit+0x72>
    ret = HAL_ERROR;
 800eed8:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eedc:	4620      	mov	r0, r4
 800eede:	f7ff ffab 	bl	800ee38 <USB_FlushRxFifo>
 800eee2:	b108      	cbz	r0, 800eee8 <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 800eee4:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800eee8:	2300      	movs	r3, #0
 800eeea:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eeec:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eeee:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eef0:	e01f      	b.n	800ef32 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eef8:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eefa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eefc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef00:	63a3      	str	r3, [r4, #56]	; 0x38
 800ef02:	e7d3      	b.n	800eeac <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 800ef04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef06:	b923      	cbnz	r3, 800ef12 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f7ff ffa6 	bl	800ee5c <USB_SetDevSpeed>
 800ef10:	e7dc      	b.n	800eecc <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ef12:	2101      	movs	r1, #1
 800ef14:	4620      	mov	r0, r4
 800ef16:	f7ff ffa1 	bl	800ee5c <USB_SetDevSpeed>
 800ef1a:	e7d7      	b.n	800eecc <USB_DevInit+0x62>
      if (i == 0U)
 800ef1c:	b9c3      	cbnz	r3, 800ef50 <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef1e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800ef22:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef26:	2200      	movs	r2, #0
 800ef28:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef2a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800ef2e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef30:	3301      	adds	r3, #1
 800ef32:	9907      	ldr	r1, [sp, #28]
 800ef34:	428b      	cmp	r3, r1
 800ef36:	d210      	bcs.n	800ef5a <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef38:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800ef3c:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800ef40:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800ef44:	2800      	cmp	r0, #0
 800ef46:	dbe9      	blt.n	800ef1c <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef48:	2000      	movs	r0, #0
 800ef4a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800ef4e:	e7ea      	b.n	800ef26 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ef54:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800ef58:	e7e5      	b.n	800ef26 <USB_DevInit+0xbc>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e00a      	b.n	800ef74 <USB_DevInit+0x10a>
      if (i == 0U)
 800ef5e:	b1bb      	cbz	r3, 800ef90 <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ef60:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800ef64:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ef68:	2200      	movs	r2, #0
 800ef6a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ef6c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800ef70:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef72:	3301      	adds	r3, #1
 800ef74:	428b      	cmp	r3, r1
 800ef76:	d210      	bcs.n	800ef9a <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef78:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800ef7c:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800ef80:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800ef84:	2f00      	cmp	r7, #0
 800ef86:	dbea      	blt.n	800ef5e <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ef88:	2700      	movs	r7, #0
 800ef8a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800ef8e:	e7eb      	b.n	800ef68 <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ef90:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800ef94:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800ef98:	e7e6      	b.n	800ef68 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ef9a:	6933      	ldr	r3, [r6, #16]
 800ef9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efa0:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 800efa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d01b      	beq.n	800efe0 <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 800efa8:	2200      	movs	r2, #0
 800efaa:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800efac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800efb0:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 800efb2:	b91b      	cbnz	r3, 800efbc <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800efb4:	69a3      	ldr	r3, [r4, #24]
 800efb6:	f043 0310 	orr.w	r3, r3, #16
 800efba:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800efbc:	69a2      	ldr	r2, [r4, #24]
 800efbe:	4b10      	ldr	r3, [pc, #64]	; (800f000 <USB_DevInit+0x196>)
 800efc0:	4313      	orrs	r3, r2
 800efc2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800efc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc6:	b11b      	cbz	r3, 800efd0 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800efc8:	69a3      	ldr	r3, [r4, #24]
 800efca:	f043 0308 	orr.w	r3, r3, #8
 800efce:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800efd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d00d      	beq.n	800eff2 <USB_DevInit+0x188>
}
 800efd6:	4640      	mov	r0, r8
 800efd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	b004      	add	sp, #16
 800efde:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800efe0:	4a08      	ldr	r2, [pc, #32]	; (800f004 <USB_DevInit+0x19a>)
 800efe2:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800efe4:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800efe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800efea:	f042 0203 	orr.w	r2, r2, #3
 800efee:	6332      	str	r2, [r6, #48]	; 0x30
 800eff0:	e7da      	b.n	800efa8 <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eff2:	69a3      	ldr	r3, [r4, #24]
 800eff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eff8:	f043 0304 	orr.w	r3, r3, #4
 800effc:	61a3      	str	r3, [r4, #24]
 800effe:	e7ea      	b.n	800efd6 <USB_DevInit+0x16c>
 800f000:	803c3800 	.word	0x803c3800
 800f004:	00800100 	.word	0x00800100

0800f008 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f008:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f00c:	f013 0306 	ands.w	r3, r3, #6
 800f010:	d007      	beq.n	800f022 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f012:	2b02      	cmp	r3, #2
 800f014:	d007      	beq.n	800f026 <USB_GetDevSpeed+0x1e>
 800f016:	2b06      	cmp	r3, #6
 800f018:	d001      	beq.n	800f01e <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 800f01a:	200f      	movs	r0, #15
}
 800f01c:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800f01e:	2002      	movs	r0, #2
 800f020:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800f022:	2000      	movs	r0, #0
 800f024:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800f026:	2002      	movs	r0, #2
 800f028:	4770      	bx	lr

0800f02a <USB_ActivateEndpoint>:
{
 800f02a:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f02c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f02e:	784a      	ldrb	r2, [r1, #1]
 800f030:	2a01      	cmp	r2, #1
 800f032:	d022      	beq.n	800f07a <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f034:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800f038:	f003 060f 	and.w	r6, r3, #15
 800f03c:	2401      	movs	r4, #1
 800f03e:	40b4      	lsls	r4, r6
 800f040:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f044:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f048:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f04c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f050:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f054:	d10e      	bne.n	800f074 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f056:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f05a:	688a      	ldr	r2, [r1, #8]
 800f05c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f060:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f062:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800f066:	4313      	orrs	r3, r2
 800f068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f06c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f070:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f074:	2000      	movs	r0, #0
 800f076:	bc70      	pop	{r4, r5, r6}
 800f078:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f07a:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800f07e:	f003 060f 	and.w	r6, r3, #15
 800f082:	40b2      	lsls	r2, r6
 800f084:	b292      	uxth	r2, r2
 800f086:	4322      	orrs	r2, r4
 800f088:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f08c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f090:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f094:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800f098:	d1ec      	bne.n	800f074 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f09a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f09e:	688c      	ldr	r4, [r1, #8]
 800f0a0:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f0a4:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f0a6:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f0aa:	ea44 5383 	orr.w	r3, r4, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f0bc:	e7da      	b.n	800f074 <USB_ActivateEndpoint+0x4a>

0800f0be <USB_ActivateDedicatedEndpoint>:
{
 800f0be:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f0c0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800f0c2:	784b      	ldrb	r3, [r1, #1]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d023      	beq.n	800f110 <USB_ActivateDedicatedEndpoint+0x52>
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f0c8:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 800f0cc:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f0d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f0d4:	d10e      	bne.n	800f0f4 <USB_ActivateDedicatedEndpoint+0x36>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f0d6:	f8d4 5b00 	ldr.w	r5, [r4, #2816]	; 0xb00
 800f0da:	688b      	ldr	r3, [r1, #8]
 800f0dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f0e0:	78ce      	ldrb	r6, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f0e2:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f0e6:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f0ea:	432b      	orrs	r3, r5
 800f0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0f0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f0f4:	f8d0 383c 	ldr.w	r3, [r0, #2108]	; 0x83c
 800f0f8:	780a      	ldrb	r2, [r1, #0]
 800f0fa:	f002 010f 	and.w	r1, r2, #15
 800f0fe:	2201      	movs	r2, #1
 800f100:	408a      	lsls	r2, r1
 800f102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f106:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
}
 800f10a:	2000      	movs	r0, #0
 800f10c:	bc70      	pop	{r4, r5, r6}
 800f10e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f110:	eb00 1542 	add.w	r5, r0, r2, lsl #5
 800f114:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800f118:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f11c:	d110      	bne.n	800f140 <USB_ActivateDedicatedEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f11e:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800f122:	688c      	ldr	r4, [r1, #8]
 800f124:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f128:	78ce      	ldrb	r6, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f12a:	ea44 4486 	orr.w	r4, r4, r6, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f12e:	ea44 5282 	orr.w	r2, r4, r2, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f132:	4313      	orrs	r3, r2
 800f134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f13c:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f140:	f8d0 283c 	ldr.w	r2, [r0, #2108]	; 0x83c
 800f144:	780b      	ldrb	r3, [r1, #0]
 800f146:	f003 010f 	and.w	r1, r3, #15
 800f14a:	2301      	movs	r3, #1
 800f14c:	408b      	lsls	r3, r1
 800f14e:	b29b      	uxth	r3, r3
 800f150:	4313      	orrs	r3, r2
 800f152:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
 800f156:	e7d8      	b.n	800f10a <USB_ActivateDedicatedEndpoint+0x4c>

0800f158 <USB_DeactivateEndpoint>:
{
 800f158:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f15a:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800f15c:	784b      	ldrb	r3, [r1, #1]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d01f      	beq.n	800f1a2 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f162:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800f166:	f004 060f 	and.w	r6, r4, #15
 800f16a:	2201      	movs	r2, #1
 800f16c:	fa02 f606 	lsl.w	r6, r2, r6
 800f170:	ea25 4506 	bic.w	r5, r5, r6, lsl #16
 800f174:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f178:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800f17c:	7809      	ldrb	r1, [r1, #0]
 800f17e:	f001 010f 	and.w	r1, r1, #15
 800f182:	408a      	lsls	r2, r1
 800f184:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800f188:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f18c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800f190:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f194:	4b12      	ldr	r3, [pc, #72]	; (800f1e0 <USB_DeactivateEndpoint+0x88>)
 800f196:	4013      	ands	r3, r2
 800f198:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f19c:	2000      	movs	r0, #0
 800f19e:	bc70      	pop	{r4, r5, r6}
 800f1a0:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f1a2:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 800f1a6:	f004 020f 	and.w	r2, r4, #15
 800f1aa:	fa03 f202 	lsl.w	r2, r3, r2
 800f1ae:	b292      	uxth	r2, r2
 800f1b0:	ea26 0202 	bic.w	r2, r6, r2
 800f1b4:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f1b8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800f1bc:	7809      	ldrb	r1, [r1, #0]
 800f1be:	f001 010f 	and.w	r1, r1, #15
 800f1c2:	408b      	lsls	r3, r1
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	ea22 0303 	bic.w	r3, r2, r3
 800f1ca:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f1ce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800f1d2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f1d6:	4b03      	ldr	r3, [pc, #12]	; (800f1e4 <USB_DeactivateEndpoint+0x8c>)
 800f1d8:	4013      	ands	r3, r2
 800f1da:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f1de:	e7dd      	b.n	800f19c <USB_DeactivateEndpoint+0x44>
 800f1e0:	eff37800 	.word	0xeff37800
 800f1e4:	ec337800 	.word	0xec337800

0800f1e8 <USB_DeactivateDedicatedEndpoint>:
  uint32_t epnum = (uint32_t)ep->num;
 800f1e8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f1ea:	784a      	ldrb	r2, [r1, #1]
 800f1ec:	2a01      	cmp	r2, #1
 800f1ee:	d014      	beq.n	800f21a <USB_DeactivateDedicatedEndpoint+0x32>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 800f1f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f1f4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f1f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f1fc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f200:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800f204:	780a      	ldrb	r2, [r1, #0]
 800f206:	f002 010f 	and.w	r1, r2, #15
 800f20a:	2201      	movs	r2, #1
 800f20c:	408a      	lsls	r2, r1
 800f20e:	ea23 4302 	bic.w	r3, r3, r2, lsl #16
 800f212:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800f216:	2000      	movs	r0, #0
 800f218:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 800f21a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f21e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f226:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f22a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800f22e:	780b      	ldrb	r3, [r1, #0]
 800f230:	f003 010f 	and.w	r1, r3, #15
 800f234:	2301      	movs	r3, #1
 800f236:	408b      	lsls	r3, r1
 800f238:	b29b      	uxth	r3, r3
 800f23a:	ea22 0303 	bic.w	r3, r2, r3
 800f23e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 800f242:	e7e8      	b.n	800f216 <USB_DeactivateDedicatedEndpoint+0x2e>

0800f244 <USB_EP0StartXfer>:
{
 800f244:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f246:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f248:	784c      	ldrb	r4, [r1, #1]
 800f24a:	2c01      	cmp	r4, #1
 800f24c:	d026      	beq.n	800f29c <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f24e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f252:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800f256:	691c      	ldr	r4, [r3, #16]
 800f258:	0ce4      	lsrs	r4, r4, #19
 800f25a:	04e4      	lsls	r4, r4, #19
 800f25c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f25e:	691c      	ldr	r4, [r3, #16]
 800f260:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f264:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f268:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800f26a:	694c      	ldr	r4, [r1, #20]
 800f26c:	b10c      	cbz	r4, 800f272 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800f26e:	688c      	ldr	r4, [r1, #8]
 800f270:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f272:	691c      	ldr	r4, [r3, #16]
 800f274:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f278:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f27a:	691c      	ldr	r4, [r3, #16]
 800f27c:	688d      	ldr	r5, [r1, #8]
 800f27e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f282:	432c      	orrs	r4, r5
 800f284:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800f286:	2a01      	cmp	r2, #1
 800f288:	d065      	beq.n	800f356 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f28a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f28e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f292:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f296:	2000      	movs	r0, #0
 800f298:	bc70      	pop	{r4, r5, r6}
 800f29a:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800f29c:	694c      	ldr	r4, [r1, #20]
 800f29e:	bb6c      	cbnz	r4, 800f2fc <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2a0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800f2a4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800f2a8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800f2ac:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800f2b0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f2b4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800f2b8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f2bc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2c0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800f2c4:	0ced      	lsrs	r5, r5, #19
 800f2c6:	04ed      	lsls	r5, r5, #19
 800f2c8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800f2cc:	2a01      	cmp	r2, #1
 800f2ce:	d033      	beq.n	800f338 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2d0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f2d4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f2d8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f2dc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800f2e0:	694b      	ldr	r3, [r1, #20]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d0d7      	beq.n	800f296 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f2e6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800f2ea:	7809      	ldrb	r1, [r1, #0]
 800f2ec:	f001 040f 	and.w	r4, r1, #15
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	40a1      	lsls	r1, r4
 800f2f4:	430a      	orrs	r2, r1
 800f2f6:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800f2fa:	e7cc      	b.n	800f296 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2fc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800f300:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800f304:	6925      	ldr	r5, [r4, #16]
 800f306:	0ced      	lsrs	r5, r5, #19
 800f308:	04ed      	lsls	r5, r5, #19
 800f30a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f30c:	6925      	ldr	r5, [r4, #16]
 800f30e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800f312:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800f316:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f318:	694e      	ldr	r6, [r1, #20]
 800f31a:	688d      	ldr	r5, [r1, #8]
 800f31c:	42ae      	cmp	r6, r5
 800f31e:	d900      	bls.n	800f322 <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 800f320:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f322:	6925      	ldr	r5, [r4, #16]
 800f324:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f328:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f32a:	6925      	ldr	r5, [r4, #16]
 800f32c:	694e      	ldr	r6, [r1, #20]
 800f32e:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800f332:	4335      	orrs	r5, r6
 800f334:	6125      	str	r5, [r4, #16]
 800f336:	e7c9      	b.n	800f2cc <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 800f338:	690a      	ldr	r2, [r1, #16]
 800f33a:	b11a      	cbz	r2, 800f344 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f33c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800f340:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f344:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f348:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f34c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f350:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800f354:	e79f      	b.n	800f296 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f356:	68ca      	ldr	r2, [r1, #12]
 800f358:	2a00      	cmp	r2, #0
 800f35a:	d096      	beq.n	800f28a <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f35c:	615a      	str	r2, [r3, #20]
 800f35e:	e794      	b.n	800f28a <USB_EP0StartXfer+0x46>

0800f360 <USB_WritePacket>:
{
 800f360:	b470      	push	{r4, r5, r6}
 800f362:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800f366:	b964      	cbnz	r4, 800f382 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f368:	3303      	adds	r3, #3
 800f36a:	089e      	lsrs	r6, r3, #2
    for (i = 0U; i < count32b; i++)
 800f36c:	e007      	b.n	800f37e <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f36e:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800f372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f376:	f851 5b04 	ldr.w	r5, [r1], #4
 800f37a:	601d      	str	r5, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800f37c:	3401      	adds	r4, #1
 800f37e:	42b4      	cmp	r4, r6
 800f380:	d3f5      	bcc.n	800f36e <USB_WritePacket+0xe>
}
 800f382:	2000      	movs	r0, #0
 800f384:	bc70      	pop	{r4, r5, r6}
 800f386:	4770      	bx	lr

0800f388 <USB_EPStartXfer>:
{
 800f388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f38a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800f38c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800f38e:	784b      	ldrb	r3, [r1, #1]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d02b      	beq.n	800f3ec <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f394:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f398:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800f39c:	691d      	ldr	r5, [r3, #16]
 800f39e:	0ced      	lsrs	r5, r5, #19
 800f3a0:	04ed      	lsls	r5, r5, #19
 800f3a2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f3a4:	691d      	ldr	r5, [r3, #16]
 800f3a6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800f3aa:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800f3ae:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len == 0U)
 800f3b0:	694d      	ldr	r5, [r1, #20]
 800f3b2:	2d00      	cmp	r5, #0
 800f3b4:	f040 80c5 	bne.w	800f542 <USB_EPStartXfer+0x1ba>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f3b8:	691d      	ldr	r5, [r3, #16]
 800f3ba:	688e      	ldr	r6, [r1, #8]
 800f3bc:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800f3c0:	4335      	orrs	r5, r6
 800f3c2:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3c4:	691d      	ldr	r5, [r3, #16]
 800f3c6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f3ca:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800f3cc:	2a01      	cmp	r2, #1
 800f3ce:	f000 80cd 	beq.w	800f56c <USB_EPStartXfer+0x1e4>
    if (ep->type == EP_TYPE_ISOC)
 800f3d2:	78cb      	ldrb	r3, [r1, #3]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	f000 80cf 	beq.w	800f578 <USB_EPStartXfer+0x1f0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f3da:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f3de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3e2:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	b003      	add	sp, #12
 800f3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800f3ec:	694b      	ldr	r3, [r1, #20]
 800f3ee:	bb83      	cbnz	r3, 800f452 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f3f0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800f3f4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f3f8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800f3fc:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800f400:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f404:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f408:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f40c:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f410:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f414:	0ced      	lsrs	r5, r5, #19
 800f416:	04ed      	lsls	r5, r5, #19
 800f418:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
    if (dma == 1U)
 800f41c:	2a01      	cmp	r2, #1
 800f41e:	d04c      	beq.n	800f4ba <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f420:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f424:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800f428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f42c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f430:	78cb      	ldrb	r3, [r1, #3]
 800f432:	2b01      	cmp	r3, #1
 800f434:	d06a      	beq.n	800f50c <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 800f436:	694b      	ldr	r3, [r1, #20]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d0d4      	beq.n	800f3e6 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f43c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800f440:	780a      	ldrb	r2, [r1, #0]
 800f442:	f002 010f 	and.w	r1, r2, #15
 800f446:	2201      	movs	r2, #1
 800f448:	408a      	lsls	r2, r1
 800f44a:	4313      	orrs	r3, r2
 800f44c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800f450:	e7c9      	b.n	800f3e6 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f452:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800f456:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f45a:	0ced      	lsrs	r5, r5, #19
 800f45c:	04ed      	lsls	r5, r5, #19
 800f45e:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f462:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f466:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800f46a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800f46e:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f472:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800f476:	694d      	ldr	r5, [r1, #20]
 800f478:	688f      	ldr	r7, [r1, #8]
 800f47a:	443d      	add	r5, r7
 800f47c:	3d01      	subs	r5, #1
 800f47e:	fbb5 f5f7 	udiv	r5, r5, r7
 800f482:	4f47      	ldr	r7, [pc, #284]	; (800f5a0 <USB_EPStartXfer+0x218>)
 800f484:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800f488:	4335      	orrs	r5, r6
 800f48a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f48e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800f492:	694e      	ldr	r6, [r1, #20]
 800f494:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800f498:	4335      	orrs	r5, r6
 800f49a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800f4a2:	78cd      	ldrb	r5, [r1, #3]
 800f4a4:	2d01      	cmp	r5, #1
 800f4a6:	d1b9      	bne.n	800f41c <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f4a8:	691d      	ldr	r5, [r3, #16]
 800f4aa:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800f4ae:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f4b0:	691d      	ldr	r5, [r3, #16]
 800f4b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f4b6:	611d      	str	r5, [r3, #16]
 800f4b8:	e7b0      	b.n	800f41c <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 800f4ba:	690b      	ldr	r3, [r1, #16]
 800f4bc:	b11b      	cbz	r3, 800f4c6 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f4be:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f4c2:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800f4c6:	78cb      	ldrb	r3, [r1, #3]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d008      	beq.n	800f4de <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f4cc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f4d0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800f4d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f4d8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800f4dc:	e783      	b.n	800f3e6 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f4de:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f4e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f4e6:	d108      	bne.n	800f4fa <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f4e8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f4ec:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800f4f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f4f4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 800f4f8:	e7e8      	b.n	800f4cc <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f4fa:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f4fe:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800f502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f506:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 800f50a:	e7df      	b.n	800f4cc <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f50c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f510:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f514:	d10e      	bne.n	800f534 <USB_EPStartXfer+0x1ac>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f516:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800f51a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f51e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800f522:	4614      	mov	r4, r2
 800f524:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f526:	68c9      	ldr	r1, [r1, #12]
 800f528:	781a      	ldrb	r2, [r3, #0]
 800f52a:	8a9b      	ldrh	r3, [r3, #20]
 800f52c:	9400      	str	r4, [sp, #0]
 800f52e:	f7ff ff17 	bl	800f360 <USB_WritePacket>
 800f532:	e758      	b.n	800f3e6 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f534:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800f538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f53c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800f540:	e7ef      	b.n	800f522 <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f542:	688e      	ldr	r6, [r1, #8]
 800f544:	4435      	add	r5, r6
 800f546:	3d01      	subs	r5, #1
 800f548:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f54c:	691e      	ldr	r6, [r3, #16]
 800f54e:	4f14      	ldr	r7, [pc, #80]	; (800f5a0 <USB_EPStartXfer+0x218>)
 800f550:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 800f554:	433e      	orrs	r6, r7
 800f556:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f558:	691f      	ldr	r7, [r3, #16]
 800f55a:	688e      	ldr	r6, [r1, #8]
 800f55c:	b2ad      	uxth	r5, r5
 800f55e:	fb06 f505 	mul.w	r5, r6, r5
 800f562:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f566:	433d      	orrs	r5, r7
 800f568:	611d      	str	r5, [r3, #16]
 800f56a:	e72f      	b.n	800f3cc <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f56c:	68ca      	ldr	r2, [r1, #12]
 800f56e:	2a00      	cmp	r2, #0
 800f570:	f43f af2f 	beq.w	800f3d2 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f574:	615a      	str	r2, [r3, #20]
 800f576:	e72c      	b.n	800f3d2 <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f578:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f57c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f580:	d106      	bne.n	800f590 <USB_EPStartXfer+0x208>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f582:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f58a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800f58e:	e724      	b.n	800f3da <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f590:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f598:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800f59c:	e71d      	b.n	800f3da <USB_EPStartXfer+0x52>
 800f59e:	bf00      	nop
 800f5a0:	1ff80000 	.word	0x1ff80000

0800f5a4 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f5a4:	3203      	adds	r2, #3
 800f5a6:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d20c      	bcs.n	800f5c8 <USB_ReadPacket+0x24>
{
 800f5ae:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f5b0:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800f5b4:	6824      	ldr	r4, [r4, #0]
 800f5b6:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d3f7      	bcc.n	800f5b0 <USB_ReadPacket+0xc>
}
 800f5c0:	4608      	mov	r0, r1
 800f5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	4608      	mov	r0, r1
 800f5ca:	4770      	bx	lr

0800f5cc <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f5cc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f5ce:	784a      	ldrb	r2, [r1, #1]
 800f5d0:	2a01      	cmp	r2, #1
 800f5d2:	d014      	beq.n	800f5fe <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5d4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f5d8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f5dc:	2a00      	cmp	r2, #0
 800f5de:	db06      	blt.n	800f5ee <USB_EPSetStall+0x22>
 800f5e0:	b12b      	cbz	r3, 800f5ee <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f5e2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f5e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f5ea:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f5ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f5f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5f6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5fe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f602:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f606:	2a00      	cmp	r2, #0
 800f608:	db06      	blt.n	800f618 <USB_EPSetStall+0x4c>
 800f60a:	b12b      	cbz	r3, 800f618 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f60c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f614:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f618:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f61c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f620:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f624:	e7e9      	b.n	800f5fa <USB_EPSetStall+0x2e>

0800f626 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f626:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f628:	784a      	ldrb	r2, [r1, #1]
 800f62a:	2a01      	cmp	r2, #1
 800f62c:	d00e      	beq.n	800f64c <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f62e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f632:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f63a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f63e:	78cb      	ldrb	r3, [r1, #3]
 800f640:	3b02      	subs	r3, #2
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b01      	cmp	r3, #1
 800f646:	d915      	bls.n	800f674 <USB_EPClearStall+0x4e>
}
 800f648:	2000      	movs	r0, #0
 800f64a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f64c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f650:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f658:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f65c:	78cb      	ldrb	r3, [r1, #3]
 800f65e:	3b02      	subs	r3, #2
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b01      	cmp	r3, #1
 800f664:	d8f0      	bhi.n	800f648 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f666:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f66a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f66e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f672:	e7e9      	b.n	800f648 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f674:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800f680:	e7e2      	b.n	800f648 <USB_EPClearStall+0x22>

0800f682 <USB_StopDevice>:
{
 800f682:	b538      	push	{r3, r4, r5, lr}
 800f684:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f686:	4604      	mov	r4, r0
  for (i = 0U; i < 15U; i++)
 800f688:	2200      	movs	r2, #0
 800f68a:	e008      	b.n	800f69e <USB_StopDevice+0x1c>
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f68c:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 800f690:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800f694:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f698:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0U; i < 15U; i++)
 800f69c:	3201      	adds	r2, #1
 800f69e:	2a0e      	cmp	r2, #14
 800f6a0:	d9f4      	bls.n	800f68c <USB_StopDevice+0xa>
  USBx_DEVICE->DIEPMSK  = 0U;
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f8c5 2810 	str.w	r2, [r5, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 800f6a8:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 800f6ac:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  ret = USB_FlushRxFifo(USBx);
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f7ff fbc1 	bl	800ee38 <USB_FlushRxFifo>
  if (ret != HAL_OK)
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	b108      	cbz	r0, 800f6be <USB_StopDevice+0x3c>
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	bd38      	pop	{r3, r4, r5, pc}
  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f6be:	2110      	movs	r1, #16
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f7ff fba5 	bl	800ee10 <USB_FlushTxFifo>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	e7f7      	b.n	800f6ba <USB_StopDevice+0x38>

0800f6ca <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f6ca:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800f6ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f6d2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f6d6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800f6da:	0109      	lsls	r1, r1, #4
 800f6dc:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800f6e0:	430b      	orrs	r3, r1
 800f6e2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	4770      	bx	lr

0800f6ea <USB_DevConnect>:
{
 800f6ea:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f6ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800f6f0:	f023 0302 	bic.w	r3, r3, #2
 800f6f4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800f6f8:	2003      	movs	r0, #3
 800f6fa:	f7f1 fea9 	bl	8001450 <HAL_Delay>
}
 800f6fe:	2000      	movs	r0, #0
 800f700:	bd08      	pop	{r3, pc}

0800f702 <USB_DevDisconnect>:
{
 800f702:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f704:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800f708:	f043 0302 	orr.w	r3, r3, #2
 800f70c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800f710:	2003      	movs	r0, #3
 800f712:	f7f1 fe9d 	bl	8001450 <HAL_Delay>
}
 800f716:	2000      	movs	r0, #0
 800f718:	bd08      	pop	{r3, pc}

0800f71a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f71a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f71c:	6980      	ldr	r0, [r0, #24]
}
 800f71e:	4010      	ands	r0, r2
 800f720:	4770      	bx	lr

0800f722 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f722:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800f726:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f72a:	69c0      	ldr	r0, [r0, #28]
 800f72c:	4018      	ands	r0, r3
}
 800f72e:	0c00      	lsrs	r0, r0, #16
 800f730:	4770      	bx	lr

0800f732 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f732:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800f736:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f73a:	69c0      	ldr	r0, [r0, #28]
 800f73c:	4018      	ands	r0, r3
}
 800f73e:	b280      	uxth	r0, r0
 800f740:	4770      	bx	lr

0800f742 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f742:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800f746:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f74a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f74e:	6940      	ldr	r0, [r0, #20]
}
 800f750:	4010      	ands	r0, r2
 800f752:	4770      	bx	lr

0800f754 <USB_ReadDevInEPInterrupt>:
{
 800f754:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800f756:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f75a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f75e:	f001 040f 	and.w	r4, r1, #15
 800f762:	40e3      	lsrs	r3, r4
 800f764:	01db      	lsls	r3, r3, #7
 800f766:	b2db      	uxtb	r3, r3
 800f768:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f76a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800f76e:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
}
 800f772:	4018      	ands	r0, r3
 800f774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <USB_ClearInterrupts>:
  USBx->GINTSTS |= interrupt;
 800f77a:	6943      	ldr	r3, [r0, #20]
 800f77c:	4319      	orrs	r1, r3
 800f77e:	6141      	str	r1, [r0, #20]
 800f780:	4770      	bx	lr

0800f782 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f782:	6940      	ldr	r0, [r0, #20]
}
 800f784:	f000 0001 	and.w	r0, r0, #1
 800f788:	4770      	bx	lr

0800f78a <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f78a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f78e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f792:	f023 0307 	bic.w	r3, r3, #7
 800f796:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f79a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800f79e:	689a      	ldr	r2, [r3, #8]
 800f7a0:	f002 0206 	and.w	r2, r2, #6
 800f7a4:	2a04      	cmp	r2, #4
 800f7a6:	d005      	beq.n	800f7b4 <USB_ActivateSetup+0x2a>
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f7ae:	605a      	str	r2, [r3, #4]
}
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	4770      	bx	lr
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800f7b4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f7b8:	f042 0203 	orr.w	r2, r2, #3
 800f7bc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800f7c0:	e7f2      	b.n	800f7a8 <USB_ActivateSetup+0x1e>

0800f7c2 <USB_EP0_OutStart>:
{
 800f7c2:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f7c4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f7c6:	4b15      	ldr	r3, [pc, #84]	; (800f81c <USB_EP0_OutStart+0x5a>)
 800f7c8:	429c      	cmp	r4, r3
 800f7ca:	d903      	bls.n	800f7d4 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	db16      	blt.n	800f802 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f7d4:	2400      	movs	r4, #0
 800f7d6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7da:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800f7de:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f7e2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f7e6:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800f7ea:	f044 0418 	orr.w	r4, r4, #24
 800f7ee:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f7f2:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800f7f6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800f7fa:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800f7fe:	2901      	cmp	r1, #1
 800f800:	d003      	beq.n	800f80a <USB_EP0_OutStart+0x48>
}
 800f802:	2000      	movs	r0, #0
 800f804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f808:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f80a:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f80e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f812:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f816:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800f81a:	e7f2      	b.n	800f802 <USB_EP0_OutStart+0x40>
 800f81c:	4f54300a 	.word	0x4f54300a

0800f820 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f820:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f822:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800f826:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800f82a:	f023 0303 	bic.w	r3, r3, #3
 800f82e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f832:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800f836:	f001 0203 	and.w	r2, r1, #3
 800f83a:	4313      	orrs	r3, r2
 800f83c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 800f840:	2901      	cmp	r1, #1
 800f842:	d005      	beq.n	800f850 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800f844:	2902      	cmp	r1, #2
 800f846:	d007      	beq.n	800f858 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 800f848:	2000      	movs	r0, #0
 800f84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f84e:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800f850:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	e7f7      	b.n	800f848 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 800f858:	f241 7370 	movw	r3, #6000	; 0x1770
 800f85c:	6063      	str	r3, [r4, #4]
 800f85e:	e7f3      	b.n	800f848 <USB_InitFSLSPClkSel+0x28>

0800f860 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f860:	b530      	push	{r4, r5, lr}
 800f862:	b083      	sub	sp, #12
 800f864:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800f866:	2500      	movs	r5, #0
 800f868:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800f86a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800f86e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f870:	9b01      	ldr	r3, [sp, #4]
 800f872:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f876:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f878:	9b01      	ldr	r3, [sp, #4]
 800f87a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f87e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800f882:	2064      	movs	r0, #100	; 0x64
 800f884:	f7f1 fde4 	bl	8001450 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f888:	9b01      	ldr	r3, [sp, #4]
 800f88a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f88e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800f892:	200a      	movs	r0, #10
 800f894:	f7f1 fddc 	bl	8001450 <HAL_Delay>

  return HAL_OK;
}
 800f898:	4628      	mov	r0, r5
 800f89a:	b003      	add	sp, #12
 800f89c:	bd30      	pop	{r4, r5, pc}

0800f89e <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f89e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800f8a4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800f8a8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f8aa:	9b01      	ldr	r3, [sp, #4]
 800f8ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f8b0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800f8b8:	d101      	bne.n	800f8be <USB_DriveVbus+0x20>
 800f8ba:	2901      	cmp	r1, #1
 800f8bc:	d00c      	beq.n	800f8d8 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f8be:	9b01      	ldr	r3, [sp, #4]
 800f8c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800f8c4:	d005      	beq.n	800f8d2 <USB_DriveVbus+0x34>
 800f8c6:	b921      	cbnz	r1, 800f8d2 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f8c8:	9b01      	ldr	r3, [sp, #4]
 800f8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8ce:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	b002      	add	sp, #8
 800f8d6:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f8d8:	9b01      	ldr	r3, [sp, #4]
 800f8da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f8de:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 800f8e2:	e7ec      	b.n	800f8be <USB_DriveVbus+0x20>

0800f8e4 <USB_HostInit>:
{
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	b538      	push	{r3, r4, r5, lr}
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	a805      	add	r0, sp, #20
 800f8ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8f0:	4625      	mov	r5, r4
  USBx_PCGCCTL = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f8f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8fe:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f902:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800f906:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f90a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f90e:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f912:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f916:	d010      	beq.n	800f93a <USB_HostInit+0x56>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800f918:	9b07      	ldr	r3, [sp, #28]
 800f91a:	2b03      	cmp	r3, #3
 800f91c:	d006      	beq.n	800f92c <USB_HostInit+0x48>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f91e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800f922:	f023 0304 	bic.w	r3, r3, #4
 800f926:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800f92a:	e00c      	b.n	800f946 <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f92c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800f930:	f043 0304 	orr.w	r3, r3, #4
 800f934:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800f938:	e005      	b.n	800f946 <USB_HostInit+0x62>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f93a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800f93e:	f023 0304 	bic.w	r3, r3, #4
 800f942:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800f946:	2110      	movs	r1, #16
 800f948:	4620      	mov	r0, r4
 800f94a:	f7ff fa61 	bl	800ee10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff fa72 	bl	800ee38 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800f954:	2200      	movs	r2, #0
 800f956:	e009      	b.n	800f96c <USB_HostInit+0x88>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f958:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 800f95c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f960:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800f964:	2100      	movs	r1, #0
 800f966:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 800f96a:	3201      	adds	r2, #1
 800f96c:	9b06      	ldr	r3, [sp, #24]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d3f2      	bcc.n	800f958 <USB_HostInit+0x74>
  (void)USB_DriveVbus(USBx, 1U);
 800f972:	2101      	movs	r1, #1
 800f974:	4620      	mov	r0, r4
 800f976:	f7ff ff92 	bl	800f89e <USB_DriveVbus>
  HAL_Delay(200U);
 800f97a:	20c8      	movs	r0, #200	; 0xc8
 800f97c:	f7f1 fd68 	bl	8001450 <HAL_Delay>
  USBx->GINTMSK = 0U;
 800f980:	2300      	movs	r3, #0
 800f982:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f988:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f98a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f98c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f990:	d017      	beq.n	800f9c2 <USB_HostInit+0xde>
    USBx->GRXFSIZ  = 0x200U;
 800f992:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f996:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f998:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800f99c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f99e:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <USB_HostInit+0xf0>)
 800f9a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800f9a4:	9b08      	ldr	r3, [sp, #32]
 800f9a6:	b91b      	cbnz	r3, 800f9b0 <USB_HostInit+0xcc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f9a8:	69a3      	ldr	r3, [r4, #24]
 800f9aa:	f043 0310 	orr.w	r3, r3, #16
 800f9ae:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f9b0:	69a2      	ldr	r2, [r4, #24]
 800f9b2:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <USB_HostInit+0xf4>)
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	61a3      	str	r3, [r4, #24]
}
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9be:	b004      	add	sp, #16
 800f9c0:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800f9c2:	2380      	movs	r3, #128	; 0x80
 800f9c4:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f9c6:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800f9ca:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f9cc:	4b03      	ldr	r3, [pc, #12]	; (800f9dc <USB_HostInit+0xf8>)
 800f9ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800f9d2:	e7e7      	b.n	800f9a4 <USB_HostInit+0xc0>
 800f9d4:	00e00300 	.word	0x00e00300
 800f9d8:	a3200008 	.word	0xa3200008
 800f9dc:	004000e0 	.word	0x004000e0

0800f9e0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800f9e6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800f9ea:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f9ec:	9801      	ldr	r0, [sp, #4]
}
 800f9ee:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800f9f2:	b002      	add	sp, #8
 800f9f4:	4770      	bx	lr

0800f9f6 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f9f6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f9fa:	6880      	ldr	r0, [r0, #8]
}
 800f9fc:	b280      	uxth	r0, r0
 800f9fe:	4770      	bx	lr

0800fa00 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa02:	f89d 4018 	ldrb.w	r4, [sp, #24]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800fa06:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800fa0a:	f505 66a0 	add.w	r6, r5, #1280	; 0x500
 800fa0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa12:	60b7      	str	r7, [r6, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800fa14:	2c03      	cmp	r4, #3
 800fa16:	d864      	bhi.n	800fae2 <USB_HC_Init+0xe2>
 800fa18:	e8df f004 	tbb	[pc, r4]
 800fa1c:	18025502 	.word	0x18025502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fa20:	f240 479d 	movw	r7, #1181	; 0x49d
 800fa24:	60f7      	str	r7, [r6, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800fa26:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fa2a:	d109      	bne.n	800fa40 <USB_HC_Init+0x40>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800fa2c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800fa2e:	f417 7f80 	tst.w	r7, #256	; 0x100
 800fa32:	d058      	beq.n	800fae6 <USB_HC_Init+0xe6>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800fa34:	68f7      	ldr	r7, [r6, #12]
 800fa36:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 800fa3a:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	e00c      	b.n	800fa5a <USB_HC_Init+0x5a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fa40:	68f7      	ldr	r7, [r6, #12]
 800fa42:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 800fa46:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa48:	2600      	movs	r6, #0
 800fa4a:	e006      	b.n	800fa5a <USB_HC_Init+0x5a>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fa4c:	f240 679d 	movw	r7, #1693	; 0x69d
 800fa50:	60f7      	str	r7, [r6, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fa52:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fa56:	d130      	bne.n	800faba <USB_HC_Init+0xba>
  HAL_StatusTypeDef ret = HAL_OK;
 800fa58:	2600      	movs	r6, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800fa5a:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 800fa5e:	f001 010f 	and.w	r1, r1, #15
 800fa62:	f04f 0e01 	mov.w	lr, #1
 800fa66:	fa0e f101 	lsl.w	r1, lr, r1
 800fa6a:	4339      	orrs	r1, r7
 800fa6c:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800fa70:	6981      	ldr	r1, [r0, #24]
 800fa72:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800fa76:	6181      	str	r1, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800fa78:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fa7c:	d135      	bne.n	800faea <USB_HC_Init+0xea>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800fa7e:	2000      	movs	r0, #0
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800fa80:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800fa84:	2902      	cmp	r1, #2
 800fa86:	d033      	beq.n	800faf0 <USB_HC_Init+0xf0>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800fa88:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa8a:	059b      	lsls	r3, r3, #22
 800fa8c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fa90:	02d2      	lsls	r2, r2, #11
 800fa92:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa96:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fa98:	04a2      	lsls	r2, r4, #18
 800fa9a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fa9e:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800faa0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800faa4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800faa8:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800faaa:	4303      	orrs	r3, r0
 800faac:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800faae:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 800fab2:	2c03      	cmp	r4, #3
 800fab4:	d01f      	beq.n	800faf6 <USB_HC_Init+0xf6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 800fab6:	4630      	mov	r0, r6
 800fab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800faba:	68f7      	ldr	r7, [r6, #12]
 800fabc:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 800fac0:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fac2:	2600      	movs	r6, #0
 800fac4:	e7c9      	b.n	800fa5a <USB_HC_Init+0x5a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fac6:	f240 2725 	movw	r7, #549	; 0x225
 800faca:	60f7      	str	r7, [r6, #12]
      if ((epnum & 0x80U) == 0x80U)
 800facc:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fad0:	d101      	bne.n	800fad6 <USB_HC_Init+0xd6>
  HAL_StatusTypeDef ret = HAL_OK;
 800fad2:	2600      	movs	r6, #0
 800fad4:	e7c1      	b.n	800fa5a <USB_HC_Init+0x5a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800fad6:	68f7      	ldr	r7, [r6, #12]
 800fad8:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 800fadc:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fade:	2600      	movs	r6, #0
 800fae0:	e7bb      	b.n	800fa5a <USB_HC_Init+0x5a>
      ret = HAL_ERROR;
 800fae2:	2601      	movs	r6, #1
 800fae4:	e7b9      	b.n	800fa5a <USB_HC_Init+0x5a>
  HAL_StatusTypeDef ret = HAL_OK;
 800fae6:	2600      	movs	r6, #0
 800fae8:	e7b7      	b.n	800fa5a <USB_HC_Init+0x5a>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800faea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800faee:	e7c7      	b.n	800fa80 <USB_HC_Init+0x80>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800faf0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800faf4:	e7c9      	b.n	800fa8a <USB_HC_Init+0x8a>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800faf6:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800fafa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fafe:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
 800fb02:	e7d8      	b.n	800fab6 <USB_HC_Init+0xb6>

0800fb04 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fb04:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800fb08:	6940      	ldr	r0, [r0, #20]
}
 800fb0a:	b280      	uxth	r0, r0
 800fb0c:	4770      	bx	lr

0800fb0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fb0e:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fb10:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800fb14:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
 800fb18:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb1c:	f3c3 4381 	ubfx	r3, r3, #18, #2

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fb20:	b33b      	cbz	r3, 800fb72 <USB_HC_Halt+0x64>
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d025      	beq.n	800fb72 <USB_HC_Halt+0x64>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fb26:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb2e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fb32:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800fb36:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800fb3a:	d149      	bne.n	800fbd0 <USB_HC_Halt+0xc2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fb3c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb44:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb48:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb50:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fb54:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb5c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 800fb60:	2300      	movs	r3, #0
      do
      {
        if (++count > 1000U)
 800fb62:	3301      	adds	r3, #1
 800fb64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb68:	d827      	bhi.n	800fbba <USB_HC_Halt+0xac>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fb6a:	6822      	ldr	r2, [r4, #0]
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	dbf8      	blt.n	800fb62 <USB_HC_Halt+0x54>
 800fb70:	e023      	b.n	800fbba <USB_HC_Halt+0xac>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fb72:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb7a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fb7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb80:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800fb84:	d11d      	bne.n	800fbc2 <USB_HC_Halt+0xb4>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fb86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fb96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fb9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fba2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fba6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 800fbaa:	2300      	movs	r3, #0
        if (++count > 1000U)
 800fbac:	3301      	adds	r3, #1
 800fbae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fbb2:	d802      	bhi.n	800fbba <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fbb4:	6822      	ldr	r2, [r4, #0]
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	dbf8      	blt.n	800fbac <USB_HC_Halt+0x9e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800fbba:	2000      	movs	r0, #0
 800fbbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbc0:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fbc2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fbc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fbca:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800fbce:	e7f4      	b.n	800fbba <USB_HC_Halt+0xac>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fbd0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fbd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fbd8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800fbdc:	e7ed      	b.n	800fbba <USB_HC_Halt+0xac>

0800fbde <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fbde:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800fbe2:	4a06      	ldr	r2, [pc, #24]	; (800fbfc <USB_DoPing+0x1e>)
 800fbe4:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800fbe8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fbec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fbf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800fbf4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	4770      	bx	lr
 800fbfc:	80080000 	.word	0x80080000

0800fc00 <USB_HC_StartXfer>:
{
 800fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc02:	b083      	sub	sp, #12
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800fc04:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800fc06:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800fc08:	f414 7f80 	tst.w	r4, #256	; 0x100
 800fc0c:	d007      	beq.n	800fc1e <USB_HC_StartXfer+0x1e>
 800fc0e:	790c      	ldrb	r4, [r1, #4]
 800fc10:	b92c      	cbnz	r4, 800fc1e <USB_HC_StartXfer+0x1e>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800fc12:	b912      	cbnz	r2, 800fc1a <USB_HC_StartXfer+0x1a>
 800fc14:	794c      	ldrb	r4, [r1, #5]
 800fc16:	2c01      	cmp	r4, #1
 800fc18:	d011      	beq.n	800fc3e <USB_HC_StartXfer+0x3e>
    else if (dma == 1U)
 800fc1a:	2a01      	cmp	r2, #1
 800fc1c:	d013      	beq.n	800fc46 <USB_HC_StartXfer+0x46>
  if (hc->xfer_len > 0U)
 800fc1e:	690c      	ldr	r4, [r1, #16]
 800fc20:	b1e4      	cbz	r4, 800fc5c <USB_HC_StartXfer+0x5c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800fc22:	890d      	ldrh	r5, [r1, #8]
 800fc24:	442c      	add	r4, r5
 800fc26:	3c01      	subs	r4, #1
 800fc28:	fbb4 f4f5 	udiv	r4, r4, r5
 800fc2c:	b2a4      	uxth	r4, r4
    if (num_packets > max_hc_pkt_count)
 800fc2e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800fc32:	d914      	bls.n	800fc5e <USB_HC_StartXfer+0x5e>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800fc34:	022d      	lsls	r5, r5, #8
 800fc36:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 800fc38:	f44f 7480 	mov.w	r4, #256	; 0x100
 800fc3c:	e00f      	b.n	800fc5e <USB_HC_StartXfer+0x5e>
      (void)USB_DoPing(USBx, hc->ch_num);
 800fc3e:	4619      	mov	r1, r3
 800fc40:	f7ff ffcd 	bl	800fbde <USB_DoPing>
      return HAL_OK;
 800fc44:	e075      	b.n	800fd32 <USB_HC_StartXfer+0x132>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800fc46:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800fc4a:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 800fc4e:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 800fc52:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
      hc->do_ping = 0U;
 800fc56:	2400      	movs	r4, #0
 800fc58:	714c      	strb	r4, [r1, #5]
 800fc5a:	e7e0      	b.n	800fc1e <USB_HC_StartXfer+0x1e>
    num_packets = 1U;
 800fc5c:	2401      	movs	r4, #1
  if (hc->ep_is_in != 0U)
 800fc5e:	78cd      	ldrb	r5, [r1, #3]
 800fc60:	b11d      	cbz	r5, 800fc6a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800fc62:	890d      	ldrh	r5, [r1, #8]
 800fc64:	fb05 f504 	mul.w	r5, r5, r4
 800fc68:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800fc6a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800fc6e:	690d      	ldr	r5, [r1, #16]
 800fc70:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fc74:	4f36      	ldr	r7, [pc, #216]	; (800fd50 <USB_HC_StartXfer+0x150>)
 800fc76:	ea07 44c4 	and.w	r4, r7, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800fc7a:	432c      	orrs	r4, r5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fc7c:	7a8d      	ldrb	r5, [r1, #10]
 800fc7e:	076d      	lsls	r5, r5, #29
 800fc80:	f005 45c0 	and.w	r5, r5, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fc84:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800fc86:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 800fc8a:	b112      	cbz	r2, 800fc92 <USB_HC_StartXfer+0x92>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800fc8c:	68cc      	ldr	r4, [r1, #12]
 800fc8e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fc92:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 800fc96:	68b4      	ldr	r4, [r6, #8]
 800fc98:	f014 0f01 	tst.w	r4, #1
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800fc9c:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 800fca0:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 800fca4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800fca8:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 800fcac:	bf0c      	ite	eq
 800fcae:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 800fcb2:	2500      	movne	r5, #0
 800fcb4:	432c      	orrs	r4, r5
 800fcb6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fcba:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 800fcbe:	4c25      	ldr	r4, [pc, #148]	; (800fd54 <USB_HC_StartXfer+0x154>)
 800fcc0:	6025      	str	r5, [r4, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fcc2:	6825      	ldr	r5, [r4, #0]
 800fcc4:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 800fcc8:	6025      	str	r5, [r4, #0]
  if (hc->ep_is_in != 0U)
 800fcca:	78cc      	ldrb	r4, [r1, #3]
 800fccc:	b1c4      	cbz	r4, 800fd00 <USB_HC_StartXfer+0x100>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800fcce:	4d21      	ldr	r5, [pc, #132]	; (800fd54 <USB_HC_StartXfer+0x154>)
 800fcd0:	682c      	ldr	r4, [r5, #0]
 800fcd2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800fcd6:	602c      	str	r4, [r5, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fcd8:	4c1e      	ldr	r4, [pc, #120]	; (800fd54 <USB_HC_StartXfer+0x154>)
 800fcda:	6825      	ldr	r5, [r4, #0]
 800fcdc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800fce0:	6025      	str	r5, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fce2:	6824      	ldr	r4, [r4, #0]
 800fce4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800fce8:	bb1a      	cbnz	r2, 800fd32 <USB_HC_StartXfer+0x132>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800fcea:	78cb      	ldrb	r3, [r1, #3]
 800fcec:	bb0b      	cbnz	r3, 800fd32 <USB_HC_StartXfer+0x132>
 800fcee:	690b      	ldr	r3, [r1, #16]
 800fcf0:	b1fb      	cbz	r3, 800fd32 <USB_HC_StartXfer+0x132>
      switch (hc->ep_type)
 800fcf2:	79ca      	ldrb	r2, [r1, #7]
 800fcf4:	2a03      	cmp	r2, #3
 800fcf6:	d814      	bhi.n	800fd22 <USB_HC_StartXfer+0x122>
 800fcf8:	e8df f002 	tbb	[pc, r2]
 800fcfc:	1e081e08 	.word	0x1e081e08
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800fd00:	4d14      	ldr	r5, [pc, #80]	; (800fd54 <USB_HC_StartXfer+0x154>)
 800fd02:	682c      	ldr	r4, [r5, #0]
 800fd04:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800fd08:	602c      	str	r4, [r5, #0]
 800fd0a:	e7e5      	b.n	800fcd8 <USB_HC_StartXfer+0xd8>
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fd0c:	3303      	adds	r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800fd0e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fd10:	b292      	uxth	r2, r2
 800fd12:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d903      	bls.n	800fd22 <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800fd1a:	6983      	ldr	r3, [r0, #24]
 800fd1c:	f043 0320 	orr.w	r3, r3, #32
 800fd20:	6183      	str	r3, [r0, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800fd22:	68cc      	ldr	r4, [r1, #12]
 800fd24:	784a      	ldrb	r2, [r1, #1]
 800fd26:	8a0b      	ldrh	r3, [r1, #16]
 800fd28:	2100      	movs	r1, #0
 800fd2a:	9100      	str	r1, [sp, #0]
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	f7ff fb17 	bl	800f360 <USB_WritePacket>
}
 800fd32:	2000      	movs	r0, #0
 800fd34:	b003      	add	sp, #12
 800fd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fd38:	3303      	adds	r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800fd3a:	6932      	ldr	r2, [r6, #16]
 800fd3c:	b292      	uxth	r2, r2
 800fd3e:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d9ed      	bls.n	800fd22 <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800fd46:	6983      	ldr	r3, [r0, #24]
 800fd48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd4c:	6183      	str	r3, [r0, #24]
 800fd4e:	e7e8      	b.n	800fd22 <USB_HC_StartXfer+0x122>
 800fd50:	1ff80000 	.word	0x1ff80000
 800fd54:	20000820 	.word	0x20000820

0800fd58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd5c:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800fd5e:	f7ff f839 	bl	800edd4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800fd62:	2110      	movs	r1, #16
 800fd64:	4628      	mov	r0, r5
 800fd66:	f7ff f853 	bl	800ee10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f7ff f864 	bl	800ee38 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fd70:	2200      	movs	r2, #0
 800fd72:	e00a      	b.n	800fd8a <USB_StopHost+0x32>
  {
    value = USBx_HC(i)->HCCHAR;
 800fd74:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 800fd78:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800fd7c:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fd80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800fd84:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 800fd88:	3201      	adds	r2, #1
 800fd8a:	2a0f      	cmp	r2, #15
 800fd8c:	d9f2      	bls.n	800fd74 <USB_StopHost+0x1c>
 800fd8e:	2000      	movs	r0, #0
 800fd90:	4603      	mov	r3, r0
 800fd92:	e000      	b.n	800fd96 <USB_StopHost+0x3e>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fd94:	3001      	adds	r0, #1
 800fd96:	280f      	cmp	r0, #15
 800fd98:	d813      	bhi.n	800fdc2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800fd9a:	eb04 1640 	add.w	r6, r4, r0, lsl #5
 800fd9e:	f506 61a0 	add.w	r1, r6, #1280	; 0x500
 800fda2:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
 800fda6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fdaa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800fdae:	f8c6 2500 	str.w	r2, [r6, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fdb8:	d8ec      	bhi.n	800fd94 <USB_StopHost+0x3c>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fdba:	680a      	ldr	r2, [r1, #0]
 800fdbc:	2a00      	cmp	r2, #0
 800fdbe:	dbf8      	blt.n	800fdb2 <USB_StopHost+0x5a>
 800fdc0:	e7e8      	b.n	800fd94 <USB_StopHost+0x3c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800fdc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdc6:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fdca:	616b      	str	r3, [r5, #20]
  (void)USB_EnableGlobalInt(USBx);
 800fdcc:	4628      	mov	r0, r5
 800fdce:	f7fe fffb 	bl	800edc8 <USB_EnableGlobalInt>

  return HAL_OK;
}
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	bd70      	pop	{r4, r5, r6, pc}

0800fdd6 <USB_ActivateRemoteWakeup>:
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800fdd6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800fdda:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fdde:	f013 0f01 	tst.w	r3, #1
 800fde2:	d003      	beq.n	800fdec <USB_ActivateRemoteWakeup+0x16>
  {
    /* active Remote wakeup signalling */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 800fde4:	6843      	ldr	r3, [r0, #4]
 800fde6:	f043 0301 	orr.w	r3, r3, #1
 800fdea:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800fdec:	2000      	movs	r0, #0
 800fdee:	4770      	bx	lr

0800fdf0 <USB_DeActivateRemoteWakeup>:
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* active Remote wakeup signalling */
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 800fdf0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800fdf4:	f023 0301 	bic.w	r3, r3, #1
 800fdf8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	4770      	bx	lr

0800fe00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800fe00:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fe02:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fe06:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800fe0a:	b15b      	cbz	r3, 800fe24 <USBD_CDC_EP0_RxReady+0x24>
 800fe0c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800fe10:	28ff      	cmp	r0, #255	; 0xff
 800fe12:	d007      	beq.n	800fe24 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800fe1e:	23ff      	movs	r3, #255	; 0xff
 800fe20:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800fe24:	2000      	movs	r0, #0
 800fe26:	bd10      	pop	{r4, pc}

0800fe28 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800fe28:	2343      	movs	r3, #67	; 0x43
 800fe2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800fe2c:	4800      	ldr	r0, [pc, #0]	; (800fe30 <USBD_CDC_GetFSCfgDesc+0x8>)
 800fe2e:	4770      	bx	lr
 800fe30:	20000014 	.word	0x20000014

0800fe34 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800fe34:	2343      	movs	r3, #67	; 0x43
 800fe36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800fe38:	4800      	ldr	r0, [pc, #0]	; (800fe3c <USBD_CDC_GetHSCfgDesc+0x8>)
 800fe3a:	4770      	bx	lr
 800fe3c:	20000058 	.word	0x20000058

0800fe40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800fe40:	2343      	movs	r3, #67	; 0x43
 800fe42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800fe44:	4800      	ldr	r0, [pc, #0]	; (800fe48 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800fe46:	4770      	bx	lr
 800fe48:	2000009c 	.word	0x2000009c

0800fe4c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800fe4c:	230a      	movs	r3, #10
 800fe4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800fe50:	4800      	ldr	r0, [pc, #0]	; (800fe54 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800fe52:	4770      	bx	lr
 800fe54:	200000e0 	.word	0x200000e0

0800fe58 <USBD_CDC_DataOut>:
{
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fe5c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800fe60:	f007 ff81 	bl	8017d66 <USBD_LL_GetRxDataSize>
 800fe64:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800fe68:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800fe6c:	b14b      	cbz	r3, 800fe82 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fe6e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800fe78:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800fe7c:	4798      	blx	r3
    return USBD_OK;
 800fe7e:	2000      	movs	r0, #0
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800fe82:	2002      	movs	r0, #2
}
 800fe84:	bd38      	pop	{r3, r4, r5, pc}

0800fe86 <USBD_CDC_DataIn>:
{
 800fe86:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800fe88:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fe8c:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
  if(pdev->pClassData != NULL)
 800fe90:	b1fa      	cbz	r2, 800fed2 <USBD_CDC_DataIn+0x4c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800fe92:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800fe96:	00a3      	lsls	r3, r4, #2
 800fe98:	4403      	add	r3, r0
 800fe9a:	69db      	ldr	r3, [r3, #28]
 800fe9c:	b14b      	cbz	r3, 800feb2 <USBD_CDC_DataIn+0x2c>
 800fe9e:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800fea2:	00b4      	lsls	r4, r6, #2
 800fea4:	4425      	add	r5, r4
 800fea6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800fea8:	fbb3 f4f5 	udiv	r4, r3, r5
 800feac:	fb05 3314 	mls	r3, r5, r4, r3
 800feb0:	b11b      	cbz	r3, 800feba <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800feb2:	2000      	movs	r0, #0
 800feb4:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800feb8:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800feba:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800febe:	0093      	lsls	r3, r2, #2
 800fec0:	4403      	add	r3, r0
 800fec2:	2400      	movs	r4, #0
 800fec4:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800fec6:	4623      	mov	r3, r4
 800fec8:	4622      	mov	r2, r4
 800feca:	f007 ffaa 	bl	8017e22 <USBD_LL_Transmit>
    return USBD_OK;
 800fece:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800fed0:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800fed2:	2002      	movs	r0, #2
}
 800fed4:	bd70      	pop	{r4, r5, r6, pc}

0800fed6 <USBD_CDC_Setup>:
{
 800fed6:	b570      	push	{r4, r5, r6, lr}
 800fed8:	b082      	sub	sp, #8
 800feda:	4605      	mov	r5, r0
 800fedc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fede:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800fee2:	2300      	movs	r3, #0
 800fee4:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800fee8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800feec:	780b      	ldrb	r3, [r1, #0]
 800feee:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 800fef2:	d027      	beq.n	800ff44 <USBD_CDC_Setup+0x6e>
 800fef4:	2a20      	cmp	r2, #32
 800fef6:	d154      	bne.n	800ffa2 <USBD_CDC_Setup+0xcc>
    if (req->wLength)
 800fef8:	88ca      	ldrh	r2, [r1, #6]
 800fefa:	b1da      	cbz	r2, 800ff34 <USBD_CDC_Setup+0x5e>
      if (req->bmRequest & 0x80U)
 800fefc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff00:	d10b      	bne.n	800ff1a <USBD_CDC_Setup+0x44>
        hcdc->CmdOpCode = req->bRequest;
 800ff02:	784b      	ldrb	r3, [r1, #1]
 800ff04:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ff08:	798b      	ldrb	r3, [r1, #6]
 800ff0a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ff0e:	88ca      	ldrh	r2, [r1, #6]
 800ff10:	4631      	mov	r1, r6
 800ff12:	f000 fdd4 	bl	8010abe <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800ff16:	2000      	movs	r0, #0
 800ff18:	e046      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff1a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	4631      	mov	r1, r6
 800ff22:	7860      	ldrb	r0, [r4, #1]
 800ff24:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ff26:	88e2      	ldrh	r2, [r4, #6]
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f000 fdb2 	bl	8010a94 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ff30:	2000      	movs	r0, #0
 800ff32:	e039      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff34:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	7848      	ldrb	r0, [r1, #1]
 800ff3e:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800ff40:	2000      	movs	r0, #0
 800ff42:	e031      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
    switch (req->bRequest)
 800ff44:	784b      	ldrb	r3, [r1, #1]
 800ff46:	2b0a      	cmp	r3, #10
 800ff48:	d014      	beq.n	800ff74 <USBD_CDC_Setup+0x9e>
 800ff4a:	2b0b      	cmp	r3, #11
 800ff4c:	d021      	beq.n	800ff92 <USBD_CDC_Setup+0xbc>
 800ff4e:	b11b      	cbz	r3, 800ff58 <USBD_CDC_Setup+0x82>
      USBD_CtlError (pdev, req);
 800ff50:	f000 faa6 	bl	80104a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800ff54:	2002      	movs	r0, #2
      break;
 800ff56:	e027      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff58:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ff5c:	2b03      	cmp	r3, #3
 800ff5e:	d003      	beq.n	800ff68 <USBD_CDC_Setup+0x92>
        USBD_CtlError (pdev, req);
 800ff60:	f000 fa9e 	bl	80104a0 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ff64:	2002      	movs	r0, #2
 800ff66:	e01f      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ff68:	2202      	movs	r2, #2
 800ff6a:	a901      	add	r1, sp, #4
 800ff6c:	f000 fd92 	bl	8010a94 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ff70:	2000      	movs	r0, #0
 800ff72:	e019      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff74:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d003      	beq.n	800ff84 <USBD_CDC_Setup+0xae>
        USBD_CtlError (pdev, req);
 800ff7c:	f000 fa90 	bl	80104a0 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ff80:	2002      	movs	r0, #2
 800ff82:	e011      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ff84:	2201      	movs	r2, #1
 800ff86:	f10d 0107 	add.w	r1, sp, #7
 800ff8a:	f000 fd83 	bl	8010a94 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ff8e:	2000      	movs	r0, #0
 800ff90:	e00a      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ff92:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ff96:	2b03      	cmp	r3, #3
 800ff98:	d008      	beq.n	800ffac <USBD_CDC_Setup+0xd6>
        USBD_CtlError (pdev, req);
 800ff9a:	f000 fa81 	bl	80104a0 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ff9e:	2002      	movs	r0, #2
 800ffa0:	e002      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>
    USBD_CtlError (pdev, req);
 800ffa2:	f000 fa7d 	bl	80104a0 <USBD_CtlError>
    ret = USBD_FAIL;
 800ffa6:	2002      	movs	r0, #2
}
 800ffa8:	b002      	add	sp, #8
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = USBD_OK;
 800ffac:	2000      	movs	r0, #0
 800ffae:	e7fb      	b.n	800ffa8 <USBD_CDC_Setup+0xd2>

0800ffb0 <USBD_CDC_DeInit>:
{
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ffb4:	2181      	movs	r1, #129	; 0x81
 800ffb6:	f007 ff0c 	bl	8017dd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ffba:	2500      	movs	r5, #0
 800ffbc:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ffbe:	2101      	movs	r1, #1
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f007 ff06 	bl	8017dd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ffc6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ffca:	2182      	movs	r1, #130	; 0x82
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f007 ff00 	bl	8017dd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ffd2:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800ffd4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800ffd8:	b14b      	cbz	r3, 800ffee <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ffda:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ffe2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800ffe6:	f008 fe61 	bl	8018cac <free>
    pdev->pClassData = NULL;
 800ffea:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800ffee:	2000      	movs	r0, #0
 800fff0:	bd38      	pop	{r3, r4, r5, pc}

0800fff2 <USBD_CDC_Init>:
{
 800fff2:	b538      	push	{r3, r4, r5, lr}
 800fff4:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fff6:	7c03      	ldrb	r3, [r0, #16]
 800fff8:	bba3      	cbnz	r3, 8010064 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fffe:	2202      	movs	r2, #2
 8010000:	2181      	movs	r1, #129	; 0x81
 8010002:	f007 fedb 	bl	8017dbc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010006:	2501      	movs	r5, #1
 8010008:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801000a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801000e:	2202      	movs	r2, #2
 8010010:	4629      	mov	r1, r5
 8010012:	4620      	mov	r0, r4
 8010014:	f007 fed2 	bl	8017dbc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010018:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801001c:	2308      	movs	r3, #8
 801001e:	2203      	movs	r2, #3
 8010020:	2182      	movs	r1, #130	; 0x82
 8010022:	4620      	mov	r0, r4
 8010024:	f007 feca 	bl	8017dbc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010028:	2301      	movs	r3, #1
 801002a:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 801002c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010030:	f008 fe34 	bl	8018c9c <malloc>
 8010034:	4605      	mov	r5, r0
 8010036:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 801003a:	b368      	cbz	r0, 8010098 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801003c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4798      	blx	r3
    hcdc->TxState = 0U;
 8010044:	2300      	movs	r3, #0
 8010046:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 801004a:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 801004e:	7c23      	ldrb	r3, [r4, #16]
 8010050:	b1c3      	cbz	r3, 8010084 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010052:	2340      	movs	r3, #64	; 0x40
 8010054:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8010058:	2101      	movs	r1, #1
 801005a:	4620      	mov	r0, r4
 801005c:	f007 fee9 	bl	8017e32 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8010060:	2000      	movs	r0, #0
 8010062:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010064:	2340      	movs	r3, #64	; 0x40
 8010066:	2202      	movs	r2, #2
 8010068:	2181      	movs	r1, #129	; 0x81
 801006a:	f007 fea7 	bl	8017dbc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801006e:	2501      	movs	r5, #1
 8010070:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010072:	2340      	movs	r3, #64	; 0x40
 8010074:	2202      	movs	r2, #2
 8010076:	4629      	mov	r1, r5
 8010078:	4620      	mov	r0, r4
 801007a:	f007 fe9f 	bl	8017dbc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801007e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8010082:	e7cb      	b.n	801001c <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010088:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 801008c:	2101      	movs	r1, #1
 801008e:	4620      	mov	r0, r4
 8010090:	f007 fecf 	bl	8017e32 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8010094:	2000      	movs	r0, #0
 8010096:	bd38      	pop	{r3, r4, r5, pc}
    ret = 1U;
 8010098:	2001      	movs	r0, #1
}
 801009a:	bd38      	pop	{r3, r4, r5, pc}

0801009c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 801009c:	b119      	cbz	r1, 80100a6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 801009e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80100a2:	2000      	movs	r0, #0
 80100a4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80100a6:	2002      	movs	r0, #2
  }

  return ret;
}
 80100a8:	4770      	bx	lr

080100aa <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100aa:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 80100ae:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80100b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 80100b6:	2000      	movs	r0, #0
 80100b8:	4770      	bx	lr

080100ba <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100ba:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 80100be:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 80100c2:	2000      	movs	r0, #0
 80100c4:	4770      	bx	lr

080100c6 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100c6:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 80100ca:	b1a2      	cbz	r2, 80100f6 <USBD_CDC_TransmitPacket+0x30>
{
 80100cc:	b508      	push	{r3, lr}
  {
    if(hcdc->TxState == 0U)
 80100ce:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80100d2:	b10b      	cbz	r3, 80100d8 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80100d4:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80100d6:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 80100d8:	2301      	movs	r3, #1
 80100da:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80100de:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80100e2:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80100e4:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80100e8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80100ec:	2181      	movs	r1, #129	; 0x81
 80100ee:	f007 fe98 	bl	8017e22 <USBD_LL_Transmit>
      return USBD_OK;
 80100f2:	2000      	movs	r0, #0
 80100f4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80100f6:	2002      	movs	r0, #2
 80100f8:	4770      	bx	lr

080100fa <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100fa:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80100fe:	b19a      	cbz	r2, 8010128 <USBD_CDC_ReceivePacket+0x2e>
{
 8010100:	b508      	push	{r3, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010102:	7c03      	ldrb	r3, [r0, #16]
 8010104:	b13b      	cbz	r3, 8010116 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010106:	2340      	movs	r3, #64	; 0x40
 8010108:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 801010c:	2101      	movs	r1, #1
 801010e:	f007 fe90 	bl	8017e32 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010112:	2000      	movs	r0, #0
 8010114:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8010116:	f44f 7300 	mov.w	r3, #512	; 0x200
 801011a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 801011e:	2101      	movs	r1, #1
 8010120:	f007 fe87 	bl	8017e32 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8010124:	2000      	movs	r0, #0
 8010126:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 8010128:	2002      	movs	r0, #2
 801012a:	4770      	bx	lr

0801012c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801012c:	b198      	cbz	r0, 8010156 <USBD_Init+0x2a>
{
 801012e:	b508      	push	{r3, lr}
 8010130:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010132:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 8010136:	b110      	cbz	r0, 801013e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8010138:	2000      	movs	r0, #0
 801013a:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 801013e:	b109      	cbz	r1, 8010144 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8010140:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 8010144:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010146:	2301      	movs	r3, #1
 8010148:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 801014c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801014e:	f007 fdbf 	bl	8017cd0 <USBD_LL_Init>

  return USBD_OK;
 8010152:	2000      	movs	r0, #0
 8010154:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8010156:	2002      	movs	r0, #2
 8010158:	4770      	bx	lr

0801015a <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 801015a:	b510      	push	{r4, lr}
 801015c:	4604      	mov	r4, r0
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 801015e:	2301      	movs	r3, #1
 8010160:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010164:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	7901      	ldrb	r1, [r0, #4]
 801016c:	4798      	blx	r3

    /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 801016e:	4620      	mov	r0, r4
 8010170:	f007 fe1c 	bl	8017dac <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8010174:	4620      	mov	r0, r4
 8010176:	f007 fe09 	bl	8017d8c <USBD_LL_DeInit>

  return USBD_OK;
}
 801017a:	2000      	movs	r0, #0
 801017c:	bd10      	pop	{r4, pc}

0801017e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 801017e:	b119      	cbz	r1, 8010188 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010180:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8010184:	2000      	movs	r0, #0
 8010186:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010188:	2002      	movs	r0, #2
  }

  return status;
}
 801018a:	4770      	bx	lr

0801018c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 801018c:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801018e:	f007 fe05 	bl	8017d9c <USBD_LL_Start>

  return USBD_OK;
}
 8010192:	2000      	movs	r0, #0
 8010194:	bd08      	pop	{r3, pc}

08010196 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8010196:	b510      	push	{r4, lr}
 8010198:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801019a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	7901      	ldrb	r1, [r0, #4]
 80101a2:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 80101a4:	4620      	mov	r0, r4
 80101a6:	f007 fe01 	bl	8017dac <USBD_LL_Stop>

  return USBD_OK;
}
 80101aa:	2000      	movs	r0, #0
 80101ac:	bd10      	pop	{r4, pc}

080101ae <USBD_RunTestMode>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80101ae:	2000      	movs	r0, #0
 80101b0:	4770      	bx	lr

080101b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80101b2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80101b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80101b8:	b123      	cbz	r3, 80101c4 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4798      	blx	r3
 80101be:	b118      	cbz	r0, 80101c8 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80101c0:	2002      	movs	r0, #2
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	2002      	movs	r0, #2
 80101c6:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 80101c8:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 80101ca:	bd08      	pop	{r3, pc}

080101cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80101cc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80101ce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	4798      	blx	r3
  return USBD_OK;
}
 80101d6:	2000      	movs	r0, #0
 80101d8:	bd08      	pop	{r3, pc}

080101da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80101da:	b538      	push	{r3, r4, r5, lr}
 80101dc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80101de:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80101e2:	4628      	mov	r0, r5
 80101e4:	f000 f948 	bl	8010478 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80101e8:	2301      	movs	r3, #1
 80101ea:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80101ee:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80101f2:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80101f6:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 80101fa:	f001 031f 	and.w	r3, r1, #31
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d00e      	beq.n	8010220 <USBD_LL_SetupStage+0x46>
 8010202:	b13b      	cbz	r3, 8010214 <USBD_LL_SetupStage+0x3a>
 8010204:	2b02      	cmp	r3, #2
 8010206:	d010      	beq.n	801022a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010208:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801020c:	4620      	mov	r0, r4
 801020e:	f007 fdf0 	bl	8017df2 <USBD_LL_StallEP>
    break;
 8010212:	e003      	b.n	801021c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8010214:	4629      	mov	r1, r5
 8010216:	4620      	mov	r0, r4
 8010218:	f000 fab7 	bl	801078a <USBD_StdDevReq>
  }

  return USBD_OK;
}
 801021c:	2000      	movs	r0, #0
 801021e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8010220:	4629      	mov	r1, r5
 8010222:	4620      	mov	r0, r4
 8010224:	f000 fae5 	bl	80107f2 <USBD_StdItfReq>
    break;
 8010228:	e7f8      	b.n	801021c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 801022a:	4629      	mov	r1, r5
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fb10 	bl	8010852 <USBD_StdEPReq>
    break;
 8010232:	e7f3      	b.n	801021c <USBD_LL_SetupStage+0x42>

08010234 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010238:	bba9      	cbnz	r1, 80102a6 <USBD_LL_DataOutStage+0x72>
 801023a:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 801023c:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8010240:	2b03      	cmp	r3, #3
 8010242:	d003      	beq.n	801024c <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010244:	2b05      	cmp	r3, #5
 8010246:	d025      	beq.n	8010294 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8010248:	2000      	movs	r0, #0
 801024a:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 801024c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8010250:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 8010254:	4293      	cmp	r3, r2
 8010256:	d90d      	bls.n	8010274 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -=  pep->maxpacket;
 8010258:	1a9b      	subs	r3, r3, r2
 801025a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 801025e:	429a      	cmp	r2, r3
 8010260:	d906      	bls.n	8010270 <USBD_LL_DataOutStage+0x3c>
 8010262:	b29a      	uxth	r2, r3
 8010264:	4601      	mov	r1, r0
 8010266:	4620      	mov	r0, r4
 8010268:	f000 fc38 	bl	8010adc <USBD_CtlContinueRx>
  return USBD_OK;
 801026c:	2000      	movs	r0, #0
 801026e:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlContinueRx (pdev,
 8010270:	b292      	uxth	r2, r2
 8010272:	e7f7      	b.n	8010264 <USBD_LL_DataOutStage+0x30>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010274:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	b11b      	cbz	r3, 8010284 <USBD_LL_DataOutStage+0x50>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801027c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010280:	2a03      	cmp	r2, #3
 8010282:	d004      	beq.n	801028e <USBD_LL_DataOutStage+0x5a>
        USBD_CtlSendStatus(pdev);
 8010284:	4620      	mov	r0, r4
 8010286:	f000 fc31 	bl	8010aec <USBD_CtlSendStatus>
  return USBD_OK;
 801028a:	2000      	movs	r0, #0
 801028c:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 801028e:	4620      	mov	r0, r4
 8010290:	4798      	blx	r3
 8010292:	e7f7      	b.n	8010284 <USBD_LL_DataOutStage+0x50>
        pdev->ep0_state = USBD_EP0_IDLE;
 8010294:	2500      	movs	r5, #0
 8010296:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 801029a:	4629      	mov	r1, r5
 801029c:	4620      	mov	r0, r4
 801029e:	f007 fda8 	bl	8017df2 <USBD_LL_StallEP>
  return USBD_OK;
 80102a2:	4628      	mov	r0, r5
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL) &&
 80102a8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80102ac:	699b      	ldr	r3, [r3, #24]
 80102ae:	b14b      	cbz	r3, 80102c4 <USBD_LL_DataOutStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80102b0:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80102b4:	2903      	cmp	r1, #3
 80102b6:	d001      	beq.n	80102bc <USBD_LL_DataOutStage+0x88>
    return USBD_FAIL;
 80102b8:	2002      	movs	r0, #2
}
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
 80102bc:	4611      	mov	r1, r2
 80102be:	4798      	blx	r3
  return USBD_OK;
 80102c0:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80102c4:	2002      	movs	r0, #2
 80102c6:	bd38      	pop	{r3, r4, r5, pc}

080102c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80102c8:	b510      	push	{r4, lr}
 80102ca:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d154      	bne.n	801037a <USBD_LL_DataInStage+0xb2>
 80102d0:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80102d2:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d00c      	beq.n	80102f4 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80102da:	2b04      	cmp	r3, #4
 80102dc:	d000      	beq.n	80102e0 <USBD_LL_DataInStage+0x18>
 80102de:	b91b      	cbnz	r3, 80102e8 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80102e0:	2180      	movs	r1, #128	; 0x80
 80102e2:	4620      	mov	r0, r4
 80102e4:	f007 fd85 	bl	8017df2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80102e8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d040      	beq.n	8010372 <USBD_LL_DataInStage+0xaa>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80102f0:	2000      	movs	r0, #0
 80102f2:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80102f4:	6a23      	ldr	r3, [r4, #32]
 80102f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d81b      	bhi.n	8010334 <USBD_LL_DataInStage+0x6c>
        if((pep->total_length % pep->maxpacket == 0U) &&
 80102fc:	69e1      	ldr	r1, [r4, #28]
 80102fe:	fbb1 f3f2 	udiv	r3, r1, r2
 8010302:	fb02 1313 	mls	r3, r2, r3, r1
 8010306:	b92b      	cbnz	r3, 8010314 <USBD_LL_DataInStage+0x4c>
 8010308:	428a      	cmp	r2, r1
 801030a:	d803      	bhi.n	8010314 <USBD_LL_DataInStage+0x4c>
           (pep->total_length < pdev->ep0_data_len))
 801030c:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010310:	4299      	cmp	r1, r3
 8010312:	d31d      	bcc.n	8010350 <USBD_LL_DataInStage+0x88>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010314:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	b11b      	cbz	r3, 8010324 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 801031c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010320:	2a03      	cmp	r2, #3
 8010322:	d023      	beq.n	801036c <USBD_LL_DataInStage+0xa4>
          USBD_LL_StallEP(pdev, 0x80U);
 8010324:	2180      	movs	r1, #128	; 0x80
 8010326:	4620      	mov	r0, r4
 8010328:	f007 fd63 	bl	8017df2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801032c:	4620      	mov	r0, r4
 801032e:	f000 fbe8 	bl	8010b02 <USBD_CtlReceiveStatus>
 8010332:	e7d9      	b.n	80102e8 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8010334:	1a9a      	subs	r2, r3, r2
 8010336:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010338:	b292      	uxth	r2, r2
 801033a:	4601      	mov	r1, r0
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fbb6 	bl	8010aae <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010342:	2300      	movs	r3, #0
 8010344:	461a      	mov	r2, r3
 8010346:	4619      	mov	r1, r3
 8010348:	4620      	mov	r0, r4
 801034a:	f007 fd72 	bl	8017e32 <USBD_LL_PrepareReceive>
 801034e:	e7cb      	b.n	80102e8 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010350:	2200      	movs	r2, #0
 8010352:	4611      	mov	r1, r2
 8010354:	4620      	mov	r0, r4
 8010356:	f000 fbaa 	bl	8010aae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801035a:	2100      	movs	r1, #0
 801035c:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010360:	460b      	mov	r3, r1
 8010362:	460a      	mov	r2, r1
 8010364:	4620      	mov	r0, r4
 8010366:	f007 fd64 	bl	8017e32 <USBD_LL_PrepareReceive>
 801036a:	e7bd      	b.n	80102e8 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 801036c:	4620      	mov	r0, r4
 801036e:	4798      	blx	r3
 8010370:	e7d8      	b.n	8010324 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8010372:	2000      	movs	r0, #0
 8010374:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8010378:	bd10      	pop	{r4, pc}
 801037a:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL) &&
 801037c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8010380:	695b      	ldr	r3, [r3, #20]
 8010382:	b14b      	cbz	r3, 8010398 <USBD_LL_DataInStage+0xd0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010384:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010388:	2903      	cmp	r1, #3
 801038a:	d001      	beq.n	8010390 <USBD_LL_DataInStage+0xc8>
    return USBD_FAIL;
 801038c:	2002      	movs	r0, #2
}
 801038e:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
 8010390:	4611      	mov	r1, r2
 8010392:	4798      	blx	r3
  return USBD_OK;
 8010394:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8010396:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8010398:	2002      	movs	r0, #2
 801039a:	bd10      	pop	{r4, pc}

0801039c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103a0:	2340      	movs	r3, #64	; 0x40
 80103a2:	2200      	movs	r2, #0
 80103a4:	4611      	mov	r1, r2
 80103a6:	f007 fd09 	bl	8017dbc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80103aa:	2501      	movs	r5, #1
 80103ac:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80103b0:	2640      	movs	r6, #64	; 0x40
 80103b2:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103b6:	4633      	mov	r3, r6
 80103b8:	2200      	movs	r2, #0
 80103ba:	2180      	movs	r1, #128	; 0x80
 80103bc:	4620      	mov	r0, r4
 80103be:	f007 fcfd 	bl	8017dbc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80103c2:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80103c4:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103c6:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80103ca:	2300      	movs	r3, #0
 80103cc:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80103d0:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80103d2:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 80103d6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 80103da:	b12b      	cbz	r3, 80103e8 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80103dc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	2100      	movs	r1, #0
 80103e4:	4620      	mov	r0, r4
 80103e6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80103e8:	2000      	movs	r0, #0
 80103ea:	bd70      	pop	{r4, r5, r6, pc}

080103ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80103ec:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80103ee:	2000      	movs	r0, #0
 80103f0:	4770      	bx	lr

080103f2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80103f2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80103f6:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80103fa:	2304      	movs	r3, #4
 80103fc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8010400:	2000      	movs	r0, #0
 8010402:	4770      	bx	lr

08010404 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8010404:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8010408:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 801040c:	2000      	movs	r0, #0
 801040e:	4770      	bx	lr

08010410 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010410:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010412:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8010416:	2b03      	cmp	r3, #3
 8010418:	d001      	beq.n	801041e <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 801041a:	2000      	movs	r0, #0
 801041c:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 801041e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8010422:	69db      	ldr	r3, [r3, #28]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d0f8      	beq.n	801041a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8010428:	4798      	blx	r3
 801042a:	e7f6      	b.n	801041a <USBD_LL_SOF+0xa>

0801042c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 801042c:	2000      	movs	r0, #0
 801042e:	4770      	bx	lr

08010430 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8010430:	2000      	movs	r0, #0
 8010432:	4770      	bx	lr

08010434 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8010434:	2000      	movs	r0, #0
 8010436:	4770      	bx	lr

08010438 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010438:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801043a:	2201      	movs	r2, #1
 801043c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010440:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8010444:	6852      	ldr	r2, [r2, #4]
 8010446:	7901      	ldrb	r1, [r0, #4]
 8010448:	4790      	blx	r2

  return USBD_OK;
}
 801044a:	2000      	movs	r0, #0
 801044c:	bd08      	pop	{r3, pc}
	...

08010450 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;
 8010450:	2300      	movs	r3, #0

    while (*buf != '\0')
 8010452:	e002      	b.n	801045a <USBD_GetLen+0xa>
    {
        len++;
 8010454:	3301      	adds	r3, #1
 8010456:	b2db      	uxtb	r3, r3
        buf++;
 8010458:	3001      	adds	r0, #1
    while (*buf != '\0')
 801045a:	7802      	ldrb	r2, [r0, #0]
 801045c:	2a00      	cmp	r2, #0
 801045e:	d1f9      	bne.n	8010454 <USBD_GetLen+0x4>
    }

    return len;
}
 8010460:	4618      	mov	r0, r3
 8010462:	4770      	bx	lr

08010464 <USBD_SetFeature>:
{
 8010464:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010466:	884b      	ldrh	r3, [r1, #2]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d000      	beq.n	801046e <USBD_SetFeature+0xa>
 801046c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 801046e:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010472:	f000 fb3b 	bl	8010aec <USBD_CtlSendStatus>
}
 8010476:	e7f9      	b.n	801046c <USBD_SetFeature+0x8>

08010478 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010478:	780b      	ldrb	r3, [r1, #0]
 801047a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801047c:	784b      	ldrb	r3, [r1, #1]
 801047e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010480:	788b      	ldrb	r3, [r1, #2]
 8010482:	78ca      	ldrb	r2, [r1, #3]
 8010484:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010488:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801048a:	790b      	ldrb	r3, [r1, #4]
 801048c:	794a      	ldrb	r2, [r1, #5]
 801048e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010492:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010494:	798b      	ldrb	r3, [r1, #6]
 8010496:	79ca      	ldrb	r2, [r1, #7]
 8010498:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801049c:	80c3      	strh	r3, [r0, #6]
 801049e:	4770      	bx	lr

080104a0 <USBD_CtlError>:
{
 80104a0:	b510      	push	{r4, lr}
 80104a2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80104a4:	2180      	movs	r1, #128	; 0x80
 80104a6:	f007 fca4 	bl	8017df2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80104aa:	2100      	movs	r1, #0
 80104ac:	4620      	mov	r0, r4
 80104ae:	f007 fca0 	bl	8017df2 <USBD_LL_StallEP>
 80104b2:	bd10      	pop	{r4, pc}

080104b4 <USBD_GetDescriptor>:
{
 80104b4:	b530      	push	{r4, r5, lr}
 80104b6:	b083      	sub	sp, #12
 80104b8:	4605      	mov	r5, r0
 80104ba:	460c      	mov	r4, r1
  switch (req->wValue >> 8)
 80104bc:	884a      	ldrh	r2, [r1, #2]
 80104be:	0a13      	lsrs	r3, r2, #8
 80104c0:	3b01      	subs	r3, #1
 80104c2:	2b06      	cmp	r3, #6
 80104c4:	f200 8084 	bhi.w	80105d0 <USBD_GetDescriptor+0x11c>
 80104c8:	e8df f003 	tbb	[pc, r3]
 80104cc:	822a1604 	.word	0x822a1604
 80104d0:	6682      	.short	0x6682
 80104d2:	73          	.byte	0x73
 80104d3:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104d4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f10d 0106 	add.w	r1, sp, #6
 80104de:	7c00      	ldrb	r0, [r0, #16]
 80104e0:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80104e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80104e6:	b112      	cbz	r2, 80104ee <USBD_GetDescriptor+0x3a>
 80104e8:	88e3      	ldrh	r3, [r4, #6]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d174      	bne.n	80105d8 <USBD_GetDescriptor+0x124>
  if(req->wLength == 0U)
 80104ee:	88e3      	ldrh	r3, [r4, #6]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d07b      	beq.n	80105ec <USBD_GetDescriptor+0x138>
}
 80104f4:	b003      	add	sp, #12
 80104f6:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80104f8:	7c03      	ldrb	r3, [r0, #16]
 80104fa:	b943      	cbnz	r3, 801050e <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80104fc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8010500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010502:	f10d 0006 	add.w	r0, sp, #6
 8010506:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010508:	2302      	movs	r3, #2
 801050a:	7043      	strb	r3, [r0, #1]
 801050c:	e7e9      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 801050e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8010512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010514:	f10d 0006 	add.w	r0, sp, #6
 8010518:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801051a:	2302      	movs	r3, #2
 801051c:	7043      	strb	r3, [r0, #1]
 801051e:	e7e0      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8010520:	b2d2      	uxtb	r2, r2
 8010522:	2a05      	cmp	r2, #5
 8010524:	d834      	bhi.n	8010590 <USBD_GetDescriptor+0xdc>
 8010526:	e8df f002 	tbb	[pc, r2]
 801052a:	0b03      	.short	0x0b03
 801052c:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010530:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f10d 0106 	add.w	r1, sp, #6
 801053a:	7c00      	ldrb	r0, [r0, #16]
 801053c:	4798      	blx	r3
      break;
 801053e:	e7d0      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010540:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	f10d 0106 	add.w	r1, sp, #6
 801054a:	7c00      	ldrb	r0, [r0, #16]
 801054c:	4798      	blx	r3
      break;
 801054e:	e7c8      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010550:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	f10d 0106 	add.w	r1, sp, #6
 801055a:	7c00      	ldrb	r0, [r0, #16]
 801055c:	4798      	blx	r3
      break;
 801055e:	e7c0      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010560:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010564:	691b      	ldr	r3, [r3, #16]
 8010566:	f10d 0106 	add.w	r1, sp, #6
 801056a:	7c00      	ldrb	r0, [r0, #16]
 801056c:	4798      	blx	r3
      break;
 801056e:	e7b8      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010570:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010574:	695b      	ldr	r3, [r3, #20]
 8010576:	f10d 0106 	add.w	r1, sp, #6
 801057a:	7c00      	ldrb	r0, [r0, #16]
 801057c:	4798      	blx	r3
      break;
 801057e:	e7b0      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010580:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8010584:	699b      	ldr	r3, [r3, #24]
 8010586:	f10d 0106 	add.w	r1, sp, #6
 801058a:	7c00      	ldrb	r0, [r0, #16]
 801058c:	4798      	blx	r3
      break;
 801058e:	e7a8      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 8010590:	4621      	mov	r1, r4
 8010592:	f7ff ff85 	bl	80104a0 <USBD_CtlError>
      return;
 8010596:	e7ad      	b.n	80104f4 <USBD_GetDescriptor+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010598:	7c03      	ldrb	r3, [r0, #16]
 801059a:	b933      	cbnz	r3, 80105aa <USBD_GetDescriptor+0xf6>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801059c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80105a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a2:	f10d 0006 	add.w	r0, sp, #6
 80105a6:	4798      	blx	r3
      break;
 80105a8:	e79b      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80105aa:	4621      	mov	r1, r4
 80105ac:	f7ff ff78 	bl	80104a0 <USBD_CtlError>
      return;
 80105b0:	e7a0      	b.n	80104f4 <USBD_GetDescriptor+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80105b2:	7c03      	ldrb	r3, [r0, #16]
 80105b4:	b943      	cbnz	r3, 80105c8 <USBD_GetDescriptor+0x114>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80105b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80105ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105bc:	f10d 0006 	add.w	r0, sp, #6
 80105c0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80105c2:	2307      	movs	r3, #7
 80105c4:	7043      	strb	r3, [r0, #1]
      break;
 80105c6:	e78c      	b.n	80104e2 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80105c8:	4621      	mov	r1, r4
 80105ca:	f7ff ff69 	bl	80104a0 <USBD_CtlError>
      return;
 80105ce:	e791      	b.n	80104f4 <USBD_GetDescriptor+0x40>
     USBD_CtlError(pdev , req);
 80105d0:	4621      	mov	r1, r4
 80105d2:	f7ff ff65 	bl	80104a0 <USBD_CtlError>
    return;
 80105d6:	e78d      	b.n	80104f4 <USBD_GetDescriptor+0x40>
    len = MIN(len, req->wLength);
 80105d8:	429a      	cmp	r2, r3
 80105da:	bf28      	it	cs
 80105dc:	461a      	movcs	r2, r3
 80105de:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80105e2:	4601      	mov	r1, r0
 80105e4:	4628      	mov	r0, r5
 80105e6:	f000 fa55 	bl	8010a94 <USBD_CtlSendData>
 80105ea:	e780      	b.n	80104ee <USBD_GetDescriptor+0x3a>
   USBD_CtlSendStatus(pdev);
 80105ec:	4628      	mov	r0, r5
 80105ee:	f000 fa7d 	bl	8010aec <USBD_CtlSendStatus>
 80105f2:	e77f      	b.n	80104f4 <USBD_GetDescriptor+0x40>

080105f4 <USBD_SetAddress>:
{
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80105f8:	888b      	ldrh	r3, [r1, #4]
 80105fa:	b9f3      	cbnz	r3, 801063a <USBD_SetAddress+0x46>
 80105fc:	88cb      	ldrh	r3, [r1, #6]
 80105fe:	b9e3      	cbnz	r3, 801063a <USBD_SetAddress+0x46>
 8010600:	884b      	ldrh	r3, [r1, #2]
 8010602:	2b7f      	cmp	r3, #127	; 0x7f
 8010604:	d819      	bhi.n	801063a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010606:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801060a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 801060e:	2b03      	cmp	r3, #3
 8010610:	d00c      	beq.n	801062c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8010612:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010616:	4629      	mov	r1, r5
 8010618:	f007 fbfb 	bl	8017e12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801061c:	4620      	mov	r0, r4
 801061e:	f000 fa65 	bl	8010aec <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8010622:	b135      	cbz	r5, 8010632 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010624:	2302      	movs	r3, #2
 8010626:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 801062a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 801062c:	f7ff ff38 	bl	80104a0 <USBD_CtlError>
 8010630:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010632:	2301      	movs	r3, #1
 8010634:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8010638:	bd38      	pop	{r3, r4, r5, pc}
    USBD_CtlError(pdev, req);
 801063a:	4620      	mov	r0, r4
 801063c:	f7ff ff30 	bl	80104a0 <USBD_CtlError>
 8010640:	bd38      	pop	{r3, r4, r5, pc}

08010642 <USBD_SetConfig>:
{
 8010642:	b538      	push	{r3, r4, r5, lr}
 8010644:	4604      	mov	r4, r0
 8010646:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8010648:	7889      	ldrb	r1, [r1, #2]
 801064a:	4b28      	ldr	r3, [pc, #160]	; (80106ec <USBD_SetConfig+0xaa>)
 801064c:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801064e:	2901      	cmp	r1, #1
 8010650:	d80e      	bhi.n	8010670 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8010652:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8010656:	2b02      	cmp	r3, #2
 8010658:	d00e      	beq.n	8010678 <USBD_SetConfig+0x36>
 801065a:	2b03      	cmp	r3, #3
 801065c:	d021      	beq.n	80106a2 <USBD_SetConfig+0x60>
      USBD_CtlError(pdev, req);
 801065e:	4629      	mov	r1, r5
 8010660:	f7ff ff1e 	bl	80104a0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010664:	4b21      	ldr	r3, [pc, #132]	; (80106ec <USBD_SetConfig+0xaa>)
 8010666:	7819      	ldrb	r1, [r3, #0]
 8010668:	4620      	mov	r0, r4
 801066a:	f7ff fdaf 	bl	80101cc <USBD_ClrClassConfig>
 801066e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_CtlError(pdev, req);
 8010670:	4629      	mov	r1, r5
 8010672:	f7ff ff15 	bl	80104a0 <USBD_CtlError>
 8010676:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx)
 8010678:	b181      	cbz	r1, 801069c <USBD_SetConfig+0x5a>
        pdev->dev_config = cfgidx;
 801067a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801067c:	2303      	movs	r3, #3
 801067e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010682:	f7ff fd96 	bl	80101b2 <USBD_SetClassConfig>
 8010686:	2802      	cmp	r0, #2
 8010688:	d003      	beq.n	8010692 <USBD_SetConfig+0x50>
        USBD_CtlSendStatus(pdev);
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fa2e 	bl	8010aec <USBD_CtlSendStatus>
 8010690:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8010692:	4629      	mov	r1, r5
 8010694:	4620      	mov	r0, r4
 8010696:	f7ff ff03 	bl	80104a0 <USBD_CtlError>
          return;
 801069a:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 801069c:	f000 fa26 	bl	8010aec <USBD_CtlSendStatus>
 80106a0:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0U)
 80106a2:	b189      	cbz	r1, 80106c8 <USBD_SetConfig+0x86>
      else if (cfgidx != pdev->dev_config)
 80106a4:	6843      	ldr	r3, [r0, #4]
 80106a6:	4299      	cmp	r1, r3
 80106a8:	d01d      	beq.n	80106e6 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80106aa:	b2d9      	uxtb	r1, r3
 80106ac:	f7ff fd8e 	bl	80101cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80106b0:	4b0e      	ldr	r3, [pc, #56]	; (80106ec <USBD_SetConfig+0xaa>)
 80106b2:	7819      	ldrb	r1, [r3, #0]
 80106b4:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80106b6:	4620      	mov	r0, r4
 80106b8:	f7ff fd7b 	bl	80101b2 <USBD_SetClassConfig>
 80106bc:	2802      	cmp	r0, #2
 80106be:	d00d      	beq.n	80106dc <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 80106c0:	4620      	mov	r0, r4
 80106c2:	f000 fa13 	bl	8010aec <USBD_CtlSendStatus>
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106c8:	2302      	movs	r3, #2
 80106ca:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80106ce:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80106d0:	f7ff fd7c 	bl	80101cc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80106d4:	4620      	mov	r0, r4
 80106d6:	f000 fa09 	bl	8010aec <USBD_CtlSendStatus>
 80106da:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80106dc:	4629      	mov	r1, r5
 80106de:	4620      	mov	r0, r4
 80106e0:	f7ff fede 	bl	80104a0 <USBD_CtlError>
          return;
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 80106e6:	f000 fa01 	bl	8010aec <USBD_CtlSendStatus>
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	20000824 	.word	0x20000824

080106f0 <USBD_GetConfig>:
{
 80106f0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80106f2:	88cb      	ldrh	r3, [r1, #6]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d10b      	bne.n	8010710 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80106f8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80106fc:	b19b      	cbz	r3, 8010726 <USBD_GetConfig+0x36>
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d909      	bls.n	8010716 <USBD_GetConfig+0x26>
 8010702:	2b03      	cmp	r3, #3
 8010704:	d10f      	bne.n	8010726 <USBD_GetConfig+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010706:	2201      	movs	r2, #1
 8010708:	1d01      	adds	r1, r0, #4
 801070a:	f000 f9c3 	bl	8010a94 <USBD_CtlSendData>
      break;
 801070e:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);
 8010710:	f7ff fec6 	bl	80104a0 <USBD_CtlError>
 8010714:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 8010716:	4601      	mov	r1, r0
 8010718:	2300      	movs	r3, #0
 801071a:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801071e:	2201      	movs	r2, #1
 8010720:	f000 f9b8 	bl	8010a94 <USBD_CtlSendData>
      break;
 8010724:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev , req);
 8010726:	f7ff febb 	bl	80104a0 <USBD_CtlError>
 801072a:	bd08      	pop	{r3, pc}

0801072c <USBD_GetStatus>:
{
 801072c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 801072e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8010732:	3b01      	subs	r3, #1
 8010734:	2b02      	cmp	r3, #2
 8010736:	d812      	bhi.n	801075e <USBD_GetStatus+0x32>
    if(req->wLength != 0x2U)
 8010738:	88cb      	ldrh	r3, [r1, #6]
 801073a:	2b02      	cmp	r3, #2
 801073c:	d10c      	bne.n	8010758 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801073e:	2301      	movs	r3, #1
 8010740:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8010742:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8010746:	b10b      	cbz	r3, 801074c <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010748:	2303      	movs	r3, #3
 801074a:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801074c:	2202      	movs	r2, #2
 801074e:	f100 010c 	add.w	r1, r0, #12
 8010752:	f000 f99f 	bl	8010a94 <USBD_CtlSendData>
    break;
 8010756:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8010758:	f7ff fea2 	bl	80104a0 <USBD_CtlError>
      break;
 801075c:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);
 801075e:	f7ff fe9f 	bl	80104a0 <USBD_CtlError>
 8010762:	bd08      	pop	{r3, pc}

08010764 <USBD_ClrFeature>:
{
 8010764:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8010766:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 801076a:	3b01      	subs	r3, #1
 801076c:	2b02      	cmp	r3, #2
 801076e:	d809      	bhi.n	8010784 <USBD_ClrFeature+0x20>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010770:	884b      	ldrh	r3, [r1, #2]
 8010772:	2b01      	cmp	r3, #1
 8010774:	d000      	beq.n	8010778 <USBD_ClrFeature+0x14>
 8010776:	bd08      	pop	{r3, pc}
      pdev->dev_remote_wakeup = 0U;
 8010778:	2300      	movs	r3, #0
 801077a:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 801077e:	f000 f9b5 	bl	8010aec <USBD_CtlSendStatus>
 8010782:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 8010784:	f7ff fe8c 	bl	80104a0 <USBD_CtlError>
}
 8010788:	e7f5      	b.n	8010776 <USBD_ClrFeature+0x12>

0801078a <USBD_StdDevReq>:
{
 801078a:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801078c:	780b      	ldrb	r3, [r1, #0]
 801078e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010792:	2b20      	cmp	r3, #32
 8010794:	d005      	beq.n	80107a2 <USBD_StdDevReq+0x18>
 8010796:	2b40      	cmp	r3, #64	; 0x40
 8010798:	d003      	beq.n	80107a2 <USBD_StdDevReq+0x18>
 801079a:	b143      	cbz	r3, 80107ae <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 801079c:	f7ff fe80 	bl	80104a0 <USBD_CtlError>
    break;
 80107a0:	e003      	b.n	80107aa <USBD_StdDevReq+0x20>
    pdev->pClass->Setup(pdev, req);
 80107a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	4798      	blx	r3
}
 80107aa:	2000      	movs	r0, #0
 80107ac:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 80107ae:	784b      	ldrb	r3, [r1, #1]
 80107b0:	2b09      	cmp	r3, #9
 80107b2:	d81b      	bhi.n	80107ec <USBD_StdDevReq+0x62>
 80107b4:	e8df f003 	tbb	[pc, r3]
 80107b8:	141a1711 	.word	0x141a1711
 80107bc:	1a05081a 	.word	0x1a05081a
 80107c0:	0b0e      	.short	0x0b0e
      USBD_GetDescriptor (pdev, req);
 80107c2:	f7ff fe77 	bl	80104b4 <USBD_GetDescriptor>
      break;
 80107c6:	e7f0      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_SetAddress (pdev, req);
 80107c8:	f7ff ff14 	bl	80105f4 <USBD_SetAddress>
      break;
 80107cc:	e7ed      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_SetConfig (pdev, req);
 80107ce:	f7ff ff38 	bl	8010642 <USBD_SetConfig>
      break;
 80107d2:	e7ea      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_GetConfig (pdev, req);
 80107d4:	f7ff ff8c 	bl	80106f0 <USBD_GetConfig>
      break;
 80107d8:	e7e7      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_GetStatus (pdev, req);
 80107da:	f7ff ffa7 	bl	801072c <USBD_GetStatus>
      break;
 80107de:	e7e4      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_SetFeature (pdev, req);
 80107e0:	f7ff fe40 	bl	8010464 <USBD_SetFeature>
      break;
 80107e4:	e7e1      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_ClrFeature (pdev, req);
 80107e6:	f7ff ffbd 	bl	8010764 <USBD_ClrFeature>
      break;
 80107ea:	e7de      	b.n	80107aa <USBD_StdDevReq+0x20>
      USBD_CtlError(pdev, req);
 80107ec:	f7ff fe58 	bl	80104a0 <USBD_CtlError>
      break;
 80107f0:	e7db      	b.n	80107aa <USBD_StdDevReq+0x20>

080107f2 <USBD_StdItfReq>:
{
 80107f2:	b538      	push	{r3, r4, r5, lr}
 80107f4:	4605      	mov	r5, r0
 80107f6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107f8:	780b      	ldrb	r3, [r1, #0]
 80107fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107fe:	2b20      	cmp	r3, #32
 8010800:	d005      	beq.n	801080e <USBD_StdItfReq+0x1c>
 8010802:	2b40      	cmp	r3, #64	; 0x40
 8010804:	d003      	beq.n	801080e <USBD_StdItfReq+0x1c>
 8010806:	b113      	cbz	r3, 801080e <USBD_StdItfReq+0x1c>
    USBD_CtlError(pdev, req);
 8010808:	f7ff fe4a 	bl	80104a0 <USBD_CtlError>
    break;
 801080c:	e00b      	b.n	8010826 <USBD_StdItfReq+0x34>
    switch (pdev->dev_state)
 801080e:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 8010812:	3b01      	subs	r3, #1
 8010814:	2b02      	cmp	r3, #2
 8010816:	d817      	bhi.n	8010848 <USBD_StdItfReq+0x56>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010818:	7923      	ldrb	r3, [r4, #4]
 801081a:	2b01      	cmp	r3, #1
 801081c:	d905      	bls.n	801082a <USBD_StdItfReq+0x38>
        USBD_CtlError(pdev, req);
 801081e:	4621      	mov	r1, r4
 8010820:	4628      	mov	r0, r5
 8010822:	f7ff fe3d 	bl	80104a0 <USBD_CtlError>
}
 8010826:	2000      	movs	r0, #0
 8010828:	bd38      	pop	{r3, r4, r5, pc}
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801082a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	4621      	mov	r1, r4
 8010832:	4628      	mov	r0, r5
 8010834:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010836:	88e3      	ldrh	r3, [r4, #6]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1f4      	bne.n	8010826 <USBD_StdItfReq+0x34>
 801083c:	2800      	cmp	r0, #0
 801083e:	d1f2      	bne.n	8010826 <USBD_StdItfReq+0x34>
          USBD_CtlSendStatus(pdev);
 8010840:	4628      	mov	r0, r5
 8010842:	f000 f953 	bl	8010aec <USBD_CtlSendStatus>
 8010846:	e7ee      	b.n	8010826 <USBD_StdItfReq+0x34>
      USBD_CtlError(pdev, req);
 8010848:	4621      	mov	r1, r4
 801084a:	4628      	mov	r0, r5
 801084c:	f7ff fe28 	bl	80104a0 <USBD_CtlError>
      break;
 8010850:	e7e9      	b.n	8010826 <USBD_StdItfReq+0x34>

08010852 <USBD_StdEPReq>:
{
 8010852:	b538      	push	{r3, r4, r5, lr}
 8010854:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8010856:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010858:	780b      	ldrb	r3, [r1, #0]
 801085a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801085e:	2b20      	cmp	r3, #32
 8010860:	d008      	beq.n	8010874 <USBD_StdEPReq+0x22>
 8010862:	b2d0      	uxtb	r0, r2
 8010864:	2b40      	cmp	r3, #64	; 0x40
 8010866:	d005      	beq.n	8010874 <USBD_StdEPReq+0x22>
 8010868:	b15b      	cbz	r3, 8010882 <USBD_StdEPReq+0x30>
    USBD_CtlError(pdev, req);
 801086a:	4620      	mov	r0, r4
 801086c:	f7ff fe18 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010870:	2000      	movs	r0, #0
    break;
 8010872:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 8010874:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	4620      	mov	r0, r4
 801087c:	4798      	blx	r3
  return ret;
 801087e:	2000      	movs	r0, #0
    break;
 8010880:	bd38      	pop	{r3, r4, r5, pc}
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010882:	2b20      	cmp	r3, #32
 8010884:	d012      	beq.n	80108ac <USBD_StdEPReq+0x5a>
    switch (req->bRequest)
 8010886:	784b      	ldrb	r3, [r1, #1]
 8010888:	2b01      	cmp	r3, #1
 801088a:	d038      	beq.n	80108fe <USBD_StdEPReq+0xac>
 801088c:	2b00      	cmp	r3, #0
 801088e:	d064      	beq.n	801095a <USBD_StdEPReq+0x108>
 8010890:	2b03      	cmp	r3, #3
 8010892:	f040 80dc 	bne.w	8010a4e <USBD_StdEPReq+0x1fc>
      switch (pdev->dev_state)
 8010896:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 801089a:	2b02      	cmp	r3, #2
 801089c:	d00c      	beq.n	80108b8 <USBD_StdEPReq+0x66>
 801089e:	2b03      	cmp	r3, #3
 80108a0:	d01c      	beq.n	80108dc <USBD_StdEPReq+0x8a>
        USBD_CtlError(pdev, req);
 80108a2:	4620      	mov	r0, r4
 80108a4:	f7ff fdfc 	bl	80104a0 <USBD_CtlError>
  return ret;
 80108a8:	2000      	movs	r0, #0
        break;
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80108ac:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	4620      	mov	r0, r4
 80108b4:	4798      	blx	r3
      return ret;
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80108b8:	b158      	cbz	r0, 80108d2 <USBD_StdEPReq+0x80>
 80108ba:	2880      	cmp	r0, #128	; 0x80
 80108bc:	d009      	beq.n	80108d2 <USBD_StdEPReq+0x80>
          USBD_LL_StallEP(pdev, ep_addr);
 80108be:	4601      	mov	r1, r0
 80108c0:	4620      	mov	r0, r4
 80108c2:	f007 fa96 	bl	8017df2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80108c6:	2180      	movs	r1, #128	; 0x80
 80108c8:	4620      	mov	r0, r4
 80108ca:	f007 fa92 	bl	8017df2 <USBD_LL_StallEP>
  return ret;
 80108ce:	2000      	movs	r0, #0
          USBD_LL_StallEP(pdev, 0x80U);
 80108d0:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80108d2:	4620      	mov	r0, r4
 80108d4:	f7ff fde4 	bl	80104a0 <USBD_CtlError>
  return ret;
 80108d8:	2000      	movs	r0, #0
 80108da:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80108dc:	884b      	ldrh	r3, [r1, #2]
 80108de:	b923      	cbnz	r3, 80108ea <USBD_StdEPReq+0x98>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80108e0:	b118      	cbz	r0, 80108ea <USBD_StdEPReq+0x98>
 80108e2:	2880      	cmp	r0, #128	; 0x80
 80108e4:	d001      	beq.n	80108ea <USBD_StdEPReq+0x98>
 80108e6:	88cb      	ldrh	r3, [r1, #6]
 80108e8:	b123      	cbz	r3, 80108f4 <USBD_StdEPReq+0xa2>
        USBD_CtlSendStatus(pdev);
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 f8fe 	bl	8010aec <USBD_CtlSendStatus>
  return ret;
 80108f0:	2000      	movs	r0, #0
        break;
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
            USBD_LL_StallEP(pdev, ep_addr);
 80108f4:	4601      	mov	r1, r0
 80108f6:	4620      	mov	r0, r4
 80108f8:	f007 fa7b 	bl	8017df2 <USBD_LL_StallEP>
 80108fc:	e7f5      	b.n	80108ea <USBD_StdEPReq+0x98>
      switch (pdev->dev_state)
 80108fe:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8010902:	2b02      	cmp	r3, #2
 8010904:	d006      	beq.n	8010914 <USBD_StdEPReq+0xc2>
 8010906:	2b03      	cmp	r3, #3
 8010908:	d016      	beq.n	8010938 <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 801090a:	4620      	mov	r0, r4
 801090c:	f7ff fdc8 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010910:	2000      	movs	r0, #0
        break;
 8010912:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010914:	b158      	cbz	r0, 801092e <USBD_StdEPReq+0xdc>
 8010916:	2880      	cmp	r0, #128	; 0x80
 8010918:	d009      	beq.n	801092e <USBD_StdEPReq+0xdc>
          USBD_LL_StallEP(pdev, ep_addr);
 801091a:	4601      	mov	r1, r0
 801091c:	4620      	mov	r0, r4
 801091e:	f007 fa68 	bl	8017df2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010922:	2180      	movs	r1, #128	; 0x80
 8010924:	4620      	mov	r0, r4
 8010926:	f007 fa64 	bl	8017df2 <USBD_LL_StallEP>
  return ret;
 801092a:	2000      	movs	r0, #0
          USBD_LL_StallEP(pdev, 0x80U);
 801092c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 801092e:	4620      	mov	r0, r4
 8010930:	f7ff fdb6 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010934:	2000      	movs	r0, #0
 8010936:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010938:	884b      	ldrh	r3, [r1, #2]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f040 808c 	bne.w	8010a58 <USBD_StdEPReq+0x206>
          if ((ep_addr & 0x7FU) != 0x00U)
 8010940:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8010944:	d104      	bne.n	8010950 <USBD_StdEPReq+0xfe>
          USBD_CtlSendStatus(pdev);
 8010946:	4620      	mov	r0, r4
 8010948:	f000 f8d0 	bl	8010aec <USBD_CtlSendStatus>
  return ret;
 801094c:	2000      	movs	r0, #0
 801094e:	bd38      	pop	{r3, r4, r5, pc}
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010950:	4601      	mov	r1, r0
 8010952:	4620      	mov	r0, r4
 8010954:	f007 fa55 	bl	8017e02 <USBD_LL_ClearStallEP>
 8010958:	e7f5      	b.n	8010946 <USBD_StdEPReq+0xf4>
      switch (pdev->dev_state)
 801095a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 801095e:	2b02      	cmp	r3, #2
 8010960:	d006      	beq.n	8010970 <USBD_StdEPReq+0x11e>
 8010962:	2b03      	cmp	r3, #3
 8010964:	d029      	beq.n	80109ba <USBD_StdEPReq+0x168>
        USBD_CtlError(pdev, req);
 8010966:	4620      	mov	r0, r4
 8010968:	f7ff fd9a 	bl	80104a0 <USBD_CtlError>
  return ret;
 801096c:	2000      	movs	r0, #0
        break;
 801096e:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010970:	b108      	cbz	r0, 8010976 <USBD_StdEPReq+0x124>
 8010972:	2880      	cmp	r0, #128	; 0x80
 8010974:	d112      	bne.n	801099c <USBD_StdEPReq+0x14a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010976:	f012 0f80 	tst.w	r2, #128	; 0x80
 801097a:	d114      	bne.n	80109a6 <USBD_StdEPReq+0x154>
          &pdev->ep_out[ep_addr & 0x7FU];
 801097c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010984:	0083      	lsls	r3, r0, #2
 8010986:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801098a:	18e1      	adds	r1, r4, r3
          pep->status = 0x0000U;
 801098c:	2500      	movs	r5, #0
 801098e:	600d      	str	r5, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010990:	2202      	movs	r2, #2
 8010992:	4620      	mov	r0, r4
 8010994:	f000 f87e 	bl	8010a94 <USBD_CtlSendData>
  return ret;
 8010998:	4628      	mov	r0, r5
          break;
 801099a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff fd7f 	bl	80104a0 <USBD_CtlError>
  return ret;
 80109a2:	2000      	movs	r0, #0
          break;
 80109a4:	bd38      	pop	{r3, r4, r5, pc}
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80109a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80109aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80109ae:	0083      	lsls	r3, r0, #2
 80109b0:	f103 0110 	add.w	r1, r3, #16
 80109b4:	4421      	add	r1, r4
 80109b6:	3104      	adds	r1, #4
 80109b8:	e7e8      	b.n	801098c <USBD_StdEPReq+0x13a>
        if((ep_addr & 0x80U) == 0x80U)
 80109ba:	b252      	sxtb	r2, r2
 80109bc:	2a00      	cmp	r2, #0
 80109be:	db1d      	blt.n	80109fc <USBD_StdEPReq+0x1aa>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109c0:	f000 030f 	and.w	r3, r0, #15
 80109c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80109c8:	009d      	lsls	r5, r3, #2
 80109ca:	4425      	add	r5, r4
 80109cc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 80109d0:	b313      	cbz	r3, 8010a18 <USBD_StdEPReq+0x1c6>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80109d2:	2a00      	cmp	r2, #0
 80109d4:	db25      	blt.n	8010a22 <USBD_StdEPReq+0x1d0>
          &pdev->ep_out[ep_addr & 0x7FU];
 80109d6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80109da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80109de:	0093      	lsls	r3, r2, #2
 80109e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80109e4:	18e5      	adds	r5, r4, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80109e6:	b330      	cbz	r0, 8010a36 <USBD_StdEPReq+0x1e4>
 80109e8:	2880      	cmp	r0, #128	; 0x80
 80109ea:	d024      	beq.n	8010a36 <USBD_StdEPReq+0x1e4>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80109ec:	4601      	mov	r1, r0
 80109ee:	4620      	mov	r0, r4
 80109f0:	f007 f9a2 	bl	8017d38 <USBD_LL_IsStallEP>
 80109f4:	b340      	cbz	r0, 8010a48 <USBD_StdEPReq+0x1f6>
            pep->status = 0x0001U;
 80109f6:	2301      	movs	r3, #1
 80109f8:	602b      	str	r3, [r5, #0]
 80109fa:	e01e      	b.n	8010a3a <USBD_StdEPReq+0x1e8>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80109fc:	f000 030f 	and.w	r3, r0, #15
 8010a00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010a04:	009d      	lsls	r5, r3, #2
 8010a06:	4425      	add	r5, r4
 8010a08:	69ab      	ldr	r3, [r5, #24]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1e1      	bne.n	80109d2 <USBD_StdEPReq+0x180>
            USBD_CtlError(pdev, req);
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f7ff fd46 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010a14:	2000      	movs	r0, #0
            break;
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
            USBD_CtlError(pdev, req);
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7ff fd41 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010a1e:	2000      	movs	r0, #0
            break;
 8010a20:	bd38      	pop	{r3, r4, r5, pc}
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010a22:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8010a26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010a2a:	0093      	lsls	r3, r2, #2
 8010a2c:	f103 0510 	add.w	r5, r3, #16
 8010a30:	4425      	add	r5, r4
 8010a32:	3504      	adds	r5, #4
 8010a34:	e7d7      	b.n	80109e6 <USBD_StdEPReq+0x194>
            pep->status = 0x0000U;
 8010a36:	2300      	movs	r3, #0
 8010a38:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010a3a:	2202      	movs	r2, #2
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 f828 	bl	8010a94 <USBD_CtlSendData>
  return ret;
 8010a44:	2000      	movs	r0, #0
          break;
 8010a46:	bd38      	pop	{r3, r4, r5, pc}
            pep->status = 0x0000U;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	602b      	str	r3, [r5, #0]
 8010a4c:	e7f5      	b.n	8010a3a <USBD_StdEPReq+0x1e8>
      USBD_CtlError(pdev, req);
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f7ff fd26 	bl	80104a0 <USBD_CtlError>
  return ret;
 8010a54:	2000      	movs	r0, #0
      break;
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
  return ret;
 8010a58:	2000      	movs	r0, #0
}
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}

08010a5c <USBD_GetString>:
  if (desc != NULL)
 8010a5c:	b1c8      	cbz	r0, 8010a92 <USBD_GetString+0x36>
{
 8010a5e:	b570      	push	{r4, r5, r6, lr}
 8010a60:	460d      	mov	r5, r1
 8010a62:	4616      	mov	r6, r2
 8010a64:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010a66:	f7ff fcf3 	bl	8010450 <USBD_GetLen>
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	0040      	lsls	r0, r0, #1
 8010a6e:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010a70:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010a72:	2303      	movs	r3, #3
 8010a74:	706b      	strb	r3, [r5, #1]
 8010a76:	2302      	movs	r3, #2
    while (*desc != '\0')
 8010a78:	e007      	b.n	8010a8a <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	b2d2      	uxtb	r2, r2
 8010a7e:	3401      	adds	r4, #1
 8010a80:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8010a82:	3302      	adds	r3, #2
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2100      	movs	r1, #0
 8010a88:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8010a8a:	7821      	ldrb	r1, [r4, #0]
 8010a8c:	2900      	cmp	r1, #0
 8010a8e:	d1f4      	bne.n	8010a7a <USBD_GetString+0x1e>
 8010a90:	bd70      	pop	{r4, r5, r6, pc}
 8010a92:	4770      	bx	lr

08010a94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010a94:	b510      	push	{r4, lr}
 8010a96:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010a98:	2202      	movs	r2, #2
 8010a9a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010a9e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8010aa0:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010aa2:	460a      	mov	r2, r1
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	f007 f9bc 	bl	8017e22 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010aaa:	2000      	movs	r0, #0
 8010aac:	bd10      	pop	{r4, pc}

08010aae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010aae:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	460a      	mov	r2, r1
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	f007 f9b4 	bl	8017e22 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010aba:	2000      	movs	r0, #0
 8010abc:	bd08      	pop	{r3, pc}

08010abe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8010abe:	b510      	push	{r4, lr}
 8010ac0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010ac2:	2203      	movs	r2, #3
 8010ac4:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010ac8:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8010acc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8010ad0:	460a      	mov	r2, r1
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	f007 f9ad 	bl	8017e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010ad8:	2000      	movs	r0, #0
 8010ada:	bd10      	pop	{r4, pc}

08010adc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010adc:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ade:	4613      	mov	r3, r2
 8010ae0:	460a      	mov	r2, r1
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	f007 f9a5 	bl	8017e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010ae8:	2000      	movs	r0, #0
 8010aea:	bd08      	pop	{r3, pc}

08010aec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010aec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010aee:	2304      	movs	r3, #4
 8010af0:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010af4:	2300      	movs	r3, #0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4619      	mov	r1, r3
 8010afa:	f007 f992 	bl	8017e22 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010afe:	2000      	movs	r0, #0
 8010b00:	bd08      	pop	{r3, pc}

08010b02 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010b02:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010b04:	2305      	movs	r3, #5
 8010b06:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	4619      	mov	r1, r3
 8010b10:	f007 f98f 	bl	8017e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010b14:	2000      	movs	r0, #0
 8010b16:	bd08      	pop	{r3, pc}

08010b18 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint32_t USBD_GetRxCount (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b18:	b508      	push	{r3, lr}
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8010b1a:	f007 f924 	bl	8017d66 <USBD_LL_GetRxDataSize>
}
 8010b1e:	bd08      	pop	{r3, pc}

08010b20 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8010b20:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010b22:	f005 fbff 	bl	8016324 <pvTimerGetTimerID>

  if (callb != NULL) {
 8010b26:	b110      	cbz	r0, 8010b2e <TimerCallback+0xe>
    callb->func (callb->arg);
 8010b28:	6802      	ldr	r2, [r0, #0]
 8010b2a:	6840      	ldr	r0, [r0, #4]
 8010b2c:	4790      	blx	r2
 8010b2e:	bd08      	pop	{r3, pc}

08010b30 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b30:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010b34:	b99b      	cbnz	r3, 8010b5e <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b36:	f3ef 8310 	mrs	r3, PRIMASK
 8010b3a:	b99b      	cbnz	r3, 8010b64 <osKernelInitialize+0x34>
 8010b3c:	4b0c      	ldr	r3, [pc, #48]	; (8010b70 <osKernelInitialize+0x40>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b02      	cmp	r3, #2
 8010b42:	d005      	beq.n	8010b50 <osKernelInitialize+0x20>
    if (KernelState == osKernelInactive) {
 8010b44:	b98b      	cbnz	r3, 8010b6a <osKernelInitialize+0x3a>
      KernelState = osKernelReady;
 8010b46:	2201      	movs	r2, #1
 8010b48:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <osKernelInitialize+0x40>)
 8010b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b50:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8010b54:	2a00      	cmp	r2, #0
 8010b56:	d0f5      	beq.n	8010b44 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8010b58:	f06f 0005 	mvn.w	r0, #5
 8010b5c:	4770      	bx	lr
 8010b5e:	f06f 0005 	mvn.w	r0, #5
 8010b62:	4770      	bx	lr
 8010b64:	f06f 0005 	mvn.w	r0, #5
 8010b68:	4770      	bx	lr
      stat = osError;
 8010b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010b6e:	4770      	bx	lr
 8010b70:	20000828 	.word	0x20000828

08010b74 <osKernelGetInfo>:
osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 8010b74:	b510      	push	{r4, lr}
 8010b76:	460c      	mov	r4, r1
  if (version != NULL) {
 8010b78:	b110      	cbz	r0, 8010b80 <osKernelGetInfo+0xc>
    version->api    = KERNEL_VERSION;
 8010b7a:	4907      	ldr	r1, [pc, #28]	; (8010b98 <osKernelGetInfo+0x24>)
 8010b7c:	6001      	str	r1, [r0, #0]
    version->kernel = KERNEL_VERSION;
 8010b7e:	6041      	str	r1, [r0, #4]
  if ((id_buf != NULL) && (id_size != 0U)) {
 8010b80:	b13c      	cbz	r4, 8010b92 <osKernelGetInfo+0x1e>
 8010b82:	b132      	cbz	r2, 8010b92 <osKernelGetInfo+0x1e>
    if (id_size > sizeof(KERNEL_ID)) {
 8010b84:	2a11      	cmp	r2, #17
 8010b86:	d900      	bls.n	8010b8a <osKernelGetInfo+0x16>
      id_size = sizeof(KERNEL_ID);
 8010b88:	2211      	movs	r2, #17
    memcpy(id_buf, KERNEL_ID, id_size);
 8010b8a:	4904      	ldr	r1, [pc, #16]	; (8010b9c <osKernelGetInfo+0x28>)
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f008 faa3 	bl	80190d8 <memcpy>
}
 8010b92:	2000      	movs	r0, #0
 8010b94:	bd10      	pop	{r4, pc}
 8010b96:	bf00      	nop
 8010b98:	05f5e101 	.word	0x05f5e101
 8010b9c:	0801ceb4 	.word	0x0801ceb4

08010ba0 <osKernelGetState>:
osKernelState_t osKernelGetState (void) {
 8010ba0:	b508      	push	{r3, lr}
  switch (xTaskGetSchedulerState()) {
 8010ba2:	f004 fce7 	bl	8015574 <xTaskGetSchedulerState>
 8010ba6:	b150      	cbz	r0, 8010bbe <osKernelGetState+0x1e>
 8010ba8:	2802      	cmp	r0, #2
 8010baa:	d101      	bne.n	8010bb0 <osKernelGetState+0x10>
      state = osKernelRunning;
 8010bac:	2002      	movs	r0, #2
 8010bae:	bd08      	pop	{r3, pc}
      if (KernelState == osKernelReady) {
 8010bb0:	4b04      	ldr	r3, [pc, #16]	; (8010bc4 <osKernelGetState+0x24>)
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	2801      	cmp	r0, #1
 8010bb6:	d001      	beq.n	8010bbc <osKernelGetState+0x1c>
        state = osKernelInactive;
 8010bb8:	2000      	movs	r0, #0
}
 8010bba:	bd08      	pop	{r3, pc}
 8010bbc:	bd08      	pop	{r3, pc}
      state = osKernelLocked;
 8010bbe:	2003      	movs	r0, #3
 8010bc0:	bd08      	pop	{r3, pc}
 8010bc2:	bf00      	nop
 8010bc4:	20000828 	.word	0x20000828

08010bc8 <osKernelStart>:
osStatus_t osKernelStart (void) {
 8010bc8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bca:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010bce:	b9b3      	cbnz	r3, 8010bfe <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd4:	b9b3      	cbnz	r3, 8010c04 <osKernelStart+0x3c>
 8010bd6:	4b0e      	ldr	r3, [pc, #56]	; (8010c10 <osKernelStart+0x48>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d008      	beq.n	8010bf0 <osKernelStart+0x28>
    if (KernelState == osKernelReady) {
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d113      	bne.n	8010c0a <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8010be2:	2202      	movs	r2, #2
 8010be4:	4b0a      	ldr	r3, [pc, #40]	; (8010c10 <osKernelStart+0x48>)
 8010be6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8010be8:	f003 ffb2 	bl	8014b50 <vTaskStartScheduler>
      stat = osOK;
 8010bec:	2000      	movs	r0, #0
 8010bee:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010bf0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8010bf4:	2a00      	cmp	r2, #0
 8010bf6:	d0f2      	beq.n	8010bde <osKernelStart+0x16>
    stat = osErrorISR;
 8010bf8:	f06f 0005 	mvn.w	r0, #5
 8010bfc:	bd08      	pop	{r3, pc}
 8010bfe:	f06f 0005 	mvn.w	r0, #5
 8010c02:	bd08      	pop	{r3, pc}
 8010c04:	f06f 0005 	mvn.w	r0, #5
 8010c08:	bd08      	pop	{r3, pc}
      stat = osError;
 8010c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010c0e:	bd08      	pop	{r3, pc}
 8010c10:	20000828 	.word	0x20000828

08010c14 <osKernelLock>:
int32_t osKernelLock (void) {
 8010c14:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c16:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010c1a:	b9db      	cbnz	r3, 8010c54 <osKernelLock+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c20:	b9db      	cbnz	r3, 8010c5a <osKernelLock+0x46>
 8010c22:	4b0f      	ldr	r3, [pc, #60]	; (8010c60 <osKernelLock+0x4c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b02      	cmp	r3, #2
 8010c28:	d007      	beq.n	8010c3a <osKernelLock+0x26>
    switch (xTaskGetSchedulerState()) {
 8010c2a:	f004 fca3 	bl	8015574 <xTaskGetSchedulerState>
 8010c2e:	b158      	cbz	r0, 8010c48 <osKernelLock+0x34>
 8010c30:	2802      	cmp	r0, #2
 8010c32:	d00b      	beq.n	8010c4c <osKernelLock+0x38>
        lock = (int32_t)osError;
 8010c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010c38:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c3a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0f3      	beq.n	8010c2a <osKernelLock+0x16>
    lock = (int32_t)osErrorISR;
 8010c42:	f06f 0005 	mvn.w	r0, #5
 8010c46:	bd08      	pop	{r3, pc}
        lock = 1;
 8010c48:	2001      	movs	r0, #1
 8010c4a:	bd08      	pop	{r3, pc}
        vTaskSuspendAll();
 8010c4c:	f003 ffde 	bl	8014c0c <vTaskSuspendAll>
        lock = 0;
 8010c50:	2000      	movs	r0, #0
        break;
 8010c52:	bd08      	pop	{r3, pc}
    lock = (int32_t)osErrorISR;
 8010c54:	f06f 0005 	mvn.w	r0, #5
 8010c58:	bd08      	pop	{r3, pc}
 8010c5a:	f06f 0005 	mvn.w	r0, #5
 8010c5e:	bd08      	pop	{r3, pc}
 8010c60:	20000828 	.word	0x20000828

08010c64 <osKernelUnlock>:
int32_t osKernelUnlock (void) {
 8010c64:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c66:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010c6a:	b9eb      	cbnz	r3, 8010ca8 <osKernelUnlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c70:	b9eb      	cbnz	r3, 8010cae <osKernelUnlock+0x4a>
 8010c72:	4b14      	ldr	r3, [pc, #80]	; (8010cc4 <osKernelUnlock+0x60>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	d006      	beq.n	8010c88 <osKernelUnlock+0x24>
    switch (xTaskGetSchedulerState()) {
 8010c7a:	f004 fc7b 	bl	8015574 <xTaskGetSchedulerState>
 8010c7e:	b150      	cbz	r0, 8010c96 <osKernelUnlock+0x32>
 8010c80:	2802      	cmp	r0, #2
 8010c82:	d117      	bne.n	8010cb4 <osKernelUnlock+0x50>
        lock = 0;
 8010c84:	2000      	movs	r0, #0
 8010c86:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c88:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0f4      	beq.n	8010c7a <osKernelUnlock+0x16>
    lock = (int32_t)osErrorISR;
 8010c90:	f06f 0005 	mvn.w	r0, #5
 8010c94:	bd08      	pop	{r3, pc}
        if (xTaskResumeAll() != pdTRUE) {
 8010c96:	f004 f877 	bl	8014d88 <xTaskResumeAll>
 8010c9a:	2801      	cmp	r0, #1
 8010c9c:	d00d      	beq.n	8010cba <osKernelUnlock+0x56>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8010c9e:	f004 fc69 	bl	8015574 <xTaskGetSchedulerState>
 8010ca2:	b160      	cbz	r0, 8010cbe <osKernelUnlock+0x5a>
        lock = 1;
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	bd08      	pop	{r3, pc}
    lock = (int32_t)osErrorISR;
 8010ca8:	f06f 0005 	mvn.w	r0, #5
 8010cac:	bd08      	pop	{r3, pc}
 8010cae:	f06f 0005 	mvn.w	r0, #5
 8010cb2:	bd08      	pop	{r3, pc}
        lock = (int32_t)osError;
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cb8:	bd08      	pop	{r3, pc}
        lock = 1;
 8010cba:	2001      	movs	r0, #1
 8010cbc:	bd08      	pop	{r3, pc}
            lock = (int32_t)osError;
 8010cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010cc2:	bd08      	pop	{r3, pc}
 8010cc4:	20000828 	.word	0x20000828

08010cc8 <osKernelRestoreLock>:
int32_t osKernelRestoreLock (int32_t lock) {
 8010cc8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cca:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010cce:	bb1b      	cbnz	r3, 8010d18 <osKernelRestoreLock+0x50>
 8010cd0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8010cd6:	bb13      	cbnz	r3, 8010d1e <osKernelRestoreLock+0x56>
 8010cd8:	4b17      	ldr	r3, [pc, #92]	; (8010d38 <osKernelRestoreLock+0x70>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d011      	beq.n	8010d04 <osKernelRestoreLock+0x3c>
    switch (xTaskGetSchedulerState()) {
 8010ce0:	f004 fc48 	bl	8015574 <xTaskGetSchedulerState>
 8010ce4:	b108      	cbz	r0, 8010cea <osKernelRestoreLock+0x22>
 8010ce6:	2802      	cmp	r0, #2
 8010ce8:	d11c      	bne.n	8010d24 <osKernelRestoreLock+0x5c>
        if (lock == 1) {
 8010cea:	2c01      	cmp	r4, #1
 8010cec:	d011      	beq.n	8010d12 <osKernelRestoreLock+0x4a>
          if (lock != 0) {
 8010cee:	b9e4      	cbnz	r4, 8010d2a <osKernelRestoreLock+0x62>
            if (xTaskResumeAll() != pdTRUE) {
 8010cf0:	f004 f84a 	bl	8014d88 <xTaskResumeAll>
 8010cf4:	2801      	cmp	r0, #1
 8010cf6:	d003      	beq.n	8010d00 <osKernelRestoreLock+0x38>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 8010cf8:	f004 fc3c 	bl	8015574 <xTaskGetSchedulerState>
 8010cfc:	2802      	cmp	r0, #2
 8010cfe:	d117      	bne.n	8010d30 <osKernelRestoreLock+0x68>
}
 8010d00:	4620      	mov	r0, r4
 8010d02:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d04:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d0e9      	beq.n	8010ce0 <osKernelRestoreLock+0x18>
    lock = (int32_t)osErrorISR;
 8010d0c:	f06f 0405 	mvn.w	r4, #5
 8010d10:	e7f6      	b.n	8010d00 <osKernelRestoreLock+0x38>
          vTaskSuspendAll();
 8010d12:	f003 ff7b 	bl	8014c0c <vTaskSuspendAll>
 8010d16:	e7f3      	b.n	8010d00 <osKernelRestoreLock+0x38>
    lock = (int32_t)osErrorISR;
 8010d18:	f06f 0405 	mvn.w	r4, #5
 8010d1c:	e7f0      	b.n	8010d00 <osKernelRestoreLock+0x38>
 8010d1e:	f06f 0405 	mvn.w	r4, #5
 8010d22:	e7ed      	b.n	8010d00 <osKernelRestoreLock+0x38>
        lock = (int32_t)osError;
 8010d24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010d28:	e7ea      	b.n	8010d00 <osKernelRestoreLock+0x38>
            lock = (int32_t)osError;
 8010d2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010d2e:	e7e7      	b.n	8010d00 <osKernelRestoreLock+0x38>
                lock = (int32_t)osError;
 8010d30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010d34:	e7e4      	b.n	8010d00 <osKernelRestoreLock+0x38>
 8010d36:	bf00      	nop
 8010d38:	20000828 	.word	0x20000828

08010d3c <osKernelGetTickCount>:
uint32_t osKernelGetTickCount (void) {
 8010d3c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d3e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010d42:	b96b      	cbnz	r3, 8010d60 <osKernelGetTickCount+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d44:	f3ef 8310 	mrs	r3, PRIMASK
 8010d48:	b953      	cbnz	r3, 8010d60 <osKernelGetTickCount+0x24>
 8010d4a:	4b07      	ldr	r3, [pc, #28]	; (8010d68 <osKernelGetTickCount+0x2c>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d002      	beq.n	8010d58 <osKernelGetTickCount+0x1c>
    ticks = xTaskGetTickCount();
 8010d52:	f003 ff65 	bl	8014c20 <xTaskGetTickCount>
}
 8010d56:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d58:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d0f8      	beq.n	8010d52 <osKernelGetTickCount+0x16>
    ticks = xTaskGetTickCountFromISR();
 8010d60:	f003 ff64 	bl	8014c2c <xTaskGetTickCountFromISR>
 8010d64:	bd08      	pop	{r3, pc}
 8010d66:	bf00      	nop
 8010d68:	20000828 	.word	0x20000828

08010d6c <osKernelGetTickFreq>:
}
 8010d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d70:	4770      	bx	lr

08010d72 <osKernelGetSysTimerCount>:
uint32_t osKernelGetSysTimerCount (void) {
 8010d72:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d78:	f383 8811 	msr	BASEPRI, r3
 8010d7c:	f3bf 8f6f 	isb	sy
 8010d80:	f3bf 8f4f 	dsb	sy
  ticks = xTaskGetTickCount();
 8010d84:	f003 ff4c 	bl	8014c20 <xTaskGetTickCount>
  val = ticks * ( configCPU_CLOCK_HZ / configTICK_RATE_HZ );
 8010d88:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <osKernelGetSysTimerCount+0x2e>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a05      	ldr	r2, [pc, #20]	; (8010da4 <osKernelGetSysTimerCount+0x32>)
 8010d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d92:	099b      	lsrs	r3, r3, #6
 8010d94:	fb03 f000 	mul.w	r0, r3, r0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f383 8811 	msr	BASEPRI, r3
}
 8010d9e:	bd08      	pop	{r3, pc}
 8010da0:	20000008 	.word	0x20000008
 8010da4:	10624dd3 	.word	0x10624dd3

08010da8 <osKernelGetSysTimerFreq>:
}
 8010da8:	4b01      	ldr	r3, [pc, #4]	; (8010db0 <osKernelGetSysTimerFreq+0x8>)
 8010daa:	6818      	ldr	r0, [r3, #0]
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	20000008 	.word	0x20000008

08010db4 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db6:	b087      	sub	sp, #28
  hTask = NULL;
 8010db8:	2400      	movs	r4, #0
 8010dba:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dbc:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8010dc0:	bb54      	cbnz	r4, 8010e18 <osThreadNew+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc6:	bb3b      	cbnz	r3, 8010e18 <osThreadNew+0x64>
 8010dc8:	4b34      	ldr	r3, [pc, #208]	; (8010e9c <osThreadNew+0xe8>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d026      	beq.n	8010e1e <osThreadNew+0x6a>
 8010dd0:	b310      	cbz	r0, 8010e18 <osThreadNew+0x64>
    empty = '\0';
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f88d 3017 	strb.w	r3, [sp, #23]
    if (attr != NULL) {
 8010dd8:	2a00      	cmp	r2, #0
 8010dda:	d032      	beq.n	8010e42 <osThreadNew+0x8e>
      if (attr->name != NULL) {
 8010ddc:	6816      	ldr	r6, [r2, #0]
 8010dde:	b31e      	cbz	r6, 8010e28 <osThreadNew+0x74>
      if (attr->priority != osPriorityNone) {
 8010de0:	6994      	ldr	r4, [r2, #24]
 8010de2:	b904      	cbnz	r4, 8010de6 <osThreadNew+0x32>
    prio  = (UBaseType_t)osPriorityNormal;
 8010de4:	2418      	movs	r4, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010de6:	1e63      	subs	r3, r4, #1
 8010de8:	2b37      	cmp	r3, #55	; 0x37
 8010dea:	d852      	bhi.n	8010e92 <osThreadNew+0xde>
 8010dec:	6853      	ldr	r3, [r2, #4]
 8010dee:	f013 0f01 	tst.w	r3, #1
 8010df2:	d150      	bne.n	8010e96 <osThreadNew+0xe2>
      if (attr->stack_size > 0U) {
 8010df4:	6953      	ldr	r3, [r2, #20]
 8010df6:	b1d3      	cbz	r3, 8010e2e <osThreadNew+0x7a>
        stack = attr->stack_size / sizeof(StackType_t);
 8010df8:	ea4f 0e93 	mov.w	lr, r3, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010dfc:	6895      	ldr	r5, [r2, #8]
 8010dfe:	b12d      	cbz	r5, 8010e0c <osThreadNew+0x58>
 8010e00:	68d7      	ldr	r7, [r2, #12]
 8010e02:	2f63      	cmp	r7, #99	; 0x63
 8010e04:	d902      	bls.n	8010e0c <osThreadNew+0x58>
 8010e06:	6917      	ldr	r7, [r2, #16]
 8010e08:	b107      	cbz	r7, 8010e0c <osThreadNew+0x58>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e0a:	bb0b      	cbnz	r3, 8010e50 <osThreadNew+0x9c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e0c:	b195      	cbz	r5, 8010e34 <osThreadNew+0x80>
    mem   = -1;
 8010e0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    if (mem == 1) {
 8010e12:	2d01      	cmp	r5, #1
 8010e14:	d023      	beq.n	8010e5e <osThreadNew+0xaa>
      if (mem == 0) {
 8010e16:	b375      	cbz	r5, 8010e76 <osThreadNew+0xc2>
  return ((osThreadId_t)hTask);
 8010e18:	9804      	ldr	r0, [sp, #16]
}
 8010e1a:	b007      	add	sp, #28
 8010e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e1e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1f8      	bne.n	8010e18 <osThreadNew+0x64>
 8010e26:	e7d3      	b.n	8010dd0 <osThreadNew+0x1c>
    name  = &empty;
 8010e28:	f10d 0617 	add.w	r6, sp, #23
 8010e2c:	e7d8      	b.n	8010de0 <osThreadNew+0x2c>
    stack = configMINIMAL_STACK_SIZE;
 8010e2e:	f44f 7e80 	mov.w	lr, #256	; 0x100
 8010e32:	e7e3      	b.n	8010dfc <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e34:	68d3      	ldr	r3, [r2, #12]
 8010e36:	b96b      	cbnz	r3, 8010e54 <osThreadNew+0xa0>
 8010e38:	6913      	ldr	r3, [r2, #16]
 8010e3a:	b173      	cbz	r3, 8010e5a <osThreadNew+0xa6>
    mem   = -1;
 8010e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010e40:	e7e7      	b.n	8010e12 <osThreadNew+0x5e>
      mem = 0;
 8010e42:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8010e44:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 8010e46:	f44f 7e80 	mov.w	lr, #256	; 0x100
    name  = &empty;
 8010e4a:	f10d 0617 	add.w	r6, sp, #23
 8010e4e:	e7e0      	b.n	8010e12 <osThreadNew+0x5e>
        mem = 1;
 8010e50:	2501      	movs	r5, #1
 8010e52:	e7de      	b.n	8010e12 <osThreadNew+0x5e>
    mem   = -1;
 8010e54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010e58:	e7db      	b.n	8010e12 <osThreadNew+0x5e>
          mem = 0;
 8010e5a:	2500      	movs	r5, #0
 8010e5c:	e7d9      	b.n	8010e12 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e5e:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010e60:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e62:	9202      	str	r2, [sp, #8]
 8010e64:	9301      	str	r3, [sp, #4]
 8010e66:	9400      	str	r4, [sp, #0]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4672      	mov	r2, lr
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	f003 fc3a 	bl	80146e6 <xTaskCreateStatic>
 8010e72:	9004      	str	r0, [sp, #16]
 8010e74:	e7d0      	b.n	8010e18 <osThreadNew+0x64>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e76:	aa04      	add	r2, sp, #16
 8010e78:	9201      	str	r2, [sp, #4]
 8010e7a:	9400      	str	r4, [sp, #0]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	fa1f f28e 	uxth.w	r2, lr
 8010e82:	4631      	mov	r1, r6
 8010e84:	f003 fc68 	bl	8014758 <xTaskCreate>
 8010e88:	2801      	cmp	r0, #1
 8010e8a:	d0c5      	beq.n	8010e18 <osThreadNew+0x64>
          hTask = NULL;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	9304      	str	r3, [sp, #16]
 8010e90:	e7c2      	b.n	8010e18 <osThreadNew+0x64>
        return (NULL);
 8010e92:	2000      	movs	r0, #0
 8010e94:	e7c1      	b.n	8010e1a <osThreadNew+0x66>
 8010e96:	2000      	movs	r0, #0
 8010e98:	e7bf      	b.n	8010e1a <osThreadNew+0x66>
 8010e9a:	bf00      	nop
 8010e9c:	20000828 	.word	0x20000828

08010ea0 <osThreadGetName>:
const char *osThreadGetName (osThreadId_t thread_id) {
 8010ea0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ea2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ() || (hTask == NULL)) {
 8010ea6:	b983      	cbnz	r3, 8010eca <osThreadGetName+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8010eac:	b97b      	cbnz	r3, 8010ece <osThreadGetName+0x2e>
 8010eae:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <osThreadGetName+0x38>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d003      	beq.n	8010ebe <osThreadGetName+0x1e>
 8010eb6:	b160      	cbz	r0, 8010ed2 <osThreadGetName+0x32>
    name = pcTaskGetName (hTask);
 8010eb8:	f003 fec8 	bl	8014c4c <pcTaskGetName>
 8010ebc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ebe:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hTask == NULL)) {
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d0f7      	beq.n	8010eb6 <osThreadGetName+0x16>
    name = NULL;
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	bd08      	pop	{r3, pc}
 8010eca:	2000      	movs	r0, #0
 8010ecc:	bd08      	pop	{r3, pc}
 8010ece:	2000      	movs	r0, #0
 8010ed0:	bd08      	pop	{r3, pc}
 8010ed2:	2000      	movs	r0, #0
}
 8010ed4:	bd08      	pop	{r3, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20000828 	.word	0x20000828

08010edc <osThreadGetId>:
osThreadId_t osThreadGetId (void) {
 8010edc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ede:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010ee2:	b97b      	cbnz	r3, 8010f04 <osThreadGetId+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8010ee8:	b973      	cbnz	r3, 8010f08 <osThreadGetId+0x2c>
 8010eea:	4b08      	ldr	r3, [pc, #32]	; (8010f0c <osThreadGetId+0x30>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d002      	beq.n	8010ef8 <osThreadGetId+0x1c>
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8010ef2:	f004 fb39 	bl	8015568 <xTaskGetCurrentTaskHandle>
 8010ef6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ef8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d0f8      	beq.n	8010ef2 <osThreadGetId+0x16>
    id = NULL;
 8010f00:	2000      	movs	r0, #0
}
 8010f02:	bd08      	pop	{r3, pc}
    id = NULL;
 8010f04:	2000      	movs	r0, #0
 8010f06:	bd08      	pop	{r3, pc}
 8010f08:	2000      	movs	r0, #0
 8010f0a:	bd08      	pop	{r3, pc}
 8010f0c:	20000828 	.word	0x20000828

08010f10 <osThreadGetState>:
osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8010f10:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f12:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ() || (hTask == NULL)) {
 8010f16:	bb03      	cbnz	r3, 8010f5a <osThreadGetState+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f18:	f3ef 8310 	mrs	r3, PRIMASK
 8010f1c:	bb03      	cbnz	r3, 8010f60 <osThreadGetState+0x50>
 8010f1e:	4b14      	ldr	r3, [pc, #80]	; (8010f70 <osThreadGetState+0x60>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d009      	beq.n	8010f3a <osThreadGetState+0x2a>
 8010f26:	b1f0      	cbz	r0, 8010f66 <osThreadGetState+0x56>
    switch (eTaskGetState (hTask)) {
 8010f28:	f003 fca4 	bl	8014874 <eTaskGetState>
 8010f2c:	2804      	cmp	r0, #4
 8010f2e:	d811      	bhi.n	8010f54 <osThreadGetState+0x44>
 8010f30:	e8df f000 	tbb	[pc, r0]
 8010f34:	0c0c1c0a 	.word	0x0c0c1c0a
 8010f38:	0e          	.byte	0x0e
 8010f39:	00          	.byte	0x00
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f3a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hTask == NULL)) {
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d0f1      	beq.n	8010f26 <osThreadGetState+0x16>
    state = osThreadError;
 8010f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f46:	bd08      	pop	{r3, pc}
      case eRunning:   state = osThreadRunning;    break;
 8010f48:	2002      	movs	r0, #2
 8010f4a:	bd08      	pop	{r3, pc}
      case eSuspended: state = osThreadBlocked;    break;
 8010f4c:	2003      	movs	r0, #3
 8010f4e:	bd08      	pop	{r3, pc}
      case eDeleted:   state = osThreadTerminated; break;
 8010f50:	2004      	movs	r0, #4
 8010f52:	bd08      	pop	{r3, pc}
      default:         state = osThreadError;      break;
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f58:	bd08      	pop	{r3, pc}
    state = osThreadError;
 8010f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f5e:	bd08      	pop	{r3, pc}
 8010f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f64:	bd08      	pop	{r3, pc}
 8010f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f6a:	bd08      	pop	{r3, pc}
      case eReady:     state = osThreadReady;      break;
 8010f6c:	2001      	movs	r0, #1
}
 8010f6e:	bd08      	pop	{r3, pc}
 8010f70:	20000828 	.word	0x20000828

08010f74 <osThreadGetStackSpace>:
uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8010f74:	b508      	push	{r3, lr}
 8010f76:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f78:	f3ef 8005 	mrs	r0, IPSR
  if (IS_IRQ() || (hTask == NULL)) {
 8010f7c:	b988      	cbnz	r0, 8010fa2 <osThreadGetStackSpace+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f7e:	f3ef 8210 	mrs	r2, PRIMASK
 8010f82:	b98a      	cbnz	r2, 8010fa8 <osThreadGetStackSpace+0x34>
 8010f84:	4909      	ldr	r1, [pc, #36]	; (8010fac <osThreadGetStackSpace+0x38>)
 8010f86:	6809      	ldr	r1, [r1, #0]
 8010f88:	2902      	cmp	r1, #2
 8010f8a:	d004      	beq.n	8010f96 <osThreadGetStackSpace+0x22>
 8010f8c:	b15b      	cbz	r3, 8010fa6 <osThreadGetStackSpace+0x32>
 8010f8e:	4618      	mov	r0, r3
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8010f90:	f004 fadc 	bl	801554c <uxTaskGetStackHighWaterMark>
 8010f94:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f96:	f3ef 8111 	mrs	r1, BASEPRI
  if (IS_IRQ() || (hTask == NULL)) {
 8010f9a:	2900      	cmp	r1, #0
 8010f9c:	d0f6      	beq.n	8010f8c <osThreadGetStackSpace+0x18>
    sz = 0U;
 8010f9e:	4610      	mov	r0, r2
 8010fa0:	bd08      	pop	{r3, pc}
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	bd08      	pop	{r3, pc}
 8010fa6:	4610      	mov	r0, r2
}
 8010fa8:	bd08      	pop	{r3, pc}
 8010faa:	bf00      	nop
 8010fac:	20000828 	.word	0x20000828

08010fb0 <osThreadGetStackSize>:
}
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	4770      	bx	lr

08010fb4 <osThreadSetPriority>:
osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8010fb4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fb6:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8010fba:	b9b3      	cbnz	r3, 8010fea <osThreadSetPriority+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8010fc0:	b9b3      	cbnz	r3, 8010ff0 <osThreadSetPriority+0x3c>
 8010fc2:	4b11      	ldr	r3, [pc, #68]	; (8011008 <osThreadSetPriority+0x54>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	d008      	beq.n	8010fdc <osThreadSetPriority+0x28>
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8010fca:	b1a0      	cbz	r0, 8010ff6 <osThreadSetPriority+0x42>
 8010fcc:	2900      	cmp	r1, #0
 8010fce:	dd15      	ble.n	8010ffc <osThreadSetPriority+0x48>
 8010fd0:	2938      	cmp	r1, #56	; 0x38
 8010fd2:	dc16      	bgt.n	8011002 <osThreadSetPriority+0x4e>
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8010fd4:	f003 fcb4 	bl	8014940 <vTaskPrioritySet>
    stat = osOK;
 8010fd8:	2000      	movs	r0, #0
 8010fda:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010fdc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d0f2      	beq.n	8010fca <osThreadSetPriority+0x16>
    stat = osErrorISR;
 8010fe4:	f06f 0005 	mvn.w	r0, #5
 8010fe8:	bd08      	pop	{r3, pc}
 8010fea:	f06f 0005 	mvn.w	r0, #5
 8010fee:	bd08      	pop	{r3, pc}
 8010ff0:	f06f 0005 	mvn.w	r0, #5
 8010ff4:	bd08      	pop	{r3, pc}
    stat = osErrorParameter;
 8010ff6:	f06f 0003 	mvn.w	r0, #3
 8010ffa:	bd08      	pop	{r3, pc}
 8010ffc:	f06f 0003 	mvn.w	r0, #3
 8011000:	bd08      	pop	{r3, pc}
 8011002:	f06f 0003 	mvn.w	r0, #3
}
 8011006:	bd08      	pop	{r3, pc}
 8011008:	20000828 	.word	0x20000828

0801100c <osThreadGetPriority>:
osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 801100c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801100e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ() || (hTask == NULL)) {
 8011012:	b98b      	cbnz	r3, 8011038 <osThreadGetPriority+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011014:	f3ef 8310 	mrs	r3, PRIMASK
 8011018:	b98b      	cbnz	r3, 801103e <osThreadGetPriority+0x32>
 801101a:	4b0c      	ldr	r3, [pc, #48]	; (801104c <osThreadGetPriority+0x40>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b02      	cmp	r3, #2
 8011020:	d003      	beq.n	801102a <osThreadGetPriority+0x1e>
 8011022:	b178      	cbz	r0, 8011044 <osThreadGetPriority+0x38>
    prio = (osPriority_t)uxTaskPriorityGet (hTask);
 8011024:	f003 fc62 	bl	80148ec <uxTaskPriorityGet>
 8011028:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801102a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hTask == NULL)) {
 801102e:	2b00      	cmp	r3, #0
 8011030:	d0f7      	beq.n	8011022 <osThreadGetPriority+0x16>
    prio = osPriorityError;
 8011032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011036:	bd08      	pop	{r3, pc}
 8011038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801103c:	bd08      	pop	{r3, pc}
 801103e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011042:	bd08      	pop	{r3, pc}
 8011044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8011048:	bd08      	pop	{r3, pc}
 801104a:	bf00      	nop
 801104c:	20000828 	.word	0x20000828

08011050 <osThreadYield>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011050:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8011054:	b9bb      	cbnz	r3, 8011086 <osThreadYield+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011056:	f3ef 8310 	mrs	r3, PRIMASK
 801105a:	b9bb      	cbnz	r3, 801108c <osThreadYield+0x3c>
 801105c:	4b0d      	ldr	r3, [pc, #52]	; (8011094 <osThreadYield+0x44>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b02      	cmp	r3, #2
 8011062:	d009      	beq.n	8011078 <osThreadYield+0x28>
    taskYIELD();
 8011064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011068:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <osThreadYield+0x48>)
 801106a:	601a      	str	r2, [r3, #0]
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	f3bf 8f6f 	isb	sy
    stat = osOK;
 8011074:	2000      	movs	r0, #0
 8011076:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011078:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 801107c:	2b00      	cmp	r3, #0
 801107e:	d0f1      	beq.n	8011064 <osThreadYield+0x14>
    stat = osErrorISR;
 8011080:	f06f 0005 	mvn.w	r0, #5
}
 8011084:	4770      	bx	lr
    stat = osErrorISR;
 8011086:	f06f 0005 	mvn.w	r0, #5
 801108a:	4770      	bx	lr
 801108c:	f06f 0005 	mvn.w	r0, #5
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	20000828 	.word	0x20000828
 8011098:	e000ed04 	.word	0xe000ed04

0801109c <osThreadSuspend>:
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801109c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801109e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80110a2:	b993      	cbnz	r3, 80110ca <osThreadSuspend+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110a4:	f3ef 8310 	mrs	r3, PRIMASK
 80110a8:	b993      	cbnz	r3, 80110d0 <osThreadSuspend+0x34>
 80110aa:	4b0c      	ldr	r3, [pc, #48]	; (80110dc <osThreadSuspend+0x40>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b02      	cmp	r3, #2
 80110b0:	d004      	beq.n	80110bc <osThreadSuspend+0x20>
  else if (hTask == NULL) {
 80110b2:	b180      	cbz	r0, 80110d6 <osThreadSuspend+0x3a>
    vTaskSuspend (hTask);
 80110b4:	f003 ffc6 	bl	8015044 <vTaskSuspend>
    stat = osOK;
 80110b8:	2000      	movs	r0, #0
 80110ba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80110bc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d0f6      	beq.n	80110b2 <osThreadSuspend+0x16>
    stat = osErrorISR;
 80110c4:	f06f 0005 	mvn.w	r0, #5
 80110c8:	bd08      	pop	{r3, pc}
 80110ca:	f06f 0005 	mvn.w	r0, #5
 80110ce:	bd08      	pop	{r3, pc}
 80110d0:	f06f 0005 	mvn.w	r0, #5
 80110d4:	bd08      	pop	{r3, pc}
    stat = osErrorParameter;
 80110d6:	f06f 0003 	mvn.w	r0, #3
}
 80110da:	bd08      	pop	{r3, pc}
 80110dc:	20000828 	.word	0x20000828

080110e0 <osThreadResume>:
osStatus_t osThreadResume (osThreadId_t thread_id) {
 80110e0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110e2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80110e6:	b993      	cbnz	r3, 801110e <osThreadResume+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110e8:	f3ef 8310 	mrs	r3, PRIMASK
 80110ec:	b993      	cbnz	r3, 8011114 <osThreadResume+0x34>
 80110ee:	4b0c      	ldr	r3, [pc, #48]	; (8011120 <osThreadResume+0x40>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	d004      	beq.n	8011100 <osThreadResume+0x20>
  else if (hTask == NULL) {
 80110f6:	b180      	cbz	r0, 801111a <osThreadResume+0x3a>
    vTaskResume (hTask);
 80110f8:	f003 fc92 	bl	8014a20 <vTaskResume>
    stat = osOK;
 80110fc:	2000      	movs	r0, #0
 80110fe:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011100:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0f6      	beq.n	80110f6 <osThreadResume+0x16>
    stat = osErrorISR;
 8011108:	f06f 0005 	mvn.w	r0, #5
 801110c:	bd08      	pop	{r3, pc}
 801110e:	f06f 0005 	mvn.w	r0, #5
 8011112:	bd08      	pop	{r3, pc}
 8011114:	f06f 0005 	mvn.w	r0, #5
 8011118:	bd08      	pop	{r3, pc}
    stat = osErrorParameter;
 801111a:	f06f 0003 	mvn.w	r0, #3
}
 801111e:	bd08      	pop	{r3, pc}
 8011120:	20000828 	.word	0x20000828

08011124 <osThreadExit>:
__NO_RETURN void osThreadExit (void) {
 8011124:	b508      	push	{r3, lr}
  vTaskDelete (NULL);
 8011126:	2000      	movs	r0, #0
 8011128:	f003 fb49 	bl	80147be <vTaskDelete>
 801112c:	e7fe      	b.n	801112c <osThreadExit+0x8>

0801112e <osThreadTerminate>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801112e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8011132:	b9cb      	cbnz	r3, 8011168 <osThreadTerminate+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011134:	f3ef 8310 	mrs	r3, PRIMASK
 8011138:	b9cb      	cbnz	r3, 801116e <osThreadTerminate+0x40>
 801113a:	4b11      	ldr	r3, [pc, #68]	; (8011180 <osThreadTerminate+0x52>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b02      	cmp	r3, #2
 8011140:	d00b      	beq.n	801115a <osThreadTerminate+0x2c>
  else if (hTask == NULL) {
 8011142:	b1b8      	cbz	r0, 8011174 <osThreadTerminate+0x46>
osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011144:	b510      	push	{r4, lr}
 8011146:	4604      	mov	r4, r0
    tstate = eTaskGetState (hTask);
 8011148:	f003 fb94 	bl	8014874 <eTaskGetState>
    if (tstate != eDeleted) {
 801114c:	2804      	cmp	r0, #4
 801114e:	d014      	beq.n	801117a <osThreadTerminate+0x4c>
      vTaskDelete (hTask);
 8011150:	4620      	mov	r0, r4
 8011152:	f003 fb34 	bl	80147be <vTaskDelete>
      stat = osOK;
 8011156:	2000      	movs	r0, #0
 8011158:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801115a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 801115e:	2b00      	cmp	r3, #0
 8011160:	d0ef      	beq.n	8011142 <osThreadTerminate+0x14>
    stat = osErrorISR;
 8011162:	f06f 0005 	mvn.w	r0, #5
 8011166:	4770      	bx	lr
 8011168:	f06f 0005 	mvn.w	r0, #5
 801116c:	4770      	bx	lr
 801116e:	f06f 0005 	mvn.w	r0, #5
 8011172:	4770      	bx	lr
    stat = osErrorParameter;
 8011174:	f06f 0003 	mvn.w	r0, #3
 8011178:	4770      	bx	lr
      stat = osErrorResource;
 801117a:	f06f 0002 	mvn.w	r0, #2
}
 801117e:	bd10      	pop	{r4, pc}
 8011180:	20000828 	.word	0x20000828

08011184 <osThreadGetCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011184:	f3ef 8005 	mrs	r0, IPSR
  if (IS_IRQ()) {
 8011188:	b980      	cbnz	r0, 80111ac <osThreadGetCount+0x28>
uint32_t osThreadGetCount (void) {
 801118a:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801118c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8011190:	b95b      	cbnz	r3, 80111aa <osThreadGetCount+0x26>
 8011192:	4a07      	ldr	r2, [pc, #28]	; (80111b0 <osThreadGetCount+0x2c>)
 8011194:	6812      	ldr	r2, [r2, #0]
 8011196:	2a02      	cmp	r2, #2
 8011198:	d002      	beq.n	80111a0 <osThreadGetCount+0x1c>
    count = uxTaskGetNumberOfTasks();
 801119a:	f003 fd51 	bl	8014c40 <uxTaskGetNumberOfTasks>
 801119e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111a0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80111a4:	2a00      	cmp	r2, #0
 80111a6:	d0f8      	beq.n	801119a <osThreadGetCount+0x16>
    count = 0U;
 80111a8:	4618      	mov	r0, r3
}
 80111aa:	bd08      	pop	{r3, pc}
    count = 0U;
 80111ac:	2000      	movs	r0, #0
 80111ae:	4770      	bx	lr
 80111b0:	20000828 	.word	0x20000828

080111b4 <osThreadEnumerate>:
uint32_t osThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items) {
 80111b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111b8:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ() || (thread_array == NULL) || (array_items == 0U)) {
 80111bc:	bbb4      	cbnz	r4, 801122c <osThreadEnumerate+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111be:	f3ef 8710 	mrs	r7, PRIMASK
 80111c2:	bba7      	cbnz	r7, 801122e <osThreadEnumerate+0x7a>
 80111c4:	4b1c      	ldr	r3, [pc, #112]	; (8011238 <osThreadEnumerate+0x84>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d003      	beq.n	80111d4 <osThreadEnumerate+0x20>
 80111cc:	b390      	cbz	r0, 8011234 <osThreadEnumerate+0x80>
 80111ce:	b939      	cbnz	r1, 80111e0 <osThreadEnumerate+0x2c>
    count = 0U;
 80111d0:	460c      	mov	r4, r1
  return (count);
 80111d2:	e02c      	b.n	801122e <osThreadEnumerate+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111d4:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (thread_array == NULL) || (array_items == 0U)) {
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d0f7      	beq.n	80111cc <osThreadEnumerate+0x18>
    count = 0U;
 80111dc:	463c      	mov	r4, r7
 80111de:	e026      	b.n	801122e <osThreadEnumerate+0x7a>
 80111e0:	460d      	mov	r5, r1
 80111e2:	4606      	mov	r6, r0
    vTaskSuspendAll();
 80111e4:	f003 fd12 	bl	8014c0c <vTaskSuspendAll>
    count = uxTaskGetNumberOfTasks();
 80111e8:	f003 fd2a 	bl	8014c40 <uxTaskGetNumberOfTasks>
 80111ec:	4604      	mov	r4, r0
    task  = pvPortMalloc (count * sizeof(TaskStatus_t));
 80111ee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80111f2:	0098      	lsls	r0, r3, #2
 80111f4:	f001 fc74 	bl	8012ae0 <pvPortMalloc>
    if (task != NULL) {
 80111f8:	4680      	mov	r8, r0
 80111fa:	b188      	cbz	r0, 8011220 <osThreadEnumerate+0x6c>
      count = uxTaskGetSystemState (task, count, NULL);
 80111fc:	2200      	movs	r2, #0
 80111fe:	4621      	mov	r1, r4
 8011200:	f004 f94e 	bl	80154a0 <uxTaskGetSystemState>
      for (i = 0U; (i < count) && (i < array_items); i++) {
 8011204:	463c      	mov	r4, r7
 8011206:	e007      	b.n	8011218 <osThreadEnumerate+0x64>
        thread_array[i] = (osThreadId_t)task[i].xHandle;
 8011208:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 801120c:	0093      	lsls	r3, r2, #2
 801120e:	f858 3003 	ldr.w	r3, [r8, r3]
 8011212:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
      for (i = 0U; (i < count) && (i < array_items); i++) {
 8011216:	3401      	adds	r4, #1
 8011218:	4284      	cmp	r4, r0
 801121a:	d201      	bcs.n	8011220 <osThreadEnumerate+0x6c>
 801121c:	42ac      	cmp	r4, r5
 801121e:	d3f3      	bcc.n	8011208 <osThreadEnumerate+0x54>
    (void)xTaskResumeAll();
 8011220:	f003 fdb2 	bl	8014d88 <xTaskResumeAll>
    vPortFree (task);
 8011224:	4640      	mov	r0, r8
 8011226:	f001 fce1 	bl	8012bec <vPortFree>
 801122a:	e000      	b.n	801122e <osThreadEnumerate+0x7a>
    count = 0U;
 801122c:	2400      	movs	r4, #0
}
 801122e:	4620      	mov	r0, r4
 8011230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    count = 0U;
 8011234:	463c      	mov	r4, r7
 8011236:	e7fa      	b.n	801122e <osThreadEnumerate+0x7a>
 8011238:	20000828 	.word	0x20000828

0801123c <osThreadFlagsSet>:
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801123c:	b530      	push	{r4, r5, lr}
 801123e:	b085      	sub	sp, #20
  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8011240:	b1d8      	cbz	r0, 801127a <osThreadFlagsSet+0x3e>
 8011242:	4604      	mov	r4, r0
 8011244:	2900      	cmp	r1, #0
 8011246:	db18      	blt.n	801127a <osThreadFlagsSet+0x3e>
    rflags = (uint32_t)osError;
 8011248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801124c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801124e:	f3ef 8305 	mrs	r3, IPSR
    if (IS_IRQ()) {
 8011252:	b9e3      	cbnz	r3, 801128e <osThreadFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011254:	f3ef 8310 	mrs	r3, PRIMASK
 8011258:	b9cb      	cbnz	r3, 801128e <osThreadFlagsSet+0x52>
 801125a:	4b1b      	ldr	r3, [pc, #108]	; (80112c8 <osThreadFlagsSet+0x8c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d011      	beq.n	8011286 <osThreadFlagsSet+0x4a>
      (void)xTaskNotify (hTask, flags, eSetBits);
 8011262:	2300      	movs	r3, #0
 8011264:	2201      	movs	r2, #1
 8011266:	4620      	mov	r0, r4
 8011268:	f004 fc14 	bl	8015a94 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801126c:	ab03      	add	r3, sp, #12
 801126e:	2200      	movs	r2, #0
 8011270:	4611      	mov	r1, r2
 8011272:	4620      	mov	r0, r4
 8011274:	f004 fc0e 	bl	8015a94 <xTaskGenericNotify>
 8011278:	e002      	b.n	8011280 <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
 801127a:	f06f 0303 	mvn.w	r3, #3
 801127e:	9303      	str	r3, [sp, #12]
}
 8011280:	9803      	ldr	r0, [sp, #12]
 8011282:	b005      	add	sp, #20
 8011284:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011286:	f3ef 8311 	mrs	r3, BASEPRI
    if (IS_IRQ()) {
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0e9      	beq.n	8011262 <osThreadFlagsSet+0x26>
      yield = pdFALSE;
 801128e:	2500      	movs	r5, #0
 8011290:	ab04      	add	r3, sp, #16
 8011292:	f843 5d08 	str.w	r5, [r3, #-8]!
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8011296:	9300      	str	r3, [sp, #0]
 8011298:	462b      	mov	r3, r5
 801129a:	2201      	movs	r2, #1
 801129c:	4620      	mov	r0, r4
 801129e:	f004 fc6b 	bl	8015b78 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80112a2:	9500      	str	r5, [sp, #0]
 80112a4:	ab03      	add	r3, sp, #12
 80112a6:	462a      	mov	r2, r5
 80112a8:	4629      	mov	r1, r5
 80112aa:	4620      	mov	r0, r4
 80112ac:	f004 fc64 	bl	8015b78 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 80112b0:	9b02      	ldr	r3, [sp, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d0e4      	beq.n	8011280 <osThreadFlagsSet+0x44>
 80112b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ba:	4b04      	ldr	r3, [pc, #16]	; (80112cc <osThreadFlagsSet+0x90>)
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	f3bf 8f4f 	dsb	sy
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	e7db      	b.n	8011280 <osThreadFlagsSet+0x44>
 80112c8:	20000828 	.word	0x20000828
 80112cc:	e000ed04 	.word	0xe000ed04

080112d0 <osThreadFlagsClear>:
uint32_t osThreadFlagsClear (uint32_t flags) {
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112d4:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80112d8:	b123      	cbz	r3, 80112e4 <osThreadFlagsClear+0x14>
    rflags = (uint32_t)osErrorISR;
 80112da:	f06f 0405 	mvn.w	r4, #5
}
 80112de:	4620      	mov	r0, r4
 80112e0:	b002      	add	sp, #8
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112e4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80112e8:	b113      	cbz	r3, 80112f0 <osThreadFlagsClear+0x20>
    rflags = (uint32_t)osErrorISR;
 80112ea:	f06f 0405 	mvn.w	r4, #5
 80112ee:	e7f6      	b.n	80112de <osThreadFlagsClear+0xe>
  if (IS_IRQ()) {
 80112f0:	4b15      	ldr	r3, [pc, #84]	; (8011348 <osThreadFlagsClear+0x78>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b02      	cmp	r3, #2
 80112f6:	d004      	beq.n	8011302 <osThreadFlagsClear+0x32>
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80112f8:	2800      	cmp	r0, #0
 80112fa:	da09      	bge.n	8011310 <osThreadFlagsClear+0x40>
    rflags = (uint32_t)osErrorParameter;
 80112fc:	f06f 0403 	mvn.w	r4, #3
 8011300:	e7ed      	b.n	80112de <osThreadFlagsClear+0xe>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011302:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011306:	2b00      	cmp	r3, #0
 8011308:	d0f6      	beq.n	80112f8 <osThreadFlagsClear+0x28>
    rflags = (uint32_t)osErrorISR;
 801130a:	f06f 0405 	mvn.w	r4, #5
 801130e:	e7e6      	b.n	80112de <osThreadFlagsClear+0xe>
 8011310:	4605      	mov	r5, r0
    hTask = xTaskGetCurrentTaskHandle();
 8011312:	f004 f929 	bl	8015568 <xTaskGetCurrentTaskHandle>
 8011316:	4606      	mov	r6, r0
    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8011318:	ab01      	add	r3, sp, #4
 801131a:	2200      	movs	r2, #0
 801131c:	4611      	mov	r1, r2
 801131e:	f004 fbb9 	bl	8015a94 <xTaskGenericNotify>
 8011322:	2801      	cmp	r0, #1
 8011324:	d002      	beq.n	801132c <osThreadFlagsClear+0x5c>
      rflags = (uint32_t)osError;
 8011326:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801132a:	e7d8      	b.n	80112de <osThreadFlagsClear+0xe>
      rflags = cflags;
 801132c:	9c01      	ldr	r4, [sp, #4]
      cflags &= ~flags;
 801132e:	ea24 0105 	bic.w	r1, r4, r5
 8011332:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8011334:	2300      	movs	r3, #0
 8011336:	2203      	movs	r2, #3
 8011338:	4630      	mov	r0, r6
 801133a:	f004 fbab 	bl	8015a94 <xTaskGenericNotify>
 801133e:	2801      	cmp	r0, #1
 8011340:	d0cd      	beq.n	80112de <osThreadFlagsClear+0xe>
        rflags = (uint32_t)osError;
 8011342:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return (rflags);
 8011346:	e7ca      	b.n	80112de <osThreadFlagsClear+0xe>
 8011348:	20000828 	.word	0x20000828

0801134c <osThreadFlagsGet>:
uint32_t osThreadFlagsGet (void) {
 801134c:	b500      	push	{lr}
 801134e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011350:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8011354:	b9bb      	cbnz	r3, 8011386 <osThreadFlagsGet+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011356:	f3ef 8310 	mrs	r3, PRIMASK
 801135a:	b9a3      	cbnz	r3, 8011386 <osThreadFlagsGet+0x3a>
 801135c:	4b0d      	ldr	r3, [pc, #52]	; (8011394 <osThreadFlagsGet+0x48>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b02      	cmp	r3, #2
 8011362:	d00c      	beq.n	801137e <osThreadFlagsGet+0x32>
    hTask = xTaskGetCurrentTaskHandle();
 8011364:	f004 f900 	bl	8015568 <xTaskGetCurrentTaskHandle>
    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8011368:	ab01      	add	r3, sp, #4
 801136a:	2200      	movs	r2, #0
 801136c:	4611      	mov	r1, r2
 801136e:	f004 fb91 	bl	8015a94 <xTaskGenericNotify>
 8011372:	2801      	cmp	r0, #1
 8011374:	d00a      	beq.n	801138c <osThreadFlagsGet+0x40>
      rflags = (uint32_t)osError;
 8011376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801137a:	9301      	str	r3, [sp, #4]
 801137c:	e006      	b.n	801138c <osThreadFlagsGet+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801137e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011382:	2b00      	cmp	r3, #0
 8011384:	d0ee      	beq.n	8011364 <osThreadFlagsGet+0x18>
    rflags = (uint32_t)osErrorISR;
 8011386:	f06f 0305 	mvn.w	r3, #5
 801138a:	9301      	str	r3, [sp, #4]
}
 801138c:	9801      	ldr	r0, [sp, #4]
 801138e:	b003      	add	sp, #12
 8011390:	f85d fb04 	ldr.w	pc, [sp], #4
 8011394:	20000828 	.word	0x20000828

08011398 <osThreadFlagsWait>:
uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8011398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801139e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80113a2:	b12b      	cbz	r3, 80113b0 <osThreadFlagsWait+0x18>
    rflags = (uint32_t)osErrorISR;
 80113a4:	f06f 0405 	mvn.w	r4, #5
}
 80113a8:	4620      	mov	r0, r4
 80113aa:	b003      	add	sp, #12
 80113ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113b0:	f3ef 8310 	mrs	r3, PRIMASK
 80113b4:	461c      	mov	r4, r3
  if (IS_IRQ()) {
 80113b6:	b113      	cbz	r3, 80113be <osThreadFlagsWait+0x26>
    rflags = (uint32_t)osErrorISR;
 80113b8:	f06f 0405 	mvn.w	r4, #5
 80113bc:	e7f4      	b.n	80113a8 <osThreadFlagsWait+0x10>
  if (IS_IRQ()) {
 80113be:	4d28      	ldr	r5, [pc, #160]	; (8011460 <osThreadFlagsWait+0xc8>)
 80113c0:	682d      	ldr	r5, [r5, #0]
 80113c2:	2d02      	cmp	r5, #2
 80113c4:	d00d      	beq.n	80113e2 <osThreadFlagsWait+0x4a>
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80113c6:	2800      	cmp	r0, #0
 80113c8:	db43      	blt.n	8011452 <osThreadFlagsWait+0xba>
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80113ca:	f011 0f02 	tst.w	r1, #2
 80113ce:	d00f      	beq.n	80113f0 <osThreadFlagsWait+0x58>
      clear = 0U;
 80113d0:	4698      	mov	r8, r3
 80113d2:	4617      	mov	r7, r2
 80113d4:	468a      	mov	sl, r1
 80113d6:	4681      	mov	r9, r0
    t0 = xTaskGetTickCount();
 80113d8:	f003 fc22 	bl	8014c20 <xTaskGetTickCount>
 80113dc:	4683      	mov	fp, r0
    tout   = timeout;
 80113de:	463e      	mov	r6, r7
 80113e0:	e029      	b.n	8011436 <osThreadFlagsWait+0x9e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80113e2:	f3ef 8511 	mrs	r5, BASEPRI
  if (IS_IRQ()) {
 80113e6:	2d00      	cmp	r5, #0
 80113e8:	d0ed      	beq.n	80113c6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorISR;
 80113ea:	f06f 0405 	mvn.w	r4, #5
 80113ee:	e7db      	b.n	80113a8 <osThreadFlagsWait+0x10>
      clear = flags;
 80113f0:	4680      	mov	r8, r0
 80113f2:	e7ee      	b.n	80113d2 <osThreadFlagsWait+0x3a>
        rflags &= flags;
 80113f4:	ea04 0409 	and.w	r4, r4, r9
        rflags |= nval;
 80113f8:	9b01      	ldr	r3, [sp, #4]
 80113fa:	431c      	orrs	r4, r3
        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80113fc:	f01a 0f01 	tst.w	sl, #1
 8011400:	d00b      	beq.n	801141a <osThreadFlagsWait+0x82>
          if ((flags & rflags) == flags) {
 8011402:	ea39 0304 	bics.w	r3, r9, r4
 8011406:	d0cf      	beq.n	80113a8 <osThreadFlagsWait+0x10>
            if (timeout == 0U) {
 8011408:	b337      	cbz	r7, 8011458 <osThreadFlagsWait+0xc0>
        td = xTaskGetTickCount() - t0;
 801140a:	f003 fc09 	bl	8014c20 <xTaskGetTickCount>
 801140e:	eba0 000b 	sub.w	r0, r0, fp
        if (td > tout) {
 8011412:	4286      	cmp	r6, r0
 8011414:	d309      	bcc.n	801142a <osThreadFlagsWait+0x92>
          tout -= td;
 8011416:	1a36      	subs	r6, r6, r0
 8011418:	e00b      	b.n	8011432 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) != 0) {
 801141a:	ea19 0f04 	tst.w	r9, r4
 801141e:	d1c3      	bne.n	80113a8 <osThreadFlagsWait+0x10>
            if (timeout == 0U) {
 8011420:	2f00      	cmp	r7, #0
 8011422:	d1f2      	bne.n	801140a <osThreadFlagsWait+0x72>
              rflags = (uint32_t)osErrorResource;
 8011424:	f06f 0402 	mvn.w	r4, #2
  return (rflags);
 8011428:	e7be      	b.n	80113a8 <osThreadFlagsWait+0x10>
          tout  = 0;
 801142a:	2600      	movs	r6, #0
 801142c:	e001      	b.n	8011432 <osThreadFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 801142e:	f06f 0401 	mvn.w	r4, #1
    while (rval != pdFAIL);
 8011432:	2d00      	cmp	r5, #0
 8011434:	d0b8      	beq.n	80113a8 <osThreadFlagsWait+0x10>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8011436:	4633      	mov	r3, r6
 8011438:	aa01      	add	r2, sp, #4
 801143a:	4641      	mov	r1, r8
 801143c:	2000      	movs	r0, #0
 801143e:	f004 fad5 	bl	80159ec <xTaskNotifyWait>
 8011442:	4605      	mov	r5, r0
      if (rval == pdPASS) {
 8011444:	2801      	cmp	r0, #1
 8011446:	d0d5      	beq.n	80113f4 <osThreadFlagsWait+0x5c>
        if (timeout == 0) {
 8011448:	2f00      	cmp	r7, #0
 801144a:	d1f0      	bne.n	801142e <osThreadFlagsWait+0x96>
          rflags = (uint32_t)osErrorResource;
 801144c:	f06f 0402 	mvn.w	r4, #2
 8011450:	e7ef      	b.n	8011432 <osThreadFlagsWait+0x9a>
    rflags = (uint32_t)osErrorParameter;
 8011452:	f06f 0403 	mvn.w	r4, #3
 8011456:	e7a7      	b.n	80113a8 <osThreadFlagsWait+0x10>
              rflags = (uint32_t)osErrorResource;
 8011458:	f06f 0402 	mvn.w	r4, #2
 801145c:	e7a4      	b.n	80113a8 <osThreadFlagsWait+0x10>
 801145e:	bf00      	nop
 8011460:	20000828 	.word	0x20000828

08011464 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8011464:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011466:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 801146a:	b9a3      	cbnz	r3, 8011496 <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801146c:	f3ef 8310 	mrs	r3, PRIMASK
 8011470:	b9a3      	cbnz	r3, 801149c <osDelay+0x38>
 8011472:	4b0c      	ldr	r3, [pc, #48]	; (80114a4 <osDelay+0x40>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b02      	cmp	r3, #2
 8011478:	d002      	beq.n	8011480 <osDelay+0x1c>
    if (ticks != 0U) {
 801147a:	b940      	cbnz	r0, 801148e <osDelay+0x2a>
    stat = osOK;
 801147c:	2000      	movs	r0, #0
}
 801147e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011480:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011484:	2b00      	cmp	r3, #0
 8011486:	d0f8      	beq.n	801147a <osDelay+0x16>
    stat = osErrorISR;
 8011488:	f06f 0005 	mvn.w	r0, #5
 801148c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 801148e:	f003 fd4b 	bl	8014f28 <vTaskDelay>
    stat = osOK;
 8011492:	2000      	movs	r0, #0
 8011494:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8011496:	f06f 0005 	mvn.w	r0, #5
 801149a:	bd08      	pop	{r3, pc}
 801149c:	f06f 0005 	mvn.w	r0, #5
 80114a0:	bd08      	pop	{r3, pc}
 80114a2:	bf00      	nop
 80114a4:	20000828 	.word	0x20000828

080114a8 <osDelayUntil>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114a8:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80114ac:	b9e3      	cbnz	r3, 80114e8 <osDelayUntil+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114ae:	f3ef 8310 	mrs	r3, PRIMASK
 80114b2:	b9e3      	cbnz	r3, 80114ee <osDelayUntil+0x46>
 80114b4:	4b0f      	ldr	r3, [pc, #60]	; (80114f4 <osDelayUntil+0x4c>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d00e      	beq.n	80114da <osDelayUntil+0x32>
osStatus_t osDelayUntil (uint32_t ticks) {
 80114bc:	b510      	push	{r4, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	4604      	mov	r4, r0
    tcnt = xTaskGetTickCount();
 80114c2:	f003 fbad 	bl	8014c20 <xTaskGetTickCount>
 80114c6:	ab02      	add	r3, sp, #8
 80114c8:	f843 0d04 	str.w	r0, [r3, #-4]!
    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 80114cc:	1a21      	subs	r1, r4, r0
 80114ce:	4618      	mov	r0, r3
 80114d0:	f003 fcd4 	bl	8014e7c <vTaskDelayUntil>
    stat = osOK;
 80114d4:	2000      	movs	r0, #0
}
 80114d6:	b002      	add	sp, #8
 80114d8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114da:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d0ec      	beq.n	80114bc <osDelayUntil+0x14>
    stat = osErrorISR;
 80114e2:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80114e6:	4770      	bx	lr
    stat = osErrorISR;
 80114e8:	f06f 0005 	mvn.w	r0, #5
 80114ec:	4770      	bx	lr
 80114ee:	f06f 0005 	mvn.w	r0, #5
 80114f2:	4770      	bx	lr
 80114f4:	20000828 	.word	0x20000828

080114f8 <osTimerNew>:
  }
}

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80114f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114fa:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114fc:	f3ef 8505 	mrs	r5, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8011500:	2d00      	cmp	r5, #0
 8011502:	d147      	bne.n	8011594 <osTimerNew+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011504:	f3ef 8510 	mrs	r5, PRIMASK
 8011508:	2d00      	cmp	r5, #0
 801150a:	d145      	bne.n	8011598 <osTimerNew+0xa0>
 801150c:	4c26      	ldr	r4, [pc, #152]	; (80115a8 <osTimerNew+0xb0>)
 801150e:	6824      	ldr	r4, [r4, #0]
 8011510:	2c02      	cmp	r4, #2
 8011512:	d023      	beq.n	801155c <osTimerNew+0x64>
 8011514:	2800      	cmp	r0, #0
 8011516:	d041      	beq.n	801159c <osTimerNew+0xa4>
 8011518:	461c      	mov	r4, r3
 801151a:	4617      	mov	r7, r2
 801151c:	460e      	mov	r6, r1
 801151e:	4605      	mov	r5, r0
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8011520:	2008      	movs	r0, #8
 8011522:	f001 fadd 	bl	8012ae0 <pvPortMalloc>

    if (callb != NULL) {
 8011526:	4603      	mov	r3, r0
 8011528:	2800      	cmp	r0, #0
 801152a:	d039      	beq.n	80115a0 <osTimerNew+0xa8>
      callb->func = func;
 801152c:	6005      	str	r5, [r0, #0]
      callb->arg  = argument;
 801152e:	6047      	str	r7, [r0, #4]

      if (type == osTimerOnce) {
 8011530:	b9d6      	cbnz	r6, 8011568 <osTimerNew+0x70>
        reload = pdFALSE;
 8011532:	2200      	movs	r2, #0
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8011534:	b1fc      	cbz	r4, 8011576 <osTimerNew+0x7e>
        if (attr->name != NULL) {
 8011536:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8011538:	68a1      	ldr	r1, [r4, #8]
 801153a:	b111      	cbz	r1, 8011542 <osTimerNew+0x4a>
 801153c:	68e5      	ldr	r5, [r4, #12]
 801153e:	2d2f      	cmp	r5, #47	; 0x2f
 8011540:	d81c      	bhi.n	801157c <osTimerNew+0x84>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011542:	b199      	cbz	r1, 801156c <osTimerNew+0x74>
      mem  = -1;
 8011544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
      }
      else {
        mem = 0;
      }

      if (mem == 1) {
 8011548:	2901      	cmp	r1, #1
 801154a:	d01b      	beq.n	8011584 <osTimerNew+0x8c>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
      }
      else {
        if (mem == 0) {
 801154c:	bb51      	cbnz	r1, 80115a4 <osTimerNew+0xac>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801154e:	4917      	ldr	r1, [pc, #92]	; (80115ac <osTimerNew+0xb4>)
 8011550:	9100      	str	r1, [sp, #0]
 8011552:	2101      	movs	r1, #1
 8011554:	f004 fcd6 	bl	8015f04 <xTimerCreate>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8011558:	b003      	add	sp, #12
 801155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801155c:	f3ef 8411 	mrs	r4, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8011560:	2c00      	cmp	r4, #0
 8011562:	d0d7      	beq.n	8011514 <osTimerNew+0x1c>
  hTimer = NULL;
 8011564:	2000      	movs	r0, #0
 8011566:	e7f7      	b.n	8011558 <osTimerNew+0x60>
        reload = pdTRUE;
 8011568:	2201      	movs	r2, #1
 801156a:	e7e3      	b.n	8011534 <osTimerNew+0x3c>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801156c:	68e1      	ldr	r1, [r4, #12]
 801156e:	b139      	cbz	r1, 8011580 <osTimerNew+0x88>
      mem  = -1;
 8011570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011574:	e7e8      	b.n	8011548 <osTimerNew+0x50>
        mem = 0;
 8011576:	2100      	movs	r1, #0
      name = NULL;
 8011578:	4608      	mov	r0, r1
 801157a:	e7e5      	b.n	8011548 <osTimerNew+0x50>
          mem = 1;
 801157c:	2101      	movs	r1, #1
 801157e:	e7e3      	b.n	8011548 <osTimerNew+0x50>
            mem = 0;
 8011580:	2100      	movs	r1, #0
 8011582:	e7e1      	b.n	8011548 <osTimerNew+0x50>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8011584:	68a1      	ldr	r1, [r4, #8]
 8011586:	9101      	str	r1, [sp, #4]
 8011588:	4908      	ldr	r1, [pc, #32]	; (80115ac <osTimerNew+0xb4>)
 801158a:	9100      	str	r1, [sp, #0]
 801158c:	2101      	movs	r1, #1
 801158e:	f004 fcd5 	bl	8015f3c <xTimerCreateStatic>
 8011592:	e7e1      	b.n	8011558 <osTimerNew+0x60>
  hTimer = NULL;
 8011594:	2000      	movs	r0, #0
 8011596:	e7df      	b.n	8011558 <osTimerNew+0x60>
 8011598:	2000      	movs	r0, #0
 801159a:	e7dd      	b.n	8011558 <osTimerNew+0x60>
 801159c:	2000      	movs	r0, #0
 801159e:	e7db      	b.n	8011558 <osTimerNew+0x60>
 80115a0:	2000      	movs	r0, #0
 80115a2:	e7d9      	b.n	8011558 <osTimerNew+0x60>
 80115a4:	2000      	movs	r0, #0
  return ((osTimerId_t)hTimer);
 80115a6:	e7d7      	b.n	8011558 <osTimerNew+0x60>
 80115a8:	20000828 	.word	0x20000828
 80115ac:	08010b21 	.word	0x08010b21

080115b0 <osTimerGetName>:

const char *osTimerGetName (osTimerId_t timer_id) {
 80115b0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115b2:	f3ef 8305 	mrs	r3, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  const char *p;

  if (IS_IRQ() || (hTimer == NULL)) {
 80115b6:	b983      	cbnz	r3, 80115da <osTimerGetName+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115b8:	f3ef 8310 	mrs	r3, PRIMASK
 80115bc:	b97b      	cbnz	r3, 80115de <osTimerGetName+0x2e>
 80115be:	4b0a      	ldr	r3, [pc, #40]	; (80115e8 <osTimerGetName+0x38>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b02      	cmp	r3, #2
 80115c4:	d003      	beq.n	80115ce <osTimerGetName+0x1e>
 80115c6:	b160      	cbz	r0, 80115e2 <osTimerGetName+0x32>
    p = NULL;
  } else {
    p = pcTimerGetName (hTimer);
 80115c8:	f004 fe8a 	bl	80162e0 <pcTimerGetName>
 80115cc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80115ce:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hTimer == NULL)) {
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0f7      	beq.n	80115c6 <osTimerGetName+0x16>
    p = NULL;
 80115d6:	2000      	movs	r0, #0
 80115d8:	bd08      	pop	{r3, pc}
 80115da:	2000      	movs	r0, #0
 80115dc:	bd08      	pop	{r3, pc}
 80115de:	2000      	movs	r0, #0
 80115e0:	bd08      	pop	{r3, pc}
 80115e2:	2000      	movs	r0, #0
  }

  return (p);
}
 80115e4:	bd08      	pop	{r3, pc}
 80115e6:	bf00      	nop
 80115e8:	20000828 	.word	0x20000828

080115ec <osTimerStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115ec:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 80115f0:	b9e3      	cbnz	r3, 801162c <osTimerStart+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115f2:	f3ef 8310 	mrs	r3, PRIMASK
 80115f6:	b9e3      	cbnz	r3, 8011632 <osTimerStart+0x46>
 80115f8:	4b12      	ldr	r3, [pc, #72]	; (8011644 <osTimerStart+0x58>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d00e      	beq.n	801161e <osTimerStart+0x32>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8011600:	b1d0      	cbz	r0, 8011638 <osTimerStart+0x4c>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8011602:	b500      	push	{lr}
 8011604:	b083      	sub	sp, #12
 8011606:	460a      	mov	r2, r1
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8011608:	2300      	movs	r3, #0
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	2104      	movs	r1, #4
 801160e:	f004 fcbb 	bl	8015f88 <xTimerGenericCommand>
 8011612:	2801      	cmp	r0, #1
 8011614:	d113      	bne.n	801163e <osTimerStart+0x52>
      stat = osOK;
 8011616:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8011618:	b003      	add	sp, #12
 801161a:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801161e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0ec      	beq.n	8011600 <osTimerStart+0x14>
    stat = osErrorISR;
 8011626:	f06f 0005 	mvn.w	r0, #5
 801162a:	4770      	bx	lr
 801162c:	f06f 0005 	mvn.w	r0, #5
 8011630:	4770      	bx	lr
 8011632:	f06f 0005 	mvn.w	r0, #5
 8011636:	4770      	bx	lr
    stat = osErrorParameter;
 8011638:	f06f 0003 	mvn.w	r0, #3
 801163c:	4770      	bx	lr
      stat = osErrorResource;
 801163e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8011642:	e7e9      	b.n	8011618 <osTimerStart+0x2c>
 8011644:	20000828 	.word	0x20000828

08011648 <osTimerStop>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011648:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStop (osTimerId_t timer_id) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 801164c:	bb03      	cbnz	r3, 8011690 <osTimerStop+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801164e:	f3ef 8310 	mrs	r3, PRIMASK
 8011652:	bb03      	cbnz	r3, 8011696 <osTimerStop+0x4e>
 8011654:	4b16      	ldr	r3, [pc, #88]	; (80116b0 <osTimerStop+0x68>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b02      	cmp	r3, #2
 801165a:	d012      	beq.n	8011682 <osTimerStop+0x3a>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 801165c:	b1f0      	cbz	r0, 801169c <osTimerStop+0x54>
osStatus_t osTimerStop (osTimerId_t timer_id) {
 801165e:	b510      	push	{r4, lr}
 8011660:	b082      	sub	sp, #8
 8011662:	4604      	mov	r4, r0
    stat = osErrorParameter;
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8011664:	f004 fe48 	bl	80162f8 <xTimerIsTimerActive>
 8011668:	b1d8      	cbz	r0, 80116a2 <osTimerStop+0x5a>
      stat = osErrorResource;
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 801166a:	2200      	movs	r2, #0
 801166c:	9200      	str	r2, [sp, #0]
 801166e:	4613      	mov	r3, r2
 8011670:	2103      	movs	r1, #3
 8011672:	4620      	mov	r0, r4
 8011674:	f004 fc88 	bl	8015f88 <xTimerGenericCommand>
 8011678:	2801      	cmp	r0, #1
 801167a:	d115      	bne.n	80116a8 <osTimerStop+0x60>
        stat = osOK;
 801167c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801167e:	b002      	add	sp, #8
 8011680:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011682:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011686:	2b00      	cmp	r3, #0
 8011688:	d0e8      	beq.n	801165c <osTimerStop+0x14>
    stat = osErrorISR;
 801168a:	f06f 0005 	mvn.w	r0, #5
 801168e:	4770      	bx	lr
 8011690:	f06f 0005 	mvn.w	r0, #5
 8011694:	4770      	bx	lr
 8011696:	f06f 0005 	mvn.w	r0, #5
 801169a:	4770      	bx	lr
    stat = osErrorParameter;
 801169c:	f06f 0003 	mvn.w	r0, #3
 80116a0:	4770      	bx	lr
      stat = osErrorResource;
 80116a2:	f06f 0002 	mvn.w	r0, #2
 80116a6:	e7ea      	b.n	801167e <osTimerStop+0x36>
        stat = osError;
 80116a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 80116ac:	e7e7      	b.n	801167e <osTimerStop+0x36>
 80116ae:	bf00      	nop
 80116b0:	20000828 	.word	0x20000828

080116b4 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80116b4:	b508      	push	{r3, lr}
 80116b6:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116b8:	f3ef 8005 	mrs	r0, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80116bc:	b988      	cbnz	r0, 80116e2 <osTimerIsRunning+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116be:	f3ef 8210 	mrs	r2, PRIMASK
 80116c2:	b98a      	cbnz	r2, 80116e8 <osTimerIsRunning+0x34>
 80116c4:	4909      	ldr	r1, [pc, #36]	; (80116ec <osTimerIsRunning+0x38>)
 80116c6:	6809      	ldr	r1, [r1, #0]
 80116c8:	2902      	cmp	r1, #2
 80116ca:	d004      	beq.n	80116d6 <osTimerIsRunning+0x22>
 80116cc:	b15b      	cbz	r3, 80116e6 <osTimerIsRunning+0x32>
 80116ce:	4618      	mov	r0, r3
    running = 0U;
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80116d0:	f004 fe12 	bl	80162f8 <xTimerIsTimerActive>
 80116d4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80116d6:	f3ef 8111 	mrs	r1, BASEPRI
  if (IS_IRQ() || (hTimer == NULL)) {
 80116da:	2900      	cmp	r1, #0
 80116dc:	d0f6      	beq.n	80116cc <osTimerIsRunning+0x18>
    running = 0U;
 80116de:	4610      	mov	r0, r2
 80116e0:	bd08      	pop	{r3, pc}
 80116e2:	2000      	movs	r0, #0
 80116e4:	bd08      	pop	{r3, pc}
 80116e6:	4610      	mov	r0, r2
  }

  return (running);
}
 80116e8:	bd08      	pop	{r3, pc}
 80116ea:	bf00      	nop
 80116ec:	20000828 	.word	0x20000828

080116f0 <osTimerDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116f0:	f3ef 8305 	mrs	r3, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 80116f4:	bb1b      	cbnz	r3, 801173e <osTimerDelete+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116f6:	f3ef 8310 	mrs	r3, PRIMASK
 80116fa:	bb1b      	cbnz	r3, 8011744 <osTimerDelete+0x54>
 80116fc:	4b16      	ldr	r3, [pc, #88]	; (8011758 <osTimerDelete+0x68>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b02      	cmp	r3, #2
 8011702:	d015      	beq.n	8011730 <osTimerDelete+0x40>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8011704:	b308      	cbz	r0, 801174a <osTimerDelete+0x5a>
osStatus_t osTimerDelete (osTimerId_t timer_id) {
 8011706:	b530      	push	{r4, r5, lr}
 8011708:	b083      	sub	sp, #12
 801170a:	4604      	mov	r4, r0
    stat = osErrorParameter;
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801170c:	f004 fe0a 	bl	8016324 <pvTimerGetTimerID>
 8011710:	4605      	mov	r5, r0

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 8011712:	2200      	movs	r2, #0
 8011714:	9200      	str	r2, [sp, #0]
 8011716:	4613      	mov	r3, r2
 8011718:	2105      	movs	r1, #5
 801171a:	4620      	mov	r0, r4
 801171c:	f004 fc34 	bl	8015f88 <xTimerGenericCommand>
 8011720:	2801      	cmp	r0, #1
 8011722:	d115      	bne.n	8011750 <osTimerDelete+0x60>
      vPortFree (callb);
 8011724:	4628      	mov	r0, r5
 8011726:	f001 fa61 	bl	8012bec <vPortFree>
      stat = osOK;
 801172a:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 801172c:	b003      	add	sp, #12
 801172e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011730:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011734:	2b00      	cmp	r3, #0
 8011736:	d0e5      	beq.n	8011704 <osTimerDelete+0x14>
    stat = osErrorISR;
 8011738:	f06f 0005 	mvn.w	r0, #5
 801173c:	4770      	bx	lr
 801173e:	f06f 0005 	mvn.w	r0, #5
 8011742:	4770      	bx	lr
 8011744:	f06f 0005 	mvn.w	r0, #5
 8011748:	4770      	bx	lr
    stat = osErrorParameter;
 801174a:	f06f 0003 	mvn.w	r0, #3
 801174e:	4770      	bx	lr
      stat = osErrorResource;
 8011750:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8011754:	e7ea      	b.n	801172c <osTimerDelete+0x3c>
 8011756:	bf00      	nop
 8011758:	20000828 	.word	0x20000828

0801175c <osEventFlagsNew>:

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801175c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801175e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8011762:	bb53      	cbnz	r3, 80117ba <osEventFlagsNew+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011764:	f3ef 8310 	mrs	r3, PRIMASK
 8011768:	bb4b      	cbnz	r3, 80117be <osEventFlagsNew+0x62>
 801176a:	4b17      	ldr	r3, [pc, #92]	; (80117c8 <osEventFlagsNew+0x6c>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b02      	cmp	r3, #2
 8011770:	d00e      	beq.n	8011790 <osEventFlagsNew+0x34>
    mem = -1;

    if (attr != NULL) {
 8011772:	b1c0      	cbz	r0, 80117a6 <osEventFlagsNew+0x4a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011774:	6883      	ldr	r3, [r0, #8]
 8011776:	b113      	cbz	r3, 801177e <osEventFlagsNew+0x22>
 8011778:	68c2      	ldr	r2, [r0, #12]
 801177a:	2a1f      	cmp	r2, #31
 801177c:	d815      	bhi.n	80117aa <osEventFlagsNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801177e:	b16b      	cbz	r3, 801179c <osEventFlagsNew+0x40>
    mem = -1;
 8011780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8011784:	2b01      	cmp	r3, #1
 8011786:	d014      	beq.n	80117b2 <osEventFlagsNew+0x56>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8011788:	b9db      	cbnz	r3, 80117c2 <osEventFlagsNew+0x66>
        hEventGroup = xEventGroupCreate();
 801178a:	f000 fd72 	bl	8012272 <xEventGroupCreate>
 801178e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011790:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8011794:	2b00      	cmp	r3, #0
 8011796:	d0ec      	beq.n	8011772 <osEventFlagsNew+0x16>
  hEventGroup = NULL;
 8011798:	2000      	movs	r0, #0
 801179a:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801179c:	68c3      	ldr	r3, [r0, #12]
 801179e:	b133      	cbz	r3, 80117ae <osEventFlagsNew+0x52>
    mem = -1;
 80117a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117a4:	e7ee      	b.n	8011784 <osEventFlagsNew+0x28>
      mem = 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e7ec      	b.n	8011784 <osEventFlagsNew+0x28>
        mem = 1;
 80117aa:	2301      	movs	r3, #1
 80117ac:	e7ea      	b.n	8011784 <osEventFlagsNew+0x28>
          mem = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	e7e8      	b.n	8011784 <osEventFlagsNew+0x28>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80117b2:	6880      	ldr	r0, [r0, #8]
 80117b4:	f000 fd38 	bl	8012228 <xEventGroupCreateStatic>
 80117b8:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 80117ba:	2000      	movs	r0, #0
 80117bc:	bd08      	pop	{r3, pc}
 80117be:	2000      	movs	r0, #0
 80117c0:	bd08      	pop	{r3, pc}
 80117c2:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 80117c4:	bd08      	pop	{r3, pc}
 80117c6:	bf00      	nop
 80117c8:	20000828 	.word	0x20000828

080117cc <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80117cc:	b390      	cbz	r0, 8011834 <osEventFlagsSet+0x68>
 80117ce:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80117d2:	d002      	beq.n	80117da <osEventFlagsSet+0xe>
    rflags = (uint32_t)osErrorParameter;
 80117d4:	f06f 0003 	mvn.w	r0, #3
 80117d8:	4770      	bx	lr
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80117da:	b510      	push	{r4, lr}
 80117dc:	b082      	sub	sp, #8
 80117de:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117e0:	f3ef 8305 	mrs	r3, IPSR
  }
  else if (IS_IRQ()) {
 80117e4:	b973      	cbnz	r3, 8011804 <osEventFlagsSet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117e6:	f3ef 8310 	mrs	r3, PRIMASK
 80117ea:	b95b      	cbnz	r3, 8011804 <osEventFlagsSet+0x38>
 80117ec:	4b14      	ldr	r3, [pc, #80]	; (8011840 <osEventFlagsSet+0x74>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	d003      	beq.n	80117fc <osEventFlagsSet+0x30>
      rflags = flags;
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80117f4:	4621      	mov	r1, r4
 80117f6:	f000 fe15 	bl	8012424 <xEventGroupSetBits>
 80117fa:	e00d      	b.n	8011818 <osEventFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80117fc:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8011800:	2b00      	cmp	r3, #0
 8011802:	d0f7      	beq.n	80117f4 <osEventFlagsSet+0x28>
    yield = pdFALSE;
 8011804:	aa02      	add	r2, sp, #8
 8011806:	2300      	movs	r3, #0
 8011808:	f842 3d04 	str.w	r3, [r2, #-4]!
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 801180c:	4621      	mov	r1, r4
 801180e:	f000 feed 	bl	80125ec <xEventGroupSetBitsFromISR>
 8011812:	b118      	cbz	r0, 801181c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8011814:	f06f 0002 	mvn.w	r0, #2
  }

  return (rflags);
}
 8011818:	b002      	add	sp, #8
 801181a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	b163      	cbz	r3, 801183a <osEventFlagsSet+0x6e>
 8011820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011824:	4b07      	ldr	r3, [pc, #28]	; (8011844 <osEventFlagsSet+0x78>)
 8011826:	601a      	str	r2, [r3, #0]
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8011830:	4620      	mov	r0, r4
 8011832:	e7f1      	b.n	8011818 <osEventFlagsSet+0x4c>
    rflags = (uint32_t)osErrorParameter;
 8011834:	f06f 0003 	mvn.w	r0, #3
 8011838:	4770      	bx	lr
      rflags = flags;
 801183a:	4620      	mov	r0, r4
  return (rflags);
 801183c:	e7ec      	b.n	8011818 <osEventFlagsSet+0x4c>
 801183e:	bf00      	nop
 8011840:	20000828 	.word	0x20000828
 8011844:	e000ed04 	.word	0xe000ed04

08011848 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8011848:	b570      	push	{r4, r5, r6, lr}
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801184a:	b348      	cbz	r0, 80118a0 <osEventFlagsClear+0x58>
 801184c:	4606      	mov	r6, r0
 801184e:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8011852:	d003      	beq.n	801185c <osEventFlagsClear+0x14>
    rflags = (uint32_t)osErrorParameter;
 8011854:	f06f 0503 	mvn.w	r5, #3
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
  }

  return (rflags);
}
 8011858:	4628      	mov	r0, r5
 801185a:	bd70      	pop	{r4, r5, r6, pc}
 801185c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801185e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8011862:	b983      	cbnz	r3, 8011886 <osEventFlagsClear+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011864:	f3ef 8310 	mrs	r3, PRIMASK
 8011868:	b96b      	cbnz	r3, 8011886 <osEventFlagsClear+0x3e>
 801186a:	4b0f      	ldr	r3, [pc, #60]	; (80118a8 <osEventFlagsClear+0x60>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d005      	beq.n	801187e <osEventFlagsClear+0x36>
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8011872:	4621      	mov	r1, r4
 8011874:	4630      	mov	r0, r6
 8011876:	f000 fd95 	bl	80123a4 <xEventGroupClearBits>
 801187a:	4605      	mov	r5, r0
 801187c:	e7ec      	b.n	8011858 <osEventFlagsClear+0x10>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801187e:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8011882:	2b00      	cmp	r3, #0
 8011884:	d0f5      	beq.n	8011872 <osEventFlagsClear+0x2a>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8011886:	4630      	mov	r0, r6
 8011888:	f000 fdbe 	bl	8012408 <xEventGroupGetBitsFromISR>
 801188c:	4605      	mov	r5, r0
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801188e:	4621      	mov	r1, r4
 8011890:	4630      	mov	r0, r6
 8011892:	f000 fdae 	bl	80123f2 <xEventGroupClearBitsFromISR>
 8011896:	2800      	cmp	r0, #0
 8011898:	d1de      	bne.n	8011858 <osEventFlagsClear+0x10>
      rflags = (uint32_t)osErrorResource;
 801189a:	f06f 0502 	mvn.w	r5, #2
  return (rflags);
 801189e:	e7db      	b.n	8011858 <osEventFlagsClear+0x10>
    rflags = (uint32_t)osErrorParameter;
 80118a0:	f06f 0503 	mvn.w	r5, #3
 80118a4:	e7d8      	b.n	8011858 <osEventFlagsClear+0x10>
 80118a6:	bf00      	nop
 80118a8:	20000828 	.word	0x20000828

080118ac <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if (ef_id == NULL) {
 80118ac:	b1a8      	cbz	r0, 80118da <osEventFlagsGet+0x2e>
uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80118ae:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118b0:	f3ef 8305 	mrs	r3, IPSR
    rflags = 0U;
  }
  else if (IS_IRQ()) {
 80118b4:	b973      	cbnz	r3, 80118d4 <osEventFlagsGet+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118b6:	f3ef 8310 	mrs	r3, PRIMASK
 80118ba:	b95b      	cbnz	r3, 80118d4 <osEventFlagsGet+0x28>
 80118bc:	4b08      	ldr	r3, [pc, #32]	; (80118e0 <osEventFlagsGet+0x34>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d003      	beq.n	80118cc <osEventFlagsGet+0x20>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80118c4:	2100      	movs	r1, #0
 80118c6:	f000 fd6d 	bl	80123a4 <xEventGroupClearBits>
 80118ca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80118cc:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d0f7      	beq.n	80118c4 <osEventFlagsGet+0x18>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80118d4:	f000 fd98 	bl	8012408 <xEventGroupGetBitsFromISR>
 80118d8:	bd08      	pop	{r3, pc}
    rflags = 0U;
 80118da:	2000      	movs	r0, #0
  }

  return (rflags);
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	20000828 	.word	0x20000828

080118e4 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d040      	beq.n	801196a <osEventFlagsWait+0x86>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80118e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ea:	b083      	sub	sp, #12
 80118ec:	4604      	mov	r4, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80118ee:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80118f2:	d003      	beq.n	80118fc <osEventFlagsWait+0x18>
    rflags = (uint32_t)osErrorParameter;
 80118f4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80118f8:	b003      	add	sp, #12
 80118fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118fc:	f3ef 8005 	mrs	r0, IPSR
  else if (IS_IRQ()) {
 8011900:	b110      	cbz	r0, 8011908 <osEventFlagsWait+0x24>
    rflags = (uint32_t)osErrorISR;
 8011902:	f06f 0005 	mvn.w	r0, #5
 8011906:	e7f7      	b.n	80118f8 <osEventFlagsWait+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011908:	f3ef 8010 	mrs	r0, PRIMASK
  else if (IS_IRQ()) {
 801190c:	b110      	cbz	r0, 8011914 <osEventFlagsWait+0x30>
    rflags = (uint32_t)osErrorISR;
 801190e:	f06f 0005 	mvn.w	r0, #5
 8011912:	e7f1      	b.n	80118f8 <osEventFlagsWait+0x14>
  else if (IS_IRQ()) {
 8011914:	4819      	ldr	r0, [pc, #100]	; (801197c <osEventFlagsWait+0x98>)
 8011916:	6800      	ldr	r0, [r0, #0]
 8011918:	2802      	cmp	r0, #2
 801191a:	d015      	beq.n	8011948 <osEventFlagsWait+0x64>
    if (options & osFlagsWaitAll) {
 801191c:	f012 0601 	ands.w	r6, r2, #1
 8011920:	d019      	beq.n	8011956 <osEventFlagsWait+0x72>
      wait_all = pdTRUE;
 8011922:	2701      	movs	r7, #1
    if (options & osFlagsNoClear) {
 8011924:	f012 0f02 	tst.w	r2, #2
 8011928:	d017      	beq.n	801195a <osEventFlagsWait+0x76>
      exit_clr = pdFAIL;
 801192a:	2200      	movs	r2, #0
 801192c:	4620      	mov	r0, r4
 801192e:	461d      	mov	r5, r3
 8011930:	460c      	mov	r4, r1
    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	463b      	mov	r3, r7
 8011936:	f000 fcaa 	bl	801228e <xEventGroupWaitBits>
    if (options & osFlagsWaitAll) {
 801193a:	b186      	cbz	r6, 801195e <osEventFlagsWait+0x7a>
      if (flags != rflags) {
 801193c:	4284      	cmp	r4, r0
 801193e:	d0db      	beq.n	80118f8 <osEventFlagsWait+0x14>
        if (timeout > 0U) {
 8011940:	b1b5      	cbz	r5, 8011970 <osEventFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8011942:	f06f 0001 	mvn.w	r0, #1
 8011946:	e7d7      	b.n	80118f8 <osEventFlagsWait+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011948:	f3ef 8011 	mrs	r0, BASEPRI
  else if (IS_IRQ()) {
 801194c:	2800      	cmp	r0, #0
 801194e:	d0e5      	beq.n	801191c <osEventFlagsWait+0x38>
    rflags = (uint32_t)osErrorISR;
 8011950:	f06f 0005 	mvn.w	r0, #5
 8011954:	e7d0      	b.n	80118f8 <osEventFlagsWait+0x14>
      wait_all = pdFAIL;
 8011956:	2700      	movs	r7, #0
 8011958:	e7e4      	b.n	8011924 <osEventFlagsWait+0x40>
      exit_clr = pdTRUE;
 801195a:	2201      	movs	r2, #1
 801195c:	e7e6      	b.n	801192c <osEventFlagsWait+0x48>
      if ((flags & rflags) == 0U) {
 801195e:	4204      	tst	r4, r0
 8011960:	d1ca      	bne.n	80118f8 <osEventFlagsWait+0x14>
        if (timeout > 0U) {
 8011962:	b145      	cbz	r5, 8011976 <osEventFlagsWait+0x92>
          rflags = (uint32_t)osErrorTimeout;
 8011964:	f06f 0001 	mvn.w	r0, #1
 8011968:	e7c6      	b.n	80118f8 <osEventFlagsWait+0x14>
    rflags = (uint32_t)osErrorParameter;
 801196a:	f06f 0003 	mvn.w	r0, #3
 801196e:	4770      	bx	lr
          rflags = (uint32_t)osErrorResource;
 8011970:	f06f 0002 	mvn.w	r0, #2
 8011974:	e7c0      	b.n	80118f8 <osEventFlagsWait+0x14>
          rflags = (uint32_t)osErrorResource;
 8011976:	f06f 0002 	mvn.w	r0, #2
  return (rflags);
 801197a:	e7bd      	b.n	80118f8 <osEventFlagsWait+0x14>
 801197c:	20000828 	.word	0x20000828

08011980 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8011980:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011982:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011986:	b993      	cbnz	r3, 80119ae <osEventFlagsDelete+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011988:	f3ef 8310 	mrs	r3, PRIMASK
 801198c:	b993      	cbnz	r3, 80119b4 <osEventFlagsDelete+0x34>
 801198e:	4b0c      	ldr	r3, [pc, #48]	; (80119c0 <osEventFlagsDelete+0x40>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b02      	cmp	r3, #2
 8011994:	d004      	beq.n	80119a0 <osEventFlagsDelete+0x20>
    stat = osErrorISR;
  }
  else if (hEventGroup == NULL) {
 8011996:	b180      	cbz	r0, 80119ba <osEventFlagsDelete+0x3a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    vEventGroupDelete (hEventGroup);
 8011998:	f000 fe06 	bl	80125a8 <vEventGroupDelete>
    stat = osOK;
 801199c:	2000      	movs	r0, #0
 801199e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80119a0:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d0f6      	beq.n	8011996 <osEventFlagsDelete+0x16>
    stat = osErrorISR;
 80119a8:	f06f 0005 	mvn.w	r0, #5
 80119ac:	bd08      	pop	{r3, pc}
 80119ae:	f06f 0005 	mvn.w	r0, #5
 80119b2:	bd08      	pop	{r3, pc}
 80119b4:	f06f 0005 	mvn.w	r0, #5
 80119b8:	bd08      	pop	{r3, pc}
    stat = osErrorParameter;
 80119ba:	f06f 0003 	mvn.w	r0, #3
#else
  stat = osError;
#endif

  return (stat);
}
 80119be:	bd08      	pop	{r3, pc}
 80119c0:	20000828 	.word	0x20000828

080119c4 <osMutexNew>:

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80119c4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119c6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d156      	bne.n	8011a7c <osMutexNew+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119ce:	f3ef 8310 	mrs	r3, PRIMASK
 80119d2:	461e      	mov	r6, r3
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d153      	bne.n	8011a80 <osMutexNew+0xbc>
 80119d8:	4a2b      	ldr	r2, [pc, #172]	; (8011a88 <osMutexNew+0xc4>)
 80119da:	6812      	ldr	r2, [r2, #0]
 80119dc:	2a02      	cmp	r2, #2
 80119de:	d01b      	beq.n	8011a18 <osMutexNew+0x54>
    if (attr != NULL) {
 80119e0:	b100      	cbz	r0, 80119e4 <osMutexNew+0x20>
      type = attr->attr_bits;
 80119e2:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80119e4:	f013 0f01 	tst.w	r3, #1
 80119e8:	d000      	beq.n	80119ec <osMutexNew+0x28>
      rmtx = 1U;
 80119ea:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80119ec:	f013 0f08 	tst.w	r3, #8
 80119f0:	d148      	bne.n	8011a84 <osMutexNew+0xc0>
      mem = -1;

      if (attr != NULL) {
 80119f2:	b1e0      	cbz	r0, 8011a2e <osMutexNew+0x6a>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80119f4:	6883      	ldr	r3, [r0, #8]
 80119f6:	b113      	cbz	r3, 80119fe <osMutexNew+0x3a>
 80119f8:	68c2      	ldr	r2, [r0, #12]
 80119fa:	2a4f      	cmp	r2, #79	; 0x4f
 80119fc:	d819      	bhi.n	8011a32 <osMutexNew+0x6e>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80119fe:	b18b      	cbz	r3, 8011a24 <osMutexNew+0x60>
      mem = -1;
 8011a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a04:	4604      	mov	r4, r0
      }
      else {
        mem = 0;
      }

      if (mem == 1) {
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d017      	beq.n	8011a3a <osMutexNew+0x76>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8011a0a:	bb43      	cbnz	r3, 8011a5e <osMutexNew+0x9a>
          if (rmtx != 0U) {
 8011a0c:	b316      	cbz	r6, 8011a54 <osMutexNew+0x90>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8011a0e:	2004      	movs	r0, #4
 8011a10:	f001 fbd6 	bl	80131c0 <xQueueCreateMutex>
 8011a14:	4605      	mov	r5, r0
 8011a16:	e023      	b.n	8011a60 <osMutexNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a18:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8011a1c:	2a00      	cmp	r2, #0
 8011a1e:	d0df      	beq.n	80119e0 <osMutexNew+0x1c>
  hMutex = NULL;
 8011a20:	2500      	movs	r5, #0
 8011a22:	e027      	b.n	8011a74 <osMutexNew+0xb0>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011a24:	68c3      	ldr	r3, [r0, #12]
 8011a26:	b133      	cbz	r3, 8011a36 <osMutexNew+0x72>
      mem = -1;
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a2c:	e7ea      	b.n	8011a04 <osMutexNew+0x40>
        mem = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e7e8      	b.n	8011a04 <osMutexNew+0x40>
          mem = 1;
 8011a32:	2301      	movs	r3, #1
 8011a34:	e7e6      	b.n	8011a04 <osMutexNew+0x40>
            mem = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	e7e4      	b.n	8011a04 <osMutexNew+0x40>
        if (rmtx != 0U) {
 8011a3a:	b12e      	cbz	r6, 8011a48 <osMutexNew+0x84>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011a3c:	6881      	ldr	r1, [r0, #8]
 8011a3e:	2004      	movs	r0, #4
 8011a40:	f001 fbc9 	bl	80131d6 <xQueueCreateMutexStatic>
 8011a44:	4605      	mov	r5, r0
 8011a46:	e00b      	b.n	8011a60 <osMutexNew+0x9c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011a48:	6881      	ldr	r1, [r0, #8]
 8011a4a:	2001      	movs	r0, #1
 8011a4c:	f001 fbc3 	bl	80131d6 <xQueueCreateMutexStatic>
 8011a50:	4605      	mov	r5, r0
 8011a52:	e005      	b.n	8011a60 <osMutexNew+0x9c>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8011a54:	2001      	movs	r0, #1
 8011a56:	f001 fbb3 	bl	80131c0 <xQueueCreateMutex>
 8011a5a:	4605      	mov	r5, r0
 8011a5c:	e000      	b.n	8011a60 <osMutexNew+0x9c>
  hMutex = NULL;
 8011a5e:	2500      	movs	r5, #0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011a60:	b125      	cbz	r5, 8011a6c <osMutexNew+0xa8>
        if (attr != NULL) {
 8011a62:	b14c      	cbz	r4, 8011a78 <osMutexNew+0xb4>
          name = attr->name;
 8011a64:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8011a66:	4628      	mov	r0, r5
 8011a68:	f001 fffe 	bl	8013a68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011a6c:	b115      	cbz	r5, 8011a74 <osMutexNew+0xb0>
 8011a6e:	b10e      	cbz	r6, 8011a74 <osMutexNew+0xb0>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011a70:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8011a74:	4628      	mov	r0, r5
 8011a76:	bd70      	pop	{r4, r5, r6, pc}
          name = NULL;
 8011a78:	2100      	movs	r1, #0
 8011a7a:	e7f4      	b.n	8011a66 <osMutexNew+0xa2>
  hMutex = NULL;
 8011a7c:	2500      	movs	r5, #0
 8011a7e:	e7f9      	b.n	8011a74 <osMutexNew+0xb0>
 8011a80:	2500      	movs	r5, #0
 8011a82:	e7f7      	b.n	8011a74 <osMutexNew+0xb0>
 8011a84:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8011a86:	e7f5      	b.n	8011a74 <osMutexNew+0xb0>
 8011a88:	20000828 	.word	0x20000828

08011a8c <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011a8c:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8011a90:	f000 0301 	and.w	r3, r0, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a94:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8011a98:	bb18      	cbnz	r0, 8011ae2 <osMutexAcquire+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a9a:	f3ef 8010 	mrs	r0, PRIMASK
 8011a9e:	bb18      	cbnz	r0, 8011ae8 <osMutexAcquire+0x5c>
 8011aa0:	4819      	ldr	r0, [pc, #100]	; (8011b08 <osMutexAcquire+0x7c>)
 8011aa2:	6800      	ldr	r0, [r0, #0]
 8011aa4:	2802      	cmp	r0, #2
 8011aa6:	d00c      	beq.n	8011ac2 <osMutexAcquire+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8011aa8:	b30a      	cbz	r2, 8011aee <osMutexAcquire+0x62>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011aaa:	b510      	push	{r4, lr}
 8011aac:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8011aae:	b17b      	cbz	r3, 8011ad0 <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	f001 fe0d 	bl	80136d0 <xQueueTakeMutexRecursive>
 8011ab6:	2801      	cmp	r0, #1
 8011ab8:	d01c      	beq.n	8011af4 <osMutexAcquire+0x68>
        if (timeout != 0U) {
 8011aba:	b1ec      	cbz	r4, 8011af8 <osMutexAcquire+0x6c>
          stat = osErrorTimeout;
 8011abc:	f06f 0001 	mvn.w	r0, #1
 8011ac0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ac2:	f3ef 8011 	mrs	r0, BASEPRI
  if (IS_IRQ()) {
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0ee      	beq.n	8011aa8 <osMutexAcquire+0x1c>
    stat = osErrorISR;
 8011aca:	f06f 0005 	mvn.w	r0, #5
 8011ace:	4770      	bx	lr
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	f001 fd2b 	bl	801352c <xQueueSemaphoreTake>
 8011ad6:	2801      	cmp	r0, #1
 8011ad8:	d011      	beq.n	8011afe <osMutexAcquire+0x72>
        if (timeout != 0U) {
 8011ada:	b194      	cbz	r4, 8011b02 <osMutexAcquire+0x76>
          stat = osErrorTimeout;
 8011adc:	f06f 0001 	mvn.w	r0, #1
 8011ae0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8011ae2:	f06f 0005 	mvn.w	r0, #5
 8011ae6:	4770      	bx	lr
 8011ae8:	f06f 0005 	mvn.w	r0, #5
 8011aec:	4770      	bx	lr
    stat = osErrorParameter;
 8011aee:	f06f 0003 	mvn.w	r0, #3
 8011af2:	4770      	bx	lr
  stat = osOK;
 8011af4:	2000      	movs	r0, #0
 8011af6:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8011af8:	f06f 0002 	mvn.w	r0, #2
 8011afc:	bd10      	pop	{r4, pc}
  stat = osOK;
 8011afe:	2000      	movs	r0, #0
 8011b00:	bd10      	pop	{r4, pc}
        } else {
          stat = osErrorResource;
 8011b02:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8011b06:	bd10      	pop	{r4, pc}
 8011b08:	20000828 	.word	0x20000828

08011b0c <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b0c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8011b10:	bb2a      	cbnz	r2, 8011b5e <osMutexRelease+0x52>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011b12:	b510      	push	{r4, lr}
 8011b14:	f020 0401 	bic.w	r4, r0, #1
 8011b18:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b1c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8011b20:	bb02      	cbnz	r2, 8011b64 <osMutexRelease+0x58>
 8011b22:	4a16      	ldr	r2, [pc, #88]	; (8011b7c <osMutexRelease+0x70>)
 8011b24:	6812      	ldr	r2, [r2, #0]
 8011b26:	2a02      	cmp	r2, #2
 8011b28:	d008      	beq.n	8011b3c <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8011b2a:	b1f4      	cbz	r4, 8011b6a <osMutexRelease+0x5e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8011b2c:	b168      	cbz	r0, 8011b4a <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f001 fb60 	bl	80131f4 <xQueueGiveMutexRecursive>
 8011b34:	2801      	cmp	r0, #1
 8011b36:	d11b      	bne.n	8011b70 <osMutexRelease+0x64>
  stat = osOK;
 8011b38:	2000      	movs	r0, #0
 8011b3a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b3c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8011b40:	2a00      	cmp	r2, #0
 8011b42:	d0f2      	beq.n	8011b2a <osMutexRelease+0x1e>
    stat = osErrorISR;
 8011b44:	f06f 0005 	mvn.w	r0, #5
 8011b48:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	4619      	mov	r1, r3
 8011b50:	4620      	mov	r0, r4
 8011b52:	f001 fa65 	bl	8013020 <xQueueGenericSend>
 8011b56:	2801      	cmp	r0, #1
 8011b58:	d10d      	bne.n	8011b76 <osMutexRelease+0x6a>
  stat = osOK;
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8011b5e:	f06f 0005 	mvn.w	r0, #5
 8011b62:	4770      	bx	lr
 8011b64:	f06f 0005 	mvn.w	r0, #5
 8011b68:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8011b6a:	f06f 0003 	mvn.w	r0, #3
 8011b6e:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8011b70:	f06f 0002 	mvn.w	r0, #2
 8011b74:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8011b76:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8011b7a:	bd10      	pop	{r4, pc}
 8011b7c:	20000828 	.word	0x20000828

08011b80 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8011b80:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b82:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);

  if (IS_IRQ() || (hMutex == NULL)) {
 8011b86:	b993      	cbnz	r3, 8011bae <osMutexGetOwner+0x2e>
 8011b88:	f020 0001 	bic.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b90:	b97b      	cbnz	r3, 8011bb2 <osMutexGetOwner+0x32>
 8011b92:	4b0a      	ldr	r3, [pc, #40]	; (8011bbc <osMutexGetOwner+0x3c>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d003      	beq.n	8011ba2 <osMutexGetOwner+0x22>
 8011b9a:	b160      	cbz	r0, 8011bb6 <osMutexGetOwner+0x36>
    owner = NULL;
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8011b9c:	f001 f9de 	bl	8012f5c <xQueueGetMutexHolder>
 8011ba0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ba2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hMutex == NULL)) {
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d0f7      	beq.n	8011b9a <osMutexGetOwner+0x1a>
    owner = NULL;
 8011baa:	2000      	movs	r0, #0
 8011bac:	bd08      	pop	{r3, pc}
 8011bae:	2000      	movs	r0, #0
 8011bb0:	bd08      	pop	{r3, pc}
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	bd08      	pop	{r3, pc}
 8011bb6:	2000      	movs	r0, #0
  }

  return (owner);
}
 8011bb8:	bd08      	pop	{r3, pc}
 8011bba:	bf00      	nop
 8011bbc:	20000828 	.word	0x20000828

08011bc0 <osMutexDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bc0:	f3ef 8305 	mrs	r3, IPSR
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);

  if (IS_IRQ()) {
 8011bc4:	b9cb      	cbnz	r3, 8011bfa <osMutexDelete+0x3a>
osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 8011bc6:	b510      	push	{r4, lr}
 8011bc8:	f020 0401 	bic.w	r4, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bcc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8011bd0:	b9b3      	cbnz	r3, 8011c00 <osMutexDelete+0x40>
 8011bd2:	4b0e      	ldr	r3, [pc, #56]	; (8011c0c <osMutexDelete+0x4c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	d008      	beq.n	8011bec <osMutexDelete+0x2c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8011bda:	b1a4      	cbz	r4, 8011c06 <osMutexDelete+0x46>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f001 ff6b 	bl	8013ab8 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
    vSemaphoreDelete (hMutex);
 8011be2:	4620      	mov	r0, r4
 8011be4:	f001 ff7e 	bl	8013ae4 <vQueueDelete>
    stat = osOK;
 8011be8:	2000      	movs	r0, #0
 8011bea:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bec:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d0f2      	beq.n	8011bda <osMutexDelete+0x1a>
    stat = osErrorISR;
 8011bf4:	f06f 0005 	mvn.w	r0, #5
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	f06f 0005 	mvn.w	r0, #5
 8011bfe:	4770      	bx	lr
 8011c00:	f06f 0005 	mvn.w	r0, #5
 8011c04:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8011c06:	f06f 0003 	mvn.w	r0, #3
#else
  stat = osError;
#endif

  return (stat);
}
 8011c0a:	bd10      	pop	{r4, pc}
 8011c0c:	20000828 	.word	0x20000828

08011c10 <osSemaphoreNew>:

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c10:	b570      	push	{r4, r5, r6, lr}
 8011c12:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c14:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d164      	bne.n	8011ce6 <osSemaphoreNew+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d162      	bne.n	8011cea <osSemaphoreNew+0xda>
 8011c24:	4b35      	ldr	r3, [pc, #212]	; (8011cfc <osSemaphoreNew+0xec>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d022      	beq.n	8011c72 <osSemaphoreNew+0x62>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d05e      	beq.n	8011cee <osSemaphoreNew+0xde>
 8011c30:	4288      	cmp	r0, r1
 8011c32:	d35e      	bcc.n	8011cf2 <osSemaphoreNew+0xe2>
    mem = -1;

    if (attr != NULL) {
 8011c34:	b342      	cbz	r2, 8011c88 <osSemaphoreNew+0x78>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011c36:	6893      	ldr	r3, [r2, #8]
 8011c38:	b113      	cbz	r3, 8011c40 <osSemaphoreNew+0x30>
 8011c3a:	68d4      	ldr	r4, [r2, #12]
 8011c3c:	2c4f      	cmp	r4, #79	; 0x4f
 8011c3e:	d825      	bhi.n	8011c8c <osSemaphoreNew+0x7c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011c40:	b1eb      	cbz	r3, 8011c7e <osSemaphoreNew+0x6e>
    mem = -1;
 8011c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else {
      mem = 0;
    }

    if (mem != -1) {
 8011c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c4a:	d054      	beq.n	8011cf6 <osSemaphoreNew+0xe6>
 8011c4c:	4614      	mov	r4, r2
 8011c4e:	460d      	mov	r5, r1
      if (max_count == 1U) {
 8011c50:	2801      	cmp	r0, #1
 8011c52:	d01f      	beq.n	8011c94 <osSemaphoreNew+0x84>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d03f      	beq.n	8011cd8 <osSemaphoreNew+0xc8>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011c58:	f001 f9c2 	bl	8012fe0 <xQueueCreateCountingSemaphore>
 8011c5c:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011c5e:	b12e      	cbz	r6, 8011c6c <osSemaphoreNew+0x5c>
        if (attr != NULL) {
 8011c60:	2c00      	cmp	r4, #0
 8011c62:	d03e      	beq.n	8011ce2 <osSemaphoreNew+0xd2>
          name = attr->name;
 8011c64:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011c66:	4630      	mov	r0, r6
 8011c68:	f001 fefe 	bl	8013a68 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	b002      	add	sp, #8
 8011c70:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c72:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0d8      	beq.n	8011c2c <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 8011c7a:	2600      	movs	r6, #0
 8011c7c:	e7f6      	b.n	8011c6c <osSemaphoreNew+0x5c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011c7e:	68d3      	ldr	r3, [r2, #12]
 8011c80:	b133      	cbz	r3, 8011c90 <osSemaphoreNew+0x80>
    mem = -1;
 8011c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c86:	e7de      	b.n	8011c46 <osSemaphoreNew+0x36>
      mem = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	e7dc      	b.n	8011c46 <osSemaphoreNew+0x36>
        mem = 1;
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	e7da      	b.n	8011c46 <osSemaphoreNew+0x36>
          mem = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	e7d8      	b.n	8011c46 <osSemaphoreNew+0x36>
        if (mem == 1) {
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d016      	beq.n	8011cc6 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinary();
 8011c98:	2203      	movs	r2, #3
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	f001 f936 	bl	8012f0e <xQueueGenericCreate>
 8011ca2:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011ca4:	2e00      	cmp	r6, #0
 8011ca6:	d0da      	beq.n	8011c5e <osSemaphoreNew+0x4e>
 8011ca8:	2d00      	cmp	r5, #0
 8011caa:	d0d8      	beq.n	8011c5e <osSemaphoreNew+0x4e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011cac:	2300      	movs	r3, #0
 8011cae:	461a      	mov	r2, r3
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f001 f9b4 	bl	8013020 <xQueueGenericSend>
 8011cb8:	2801      	cmp	r0, #1
 8011cba:	d0d0      	beq.n	8011c5e <osSemaphoreNew+0x4e>
            vSemaphoreDelete (hSemaphore);
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f001 ff11 	bl	8013ae4 <vQueueDelete>
            hSemaphore = NULL;
 8011cc2:	2600      	movs	r6, #0
 8011cc4:	e7cb      	b.n	8011c5e <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	6893      	ldr	r3, [r2, #8]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	4611      	mov	r1, r2
 8011cd0:	f001 f8cd 	bl	8012e6e <xQueueGenericCreateStatic>
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	e7e5      	b.n	8011ca4 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011cd8:	6892      	ldr	r2, [r2, #8]
 8011cda:	f001 f95c 	bl	8012f96 <xQueueCreateCountingSemaphoreStatic>
 8011cde:	4606      	mov	r6, r0
 8011ce0:	e7bd      	b.n	8011c5e <osSemaphoreNew+0x4e>
          name = NULL;
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	e7bf      	b.n	8011c66 <osSemaphoreNew+0x56>
  hSemaphore = NULL;
 8011ce6:	2600      	movs	r6, #0
 8011ce8:	e7c0      	b.n	8011c6c <osSemaphoreNew+0x5c>
 8011cea:	2600      	movs	r6, #0
 8011cec:	e7be      	b.n	8011c6c <osSemaphoreNew+0x5c>
 8011cee:	2600      	movs	r6, #0
 8011cf0:	e7bc      	b.n	8011c6c <osSemaphoreNew+0x5c>
 8011cf2:	2600      	movs	r6, #0
 8011cf4:	e7ba      	b.n	8011c6c <osSemaphoreNew+0x5c>
 8011cf6:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8011cf8:	e7b8      	b.n	8011c6c <osSemaphoreNew+0x5c>
 8011cfa:	bf00      	nop
 8011cfc:	20000828 	.word	0x20000828

08011d00 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8011d00:	b378      	cbz	r0, 8011d62 <osSemaphoreAcquire+0x62>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d02:	b510      	push	{r4, lr}
 8011d04:	b082      	sub	sp, #8
 8011d06:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d08:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8011d0c:	b99b      	cbnz	r3, 8011d36 <osSemaphoreAcquire+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011d12:	b983      	cbnz	r3, 8011d36 <osSemaphoreAcquire+0x36>
 8011d14:	4b1b      	ldr	r3, [pc, #108]	; (8011d84 <osSemaphoreAcquire+0x84>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b02      	cmp	r3, #2
 8011d1a:	d008      	beq.n	8011d2e <osSemaphoreAcquire+0x2e>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	f001 fc05 	bl	801352c <xQueueSemaphoreTake>
 8011d22:	2801      	cmp	r0, #1
 8011d24:	d028      	beq.n	8011d78 <osSemaphoreAcquire+0x78>
      if (timeout != 0U) {
 8011d26:	b34c      	cbz	r4, 8011d7c <osSemaphoreAcquire+0x7c>
        stat = osErrorTimeout;
 8011d28:	f06f 0001 	mvn.w	r0, #1
 8011d2c:	e017      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d2e:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0f2      	beq.n	8011d1c <osSemaphoreAcquire+0x1c>
    if (timeout != 0U) {
 8011d36:	b9bc      	cbnz	r4, 8011d68 <osSemaphoreAcquire+0x68>
      yield = pdFALSE;
 8011d38:	2100      	movs	r1, #0
 8011d3a:	aa02      	add	r2, sp, #8
 8011d3c:	f842 1d04 	str.w	r1, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011d40:	f001 fd96 	bl	8013870 <xQueueReceiveFromISR>
 8011d44:	2801      	cmp	r0, #1
 8011d46:	d112      	bne.n	8011d6e <osSemaphoreAcquire+0x6e>
        portYIELD_FROM_ISR (yield);
 8011d48:	9b01      	ldr	r3, [sp, #4]
 8011d4a:	b19b      	cbz	r3, 8011d74 <osSemaphoreAcquire+0x74>
 8011d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d50:	4b0d      	ldr	r3, [pc, #52]	; (8011d88 <osSemaphoreAcquire+0x88>)
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011d5c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8011d5e:	b002      	add	sp, #8
 8011d60:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8011d62:	f06f 0003 	mvn.w	r0, #3
 8011d66:	4770      	bx	lr
      stat = osErrorParameter;
 8011d68:	f06f 0003 	mvn.w	r0, #3
 8011d6c:	e7f7      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
 8011d6e:	f06f 0002 	mvn.w	r0, #2
 8011d72:	e7f4      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
  stat = osOK;
 8011d74:	2000      	movs	r0, #0
 8011d76:	e7f2      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
 8011d78:	2000      	movs	r0, #0
 8011d7a:	e7f0      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
 8011d7c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8011d80:	e7ed      	b.n	8011d5e <osSemaphoreAcquire+0x5e>
 8011d82:	bf00      	nop
 8011d84:	20000828 	.word	0x20000828
 8011d88:	e000ed04 	.word	0xe000ed04

08011d8c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8011d8c:	b370      	cbz	r0, 8011dec <osSemaphoreRelease+0x60>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011d8e:	b500      	push	{lr}
 8011d90:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d92:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8011d96:	b99b      	cbnz	r3, 8011dc0 <osSemaphoreRelease+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d98:	f3ef 8310 	mrs	r3, PRIMASK
 8011d9c:	b983      	cbnz	r3, 8011dc0 <osSemaphoreRelease+0x34>
 8011d9e:	4b19      	ldr	r3, [pc, #100]	; (8011e04 <osSemaphoreRelease+0x78>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	2b02      	cmp	r3, #2
 8011da4:	d008      	beq.n	8011db8 <osSemaphoreRelease+0x2c>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011da6:	2300      	movs	r3, #0
 8011da8:	461a      	mov	r2, r3
 8011daa:	4619      	mov	r1, r3
 8011dac:	f001 f938 	bl	8013020 <xQueueGenericSend>
 8011db0:	2801      	cmp	r0, #1
 8011db2:	d123      	bne.n	8011dfc <osSemaphoreRelease+0x70>
  stat = osOK;
 8011db4:	2000      	movs	r0, #0
 8011db6:	e016      	b.n	8011de6 <osSemaphoreRelease+0x5a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011db8:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d0f2      	beq.n	8011da6 <osSemaphoreRelease+0x1a>
    yield = pdFALSE;
 8011dc0:	a902      	add	r1, sp, #8
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	f841 3d04 	str.w	r3, [r1, #-4]!
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011dc8:	f001 faa3 	bl	8013312 <xQueueGiveFromISR>
 8011dcc:	2801      	cmp	r0, #1
 8011dce:	d110      	bne.n	8011df2 <osSemaphoreRelease+0x66>
      portYIELD_FROM_ISR (yield);
 8011dd0:	9b01      	ldr	r3, [sp, #4]
 8011dd2:	b18b      	cbz	r3, 8011df8 <osSemaphoreRelease+0x6c>
 8011dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd8:	4b0b      	ldr	r3, [pc, #44]	; (8011e08 <osSemaphoreRelease+0x7c>)
 8011dda:	601a      	str	r2, [r3, #0]
 8011ddc:	f3bf 8f4f 	dsb	sy
 8011de0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011de4:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8011de6:	b003      	add	sp, #12
 8011de8:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8011dec:	f06f 0003 	mvn.w	r0, #3
 8011df0:	4770      	bx	lr
      stat = osErrorResource;
 8011df2:	f06f 0002 	mvn.w	r0, #2
 8011df6:	e7f6      	b.n	8011de6 <osSemaphoreRelease+0x5a>
  stat = osOK;
 8011df8:	2000      	movs	r0, #0
 8011dfa:	e7f4      	b.n	8011de6 <osSemaphoreRelease+0x5a>
      stat = osErrorResource;
 8011dfc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8011e00:	e7f1      	b.n	8011de6 <osSemaphoreRelease+0x5a>
 8011e02:	bf00      	nop
 8011e04:	20000828 	.word	0x20000828
 8011e08:	e000ed04 	.word	0xe000ed04

08011e0c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8011e0c:	b1a0      	cbz	r0, 8011e38 <osSemaphoreGetCount+0x2c>
uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8011e0e:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e10:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8011e14:	b96b      	cbnz	r3, 8011e32 <osSemaphoreGetCount+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e16:	f3ef 8310 	mrs	r3, PRIMASK
 8011e1a:	b953      	cbnz	r3, 8011e32 <osSemaphoreGetCount+0x26>
 8011e1c:	4b07      	ldr	r3, [pc, #28]	; (8011e3c <osSemaphoreGetCount+0x30>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	d002      	beq.n	8011e2a <osSemaphoreGetCount+0x1e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8011e24:	f001 fdc3 	bl	80139ae <uxQueueMessagesWaiting>
 8011e28:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e2a:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d0f8      	beq.n	8011e24 <osSemaphoreGetCount+0x18>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8011e32:	f001 fde4 	bl	80139fe <uxQueueMessagesWaitingFromISR>
 8011e36:	bd08      	pop	{r3, pc}
    count = 0U;
 8011e38:	2000      	movs	r0, #0
  }

  return (count);
 8011e3a:	4770      	bx	lr
 8011e3c:	20000828 	.word	0x20000828

08011e40 <osSemaphoreDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e40:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011e44:	b9bb      	cbnz	r3, 8011e76 <osSemaphoreDelete+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e46:	f3ef 8310 	mrs	r3, PRIMASK
 8011e4a:	b9bb      	cbnz	r3, 8011e7c <osSemaphoreDelete+0x3c>
 8011e4c:	4b0e      	ldr	r3, [pc, #56]	; (8011e88 <osSemaphoreDelete+0x48>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d009      	beq.n	8011e68 <osSemaphoreDelete+0x28>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8011e54:	b1a8      	cbz	r0, 8011e82 <osSemaphoreDelete+0x42>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011e56:	b510      	push	{r4, lr}
 8011e58:	4604      	mov	r4, r0
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011e5a:	f001 fe2d 	bl	8013ab8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f001 fe40 	bl	8013ae4 <vQueueDelete>
    stat = osOK;
 8011e64:	2000      	movs	r0, #0
 8011e66:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e68:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d0f1      	beq.n	8011e54 <osSemaphoreDelete+0x14>
    stat = osErrorISR;
 8011e70:	f06f 0005 	mvn.w	r0, #5
 8011e74:	4770      	bx	lr
 8011e76:	f06f 0005 	mvn.w	r0, #5
 8011e7a:	4770      	bx	lr
 8011e7c:	f06f 0005 	mvn.w	r0, #5
 8011e80:	4770      	bx	lr
    stat = osErrorParameter;
 8011e82:	f06f 0003 	mvn.w	r0, #3
  }
#else
  stat = osError;
#endif

  return (stat);
 8011e86:	4770      	bx	lr
 8011e88:	20000828 	.word	0x20000828

08011e8c <osMessageQueueNew>:
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011e8c:	b530      	push	{r4, r5, lr}
 8011e8e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e90:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d153      	bne.n	8011f40 <osMessageQueueNew+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e98:	f3ef 8310 	mrs	r3, PRIMASK
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d151      	bne.n	8011f44 <osMessageQueueNew+0xb8>
 8011ea0:	4b2b      	ldr	r3, [pc, #172]	; (8011f50 <osMessageQueueNew+0xc4>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b02      	cmp	r3, #2
 8011ea6:	d021      	beq.n	8011eec <osMessageQueueNew+0x60>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d04d      	beq.n	8011f48 <osMessageQueueNew+0xbc>
 8011eac:	2900      	cmp	r1, #0
 8011eae:	d04d      	beq.n	8011f4c <osMessageQueueNew+0xc0>
    mem = -1;

    if (attr != NULL) {
 8011eb0:	b372      	cbz	r2, 8011f10 <osMessageQueueNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011eb2:	6893      	ldr	r3, [r2, #8]
 8011eb4:	b14b      	cbz	r3, 8011eca <osMessageQueueNew+0x3e>
 8011eb6:	68d4      	ldr	r4, [r2, #12]
 8011eb8:	2c4f      	cmp	r4, #79	; 0x4f
 8011eba:	d906      	bls.n	8011eca <osMessageQueueNew+0x3e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011ebc:	6914      	ldr	r4, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011ebe:	b124      	cbz	r4, 8011eca <osMessageQueueNew+0x3e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011ec0:	6955      	ldr	r5, [r2, #20]
 8011ec2:	fb01 f400 	mul.w	r4, r1, r0
 8011ec6:	42a5      	cmp	r5, r4
 8011ec8:	d224      	bcs.n	8011f14 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011eca:	b1ab      	cbz	r3, 8011ef8 <osMessageQueueNew+0x6c>
    mem = -1;
 8011ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ed0:	4614      	mov	r4, r2
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d025      	beq.n	8011f22 <osMessageQueueNew+0x96>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8011ed6:	b363      	cbz	r3, 8011f32 <osMessageQueueNew+0xa6>
  hQueue = NULL;
 8011ed8:	2500      	movs	r5, #0
        hQueue = xQueueCreate (msg_count, msg_size);
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011eda:	b125      	cbz	r5, 8011ee6 <osMessageQueueNew+0x5a>
      if (attr != NULL) {
 8011edc:	b374      	cbz	r4, 8011f3c <osMessageQueueNew+0xb0>
        name = attr->name;
 8011ede:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	f001 fdc1 	bl	8013a68 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	b003      	add	sp, #12
 8011eea:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011eec:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d0d9      	beq.n	8011ea8 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8011ef4:	2500      	movs	r5, #0
 8011ef6:	e7f6      	b.n	8011ee6 <osMessageQueueNew+0x5a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011ef8:	68d3      	ldr	r3, [r2, #12]
 8011efa:	b96b      	cbnz	r3, 8011f18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011efc:	6913      	ldr	r3, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011efe:	b113      	cbz	r3, 8011f06 <osMessageQueueNew+0x7a>
    mem = -1;
 8011f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f04:	e7e4      	b.n	8011ed0 <osMessageQueueNew+0x44>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f06:	6953      	ldr	r3, [r2, #20]
 8011f08:	b14b      	cbz	r3, 8011f1e <osMessageQueueNew+0x92>
    mem = -1;
 8011f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f0e:	e7df      	b.n	8011ed0 <osMessageQueueNew+0x44>
      mem = 0;
 8011f10:	2300      	movs	r3, #0
 8011f12:	e7dd      	b.n	8011ed0 <osMessageQueueNew+0x44>
        mem = 1;
 8011f14:	2301      	movs	r3, #1
 8011f16:	e7db      	b.n	8011ed0 <osMessageQueueNew+0x44>
    mem = -1;
 8011f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f1c:	e7d8      	b.n	8011ed0 <osMessageQueueNew+0x44>
          mem = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	e7d6      	b.n	8011ed0 <osMessageQueueNew+0x44>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011f22:	2300      	movs	r3, #0
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	6893      	ldr	r3, [r2, #8]
 8011f28:	6912      	ldr	r2, [r2, #16]
 8011f2a:	f000 ffa0 	bl	8012e6e <xQueueGenericCreateStatic>
 8011f2e:	4605      	mov	r5, r0
 8011f30:	e7d3      	b.n	8011eda <osMessageQueueNew+0x4e>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011f32:	2200      	movs	r2, #0
 8011f34:	f000 ffeb 	bl	8012f0e <xQueueGenericCreate>
 8011f38:	4605      	mov	r5, r0
 8011f3a:	e7ce      	b.n	8011eda <osMessageQueueNew+0x4e>
        name = NULL;
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	e7cf      	b.n	8011ee0 <osMessageQueueNew+0x54>
  hQueue = NULL;
 8011f40:	2500      	movs	r5, #0
 8011f42:	e7d0      	b.n	8011ee6 <osMessageQueueNew+0x5a>
 8011f44:	2500      	movs	r5, #0
 8011f46:	e7ce      	b.n	8011ee6 <osMessageQueueNew+0x5a>
 8011f48:	2500      	movs	r5, #0
 8011f4a:	e7cc      	b.n	8011ee6 <osMessageQueueNew+0x5a>
 8011f4c:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8011f4e:	e7ca      	b.n	8011ee6 <osMessageQueueNew+0x5a>
 8011f50:	20000828 	.word	0x20000828

08011f54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011f54:	b510      	push	{r4, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f5a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8011f5e:	b9b3      	cbnz	r3, 8011f8e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f60:	f3ef 8310 	mrs	r3, PRIMASK
 8011f64:	b99b      	cbnz	r3, 8011f8e <osMessageQueuePut+0x3a>
 8011f66:	4b22      	ldr	r3, [pc, #136]	; (8011ff0 <osMessageQueuePut+0x9c>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b02      	cmp	r3, #2
 8011f6c:	d00b      	beq.n	8011f86 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011f6e:	b3a0      	cbz	r0, 8011fda <osMessageQueuePut+0x86>
 8011f70:	b3b1      	cbz	r1, 8011fe0 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011f72:	2300      	movs	r3, #0
 8011f74:	4622      	mov	r2, r4
 8011f76:	f001 f853 	bl	8013020 <xQueueGenericSend>
 8011f7a:	2801      	cmp	r0, #1
 8011f7c:	d033      	beq.n	8011fe6 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8011f7e:	b3a4      	cbz	r4, 8011fea <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8011f80:	f06f 0001 	mvn.w	r0, #1
 8011f84:	e019      	b.n	8011fba <osMessageQueuePut+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f86:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d0ef      	beq.n	8011f6e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011f8e:	b1b0      	cbz	r0, 8011fbe <osMessageQueuePut+0x6a>
 8011f90:	b1c1      	cbz	r1, 8011fc4 <osMessageQueuePut+0x70>
 8011f92:	b9d4      	cbnz	r4, 8011fca <osMessageQueuePut+0x76>
      yield = pdFALSE;
 8011f94:	2300      	movs	r3, #0
 8011f96:	aa02      	add	r2, sp, #8
 8011f98:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011f9c:	f001 f94a 	bl	8013234 <xQueueGenericSendFromISR>
 8011fa0:	2801      	cmp	r0, #1
 8011fa2:	d115      	bne.n	8011fd0 <osMessageQueuePut+0x7c>
        portYIELD_FROM_ISR (yield);
 8011fa4:	9b01      	ldr	r3, [sp, #4]
 8011fa6:	b1b3      	cbz	r3, 8011fd6 <osMessageQueuePut+0x82>
 8011fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fac:	4b11      	ldr	r3, [pc, #68]	; (8011ff4 <osMessageQueuePut+0xa0>)
 8011fae:	601a      	str	r2, [r3, #0]
 8011fb0:	f3bf 8f4f 	dsb	sy
 8011fb4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011fb8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8011fba:	b002      	add	sp, #8
 8011fbc:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8011fbe:	f06f 0003 	mvn.w	r0, #3
 8011fc2:	e7fa      	b.n	8011fba <osMessageQueuePut+0x66>
 8011fc4:	f06f 0003 	mvn.w	r0, #3
 8011fc8:	e7f7      	b.n	8011fba <osMessageQueuePut+0x66>
 8011fca:	f06f 0003 	mvn.w	r0, #3
 8011fce:	e7f4      	b.n	8011fba <osMessageQueuePut+0x66>
        stat = osErrorResource;
 8011fd0:	f06f 0002 	mvn.w	r0, #2
 8011fd4:	e7f1      	b.n	8011fba <osMessageQueuePut+0x66>
  stat = osOK;
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	e7ef      	b.n	8011fba <osMessageQueuePut+0x66>
      stat = osErrorParameter;
 8011fda:	f06f 0003 	mvn.w	r0, #3
 8011fde:	e7ec      	b.n	8011fba <osMessageQueuePut+0x66>
 8011fe0:	f06f 0003 	mvn.w	r0, #3
 8011fe4:	e7e9      	b.n	8011fba <osMessageQueuePut+0x66>
  stat = osOK;
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	e7e7      	b.n	8011fba <osMessageQueuePut+0x66>
          stat = osErrorResource;
 8011fea:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8011fee:	e7e4      	b.n	8011fba <osMessageQueuePut+0x66>
 8011ff0:	20000828 	.word	0x20000828
 8011ff4:	e000ed04 	.word	0xe000ed04

08011ff8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011ff8:	b510      	push	{r4, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ffe:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8012002:	b9ab      	cbnz	r3, 8012030 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012004:	f3ef 8310 	mrs	r3, PRIMASK
 8012008:	b993      	cbnz	r3, 8012030 <osMessageQueueGet+0x38>
 801200a:	4b22      	ldr	r3, [pc, #136]	; (8012094 <osMessageQueueGet+0x9c>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2b02      	cmp	r3, #2
 8012010:	d00a      	beq.n	8012028 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012012:	b398      	cbz	r0, 801207c <osMessageQueueGet+0x84>
 8012014:	b3a9      	cbz	r1, 8012082 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012016:	4622      	mov	r2, r4
 8012018:	f001 f9d9 	bl	80133ce <xQueueReceive>
 801201c:	2801      	cmp	r0, #1
 801201e:	d033      	beq.n	8012088 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8012020:	b3a4      	cbz	r4, 801208c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8012022:	f06f 0001 	mvn.w	r0, #1
 8012026:	e019      	b.n	801205c <osMessageQueueGet+0x64>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012028:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 801202c:	2b00      	cmp	r3, #0
 801202e:	d0f0      	beq.n	8012012 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012030:	b1b0      	cbz	r0, 8012060 <osMessageQueueGet+0x68>
 8012032:	b1c1      	cbz	r1, 8012066 <osMessageQueueGet+0x6e>
 8012034:	b9d4      	cbnz	r4, 801206c <osMessageQueueGet+0x74>
      yield = pdFALSE;
 8012036:	aa02      	add	r2, sp, #8
 8012038:	2300      	movs	r3, #0
 801203a:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801203e:	f001 fc17 	bl	8013870 <xQueueReceiveFromISR>
 8012042:	2801      	cmp	r0, #1
 8012044:	d115      	bne.n	8012072 <osMessageQueueGet+0x7a>
        portYIELD_FROM_ISR (yield);
 8012046:	9b01      	ldr	r3, [sp, #4]
 8012048:	b1b3      	cbz	r3, 8012078 <osMessageQueueGet+0x80>
 801204a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801204e:	4b12      	ldr	r3, [pc, #72]	; (8012098 <osMessageQueueGet+0xa0>)
 8012050:	601a      	str	r2, [r3, #0]
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801205a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801205c:	b002      	add	sp, #8
 801205e:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8012060:	f06f 0003 	mvn.w	r0, #3
 8012064:	e7fa      	b.n	801205c <osMessageQueueGet+0x64>
 8012066:	f06f 0003 	mvn.w	r0, #3
 801206a:	e7f7      	b.n	801205c <osMessageQueueGet+0x64>
 801206c:	f06f 0003 	mvn.w	r0, #3
 8012070:	e7f4      	b.n	801205c <osMessageQueueGet+0x64>
        stat = osErrorResource;
 8012072:	f06f 0002 	mvn.w	r0, #2
 8012076:	e7f1      	b.n	801205c <osMessageQueueGet+0x64>
  stat = osOK;
 8012078:	2000      	movs	r0, #0
 801207a:	e7ef      	b.n	801205c <osMessageQueueGet+0x64>
      stat = osErrorParameter;
 801207c:	f06f 0003 	mvn.w	r0, #3
 8012080:	e7ec      	b.n	801205c <osMessageQueueGet+0x64>
 8012082:	f06f 0003 	mvn.w	r0, #3
 8012086:	e7e9      	b.n	801205c <osMessageQueueGet+0x64>
  stat = osOK;
 8012088:	2000      	movs	r0, #0
 801208a:	e7e7      	b.n	801205c <osMessageQueueGet+0x64>
          stat = osErrorResource;
 801208c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8012090:	e7e4      	b.n	801205c <osMessageQueueGet+0x64>
 8012092:	bf00      	nop
 8012094:	20000828 	.word	0x20000828
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t capacity;

  if (mq == NULL) {
 801209c:	b108      	cbz	r0, 80120a2 <osMessageQueueGetCapacity+0x6>
    capacity = 0U;
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 801209e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80120a0:	4770      	bx	lr
    capacity = 0U;
 80120a2:	2000      	movs	r0, #0
  }

  return (capacity);
}
 80120a4:	4770      	bx	lr

080120a6 <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t size;

  if (mq == NULL) {
 80120a6:	b108      	cbz	r0, 80120ac <osMessageQueueGetMsgSize+0x6>
    size = 0U;
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 80120a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80120aa:	4770      	bx	lr
    size = 0U;
 80120ac:	2000      	movs	r0, #0
  }

  return (size);
}
 80120ae:	4770      	bx	lr

080120b0 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 80120b0:	b1a0      	cbz	r0, 80120dc <osMessageQueueGetCount+0x2c>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80120b2:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120b4:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 80120b8:	b96b      	cbnz	r3, 80120d6 <osMessageQueueGetCount+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ba:	f3ef 8310 	mrs	r3, PRIMASK
 80120be:	b953      	cbnz	r3, 80120d6 <osMessageQueueGetCount+0x26>
 80120c0:	4b07      	ldr	r3, [pc, #28]	; (80120e0 <osMessageQueueGetCount+0x30>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b02      	cmp	r3, #2
 80120c6:	d002      	beq.n	80120ce <osMessageQueueGetCount+0x1e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80120c8:	f001 fc71 	bl	80139ae <uxQueueMessagesWaiting>
 80120cc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120ce:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d0f8      	beq.n	80120c8 <osMessageQueueGetCount+0x18>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80120d6:	f001 fc92 	bl	80139fe <uxQueueMessagesWaitingFromISR>
 80120da:	bd08      	pop	{r3, pc}
    count = 0U;
 80120dc:	2000      	movs	r0, #0
  }

  return ((uint32_t)count);
 80120de:	4770      	bx	lr
 80120e0:	20000828 	.word	0x20000828

080120e4 <osMessageQueueGetSpace>:
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80120e4:	b318      	cbz	r0, 801212e <osMessageQueueGetSpace+0x4a>
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80120e6:	b508      	push	{r3, lr}
 80120e8:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120ea:	f3ef 8205 	mrs	r2, IPSR
    space = 0U;
  }
  else if (IS_IRQ()) {
 80120ee:	b972      	cbnz	r2, 801210e <osMessageQueueGetSpace+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120f0:	f3ef 8210 	mrs	r2, PRIMASK
 80120f4:	b95a      	cbnz	r2, 801210e <osMessageQueueGetSpace+0x2a>
 80120f6:	4a0f      	ldr	r2, [pc, #60]	; (8012134 <osMessageQueueGetSpace+0x50>)
 80120f8:	6812      	ldr	r2, [r2, #0]
 80120fa:	2a02      	cmp	r2, #2
 80120fc:	d003      	beq.n	8012106 <osMessageQueueGetSpace+0x22>
 80120fe:	4618      	mov	r0, r3
    space = mq->uxDummy4[1] - mq->uxDummy4[0];

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8012100:	f001 fc68 	bl	80139d4 <uxQueueSpacesAvailable>
 8012104:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012106:	f3ef 8211 	mrs	r2, BASEPRI
  else if (IS_IRQ()) {
 801210a:	2a00      	cmp	r2, #0
 801210c:	d0f7      	beq.n	80120fe <osMessageQueueGetSpace+0x1a>
	__asm volatile
 801210e:	f3ef 8211 	mrs	r2, BASEPRI
 8012112:	f04f 0150 	mov.w	r1, #80	; 0x50
 8012116:	f381 8811 	msr	BASEPRI, r1
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8012122:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012126:	1ac0      	subs	r0, r0, r3
	__asm volatile
 8012128:	f382 8811 	msr	BASEPRI, r2
 801212c:	bd08      	pop	{r3, pc}
    space = 0U;
 801212e:	2000      	movs	r0, #0
  }

  return (space);
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	20000828 	.word	0x20000828

08012138 <osMessageQueueReset>:
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8012138:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801213a:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 801213e:	b99b      	cbnz	r3, 8012168 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012140:	f3ef 8310 	mrs	r3, PRIMASK
 8012144:	b99b      	cbnz	r3, 801216e <osMessageQueueReset+0x36>
 8012146:	4b0d      	ldr	r3, [pc, #52]	; (801217c <osMessageQueueReset+0x44>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b02      	cmp	r3, #2
 801214c:	d005      	beq.n	801215a <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 801214e:	b188      	cbz	r0, 8012174 <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8012150:	2100      	movs	r1, #0
 8012152:	f000 fe3a 	bl	8012dca <xQueueGenericReset>
    stat = osOK;
 8012156:	2000      	movs	r0, #0
 8012158:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801215a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 801215e:	2b00      	cmp	r3, #0
 8012160:	d0f5      	beq.n	801214e <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8012162:	f06f 0005 	mvn.w	r0, #5
 8012166:	bd08      	pop	{r3, pc}
 8012168:	f06f 0005 	mvn.w	r0, #5
 801216c:	bd08      	pop	{r3, pc}
 801216e:	f06f 0005 	mvn.w	r0, #5
 8012172:	bd08      	pop	{r3, pc}
    stat = osErrorParameter;
 8012174:	f06f 0003 	mvn.w	r0, #3
  }

  return (stat);
}
 8012178:	bd08      	pop	{r3, pc}
 801217a:	bf00      	nop
 801217c:	20000828 	.word	0x20000828

08012180 <osMessageQueueDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012180:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012184:	b9bb      	cbnz	r3, 80121b6 <osMessageQueueDelete+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012186:	f3ef 8310 	mrs	r3, PRIMASK
 801218a:	b9bb      	cbnz	r3, 80121bc <osMessageQueueDelete+0x3c>
 801218c:	4b0e      	ldr	r3, [pc, #56]	; (80121c8 <osMessageQueueDelete+0x48>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b02      	cmp	r3, #2
 8012192:	d009      	beq.n	80121a8 <osMessageQueueDelete+0x28>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8012194:	b1a8      	cbz	r0, 80121c2 <osMessageQueueDelete+0x42>
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8012196:	b510      	push	{r4, lr}
 8012198:	4604      	mov	r4, r0
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 801219a:	f001 fc8d 	bl	8013ab8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vQueueDelete (hQueue);
 801219e:	4620      	mov	r0, r4
 80121a0:	f001 fca0 	bl	8013ae4 <vQueueDelete>
    stat = osOK;
 80121a4:	2000      	movs	r0, #0
 80121a6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121a8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d0f1      	beq.n	8012194 <osMessageQueueDelete+0x14>
    stat = osErrorISR;
 80121b0:	f06f 0005 	mvn.w	r0, #5
 80121b4:	4770      	bx	lr
 80121b6:	f06f 0005 	mvn.w	r0, #5
 80121ba:	4770      	bx	lr
 80121bc:	f06f 0005 	mvn.w	r0, #5
 80121c0:	4770      	bx	lr
    stat = osErrorParameter;
 80121c2:	f06f 0003 	mvn.w	r0, #3
  }
#else
  stat = osError;
#endif

  return (stat);
 80121c6:	4770      	bx	lr
 80121c8:	20000828 	.word	0x20000828

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80121cc:	4770      	bx	lr

080121ce <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80121ce:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80121d0:	4b05      	ldr	r3, [pc, #20]	; (80121e8 <vApplicationGetIdleTaskMemory+0x1a>)
 80121d2:	1d1c      	adds	r4, r3, #4
 80121d4:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80121d6:	3368      	adds	r3, #104	; 0x68
 80121d8:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80121da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121de:	6013      	str	r3, [r2, #0]
}
 80121e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	20000828 	.word	0x20000828

080121ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80121ec:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80121ee:	4b06      	ldr	r3, [pc, #24]	; (8012208 <vApplicationGetTimerTaskMemory+0x1c>)
 80121f0:	f503 648d 	add.w	r4, r3, #1128	; 0x468
 80121f4:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80121f6:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80121fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80121fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012200:	6013      	str	r3, [r2, #0]
}
 8012202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	20000828 	.word	0x20000828

0801220c <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 801220c:	b91a      	cbnz	r2, 8012216 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801220e:	4208      	tst	r0, r1
 8012210:	d106      	bne.n	8012220 <prvTestWaitCondition+0x14>
BaseType_t xWaitConditionMet = pdFALSE;
 8012212:	2000      	movs	r0, #0
 8012214:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012216:	ea31 0300 	bics.w	r3, r1, r0
 801221a:	d003      	beq.n	8012224 <prvTestWaitCondition+0x18>
BaseType_t xWaitConditionMet = pdFALSE;
 801221c:	2000      	movs	r0, #0
 801221e:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 8012220:	2001      	movs	r0, #1
 8012222:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 8012224:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 8012226:	4770      	bx	lr

08012228 <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 8012228:	b180      	cbz	r0, 801224c <xEventGroupCreateStatic+0x24>
	{
 801222a:	b510      	push	{r4, lr}
 801222c:	b082      	sub	sp, #8
 801222e:	4604      	mov	r4, r0
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012230:	2320      	movs	r3, #32
 8012232:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012234:	9b01      	ldr	r3, [sp, #4]
 8012236:	2b20      	cmp	r3, #32
 8012238:	d011      	beq.n	801225e <xEventGroupCreateStatic+0x36>
	__asm volatile
 801223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223e:	f383 8811 	msr	BASEPRI, r3
 8012242:	f3bf 8f6f 	isb	sy
 8012246:	f3bf 8f4f 	dsb	sy
 801224a:	e7fe      	b.n	801224a <xEventGroupCreateStatic+0x22>
 801224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	e7fe      	b.n	801225c <xEventGroupCreateStatic+0x34>
			pxEventBits->uxEventBits = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012264:	f000 f9d4 	bl	8012610 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012268:	2301      	movs	r3, #1
 801226a:	7723      	strb	r3, [r4, #28]
	}
 801226c:	4620      	mov	r0, r4
 801226e:	b002      	add	sp, #8
 8012270:	bd10      	pop	{r4, pc}

08012272 <xEventGroupCreate>:
	{
 8012272:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8012274:	2020      	movs	r0, #32
 8012276:	f000 fc33 	bl	8012ae0 <pvPortMalloc>
		if( pxEventBits != NULL )
 801227a:	4604      	mov	r4, r0
 801227c:	b128      	cbz	r0, 801228a <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 801227e:	2500      	movs	r5, #0
 8012280:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012284:	f000 f9c4 	bl	8012610 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012288:	7725      	strb	r5, [r4, #28]
	}
 801228a:	4620      	mov	r0, r4
 801228c:	bd38      	pop	{r3, r4, r5, pc}

0801228e <xEventGroupWaitBits>:
{
 801228e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012292:	f8dd 9020 	ldr.w	r9, [sp, #32]
	configASSERT( xEventGroup );
 8012296:	b160      	cbz	r0, 80122b2 <xEventGroupWaitBits+0x24>
 8012298:	4606      	mov	r6, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801229a:	f011 4a7f 	ands.w	sl, r1, #4278190080	; 0xff000000
 801229e:	d011      	beq.n	80122c4 <xEventGroupWaitBits+0x36>
 80122a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a4:	f383 8811 	msr	BASEPRI, r3
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	e7fe      	b.n	80122b0 <xEventGroupWaitBits+0x22>
 80122b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	e7fe      	b.n	80122c2 <xEventGroupWaitBits+0x34>
	configASSERT( uxBitsToWaitFor != 0 );
 80122c4:	b941      	cbnz	r1, 80122d8 <xEventGroupWaitBits+0x4a>
 80122c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ca:	f383 8811 	msr	BASEPRI, r3
 80122ce:	f3bf 8f6f 	isb	sy
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	e7fe      	b.n	80122d6 <xEventGroupWaitBits+0x48>
 80122d8:	4698      	mov	r8, r3
 80122da:	4617      	mov	r7, r2
 80122dc:	460d      	mov	r5, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122de:	f003 f949 	bl	8015574 <xTaskGetSchedulerState>
 80122e2:	b968      	cbnz	r0, 8012300 <xEventGroupWaitBits+0x72>
 80122e4:	f1b9 0f00 	cmp.w	r9, #0
 80122e8:	d10c      	bne.n	8012304 <xEventGroupWaitBits+0x76>
 80122ea:	2301      	movs	r3, #1
 80122ec:	b963      	cbnz	r3, 8012308 <xEventGroupWaitBits+0x7a>
 80122ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	e7fe      	b.n	80122fe <xEventGroupWaitBits+0x70>
 8012300:	2301      	movs	r3, #1
 8012302:	e7f3      	b.n	80122ec <xEventGroupWaitBits+0x5e>
 8012304:	2300      	movs	r3, #0
 8012306:	e7f1      	b.n	80122ec <xEventGroupWaitBits+0x5e>
	vTaskSuspendAll();
 8012308:	f002 fc80 	bl	8014c0c <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801230c:	6834      	ldr	r4, [r6, #0]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801230e:	4642      	mov	r2, r8
 8012310:	4629      	mov	r1, r5
 8012312:	4620      	mov	r0, r4
 8012314:	f7ff ff7a 	bl	801220c <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8012318:	b358      	cbz	r0, 8012372 <xEventGroupWaitBits+0xe4>
			if( xClearOnExit != pdFALSE )
 801231a:	b117      	cbz	r7, 8012322 <xEventGroupWaitBits+0x94>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801231c:	ea24 0305 	bic.w	r3, r4, r5
 8012320:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 8012322:	f002 fd31 	bl	8014d88 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8012326:	f1ba 0f00 	cmp.w	sl, #0
 801232a:	d01f      	beq.n	801236c <xEventGroupWaitBits+0xde>
		if( xAlreadyYielded == pdFALSE )
 801232c:	b938      	cbnz	r0, 801233e <xEventGroupWaitBits+0xb0>
			portYIELD_WITHIN_API();
 801232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012332:	4b1b      	ldr	r3, [pc, #108]	; (80123a0 <xEventGroupWaitBits+0x112>)
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 801233e:	f003 faf3 	bl	8015928 <uxTaskResetEventItemValue>
 8012342:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012344:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8012348:	d10e      	bne.n	8012368 <xEventGroupWaitBits+0xda>
			taskENTER_CRITICAL();
 801234a:	f000 fa1d 	bl	8012788 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 801234e:	6834      	ldr	r4, [r6, #0]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012350:	4642      	mov	r2, r8
 8012352:	4629      	mov	r1, r5
 8012354:	4620      	mov	r0, r4
 8012356:	f7ff ff59 	bl	801220c <prvTestWaitCondition>
 801235a:	b118      	cbz	r0, 8012364 <xEventGroupWaitBits+0xd6>
					if( xClearOnExit != pdFALSE )
 801235c:	b117      	cbz	r7, 8012364 <xEventGroupWaitBits+0xd6>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801235e:	ea24 0505 	bic.w	r5, r4, r5
 8012362:	6035      	str	r5, [r6, #0]
			taskEXIT_CRITICAL();
 8012364:	f000 fa32 	bl	80127cc <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012368:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
 801236c:	4620      	mov	r0, r4
 801236e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012372:	f1b9 0f00 	cmp.w	r9, #0
 8012376:	d011      	beq.n	801239c <xEventGroupWaitBits+0x10e>
			if( xClearOnExit != pdFALSE )
 8012378:	b96f      	cbnz	r7, 8012396 <xEventGroupWaitBits+0x108>
EventBits_t uxReturn, uxControlBits = 0;
 801237a:	2100      	movs	r1, #0
			if( xWaitForAllBits != pdFALSE )
 801237c:	f1b8 0f00 	cmp.w	r8, #0
 8012380:	d001      	beq.n	8012386 <xEventGroupWaitBits+0xf8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012382:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012386:	464a      	mov	r2, r9
 8012388:	4329      	orrs	r1, r5
 801238a:	1d30      	adds	r0, r6, #4
 801238c:	f002 fed4 	bl	8015138 <vTaskPlaceOnUnorderedEventList>
 8012390:	46ca      	mov	sl, r9
			uxReturn = 0;
 8012392:	2400      	movs	r4, #0
 8012394:	e7c5      	b.n	8012322 <xEventGroupWaitBits+0x94>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012396:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 801239a:	e7ef      	b.n	801237c <xEventGroupWaitBits+0xee>
 801239c:	46ca      	mov	sl, r9
 801239e:	e7c0      	b.n	8012322 <xEventGroupWaitBits+0x94>
 80123a0:	e000ed04 	.word	0xe000ed04

080123a4 <xEventGroupClearBits>:
	configASSERT( xEventGroup );
 80123a4:	b168      	cbz	r0, 80123c2 <xEventGroupClearBits+0x1e>
{
 80123a6:	b570      	push	{r4, r5, r6, lr}
 80123a8:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80123aa:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80123ae:	d011      	beq.n	80123d4 <xEventGroupClearBits+0x30>
 80123b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	e7fe      	b.n	80123c0 <xEventGroupClearBits+0x1c>
 80123c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c6:	f383 8811 	msr	BASEPRI, r3
 80123ca:	f3bf 8f6f 	isb	sy
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	e7fe      	b.n	80123d2 <xEventGroupClearBits+0x2e>
 80123d4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 80123d6:	f000 f9d7 	bl	8012788 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 80123da:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80123dc:	ea26 0404 	bic.w	r4, r6, r4
 80123e0:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
 80123e2:	f000 f9f3 	bl	80127cc <vPortExitCritical>
}
 80123e6:	4630      	mov	r0, r6
 80123e8:	bd70      	pop	{r4, r5, r6, pc}

080123ea <vEventGroupClearBitsCallback>:
{
 80123ea:	b508      	push	{r3, lr}
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80123ec:	f7ff ffda 	bl	80123a4 <xEventGroupClearBits>
 80123f0:	bd08      	pop	{r3, pc}

080123f2 <xEventGroupClearBitsFromISR>:
	{
 80123f2:	b508      	push	{r3, lr}
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80123f4:	2300      	movs	r3, #0
 80123f6:	460a      	mov	r2, r1
 80123f8:	4601      	mov	r1, r0
 80123fa:	4802      	ldr	r0, [pc, #8]	; (8012404 <xEventGroupClearBitsFromISR+0x12>)
 80123fc:	f003 ffb8 	bl	8016370 <xTimerPendFunctionCallFromISR>
	}
 8012400:	bd08      	pop	{r3, pc}
 8012402:	bf00      	nop
 8012404:	080123eb 	.word	0x080123eb

08012408 <xEventGroupGetBitsFromISR>:
	__asm volatile
 8012408:	f3ef 8311 	mrs	r3, BASEPRI
 801240c:	f04f 0250 	mov.w	r2, #80	; 0x50
 8012410:	f382 8811 	msr	BASEPRI, r2
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	f3bf 8f4f 	dsb	sy
		uxReturn = pxEventBits->uxEventBits;
 801241c:	6800      	ldr	r0, [r0, #0]
	__asm volatile
 801241e:	f383 8811 	msr	BASEPRI, r3
}
 8012422:	4770      	bx	lr

08012424 <xEventGroupSetBits>:
{
 8012424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 8012426:	b160      	cbz	r0, 8012442 <xEventGroupSetBits+0x1e>
 8012428:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801242a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 801242e:	d011      	beq.n	8012454 <xEventGroupSetBits+0x30>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	e7fe      	b.n	8012440 <xEventGroupSetBits+0x1c>
 8012442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	e7fe      	b.n	8012452 <xEventGroupSetBits+0x2e>
 8012454:	460d      	mov	r5, r1
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012456:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 801245a:	f002 fbd7 	bl	8014c0c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 801245e:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012460:	6823      	ldr	r3, [r4, #0]
 8012462:	432b      	orrs	r3, r5
 8012464:	6023      	str	r3, [r4, #0]
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012466:	2500      	movs	r5, #0
		while( pxListItem != pxListEnd )
 8012468:	e00f      	b.n	801248a <xEventGroupSetBits+0x66>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	ea32 0303 	bics.w	r3, r2, r3
 8012470:	d003      	beq.n	801247a <xEventGroupSetBits+0x56>
			xMatchFound = pdFALSE;
 8012472:	2300      	movs	r3, #0
 8012474:	e016      	b.n	80124a4 <xEventGroupSetBits+0x80>
					xMatchFound = pdTRUE;
 8012476:	2301      	movs	r3, #1
 8012478:	e014      	b.n	80124a4 <xEventGroupSetBits+0x80>
				xMatchFound = pdTRUE;
 801247a:	2301      	movs	r3, #1
 801247c:	e012      	b.n	80124a4 <xEventGroupSetBits+0x80>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801247e:	6821      	ldr	r1, [r4, #0]
 8012480:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8012484:	f002 fee8 	bl	8015258 <vTaskRemoveFromUnorderedEventList>
			xMatchFound = pdFALSE;
 8012488:	4638      	mov	r0, r7
		while( pxListItem != pxListEnd )
 801248a:	42b0      	cmp	r0, r6
 801248c:	d011      	beq.n	80124b2 <xEventGroupSetBits+0x8e>
			pxNext = listGET_NEXT( pxListItem );
 801248e:	6847      	ldr	r7, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012490:	6801      	ldr	r1, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012492:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012496:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 801249a:	d1e6      	bne.n	801246a <xEventGroupSetBits+0x46>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801249c:	6823      	ldr	r3, [r4, #0]
 801249e:	421a      	tst	r2, r3
 80124a0:	d1e9      	bne.n	8012476 <xEventGroupSetBits+0x52>
			xMatchFound = pdFALSE;
 80124a2:	2300      	movs	r3, #0
			if( xMatchFound != pdFALSE )
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d0ef      	beq.n	8012488 <xEventGroupSetBits+0x64>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80124a8:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80124ac:	d0e7      	beq.n	801247e <xEventGroupSetBits+0x5a>
					uxBitsToClear |= uxBitsWaitedFor;
 80124ae:	4315      	orrs	r5, r2
 80124b0:	e7e5      	b.n	801247e <xEventGroupSetBits+0x5a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	ea23 0305 	bic.w	r3, r3, r5
 80124b8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80124ba:	f002 fc65 	bl	8014d88 <xTaskResumeAll>
}
 80124be:	6820      	ldr	r0, [r4, #0]
 80124c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124c2 <xEventGroupSync>:
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80124c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80124c6:	d008      	beq.n	80124da <xEventGroupSync+0x18>
 80124c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124cc:	f383 8811 	msr	BASEPRI, r3
 80124d0:	f3bf 8f6f 	isb	sy
 80124d4:	f3bf 8f4f 	dsb	sy
 80124d8:	e7fe      	b.n	80124d8 <xEventGroupSync+0x16>
{
 80124da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124de:	4606      	mov	r6, r0
 80124e0:	4688      	mov	r8, r1
 80124e2:	4615      	mov	r5, r2
 80124e4:	461f      	mov	r7, r3
	configASSERT( uxBitsToWaitFor != 0 );
 80124e6:	b942      	cbnz	r2, 80124fa <xEventGroupSync+0x38>
 80124e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	e7fe      	b.n	80124f8 <xEventGroupSync+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124fa:	f003 f83b 	bl	8015574 <xTaskGetSchedulerState>
 80124fe:	b958      	cbnz	r0, 8012518 <xEventGroupSync+0x56>
 8012500:	b967      	cbnz	r7, 801251c <xEventGroupSync+0x5a>
 8012502:	2301      	movs	r3, #1
 8012504:	b963      	cbnz	r3, 8012520 <xEventGroupSync+0x5e>
 8012506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250a:	f383 8811 	msr	BASEPRI, r3
 801250e:	f3bf 8f6f 	isb	sy
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	e7fe      	b.n	8012516 <xEventGroupSync+0x54>
 8012518:	2301      	movs	r3, #1
 801251a:	e7f3      	b.n	8012504 <xEventGroupSync+0x42>
 801251c:	2300      	movs	r3, #0
 801251e:	e7f1      	b.n	8012504 <xEventGroupSync+0x42>
	vTaskSuspendAll();
 8012520:	f002 fb74 	bl	8014c0c <vTaskSuspendAll>
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8012524:	6834      	ldr	r4, [r6, #0]
		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8012526:	4641      	mov	r1, r8
 8012528:	4630      	mov	r0, r6
 801252a:	f7ff ff7b 	bl	8012424 <xEventGroupSetBits>
		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801252e:	ea44 0408 	orr.w	r4, r4, r8
 8012532:	ea35 0304 	bics.w	r3, r5, r4
 8012536:	d126      	bne.n	8012586 <xEventGroupSync+0xc4>
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012538:	6833      	ldr	r3, [r6, #0]
 801253a:	ea23 0305 	bic.w	r3, r3, r5
 801253e:	6033      	str	r3, [r6, #0]
			xTicksToWait = 0;
 8012540:	2700      	movs	r7, #0
	xAlreadyYielded = xTaskResumeAll();
 8012542:	f002 fc21 	bl	8014d88 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8012546:	b1df      	cbz	r7, 8012580 <xEventGroupSync+0xbe>
		if( xAlreadyYielded == pdFALSE )
 8012548:	b938      	cbnz	r0, 801255a <xEventGroupSync+0x98>
			portYIELD_WITHIN_API();
 801254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801254e:	4b13      	ldr	r3, [pc, #76]	; (801259c <xEventGroupSync+0xda>)
 8012550:	601a      	str	r2, [r3, #0]
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 801255a:	f003 f9e5 	bl	8015928 <uxTaskResetEventItemValue>
 801255e:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012560:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8012564:	d10a      	bne.n	801257c <xEventGroupSync+0xba>
			taskENTER_CRITICAL();
 8012566:	f000 f90f 	bl	8012788 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 801256a:	6834      	ldr	r4, [r6, #0]
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801256c:	ea35 0304 	bics.w	r3, r5, r4
 8012570:	d102      	bne.n	8012578 <xEventGroupSync+0xb6>
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012572:	ea24 0505 	bic.w	r5, r4, r5
 8012576:	6035      	str	r5, [r6, #0]
			taskEXIT_CRITICAL();
 8012578:	f000 f928 	bl	80127cc <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801257c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
 8012580:	4620      	mov	r0, r4
 8012582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xTicksToWait != ( TickType_t ) 0 )
 8012586:	b13f      	cbz	r7, 8012598 <xEventGroupSync+0xd6>
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8012588:	463a      	mov	r2, r7
 801258a:	f045 61a0 	orr.w	r1, r5, #83886080	; 0x5000000
 801258e:	1d30      	adds	r0, r6, #4
 8012590:	f002 fdd2 	bl	8015138 <vTaskPlaceOnUnorderedEventList>
				uxReturn = 0;
 8012594:	2400      	movs	r4, #0
 8012596:	e7d4      	b.n	8012542 <xEventGroupSync+0x80>
				uxReturn = pxEventBits->uxEventBits;
 8012598:	6834      	ldr	r4, [r6, #0]
 801259a:	e7d2      	b.n	8012542 <xEventGroupSync+0x80>
 801259c:	e000ed04 	.word	0xe000ed04

080125a0 <vEventGroupSetBitsCallback>:
{
 80125a0:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80125a2:	f7ff ff3f 	bl	8012424 <xEventGroupSetBits>
 80125a6:	bd08      	pop	{r3, pc}

080125a8 <vEventGroupDelete>:
{
 80125a8:	b510      	push	{r4, lr}
 80125aa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80125ac:	f002 fb2e 	bl	8014c0c <vTaskSuspendAll>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80125b0:	6863      	ldr	r3, [r4, #4]
 80125b2:	b193      	cbz	r3, 80125da <vEventGroupDelete+0x32>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80125b4:	6920      	ldr	r0, [r4, #16]
 80125b6:	f104 030c 	add.w	r3, r4, #12
 80125ba:	4298      	cmp	r0, r3
 80125bc:	d004      	beq.n	80125c8 <vEventGroupDelete+0x20>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80125be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80125c2:	f002 fe49 	bl	8015258 <vTaskRemoveFromUnorderedEventList>
 80125c6:	e7f3      	b.n	80125b0 <vEventGroupDelete+0x8>
 80125c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	e7fe      	b.n	80125d8 <vEventGroupDelete+0x30>
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80125da:	7f23      	ldrb	r3, [r4, #28]
 80125dc:	b113      	cbz	r3, 80125e4 <vEventGroupDelete+0x3c>
	( void ) xTaskResumeAll();
 80125de:	f002 fbd3 	bl	8014d88 <xTaskResumeAll>
 80125e2:	bd10      	pop	{r4, pc}
				vPortFree( pxEventBits );
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 fb01 	bl	8012bec <vPortFree>
 80125ea:	e7f8      	b.n	80125de <vEventGroupDelete+0x36>

080125ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80125ec:	b508      	push	{r3, lr}
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80125ee:	4613      	mov	r3, r2
 80125f0:	460a      	mov	r2, r1
 80125f2:	4601      	mov	r1, r0
 80125f4:	4801      	ldr	r0, [pc, #4]	; (80125fc <xEventGroupSetBitsFromISR+0x10>)
 80125f6:	f003 febb 	bl	8016370 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80125fa:	bd08      	pop	{r3, pc}
 80125fc:	080125a1 	.word	0x080125a1

08012600 <uxEventGroupGetNumber>:
	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;

		if( xEventGroup == NULL )
 8012600:	b108      	cbz	r0, 8012606 <uxEventGroupGetNumber+0x6>
		{
			xReturn = 0;
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8012602:	6980      	ldr	r0, [r0, #24]
 8012604:	4770      	bx	lr
			xReturn = 0;
 8012606:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8012608:	4770      	bx	lr

0801260a <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber;
 801260a:	6181      	str	r1, [r0, #24]
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop

08012610 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012610:	f100 0308 	add.w	r3, r0, #8
 8012614:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801261a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801261c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801261e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012620:	2300      	movs	r3, #0
 8012622:	6003      	str	r3, [r0, #0]
 8012624:	4770      	bx	lr

08012626 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012626:	2300      	movs	r3, #0
 8012628:	6103      	str	r3, [r0, #16]
 801262a:	4770      	bx	lr

0801262c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801262c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801262e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012630:	689a      	ldr	r2, [r3, #8]
 8012632:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012634:	689a      	ldr	r2, [r3, #8]
 8012636:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012638:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801263a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801263c:	6803      	ldr	r3, [r0, #0]
 801263e:	3301      	adds	r3, #1
 8012640:	6003      	str	r3, [r0, #0]
 8012642:	4770      	bx	lr

08012644 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012644:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012646:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012648:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 801264c:	d002      	beq.n	8012654 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801264e:	f100 0208 	add.w	r2, r0, #8
 8012652:	e002      	b.n	801265a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8012654:	6902      	ldr	r2, [r0, #16]
 8012656:	e004      	b.n	8012662 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012658:	461a      	mov	r2, r3
 801265a:	6853      	ldr	r3, [r2, #4]
 801265c:	681c      	ldr	r4, [r3, #0]
 801265e:	42a5      	cmp	r5, r4
 8012660:	d2fa      	bcs.n	8012658 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012662:	6853      	ldr	r3, [r2, #4]
 8012664:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012666:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012668:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801266a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801266c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801266e:	6803      	ldr	r3, [r0, #0]
 8012670:	3301      	adds	r3, #1
 8012672:	6003      	str	r3, [r0, #0]
}
 8012674:	bc30      	pop	{r4, r5}
 8012676:	4770      	bx	lr

08012678 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012678:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801267a:	6842      	ldr	r2, [r0, #4]
 801267c:	6881      	ldr	r1, [r0, #8]
 801267e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012680:	6882      	ldr	r2, [r0, #8]
 8012682:	6841      	ldr	r1, [r0, #4]
 8012684:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	4290      	cmp	r0, r2
 801268a:	d006      	beq.n	801269a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801268c:	2200      	movs	r2, #0
 801268e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	3a01      	subs	r2, #1
 8012694:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012696:	6818      	ldr	r0, [r3, #0]
}
 8012698:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801269a:	6882      	ldr	r2, [r0, #8]
 801269c:	605a      	str	r2, [r3, #4]
 801269e:	e7f5      	b.n	801268c <uxListRemove+0x14>

080126a0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126a6:	4b0d      	ldr	r3, [pc, #52]	; (80126dc <prvTaskExitError+0x3c>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126ae:	d008      	beq.n	80126c2 <prvTaskExitError+0x22>
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	e7fe      	b.n	80126c0 <prvTaskExitError+0x20>
 80126c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c6:	f383 8811 	msr	BASEPRI, r3
 80126ca:	f3bf 8f6f 	isb	sy
 80126ce:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126d2:	9b01      	ldr	r3, [sp, #4]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d0fc      	beq.n	80126d2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126d8:	b002      	add	sp, #8
 80126da:	4770      	bx	lr
 80126dc:	20000124 	.word	0x20000124

080126e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80126e0:	48d1      	ldr	r0, [pc, #836]	; (8012a28 <vPortValidateInterruptPriority+0x58>)
 80126e2:	6800      	ldr	r0, [r0, #0]
 80126e4:	6800      	ldr	r0, [r0, #0]
 80126e6:	f380 8808 	msr	MSP, r0
 80126ea:	f04f 0000 	mov.w	r0, #0
 80126ee:	f380 8814 	msr	CONTROL, r0
 80126f2:	b662      	cpsie	i
 80126f4:	b661      	cpsie	f
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	f3bf 8f6f 	isb	sy
 80126fe:	df00      	svc	0
 8012700:	bf00      	nop

08012702 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012702:	f8df 0328 	ldr.w	r0, [pc, #808]	; 8012a2c <vPortValidateInterruptPriority+0x5c>
 8012706:	6801      	ldr	r1, [r0, #0]
 8012708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801270c:	6001      	str	r1, [r0, #0]
 801270e:	4770      	bx	lr

08012710 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012714:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012718:	f021 0101 	bic.w	r1, r1, #1
 801271c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012720:	4b05      	ldr	r3, [pc, #20]	; (8012738 <pxPortInitialiseStack+0x28>)
 8012722:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012726:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801272a:	f06f 0302 	mvn.w	r3, #2
 801272e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8012732:	3844      	subs	r0, #68	; 0x44
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	080126a1 	.word	0x080126a1

0801273c <SVC_Handler>:
	__asm volatile (
 801273c:	4b08      	ldr	r3, [pc, #32]	; (8012760 <pxCurrentTCBConst2>)
 801273e:	6819      	ldr	r1, [r3, #0]
 8012740:	6808      	ldr	r0, [r1, #0]
 8012742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012746:	f380 8809 	msr	PSP, r0
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f04f 0000 	mov.w	r0, #0
 8012752:	f380 8811 	msr	BASEPRI, r0
 8012756:	4770      	bx	lr
 8012758:	f3af 8000 	nop.w
 801275c:	f3af 8000 	nop.w

08012760 <pxCurrentTCBConst2>:
 8012760:	200059e8 	.word	0x200059e8

08012764 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
 8012764:	4b07      	ldr	r3, [pc, #28]	; (8012784 <vPortEndScheduler+0x20>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801276c:	d008      	beq.n	8012780 <vPortEndScheduler+0x1c>
 801276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012772:	f383 8811 	msr	BASEPRI, r3
 8012776:	f3bf 8f6f 	isb	sy
 801277a:	f3bf 8f4f 	dsb	sy
 801277e:	e7fe      	b.n	801277e <vPortEndScheduler+0x1a>
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	20000124 	.word	0x20000124

08012788 <vPortEnterCritical>:
 8012788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278c:	f383 8811 	msr	BASEPRI, r3
 8012790:	f3bf 8f6f 	isb	sy
 8012794:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012798:	4a0a      	ldr	r2, [pc, #40]	; (80127c4 <vPortEnterCritical+0x3c>)
 801279a:	6813      	ldr	r3, [r2, #0]
 801279c:	3301      	adds	r3, #1
 801279e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d10d      	bne.n	80127c0 <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80127a4:	4b08      	ldr	r3, [pc, #32]	; (80127c8 <vPortEnterCritical+0x40>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80127ac:	d008      	beq.n	80127c0 <vPortEnterCritical+0x38>
 80127ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	e7fe      	b.n	80127be <vPortEnterCritical+0x36>
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	20000124 	.word	0x20000124
 80127c8:	e000ed04 	.word	0xe000ed04

080127cc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80127cc:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <vPortExitCritical+0x28>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	b943      	cbnz	r3, 80127e4 <vPortExitCritical+0x18>
 80127d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d6:	f383 8811 	msr	BASEPRI, r3
 80127da:	f3bf 8f6f 	isb	sy
 80127de:	f3bf 8f4f 	dsb	sy
 80127e2:	e7fe      	b.n	80127e2 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80127e4:	3b01      	subs	r3, #1
 80127e6:	4a03      	ldr	r2, [pc, #12]	; (80127f4 <vPortExitCritical+0x28>)
 80127e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80127ea:	b90b      	cbnz	r3, 80127f0 <vPortExitCritical+0x24>
	__asm volatile
 80127ec:	f383 8811 	msr	BASEPRI, r3
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	20000124 	.word	0x20000124

080127f8 <PendSV_Handler>:
	__asm volatile
 80127f8:	f3ef 8009 	mrs	r0, PSP
 80127fc:	f3bf 8f6f 	isb	sy
 8012800:	4b17      	ldr	r3, [pc, #92]	; (8012860 <pxCurrentTCBConst>)
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	f01e 0f10 	tst.w	lr, #16
 8012808:	bf08      	it	eq
 801280a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801280e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012812:	6010      	str	r0, [r2, #0]
 8012814:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012818:	f04f 0050 	mov.w	r0, #80	; 0x50
 801281c:	f380 8811 	msr	BASEPRI, r0
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	f3bf 8f6f 	isb	sy
 8012828:	f002 fba6 	bl	8014f78 <vTaskSwitchContext>
 801282c:	f04f 0000 	mov.w	r0, #0
 8012830:	f380 8811 	msr	BASEPRI, r0
 8012834:	bc09      	pop	{r0, r3}
 8012836:	6819      	ldr	r1, [r3, #0]
 8012838:	6808      	ldr	r0, [r1, #0]
 801283a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283e:	f01e 0f10 	tst.w	lr, #16
 8012842:	bf08      	it	eq
 8012844:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012848:	f380 8809 	msr	PSP, r0
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop
 8012854:	f3af 8000 	nop.w
 8012858:	f3af 8000 	nop.w
 801285c:	f3af 8000 	nop.w

08012860 <pxCurrentTCBConst>:
 8012860:	200059e8 	.word	0x200059e8

08012864 <SysTick_Handler>:
{
 8012864:	b508      	push	{r3, lr}
	__asm volatile
 8012866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286a:	f383 8811 	msr	BASEPRI, r3
 801286e:	f3bf 8f6f 	isb	sy
 8012872:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012876:	f002 f9fd 	bl	8014c74 <xTaskIncrementTick>
 801287a:	b118      	cbz	r0, 8012884 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012880:	4b02      	ldr	r3, [pc, #8]	; (801288c <SysTick_Handler+0x28>)
 8012882:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012884:	2300      	movs	r3, #0
 8012886:	f383 8811 	msr	BASEPRI, r3
 801288a:	bd08      	pop	{r3, pc}
 801288c:	e000ed04 	.word	0xe000ed04

08012890 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012890:	4a08      	ldr	r2, [pc, #32]	; (80128b4 <vPortSetupTimerInterrupt+0x24>)
 8012892:	2300      	movs	r3, #0
 8012894:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012896:	4908      	ldr	r1, [pc, #32]	; (80128b8 <vPortSetupTimerInterrupt+0x28>)
 8012898:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801289a:	4b08      	ldr	r3, [pc, #32]	; (80128bc <vPortSetupTimerInterrupt+0x2c>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	4908      	ldr	r1, [pc, #32]	; (80128c0 <vPortSetupTimerInterrupt+0x30>)
 80128a0:	fba1 1303 	umull	r1, r3, r1, r3
 80128a4:	099b      	lsrs	r3, r3, #6
 80128a6:	3b01      	subs	r3, #1
 80128a8:	4906      	ldr	r1, [pc, #24]	; (80128c4 <vPortSetupTimerInterrupt+0x34>)
 80128aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80128ac:	2307      	movs	r3, #7
 80128ae:	6013      	str	r3, [r2, #0]
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	e000e010 	.word	0xe000e010
 80128b8:	e000e018 	.word	0xe000e018
 80128bc:	20000008 	.word	0x20000008
 80128c0:	10624dd3 	.word	0x10624dd3
 80128c4:	e000e014 	.word	0xe000e014

080128c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80128c8:	4b39      	ldr	r3, [pc, #228]	; (80129b0 <xPortStartScheduler+0xe8>)
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	4b39      	ldr	r3, [pc, #228]	; (80129b4 <xPortStartScheduler+0xec>)
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d108      	bne.n	80128e4 <xPortStartScheduler+0x1c>
	__asm volatile
 80128d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d6:	f383 8811 	msr	BASEPRI, r3
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	e7fe      	b.n	80128e2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80128e4:	4b32      	ldr	r3, [pc, #200]	; (80129b0 <xPortStartScheduler+0xe8>)
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	4b33      	ldr	r3, [pc, #204]	; (80129b8 <xPortStartScheduler+0xf0>)
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d108      	bne.n	8012900 <xPortStartScheduler+0x38>
 80128ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f2:	f383 8811 	msr	BASEPRI, r3
 80128f6:	f3bf 8f6f 	isb	sy
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	e7fe      	b.n	80128fe <xPortStartScheduler+0x36>
{
 8012900:	b510      	push	{r4, lr}
 8012902:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012904:	4b2d      	ldr	r3, [pc, #180]	; (80129bc <xPortStartScheduler+0xf4>)
 8012906:	781a      	ldrb	r2, [r3, #0]
 8012908:	b2d2      	uxtb	r2, r2
 801290a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801290c:	22ff      	movs	r2, #255	; 0xff
 801290e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	b2db      	uxtb	r3, r3
 8012914:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012918:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801291c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012920:	4a27      	ldr	r2, [pc, #156]	; (80129c0 <xPortStartScheduler+0xf8>)
 8012922:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012924:	2307      	movs	r3, #7
 8012926:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012928:	e009      	b.n	801293e <xPortStartScheduler+0x76>
			ulMaxPRIGROUPValue--;
 801292a:	4a25      	ldr	r2, [pc, #148]	; (80129c0 <xPortStartScheduler+0xf8>)
 801292c:	6853      	ldr	r3, [r2, #4]
 801292e:	3b01      	subs	r3, #1
 8012930:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012932:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	b2db      	uxtb	r3, r3
 801293a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801293e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012942:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012946:	d1f0      	bne.n	801292a <xPortStartScheduler+0x62>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012948:	4b1d      	ldr	r3, [pc, #116]	; (80129c0 <xPortStartScheduler+0xf8>)
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	2b03      	cmp	r3, #3
 801294e:	d008      	beq.n	8012962 <xPortStartScheduler+0x9a>
 8012950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	e7fe      	b.n	8012960 <xPortStartScheduler+0x98>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012962:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012968:	4a15      	ldr	r2, [pc, #84]	; (80129c0 <xPortStartScheduler+0xf8>)
 801296a:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801296c:	9b01      	ldr	r3, [sp, #4]
 801296e:	b2db      	uxtb	r3, r3
 8012970:	4a12      	ldr	r2, [pc, #72]	; (80129bc <xPortStartScheduler+0xf4>)
 8012972:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012974:	4b13      	ldr	r3, [pc, #76]	; (80129c4 <xPortStartScheduler+0xfc>)
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801297c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8012984:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8012986:	f7ff ff83 	bl	8012890 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801298a:	2400      	movs	r4, #0
 801298c:	4b0e      	ldr	r3, [pc, #56]	; (80129c8 <xPortStartScheduler+0x100>)
 801298e:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012990:	f7ff feb7 	bl	8012702 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012994:	4a0d      	ldr	r2, [pc, #52]	; (80129cc <xPortStartScheduler+0x104>)
 8012996:	6813      	ldr	r3, [r2, #0]
 8012998:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801299c:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801299e:	f7ff fe9f 	bl	80126e0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80129a2:	f002 fae9 	bl	8014f78 <vTaskSwitchContext>
	prvTaskExitError();
 80129a6:	f7ff fe7b 	bl	80126a0 <prvTaskExitError>
}
 80129aa:	4620      	mov	r0, r4
 80129ac:	b002      	add	sp, #8
 80129ae:	bd10      	pop	{r4, pc}
 80129b0:	e000ed00 	.word	0xe000ed00
 80129b4:	410fc271 	.word	0x410fc271
 80129b8:	410fc270 	.word	0x410fc270
 80129bc:	e000e400 	.word	0xe000e400
 80129c0:	200014f4 	.word	0x200014f4
 80129c4:	e000ed20 	.word	0xe000ed20
 80129c8:	20000124 	.word	0x20000124
 80129cc:	e000ef34 	.word	0xe000ef34

080129d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80129d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80129d4:	2b0f      	cmp	r3, #15
 80129d6:	d90f      	bls.n	80129f8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80129d8:	4a10      	ldr	r2, [pc, #64]	; (8012a1c <vPortValidateInterruptPriority+0x4c>)
 80129da:	5c9b      	ldrb	r3, [r3, r2]
 80129dc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80129de:	4a10      	ldr	r2, [pc, #64]	; (8012a20 <vPortValidateInterruptPriority+0x50>)
 80129e0:	7812      	ldrb	r2, [r2, #0]
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d208      	bcs.n	80129f8 <vPortValidateInterruptPriority+0x28>
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
 80129f6:	e7fe      	b.n	80129f6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80129f8:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <vPortValidateInterruptPriority+0x54>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a00:	4a07      	ldr	r2, [pc, #28]	; (8012a20 <vPortValidateInterruptPriority+0x50>)
 8012a02:	6852      	ldr	r2, [r2, #4]
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d908      	bls.n	8012a1a <vPortValidateInterruptPriority+0x4a>
 8012a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0c:	f383 8811 	msr	BASEPRI, r3
 8012a10:	f3bf 8f6f 	isb	sy
 8012a14:	f3bf 8f4f 	dsb	sy
 8012a18:	e7fe      	b.n	8012a18 <vPortValidateInterruptPriority+0x48>
 8012a1a:	4770      	bx	lr
 8012a1c:	e000e3f0 	.word	0xe000e3f0
 8012a20:	200014f4 	.word	0x200014f4
 8012a24:	e000ed0c 	.word	0xe000ed0c
 8012a28:	e000ed08 	.word	0xe000ed08
 8012a2c:	e000ed88 	.word	0xe000ed88

08012a30 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a30:	4a13      	ldr	r2, [pc, #76]	; (8012a80 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a32:	f012 0f07 	tst.w	r2, #7
 8012a36:	d020      	beq.n	8012a7a <prvHeapInit+0x4a>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a38:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a3a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a3e:	f5c1 4380 	rsb	r3, r1, #16384	; 0x4000
 8012a42:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a44:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a46:	490f      	ldr	r1, [pc, #60]	; (8012a84 <prvHeapInit+0x54>)
 8012a48:	f8c1 2d18 	str.w	r2, [r1, #3352]	; 0xd18
	xStart.xBlockSize = ( size_t ) 0;
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	f8c1 0d1c 	str.w	r0, [r1, #3356]	; 0xd1c

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a52:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012a54:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a56:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8012a5a:	f8c1 3d20 	str.w	r3, [r1, #3360]	; 0xd20
	pxEnd->xBlockSize = 0;
 8012a5e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a60:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a62:	1a98      	subs	r0, r3, r2
 8012a64:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a66:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a68:	f8c1 0d24 	str.w	r0, [r1, #3364]	; 0xd24
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a6c:	f8c1 0d28 	str.w	r0, [r1, #3368]	; 0xd28

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a74:	f8c1 3d2c 	str.w	r3, [r1, #3372]	; 0xd2c
 8012a78:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a7e:	e7e2      	b.n	8012a46 <prvHeapInit+0x16>
 8012a80:	200014fc 	.word	0x200014fc
 8012a84:	200047e4 	.word	0x200047e4

08012a88 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a88:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a8a:	4b13      	ldr	r3, [pc, #76]	; (8012ad8 <prvInsertBlockIntoFreeList+0x50>)
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	4282      	cmp	r2, r0
 8012a90:	d31c      	bcc.n	8012acc <prvInsertBlockIntoFreeList+0x44>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a92:	6859      	ldr	r1, [r3, #4]
 8012a94:	185c      	adds	r4, r3, r1
 8012a96:	42a0      	cmp	r0, r4
 8012a98:	d103      	bne.n	8012aa2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012a9a:	6840      	ldr	r0, [r0, #4]
 8012a9c:	4401      	add	r1, r0
 8012a9e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012aa0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012aa2:	6841      	ldr	r1, [r0, #4]
 8012aa4:	1844      	adds	r4, r0, r1
 8012aa6:	42a2      	cmp	r2, r4
 8012aa8:	d114      	bne.n	8012ad4 <prvInsertBlockIntoFreeList+0x4c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012aaa:	4c0c      	ldr	r4, [pc, #48]	; (8012adc <prvInsertBlockIntoFreeList+0x54>)
 8012aac:	f8d4 4d20 	ldr.w	r4, [r4, #3360]	; 0xd20
 8012ab0:	42a2      	cmp	r2, r4
 8012ab2:	d00d      	beq.n	8012ad0 <prvInsertBlockIntoFreeList+0x48>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012ab4:	6852      	ldr	r2, [r2, #4]
 8012ab6:	4411      	add	r1, r2
 8012ab8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	6812      	ldr	r2, [r2, #0]
 8012abe:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ac0:	4298      	cmp	r0, r3
 8012ac2:	d000      	beq.n	8012ac6 <prvInsertBlockIntoFreeList+0x3e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ac4:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aca:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012acc:	4613      	mov	r3, r2
 8012ace:	e7dd      	b.n	8012a8c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012ad0:	6004      	str	r4, [r0, #0]
 8012ad2:	e7f5      	b.n	8012ac0 <prvInsertBlockIntoFreeList+0x38>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ad4:	6002      	str	r2, [r0, #0]
 8012ad6:	e7f3      	b.n	8012ac0 <prvInsertBlockIntoFreeList+0x38>
 8012ad8:	200054fc 	.word	0x200054fc
 8012adc:	200047e4 	.word	0x200047e4

08012ae0 <pvPortMalloc>:
{
 8012ae0:	b570      	push	{r4, r5, r6, lr}
 8012ae2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012ae4:	f002 f892 	bl	8014c0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012ae8:	4b3f      	ldr	r3, [pc, #252]	; (8012be8 <pvPortMalloc+0x108>)
 8012aea:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8012aee:	b1c3      	cbz	r3, 8012b22 <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012af0:	4b3d      	ldr	r3, [pc, #244]	; (8012be8 <pvPortMalloc+0x108>)
 8012af2:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8012af6:	421c      	tst	r4, r3
 8012af8:	d16c      	bne.n	8012bd4 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8012afa:	b1ac      	cbz	r4, 8012b28 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8012afc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012afe:	f014 0f07 	tst.w	r4, #7
 8012b02:	d011      	beq.n	8012b28 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b04:	f024 0407 	bic.w	r4, r4, #7
 8012b08:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b0a:	f004 0307 	and.w	r3, r4, #7
 8012b0e:	b15b      	cbz	r3, 8012b28 <pvPortMalloc+0x48>
 8012b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	e7fe      	b.n	8012b20 <pvPortMalloc+0x40>
			prvHeapInit();
 8012b22:	f7ff ff85 	bl	8012a30 <prvHeapInit>
 8012b26:	e7e3      	b.n	8012af0 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b28:	2c00      	cmp	r4, #0
 8012b2a:	d055      	beq.n	8012bd8 <pvPortMalloc+0xf8>
 8012b2c:	4b2e      	ldr	r3, [pc, #184]	; (8012be8 <pvPortMalloc+0x108>)
 8012b2e:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8012b32:	429c      	cmp	r4, r3
 8012b34:	d852      	bhi.n	8012bdc <pvPortMalloc+0xfc>
				pxBlock = xStart.pxNextFreeBlock;
 8012b36:	4b2c      	ldr	r3, [pc, #176]	; (8012be8 <pvPortMalloc+0x108>)
 8012b38:	f8d3 5d18 	ldr.w	r5, [r3, #3352]	; 0xd18
				pxPreviousBlock = &xStart;
 8012b3c:	f603 5318 	addw	r3, r3, #3352	; 0xd18
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b40:	e001      	b.n	8012b46 <pvPortMalloc+0x66>
					pxPreviousBlock = pxBlock;
 8012b42:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b44:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b46:	686a      	ldr	r2, [r5, #4]
 8012b48:	4294      	cmp	r4, r2
 8012b4a:	d902      	bls.n	8012b52 <pvPortMalloc+0x72>
 8012b4c:	682a      	ldr	r2, [r5, #0]
 8012b4e:	2a00      	cmp	r2, #0
 8012b50:	d1f7      	bne.n	8012b42 <pvPortMalloc+0x62>
				if( pxBlock != pxEnd )
 8012b52:	4a25      	ldr	r2, [pc, #148]	; (8012be8 <pvPortMalloc+0x108>)
 8012b54:	f8d2 2d20 	ldr.w	r2, [r2, #3360]	; 0xd20
 8012b58:	4295      	cmp	r5, r2
 8012b5a:	d041      	beq.n	8012be0 <pvPortMalloc+0x100>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b5c:	681e      	ldr	r6, [r3, #0]
 8012b5e:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b60:	682a      	ldr	r2, [r5, #0]
 8012b62:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b64:	686b      	ldr	r3, [r5, #4]
 8012b66:	1b1b      	subs	r3, r3, r4
 8012b68:	2b10      	cmp	r3, #16
 8012b6a:	d910      	bls.n	8012b8e <pvPortMalloc+0xae>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012b6c:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b6e:	f010 0f07 	tst.w	r0, #7
 8012b72:	d008      	beq.n	8012b86 <pvPortMalloc+0xa6>
 8012b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b78:	f383 8811 	msr	BASEPRI, r3
 8012b7c:	f3bf 8f6f 	isb	sy
 8012b80:	f3bf 8f4f 	dsb	sy
 8012b84:	e7fe      	b.n	8012b84 <pvPortMalloc+0xa4>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012b86:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012b88:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012b8a:	f7ff ff7d 	bl	8012a88 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012b8e:	6869      	ldr	r1, [r5, #4]
 8012b90:	4a15      	ldr	r2, [pc, #84]	; (8012be8 <pvPortMalloc+0x108>)
 8012b92:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
 8012b96:	1a5b      	subs	r3, r3, r1
 8012b98:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012b9c:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d202      	bcs.n	8012baa <pvPortMalloc+0xca>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ba4:	4a10      	ldr	r2, [pc, #64]	; (8012be8 <pvPortMalloc+0x108>)
 8012ba6:	f8c2 3d24 	str.w	r3, [r2, #3364]	; 0xd24
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012baa:	4b0f      	ldr	r3, [pc, #60]	; (8012be8 <pvPortMalloc+0x108>)
 8012bac:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8012bb0:	430b      	orrs	r3, r1
 8012bb2:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8012bb8:	f002 f8e6 	bl	8014d88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bbc:	f016 0f07 	tst.w	r6, #7
 8012bc0:	d010      	beq.n	8012be4 <pvPortMalloc+0x104>
 8012bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc6:	f383 8811 	msr	BASEPRI, r3
 8012bca:	f3bf 8f6f 	isb	sy
 8012bce:	f3bf 8f4f 	dsb	sy
 8012bd2:	e7fe      	b.n	8012bd2 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8012bd4:	2600      	movs	r6, #0
 8012bd6:	e7ef      	b.n	8012bb8 <pvPortMalloc+0xd8>
 8012bd8:	2600      	movs	r6, #0
 8012bda:	e7ed      	b.n	8012bb8 <pvPortMalloc+0xd8>
 8012bdc:	2600      	movs	r6, #0
 8012bde:	e7eb      	b.n	8012bb8 <pvPortMalloc+0xd8>
 8012be0:	2600      	movs	r6, #0
 8012be2:	e7e9      	b.n	8012bb8 <pvPortMalloc+0xd8>
}
 8012be4:	4630      	mov	r0, r6
 8012be6:	bd70      	pop	{r4, r5, r6, pc}
 8012be8:	200047e4 	.word	0x200047e4

08012bec <vPortFree>:
	if( pv != NULL )
 8012bec:	b398      	cbz	r0, 8012c56 <vPortFree+0x6a>
{
 8012bee:	b538      	push	{r3, r4, r5, lr}
 8012bf0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8012bf2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012bf6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012bfa:	4917      	ldr	r1, [pc, #92]	; (8012c58 <vPortFree+0x6c>)
 8012bfc:	f8d1 1d2c 	ldr.w	r1, [r1, #3372]	; 0xd2c
 8012c00:	420a      	tst	r2, r1
 8012c02:	d108      	bne.n	8012c16 <vPortFree+0x2a>
 8012c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c08:	f383 8811 	msr	BASEPRI, r3
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	e7fe      	b.n	8012c14 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012c16:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8012c1a:	b140      	cbz	r0, 8012c2e <vPortFree+0x42>
 8012c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c20:	f383 8811 	msr	BASEPRI, r3
 8012c24:	f3bf 8f6f 	isb	sy
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	e7fe      	b.n	8012c2c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012c2e:	ea22 0201 	bic.w	r2, r2, r1
 8012c32:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8012c36:	f001 ffe9 	bl	8014c0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012c3a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8012c3e:	4a06      	ldr	r2, [pc, #24]	; (8012c58 <vPortFree+0x6c>)
 8012c40:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
 8012c44:	440b      	add	r3, r1
 8012c46:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	f7ff ff1c 	bl	8012a88 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8012c50:	f002 f89a 	bl	8014d88 <xTaskResumeAll>
 8012c54:	bd38      	pop	{r3, r4, r5, pc}
 8012c56:	4770      	bx	lr
 8012c58:	200047e4 	.word	0x200047e4

08012c5c <xPortGetFreeHeapSize>:
}
 8012c5c:	4b01      	ldr	r3, [pc, #4]	; (8012c64 <xPortGetFreeHeapSize+0x8>)
 8012c5e:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
 8012c62:	4770      	bx	lr
 8012c64:	200047e4 	.word	0x200047e4

08012c68 <xPortGetMinimumEverFreeHeapSize>:
}
 8012c68:	4b01      	ldr	r3, [pc, #4]	; (8012c70 <xPortGetMinimumEverFreeHeapSize+0x8>)
 8012c6a:	f8d3 0d24 	ldr.w	r0, [r3, #3364]	; 0xd24
 8012c6e:	4770      	bx	lr
 8012c70:	200047e4 	.word	0x200047e4

08012c74 <vPortInitialiseBlocks>:
{
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop

08012c78 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012c78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012c7a:	b123      	cbz	r3, 8012c86 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012c7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012c7e:	6818      	ldr	r0, [r3, #0]
 8012c80:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 8012c84:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012c86:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8012c88:	4770      	bx	lr

08012c8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c8a:	b510      	push	{r4, lr}
 8012c8c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c8e:	f7ff fd7b 	bl	8012788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d004      	beq.n	8012ca4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8012c9a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8012c9c:	f7ff fd96 	bl	80127cc <vPortExitCritical>

	return xReturn;
}
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8012ca4:	2401      	movs	r4, #1
 8012ca6:	e7f9      	b.n	8012c9c <prvIsQueueFull+0x12>

08012ca8 <prvIsQueueEmpty>:
{
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8012cac:	f7ff fd6c 	bl	8012788 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012cb2:	b123      	cbz	r3, 8012cbe <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8012cb4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012cb6:	f7ff fd89 	bl	80127cc <vPortExitCritical>
}
 8012cba:	4620      	mov	r0, r4
 8012cbc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8012cbe:	2401      	movs	r4, #1
 8012cc0:	e7f9      	b.n	8012cb6 <prvIsQueueEmpty+0xe>

08012cc2 <prvCopyDataToQueue>:
{
 8012cc2:	b570      	push	{r4, r5, r6, lr}
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cc8:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012cca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012ccc:	b94a      	cbnz	r2, 8012ce2 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	bb53      	cbnz	r3, 8012d28 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012cd2:	6840      	ldr	r0, [r0, #4]
 8012cd4:	f002 fcb2 	bl	801563c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012cdc:	3501      	adds	r5, #1
 8012cde:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8012ce0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8012ce2:	b96e      	cbnz	r6, 8012d00 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012ce4:	6880      	ldr	r0, [r0, #8]
 8012ce6:	f006 f9f7 	bl	80190d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012cec:	68a3      	ldr	r3, [r4, #8]
 8012cee:	4413      	add	r3, r2
 8012cf0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012cf2:	6862      	ldr	r2, [r4, #4]
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	d319      	bcc.n	8012d2c <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012cf8:	6823      	ldr	r3, [r4, #0]
 8012cfa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	e7ed      	b.n	8012cdc <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d00:	68c0      	ldr	r0, [r0, #12]
 8012d02:	f006 f9e9 	bl	80190d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d08:	425b      	negs	r3, r3
 8012d0a:	68e2      	ldr	r2, [r4, #12]
 8012d0c:	441a      	add	r2, r3
 8012d0e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d10:	6821      	ldr	r1, [r4, #0]
 8012d12:	428a      	cmp	r2, r1
 8012d14:	d202      	bcs.n	8012d1c <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012d16:	6862      	ldr	r2, [r4, #4]
 8012d18:	4413      	add	r3, r2
 8012d1a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8012d1c:	2e02      	cmp	r6, #2
 8012d1e:	d107      	bne.n	8012d30 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d20:	b145      	cbz	r5, 8012d34 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8012d22:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8012d24:	2000      	movs	r0, #0
 8012d26:	e7d9      	b.n	8012cdc <prvCopyDataToQueue+0x1a>
 8012d28:	2000      	movs	r0, #0
 8012d2a:	e7d7      	b.n	8012cdc <prvCopyDataToQueue+0x1a>
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	e7d5      	b.n	8012cdc <prvCopyDataToQueue+0x1a>
 8012d30:	2000      	movs	r0, #0
 8012d32:	e7d3      	b.n	8012cdc <prvCopyDataToQueue+0x1a>
 8012d34:	2000      	movs	r0, #0
 8012d36:	e7d1      	b.n	8012cdc <prvCopyDataToQueue+0x1a>

08012d38 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012d38:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012d3a:	b172      	cbz	r2, 8012d5a <prvCopyDataFromQueue+0x22>
{
 8012d3c:	b510      	push	{r4, lr}
 8012d3e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012d40:	68c4      	ldr	r4, [r0, #12]
 8012d42:	4414      	add	r4, r2
 8012d44:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012d46:	6840      	ldr	r0, [r0, #4]
 8012d48:	4284      	cmp	r4, r0
 8012d4a:	d301      	bcc.n	8012d50 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012d4c:	6818      	ldr	r0, [r3, #0]
 8012d4e:	60d8      	str	r0, [r3, #12]
 8012d50:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012d52:	68d9      	ldr	r1, [r3, #12]
 8012d54:	f006 f9c0 	bl	80190d8 <memcpy>
 8012d58:	bd10      	pop	{r4, pc}
 8012d5a:	4770      	bx	lr

08012d5c <prvUnlockQueue>:
{
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8012d60:	f7ff fd12 	bl	8012788 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012d64:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8012d68:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d6a:	e001      	b.n	8012d70 <prvUnlockQueue+0x14>
			--cTxLock;
 8012d6c:	3c01      	subs	r4, #1
 8012d6e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d70:	2c00      	cmp	r4, #0
 8012d72:	dd0a      	ble.n	8012d8a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d76:	b143      	cbz	r3, 8012d8a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d78:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8012d7c:	f002 fa28 	bl	80151d0 <xTaskRemoveFromEventList>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d0f3      	beq.n	8012d6c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8012d84:	f002 fb0e 	bl	80153a4 <vTaskMissedYield>
 8012d88:	e7f0      	b.n	8012d6c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8012d8a:	23ff      	movs	r3, #255	; 0xff
 8012d8c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8012d90:	f7ff fd1c 	bl	80127cc <vPortExitCritical>
	taskENTER_CRITICAL();
 8012d94:	f7ff fcf8 	bl	8012788 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012d98:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8012d9c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d9e:	e001      	b.n	8012da4 <prvUnlockQueue+0x48>
				--cRxLock;
 8012da0:	3c01      	subs	r4, #1
 8012da2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012da4:	2c00      	cmp	r4, #0
 8012da6:	dd0a      	ble.n	8012dbe <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012da8:	692b      	ldr	r3, [r5, #16]
 8012daa:	b143      	cbz	r3, 8012dbe <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dac:	f105 0010 	add.w	r0, r5, #16
 8012db0:	f002 fa0e 	bl	80151d0 <xTaskRemoveFromEventList>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d0f3      	beq.n	8012da0 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8012db8:	f002 faf4 	bl	80153a4 <vTaskMissedYield>
 8012dbc:	e7f0      	b.n	8012da0 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8012dbe:	23ff      	movs	r3, #255	; 0xff
 8012dc0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8012dc4:	f7ff fd02 	bl	80127cc <vPortExitCritical>
 8012dc8:	bd38      	pop	{r3, r4, r5, pc}

08012dca <xQueueGenericReset>:
{
 8012dca:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8012dcc:	b330      	cbz	r0, 8012e1c <xQueueGenericReset+0x52>
 8012dce:	4604      	mov	r4, r0
 8012dd0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8012dd2:	f7ff fcd9 	bl	8012788 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012dd6:	6821      	ldr	r1, [r4, #0]
 8012dd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ddc:	fb03 1002 	mla	r0, r3, r2, r1
 8012de0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012de2:	2000      	movs	r0, #0
 8012de4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012de6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012de8:	3a01      	subs	r2, #1
 8012dea:	fb02 1303 	mla	r3, r2, r3, r1
 8012dee:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012df0:	23ff      	movs	r3, #255	; 0xff
 8012df2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8012dfa:	b9c5      	cbnz	r5, 8012e2e <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dfc:	6923      	ldr	r3, [r4, #16]
 8012dfe:	b1f3      	cbz	r3, 8012e3e <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e00:	f104 0010 	add.w	r0, r4, #16
 8012e04:	f002 f9e4 	bl	80151d0 <xTaskRemoveFromEventList>
 8012e08:	b1c8      	cbz	r0, 8012e3e <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8012e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e0e:	4b0e      	ldr	r3, [pc, #56]	; (8012e48 <xQueueGenericReset+0x7e>)
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	f3bf 8f4f 	dsb	sy
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	e010      	b.n	8012e3e <xQueueGenericReset+0x74>
 8012e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e20:	f383 8811 	msr	BASEPRI, r3
 8012e24:	f3bf 8f6f 	isb	sy
 8012e28:	f3bf 8f4f 	dsb	sy
 8012e2c:	e7fe      	b.n	8012e2c <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e2e:	f104 0010 	add.w	r0, r4, #16
 8012e32:	f7ff fbed 	bl	8012610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012e3a:	f7ff fbe9 	bl	8012610 <vListInitialise>
	taskEXIT_CRITICAL();
 8012e3e:	f7ff fcc5 	bl	80127cc <vPortExitCritical>
}
 8012e42:	2001      	movs	r0, #1
 8012e44:	bd38      	pop	{r3, r4, r5, pc}
 8012e46:	bf00      	nop
 8012e48:	e000ed04 	.word	0xe000ed04

08012e4c <prvInitialiseNewQueue>:
{
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	461d      	mov	r5, r3
 8012e50:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8012e52:	460b      	mov	r3, r1
 8012e54:	b149      	cbz	r1, 8012e6a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012e56:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8012e58:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e5a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7ff ffb3 	bl	8012dca <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8012e64:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8012e68:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012e6a:	6024      	str	r4, [r4, #0]
 8012e6c:	e7f4      	b.n	8012e58 <prvInitialiseNewQueue+0xc>

08012e6e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012e6e:	b940      	cbnz	r0, 8012e82 <xQueueGenericCreateStatic+0x14>
 8012e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	e7fe      	b.n	8012e80 <xQueueGenericCreateStatic+0x12>
	{
 8012e82:	b510      	push	{r4, lr}
 8012e84:	b084      	sub	sp, #16
 8012e86:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8012e88:	b163      	cbz	r3, 8012ea4 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012e8a:	b1a2      	cbz	r2, 8012eb6 <xQueueGenericCreateStatic+0x48>
 8012e8c:	b1a9      	cbz	r1, 8012eba <xQueueGenericCreateStatic+0x4c>
 8012e8e:	2001      	movs	r0, #1
 8012e90:	b9a8      	cbnz	r0, 8012ebe <xQueueGenericCreateStatic+0x50>
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	e7fe      	b.n	8012ea2 <xQueueGenericCreateStatic+0x34>
 8012ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea8:	f383 8811 	msr	BASEPRI, r3
 8012eac:	f3bf 8f6f 	isb	sy
 8012eb0:	f3bf 8f4f 	dsb	sy
 8012eb4:	e7fe      	b.n	8012eb4 <xQueueGenericCreateStatic+0x46>
 8012eb6:	2001      	movs	r0, #1
 8012eb8:	e7ea      	b.n	8012e90 <xQueueGenericCreateStatic+0x22>
 8012eba:	2000      	movs	r0, #0
 8012ebc:	e7e8      	b.n	8012e90 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012ebe:	b90a      	cbnz	r2, 8012ec4 <xQueueGenericCreateStatic+0x56>
 8012ec0:	b101      	cbz	r1, 8012ec4 <xQueueGenericCreateStatic+0x56>
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	b940      	cbnz	r0, 8012ed8 <xQueueGenericCreateStatic+0x6a>
 8012ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eca:	f383 8811 	msr	BASEPRI, r3
 8012ece:	f3bf 8f6f 	isb	sy
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	e7fe      	b.n	8012ed6 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012ed8:	2050      	movs	r0, #80	; 0x50
 8012eda:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012edc:	9803      	ldr	r0, [sp, #12]
 8012ede:	2850      	cmp	r0, #80	; 0x50
 8012ee0:	d008      	beq.n	8012ef4 <xQueueGenericCreateStatic+0x86>
 8012ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	e7fe      	b.n	8012ef2 <xQueueGenericCreateStatic+0x84>
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012efe:	9400      	str	r4, [sp, #0]
 8012f00:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012f04:	f7ff ffa2 	bl	8012e4c <prvInitialiseNewQueue>
	}
 8012f08:	4620      	mov	r0, r4
 8012f0a:	b004      	add	sp, #16
 8012f0c:	bd10      	pop	{r4, pc}

08012f0e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f0e:	b940      	cbnz	r0, 8012f22 <xQueueGenericCreate+0x14>
 8012f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f14:	f383 8811 	msr	BASEPRI, r3
 8012f18:	f3bf 8f6f 	isb	sy
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	e7fe      	b.n	8012f20 <xQueueGenericCreate+0x12>
	{
 8012f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f24:	b083      	sub	sp, #12
 8012f26:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8012f28:	b111      	cbz	r1, 8012f30 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f2a:	fb01 f000 	mul.w	r0, r1, r0
 8012f2e:	e000      	b.n	8012f32 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8012f30:	2000      	movs	r0, #0
 8012f32:	4617      	mov	r7, r2
 8012f34:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012f36:	3050      	adds	r0, #80	; 0x50
 8012f38:	f7ff fdd2 	bl	8012ae0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012f3c:	4605      	mov	r5, r0
 8012f3e:	b150      	cbz	r0, 8012f56 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f40:	2300      	movs	r3, #0
 8012f42:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f46:	9000      	str	r0, [sp, #0]
 8012f48:	463b      	mov	r3, r7
 8012f4a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8012f4e:	4621      	mov	r1, r4
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7ff ff7b 	bl	8012e4c <prvInitialiseNewQueue>
	}
 8012f56:	4628      	mov	r0, r5
 8012f58:	b003      	add	sp, #12
 8012f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f5c <xQueueGetMutexHolder>:
	{
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8012f60:	f7ff fc12 	bl	8012788 <vPortEnterCritical>
			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	b923      	cbnz	r3, 8012f72 <xQueueGetMutexHolder+0x16>
				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 8012f68:	6864      	ldr	r4, [r4, #4]
		taskEXIT_CRITICAL();
 8012f6a:	f7ff fc2f 	bl	80127cc <vPortExitCritical>
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8012f6e:	4620      	mov	r0, r4
 8012f70:	bd10      	pop	{r4, pc}
				pxReturn = NULL;
 8012f72:	2400      	movs	r4, #0
 8012f74:	e7f9      	b.n	8012f6a <xQueueGetMutexHolder+0xe>

08012f76 <xQueueGetMutexHolderFromISR>:
		configASSERT( xSemaphore );
 8012f76:	b118      	cbz	r0, 8012f80 <xQueueGetMutexHolderFromISR+0xa>
		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f78:	6802      	ldr	r2, [r0, #0]
 8012f7a:	b952      	cbnz	r2, 8012f92 <xQueueGetMutexHolderFromISR+0x1c>
			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 8012f7c:	6840      	ldr	r0, [r0, #4]
 8012f7e:	4770      	bx	lr
 8012f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	e7fe      	b.n	8012f90 <xQueueGetMutexHolderFromISR+0x1a>
			pxReturn = NULL;
 8012f92:	2000      	movs	r0, #0
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8012f94:	4770      	bx	lr

08012f96 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8012f96:	b940      	cbnz	r0, 8012faa <xQueueCreateCountingSemaphoreStatic+0x14>
 8012f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9c:	f383 8811 	msr	BASEPRI, r3
 8012fa0:	f3bf 8f6f 	isb	sy
 8012fa4:	f3bf 8f4f 	dsb	sy
 8012fa8:	e7fe      	b.n	8012fa8 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012faa:	4288      	cmp	r0, r1
 8012fac:	d208      	bcs.n	8012fc0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8012fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb2:	f383 8811 	msr	BASEPRI, r3
 8012fb6:	f3bf 8f6f 	isb	sy
 8012fba:	f3bf 8f4f 	dsb	sy
 8012fbe:	e7fe      	b.n	8012fbe <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012fc8:	2202      	movs	r2, #2
 8012fca:	9200      	str	r2, [sp, #0]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	4611      	mov	r1, r2
 8012fd0:	f7ff ff4d 	bl	8012e6e <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	b100      	cbz	r0, 8012fda <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012fd8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	b002      	add	sp, #8
 8012fde:	bd10      	pop	{r4, pc}

08012fe0 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8012fe0:	b940      	cbnz	r0, 8012ff4 <xQueueCreateCountingSemaphore+0x14>
 8012fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe6:	f383 8811 	msr	BASEPRI, r3
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	f3bf 8f4f 	dsb	sy
 8012ff2:	e7fe      	b.n	8012ff2 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012ff4:	4288      	cmp	r0, r1
 8012ff6:	d208      	bcs.n	801300a <xQueueCreateCountingSemaphore+0x2a>
 8012ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffc:	f383 8811 	msr	BASEPRI, r3
 8013000:	f3bf 8f6f 	isb	sy
 8013004:	f3bf 8f4f 	dsb	sy
 8013008:	e7fe      	b.n	8013008 <xQueueCreateCountingSemaphore+0x28>
	{
 801300a:	b510      	push	{r4, lr}
 801300c:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801300e:	2202      	movs	r2, #2
 8013010:	2100      	movs	r1, #0
 8013012:	f7ff ff7c 	bl	8012f0e <xQueueGenericCreate>
		if( xHandle != NULL )
 8013016:	4603      	mov	r3, r0
 8013018:	b100      	cbz	r0, 801301c <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801301a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 801301c:	4618      	mov	r0, r3
 801301e:	bd10      	pop	{r4, pc}

08013020 <xQueueGenericSend>:
{
 8013020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013022:	b085      	sub	sp, #20
 8013024:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013026:	b160      	cbz	r0, 8013042 <xQueueGenericSend+0x22>
 8013028:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801302a:	b199      	cbz	r1, 8013054 <xQueueGenericSend+0x34>
 801302c:	2501      	movs	r5, #1
 801302e:	b9bd      	cbnz	r5, 8013060 <xQueueGenericSend+0x40>
 8013030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013034:	f383 8811 	msr	BASEPRI, r3
 8013038:	f3bf 8f6f 	isb	sy
 801303c:	f3bf 8f4f 	dsb	sy
 8013040:	e7fe      	b.n	8013040 <xQueueGenericSend+0x20>
 8013042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013046:	f383 8811 	msr	BASEPRI, r3
 801304a:	f3bf 8f6f 	isb	sy
 801304e:	f3bf 8f4f 	dsb	sy
 8013052:	e7fe      	b.n	8013052 <xQueueGenericSend+0x32>
 8013054:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013056:	b90a      	cbnz	r2, 801305c <xQueueGenericSend+0x3c>
 8013058:	2501      	movs	r5, #1
 801305a:	e7e8      	b.n	801302e <xQueueGenericSend+0xe>
 801305c:	2500      	movs	r5, #0
 801305e:	e7e6      	b.n	801302e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013060:	2b02      	cmp	r3, #2
 8013062:	d009      	beq.n	8013078 <xQueueGenericSend+0x58>
 8013064:	b96d      	cbnz	r5, 8013082 <xQueueGenericSend+0x62>
 8013066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306a:	f383 8811 	msr	BASEPRI, r3
 801306e:	f3bf 8f6f 	isb	sy
 8013072:	f3bf 8f4f 	dsb	sy
 8013076:	e7fe      	b.n	8013076 <xQueueGenericSend+0x56>
 8013078:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801307a:	2a01      	cmp	r2, #1
 801307c:	d0f2      	beq.n	8013064 <xQueueGenericSend+0x44>
 801307e:	2500      	movs	r5, #0
 8013080:	e7f0      	b.n	8013064 <xQueueGenericSend+0x44>
 8013082:	461e      	mov	r6, r3
 8013084:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013086:	f002 fa75 	bl	8015574 <xTaskGetSchedulerState>
 801308a:	b910      	cbnz	r0, 8013092 <xQueueGenericSend+0x72>
 801308c:	9b01      	ldr	r3, [sp, #4]
 801308e:	b103      	cbz	r3, 8013092 <xQueueGenericSend+0x72>
 8013090:	2500      	movs	r5, #0
 8013092:	b945      	cbnz	r5, 80130a6 <xQueueGenericSend+0x86>
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	f383 8811 	msr	BASEPRI, r3
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	f3bf 8f4f 	dsb	sy
 80130a4:	e7fe      	b.n	80130a4 <xQueueGenericSend+0x84>
 80130a6:	2500      	movs	r5, #0
 80130a8:	e02c      	b.n	8013104 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130aa:	4632      	mov	r2, r6
 80130ac:	4639      	mov	r1, r7
 80130ae:	4620      	mov	r0, r4
 80130b0:	f7ff fe07 	bl	8012cc2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130b6:	b18b      	cbz	r3, 80130dc <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130bc:	f002 f888 	bl	80151d0 <xTaskRemoveFromEventList>
 80130c0:	b138      	cbz	r0, 80130d2 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 80130c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130c6:	4b37      	ldr	r3, [pc, #220]	; (80131a4 <xQueueGenericSend+0x184>)
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	f3bf 8f4f 	dsb	sy
 80130ce:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80130d2:	f7ff fb7b 	bl	80127cc <vPortExitCritical>
				return pdPASS;
 80130d6:	2001      	movs	r0, #1
}
 80130d8:	b005      	add	sp, #20
 80130da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80130dc:	2800      	cmp	r0, #0
 80130de:	d0f8      	beq.n	80130d2 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 80130e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130e4:	4b2f      	ldr	r3, [pc, #188]	; (80131a4 <xQueueGenericSend+0x184>)
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	f3bf 8f6f 	isb	sy
 80130f0:	e7ef      	b.n	80130d2 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 80130f2:	f7ff fb6b 	bl	80127cc <vPortExitCritical>
					return errQUEUE_FULL;
 80130f6:	2000      	movs	r0, #0
 80130f8:	e7ee      	b.n	80130d8 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 80130fa:	4620      	mov	r0, r4
 80130fc:	f7ff fe2e 	bl	8012d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013100:	f001 fe42 	bl	8014d88 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8013104:	f7ff fb40 	bl	8012788 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013108:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801310a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801310c:	429a      	cmp	r2, r3
 801310e:	d3cc      	bcc.n	80130aa <xQueueGenericSend+0x8a>
 8013110:	2e02      	cmp	r6, #2
 8013112:	d0ca      	beq.n	80130aa <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013114:	9b01      	ldr	r3, [sp, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d0eb      	beq.n	80130f2 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 801311a:	b91d      	cbnz	r5, 8013124 <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801311c:	a802      	add	r0, sp, #8
 801311e:	f002 f8f7 	bl	8015310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013122:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8013124:	f7ff fb52 	bl	80127cc <vPortExitCritical>
		vTaskSuspendAll();
 8013128:	f001 fd70 	bl	8014c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801312c:	f7ff fb2c 	bl	8012788 <vPortEnterCritical>
 8013130:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013134:	b25b      	sxtb	r3, r3
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801313a:	d102      	bne.n	8013142 <xQueueGenericSend+0x122>
 801313c:	2300      	movs	r3, #0
 801313e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013142:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013146:	b25b      	sxtb	r3, r3
 8013148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801314c:	d102      	bne.n	8013154 <xQueueGenericSend+0x134>
 801314e:	2300      	movs	r3, #0
 8013150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013154:	f7ff fb3a 	bl	80127cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013158:	a901      	add	r1, sp, #4
 801315a:	a802      	add	r0, sp, #8
 801315c:	f002 f8e2 	bl	8015324 <xTaskCheckForTimeOut>
 8013160:	b9c8      	cbnz	r0, 8013196 <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013162:	4620      	mov	r0, r4
 8013164:	f7ff fd91 	bl	8012c8a <prvIsQueueFull>
 8013168:	2800      	cmp	r0, #0
 801316a:	d0c6      	beq.n	80130fa <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801316c:	9901      	ldr	r1, [sp, #4]
 801316e:	f104 0010 	add.w	r0, r4, #16
 8013172:	f001 ffc7 	bl	8015104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013176:	4620      	mov	r0, r4
 8013178:	f7ff fdf0 	bl	8012d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801317c:	f001 fe04 	bl	8014d88 <xTaskResumeAll>
 8013180:	2800      	cmp	r0, #0
 8013182:	d1bf      	bne.n	8013104 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8013184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013188:	4b06      	ldr	r3, [pc, #24]	; (80131a4 <xQueueGenericSend+0x184>)
 801318a:	601a      	str	r2, [r3, #0]
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	f3bf 8f6f 	isb	sy
 8013194:	e7b6      	b.n	8013104 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8013196:	4620      	mov	r0, r4
 8013198:	f7ff fde0 	bl	8012d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801319c:	f001 fdf4 	bl	8014d88 <xTaskResumeAll>
			return errQUEUE_FULL;
 80131a0:	2000      	movs	r0, #0
 80131a2:	e799      	b.n	80130d8 <xQueueGenericSend+0xb8>
 80131a4:	e000ed04 	.word	0xe000ed04

080131a8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80131a8:	b148      	cbz	r0, 80131be <prvInitialiseMutex+0x16>
	{
 80131aa:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80131ac:	2100      	movs	r1, #0
 80131ae:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80131b0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80131b2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80131b4:	460b      	mov	r3, r1
 80131b6:	460a      	mov	r2, r1
 80131b8:	f7ff ff32 	bl	8013020 <xQueueGenericSend>
 80131bc:	bd08      	pop	{r3, pc}
 80131be:	4770      	bx	lr

080131c0 <xQueueCreateMutex>:
	{
 80131c0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80131c2:	4602      	mov	r2, r0
 80131c4:	2100      	movs	r1, #0
 80131c6:	2001      	movs	r0, #1
 80131c8:	f7ff fea1 	bl	8012f0e <xQueueGenericCreate>
 80131cc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80131ce:	f7ff ffeb 	bl	80131a8 <prvInitialiseMutex>
	}
 80131d2:	4620      	mov	r0, r4
 80131d4:	bd10      	pop	{r4, pc}

080131d6 <xQueueCreateMutexStatic>:
	{
 80131d6:	b510      	push	{r4, lr}
 80131d8:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80131da:	9000      	str	r0, [sp, #0]
 80131dc:	460b      	mov	r3, r1
 80131de:	2200      	movs	r2, #0
 80131e0:	4611      	mov	r1, r2
 80131e2:	2001      	movs	r0, #1
 80131e4:	f7ff fe43 	bl	8012e6e <xQueueGenericCreateStatic>
 80131e8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80131ea:	f7ff ffdd 	bl	80131a8 <prvInitialiseMutex>
	}
 80131ee:	4620      	mov	r0, r4
 80131f0:	b002      	add	sp, #8
 80131f2:	bd10      	pop	{r4, pc}

080131f4 <xQueueGiveMutexRecursive>:
	{
 80131f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80131f6:	b138      	cbz	r0, 8013208 <xQueueGiveMutexRecursive+0x14>
 80131f8:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80131fa:	6845      	ldr	r5, [r0, #4]
 80131fc:	f002 f9b4 	bl	8015568 <xTaskGetCurrentTaskHandle>
 8013200:	4285      	cmp	r5, r0
 8013202:	d00a      	beq.n	801321a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8013204:	2000      	movs	r0, #0
 8013206:	bd38      	pop	{r3, r4, r5, pc}
 8013208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	e7fe      	b.n	8013218 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 801321a:	68e3      	ldr	r3, [r4, #12]
 801321c:	3b01      	subs	r3, #1
 801321e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013220:	b10b      	cbz	r3, 8013226 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8013222:	2001      	movs	r0, #1
	}
 8013224:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013226:	461a      	mov	r2, r3
 8013228:	4619      	mov	r1, r3
 801322a:	4620      	mov	r0, r4
 801322c:	f7ff fef8 	bl	8013020 <xQueueGenericSend>
			xReturn = pdPASS;
 8013230:	2001      	movs	r0, #1
 8013232:	bd38      	pop	{r3, r4, r5, pc}

08013234 <xQueueGenericSendFromISR>:
{
 8013234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013238:	b160      	cbz	r0, 8013254 <xQueueGenericSendFromISR+0x20>
 801323a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801323c:	b199      	cbz	r1, 8013266 <xQueueGenericSendFromISR+0x32>
 801323e:	2001      	movs	r0, #1
 8013240:	b9b8      	cbnz	r0, 8013272 <xQueueGenericSendFromISR+0x3e>
 8013242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013246:	f383 8811 	msr	BASEPRI, r3
 801324a:	f3bf 8f6f 	isb	sy
 801324e:	f3bf 8f4f 	dsb	sy
 8013252:	e7fe      	b.n	8013252 <xQueueGenericSendFromISR+0x1e>
 8013254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013258:	f383 8811 	msr	BASEPRI, r3
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	e7fe      	b.n	8013264 <xQueueGenericSendFromISR+0x30>
 8013266:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013268:	b908      	cbnz	r0, 801326e <xQueueGenericSendFromISR+0x3a>
 801326a:	2001      	movs	r0, #1
 801326c:	e7e8      	b.n	8013240 <xQueueGenericSendFromISR+0xc>
 801326e:	2000      	movs	r0, #0
 8013270:	e7e6      	b.n	8013240 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013272:	2b02      	cmp	r3, #2
 8013274:	d009      	beq.n	801328a <xQueueGenericSendFromISR+0x56>
 8013276:	b968      	cbnz	r0, 8013294 <xQueueGenericSendFromISR+0x60>
 8013278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327c:	f383 8811 	msr	BASEPRI, r3
 8013280:	f3bf 8f6f 	isb	sy
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	e7fe      	b.n	8013288 <xQueueGenericSendFromISR+0x54>
 801328a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 801328c:	2d01      	cmp	r5, #1
 801328e:	d0f2      	beq.n	8013276 <xQueueGenericSendFromISR+0x42>
 8013290:	2000      	movs	r0, #0
 8013292:	e7f0      	b.n	8013276 <xQueueGenericSendFromISR+0x42>
 8013294:	461f      	mov	r7, r3
 8013296:	4690      	mov	r8, r2
 8013298:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801329a:	f7ff fb99 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 801329e:	f3ef 8611 	mrs	r6, BASEPRI
 80132a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80132b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d301      	bcc.n	80132be <xQueueGenericSendFromISR+0x8a>
 80132ba:	2f02      	cmp	r7, #2
 80132bc:	d121      	bne.n	8013302 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80132be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80132c2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132c4:	463a      	mov	r2, r7
 80132c6:	4649      	mov	r1, r9
 80132c8:	4620      	mov	r0, r4
 80132ca:	f7ff fcfa 	bl	8012cc2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80132ce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80132d2:	d110      	bne.n	80132f6 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132d6:	b1b3      	cbz	r3, 8013306 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80132dc:	f001 ff78 	bl	80151d0 <xTaskRemoveFromEventList>
 80132e0:	b198      	cbz	r0, 801330a <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 80132e2:	f1b8 0f00 	cmp.w	r8, #0
 80132e6:	d012      	beq.n	801330e <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132e8:	2001      	movs	r0, #1
 80132ea:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80132ee:	f386 8811 	msr	BASEPRI, r6
}
 80132f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132f6:	1c6b      	adds	r3, r5, #1
 80132f8:	b25b      	sxtb	r3, r3
 80132fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80132fe:	2001      	movs	r0, #1
 8013300:	e7f5      	b.n	80132ee <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8013302:	2000      	movs	r0, #0
 8013304:	e7f3      	b.n	80132ee <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8013306:	2001      	movs	r0, #1
 8013308:	e7f1      	b.n	80132ee <xQueueGenericSendFromISR+0xba>
 801330a:	2001      	movs	r0, #1
 801330c:	e7ef      	b.n	80132ee <xQueueGenericSendFromISR+0xba>
 801330e:	2001      	movs	r0, #1
 8013310:	e7ed      	b.n	80132ee <xQueueGenericSendFromISR+0xba>

08013312 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8013312:	b160      	cbz	r0, 801332e <xQueueGiveFromISR+0x1c>
{
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8013318:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801331a:	b18b      	cbz	r3, 8013340 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013320:	f383 8811 	msr	BASEPRI, r3
 8013324:	f3bf 8f6f 	isb	sy
 8013328:	f3bf 8f4f 	dsb	sy
 801332c:	e7fe      	b.n	801332c <xQueueGiveFromISR+0x1a>
 801332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013332:	f383 8811 	msr	BASEPRI, r3
 8013336:	f3bf 8f6f 	isb	sy
 801333a:	f3bf 8f4f 	dsb	sy
 801333e:	e7fe      	b.n	801333e <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013340:	6803      	ldr	r3, [r0, #0]
 8013342:	b153      	cbz	r3, 801335a <xQueueGiveFromISR+0x48>
 8013344:	2301      	movs	r3, #1
 8013346:	b973      	cbnz	r3, 8013366 <xQueueGiveFromISR+0x54>
 8013348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334c:	f383 8811 	msr	BASEPRI, r3
 8013350:	f3bf 8f6f 	isb	sy
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	e7fe      	b.n	8013358 <xQueueGiveFromISR+0x46>
 801335a:	6843      	ldr	r3, [r0, #4]
 801335c:	b90b      	cbnz	r3, 8013362 <xQueueGiveFromISR+0x50>
 801335e:	2301      	movs	r3, #1
 8013360:	e7f1      	b.n	8013346 <xQueueGiveFromISR+0x34>
 8013362:	2300      	movs	r3, #0
 8013364:	e7ef      	b.n	8013346 <xQueueGiveFromISR+0x34>
 8013366:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013368:	f7ff fb32 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 801336c:	f3ef 8511 	mrs	r5, BASEPRI
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013384:	429a      	cmp	r2, r3
 8013386:	d21a      	bcs.n	80133be <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013388:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801338c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801338e:	3201      	adds	r2, #1
 8013390:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013396:	d10c      	bne.n	80133b2 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801339a:	b193      	cbz	r3, 80133c2 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801339c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80133a0:	f001 ff16 	bl	80151d0 <xTaskRemoveFromEventList>
 80133a4:	b178      	cbz	r0, 80133c6 <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 80133a6:	b186      	cbz	r6, 80133ca <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133a8:	2001      	movs	r0, #1
 80133aa:	6030      	str	r0, [r6, #0]
	__asm volatile
 80133ac:	f385 8811 	msr	BASEPRI, r5
}
 80133b0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133b2:	3301      	adds	r3, #1
 80133b4:	b25b      	sxtb	r3, r3
 80133b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80133ba:	2001      	movs	r0, #1
 80133bc:	e7f6      	b.n	80133ac <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 80133be:	2000      	movs	r0, #0
 80133c0:	e7f4      	b.n	80133ac <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 80133c2:	2001      	movs	r0, #1
 80133c4:	e7f2      	b.n	80133ac <xQueueGiveFromISR+0x9a>
 80133c6:	2001      	movs	r0, #1
 80133c8:	e7f0      	b.n	80133ac <xQueueGiveFromISR+0x9a>
 80133ca:	2001      	movs	r0, #1
 80133cc:	e7ee      	b.n	80133ac <xQueueGiveFromISR+0x9a>

080133ce <xQueueReceive>:
{
 80133ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133d0:	b085      	sub	sp, #20
 80133d2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80133d4:	b160      	cbz	r0, 80133f0 <xQueueReceive+0x22>
 80133d6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133d8:	b199      	cbz	r1, 8013402 <xQueueReceive+0x34>
 80133da:	2501      	movs	r5, #1
 80133dc:	b9bd      	cbnz	r5, 801340e <xQueueReceive+0x40>
	__asm volatile
 80133de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	e7fe      	b.n	80133ee <xQueueReceive+0x20>
 80133f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	e7fe      	b.n	8013400 <xQueueReceive+0x32>
 8013402:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013404:	b90b      	cbnz	r3, 801340a <xQueueReceive+0x3c>
 8013406:	2501      	movs	r5, #1
 8013408:	e7e8      	b.n	80133dc <xQueueReceive+0xe>
 801340a:	2500      	movs	r5, #0
 801340c:	e7e6      	b.n	80133dc <xQueueReceive+0xe>
 801340e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013410:	f002 f8b0 	bl	8015574 <xTaskGetSchedulerState>
 8013414:	b910      	cbnz	r0, 801341c <xQueueReceive+0x4e>
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	b103      	cbz	r3, 801341c <xQueueReceive+0x4e>
 801341a:	2500      	movs	r5, #0
 801341c:	b945      	cbnz	r5, 8013430 <xQueueReceive+0x62>
 801341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	e7fe      	b.n	801342e <xQueueReceive+0x60>
 8013430:	2700      	movs	r7, #0
 8013432:	e02f      	b.n	8013494 <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013434:	4631      	mov	r1, r6
 8013436:	4620      	mov	r0, r4
 8013438:	f7ff fc7e 	bl	8012d38 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801343c:	3d01      	subs	r5, #1
 801343e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013440:	6923      	ldr	r3, [r4, #16]
 8013442:	b163      	cbz	r3, 801345e <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013444:	f104 0010 	add.w	r0, r4, #16
 8013448:	f001 fec2 	bl	80151d0 <xTaskRemoveFromEventList>
 801344c:	b138      	cbz	r0, 801345e <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 801344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013452:	4b35      	ldr	r3, [pc, #212]	; (8013528 <xQueueReceive+0x15a>)
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801345e:	f7ff f9b5 	bl	80127cc <vPortExitCritical>
				return pdPASS;
 8013462:	2001      	movs	r0, #1
}
 8013464:	b005      	add	sp, #20
 8013466:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8013468:	f7ff f9b0 	bl	80127cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 801346c:	2000      	movs	r0, #0
 801346e:	e7f9      	b.n	8013464 <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013470:	a802      	add	r0, sp, #8
 8013472:	f001 ff4d 	bl	8015310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013476:	2701      	movs	r7, #1
 8013478:	e016      	b.n	80134a8 <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
 801347a:	2300      	movs	r3, #0
 801347c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013480:	e01e      	b.n	80134c0 <xQueueReceive+0xf2>
 8013482:	2300      	movs	r3, #0
 8013484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013488:	e020      	b.n	80134cc <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
 801348a:	4620      	mov	r0, r4
 801348c:	f7ff fc66 	bl	8012d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013490:	f001 fc7a 	bl	8014d88 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8013494:	f7ff f978 	bl	8012788 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013498:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801349a:	2d00      	cmp	r5, #0
 801349c:	d1ca      	bne.n	8013434 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 801349e:	9b01      	ldr	r3, [sp, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d0e1      	beq.n	8013468 <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
 80134a4:	2f00      	cmp	r7, #0
 80134a6:	d0e3      	beq.n	8013470 <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
 80134a8:	f7ff f990 	bl	80127cc <vPortExitCritical>
		vTaskSuspendAll();
 80134ac:	f001 fbae 	bl	8014c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134b0:	f7ff f96a 	bl	8012788 <vPortEnterCritical>
 80134b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80134b8:	b25b      	sxtb	r3, r3
 80134ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134be:	d0dc      	beq.n	801347a <xQueueReceive+0xac>
 80134c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80134c4:	b25b      	sxtb	r3, r3
 80134c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134ca:	d0da      	beq.n	8013482 <xQueueReceive+0xb4>
 80134cc:	f7ff f97e 	bl	80127cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134d0:	a901      	add	r1, sp, #4
 80134d2:	a802      	add	r0, sp, #8
 80134d4:	f001 ff26 	bl	8015324 <xTaskCheckForTimeOut>
 80134d8:	b9c8      	cbnz	r0, 801350e <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134da:	4620      	mov	r0, r4
 80134dc:	f7ff fbe4 	bl	8012ca8 <prvIsQueueEmpty>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d0d2      	beq.n	801348a <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134e4:	9901      	ldr	r1, [sp, #4]
 80134e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134ea:	f001 fe0b 	bl	8015104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80134ee:	4620      	mov	r0, r4
 80134f0:	f7ff fc34 	bl	8012d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80134f4:	f001 fc48 	bl	8014d88 <xTaskResumeAll>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d1cb      	bne.n	8013494 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
 80134fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013500:	4b09      	ldr	r3, [pc, #36]	; (8013528 <xQueueReceive+0x15a>)
 8013502:	601a      	str	r2, [r3, #0]
 8013504:	f3bf 8f4f 	dsb	sy
 8013508:	f3bf 8f6f 	isb	sy
 801350c:	e7c2      	b.n	8013494 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 801350e:	4620      	mov	r0, r4
 8013510:	f7ff fc24 	bl	8012d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013514:	f001 fc38 	bl	8014d88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013518:	4620      	mov	r0, r4
 801351a:	f7ff fbc5 	bl	8012ca8 <prvIsQueueEmpty>
 801351e:	2800      	cmp	r0, #0
 8013520:	d0b8      	beq.n	8013494 <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
 8013522:	2000      	movs	r0, #0
 8013524:	e79e      	b.n	8013464 <xQueueReceive+0x96>
 8013526:	bf00      	nop
 8013528:	e000ed04 	.word	0xe000ed04

0801352c <xQueueSemaphoreTake>:
{
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013532:	b158      	cbz	r0, 801354c <xQueueSemaphoreTake+0x20>
 8013534:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8013536:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013538:	b18b      	cbz	r3, 801355e <xQueueSemaphoreTake+0x32>
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	e7fe      	b.n	801354a <xQueueSemaphoreTake+0x1e>
 801354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013550:	f383 8811 	msr	BASEPRI, r3
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	f3bf 8f4f 	dsb	sy
 801355c:	e7fe      	b.n	801355c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801355e:	f002 f809 	bl	8015574 <xTaskGetSchedulerState>
 8013562:	b960      	cbnz	r0, 801357e <xQueueSemaphoreTake+0x52>
 8013564:	9b01      	ldr	r3, [sp, #4]
 8013566:	b963      	cbnz	r3, 8013582 <xQueueSemaphoreTake+0x56>
 8013568:	2301      	movs	r3, #1
 801356a:	b963      	cbnz	r3, 8013586 <xQueueSemaphoreTake+0x5a>
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	e7fe      	b.n	801357c <xQueueSemaphoreTake+0x50>
 801357e:	2301      	movs	r3, #1
 8013580:	e7f3      	b.n	801356a <xQueueSemaphoreTake+0x3e>
 8013582:	2300      	movs	r3, #0
 8013584:	e7f1      	b.n	801356a <xQueueSemaphoreTake+0x3e>
 8013586:	2500      	movs	r5, #0
 8013588:	462e      	mov	r6, r5
 801358a:	e04e      	b.n	801362a <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801358c:	3b01      	subs	r3, #1
 801358e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	b913      	cbnz	r3, 801359a <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013594:	f002 f9d8 	bl	8015948 <pvTaskIncrementMutexHeldCount>
 8013598:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801359a:	6923      	ldr	r3, [r4, #16]
 801359c:	b163      	cbz	r3, 80135b8 <xQueueSemaphoreTake+0x8c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801359e:	f104 0010 	add.w	r0, r4, #16
 80135a2:	f001 fe15 	bl	80151d0 <xTaskRemoveFromEventList>
 80135a6:	b138      	cbz	r0, 80135b8 <xQueueSemaphoreTake+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
 80135a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ac:	4b47      	ldr	r3, [pc, #284]	; (80136cc <xQueueSemaphoreTake+0x1a0>)
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80135b8:	f7ff f908 	bl	80127cc <vPortExitCritical>
				return pdPASS;
 80135bc:	2501      	movs	r5, #1
}
 80135be:	4628      	mov	r0, r5
 80135c0:	b004      	add	sp, #16
 80135c2:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80135c4:	b145      	cbz	r5, 80135d8 <xQueueSemaphoreTake+0xac>
 80135c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ca:	f383 8811 	msr	BASEPRI, r3
 80135ce:	f3bf 8f6f 	isb	sy
 80135d2:	f3bf 8f4f 	dsb	sy
 80135d6:	e7fe      	b.n	80135d6 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 80135d8:	f7ff f8f8 	bl	80127cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 80135dc:	e7ef      	b.n	80135be <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135de:	a802      	add	r0, sp, #8
 80135e0:	f001 fe96 	bl	8015310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135e4:	2601      	movs	r6, #1
 80135e6:	e02a      	b.n	801363e <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 80135e8:	2300      	movs	r3, #0
 80135ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80135ee:	e032      	b.n	8013656 <xQueueSemaphoreTake+0x12a>
 80135f0:	2300      	movs	r3, #0
 80135f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80135f6:	e034      	b.n	8013662 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 80135f8:	f7ff f8c6 	bl	8012788 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80135fc:	6860      	ldr	r0, [r4, #4]
 80135fe:	f001 ffc9 	bl	8015594 <xTaskPriorityInherit>
 8013602:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8013604:	f7ff f8e2 	bl	80127cc <vPortExitCritical>
 8013608:	e03b      	b.n	8013682 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 801360a:	4620      	mov	r0, r4
 801360c:	f7ff fba6 	bl	8012d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013610:	f001 fbba 	bl	8014d88 <xTaskResumeAll>
 8013614:	e009      	b.n	801362a <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 8013616:	4620      	mov	r0, r4
 8013618:	f7ff fba0 	bl	8012d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801361c:	f001 fbb4 	bl	8014d88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013620:	4620      	mov	r0, r4
 8013622:	f7ff fb41 	bl	8012ca8 <prvIsQueueEmpty>
 8013626:	2800      	cmp	r0, #0
 8013628:	d140      	bne.n	80136ac <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 801362a:	f7ff f8ad 	bl	8012788 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801362e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1ab      	bne.n	801358c <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013634:	9b01      	ldr	r3, [sp, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d0c4      	beq.n	80135c4 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801363a:	2e00      	cmp	r6, #0
 801363c:	d0cf      	beq.n	80135de <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 801363e:	f7ff f8c5 	bl	80127cc <vPortExitCritical>
		vTaskSuspendAll();
 8013642:	f001 fae3 	bl	8014c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013646:	f7ff f89f 	bl	8012788 <vPortEnterCritical>
 801364a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801364e:	b25b      	sxtb	r3, r3
 8013650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013654:	d0c8      	beq.n	80135e8 <xQueueSemaphoreTake+0xbc>
 8013656:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801365a:	b25b      	sxtb	r3, r3
 801365c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013660:	d0c6      	beq.n	80135f0 <xQueueSemaphoreTake+0xc4>
 8013662:	f7ff f8b3 	bl	80127cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013666:	a901      	add	r1, sp, #4
 8013668:	a802      	add	r0, sp, #8
 801366a:	f001 fe5b 	bl	8015324 <xTaskCheckForTimeOut>
 801366e:	2800      	cmp	r0, #0
 8013670:	d1d1      	bne.n	8013616 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013672:	4620      	mov	r0, r4
 8013674:	f7ff fb18 	bl	8012ca8 <prvIsQueueEmpty>
 8013678:	2800      	cmp	r0, #0
 801367a:	d0c6      	beq.n	801360a <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d0ba      	beq.n	80135f8 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013682:	9901      	ldr	r1, [sp, #4]
 8013684:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013688:	f001 fd3c 	bl	8015104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801368c:	4620      	mov	r0, r4
 801368e:	f7ff fb65 	bl	8012d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013692:	f001 fb79 	bl	8014d88 <xTaskResumeAll>
 8013696:	2800      	cmp	r0, #0
 8013698:	d1c7      	bne.n	801362a <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 801369a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801369e:	4b0b      	ldr	r3, [pc, #44]	; (80136cc <xQueueSemaphoreTake+0x1a0>)
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	e7be      	b.n	801362a <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 80136ac:	2d00      	cmp	r5, #0
 80136ae:	d086      	beq.n	80135be <xQueueSemaphoreTake+0x92>
						taskENTER_CRITICAL();
 80136b0:	f7ff f86a 	bl	8012788 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80136b4:	4620      	mov	r0, r4
 80136b6:	f7ff fadf 	bl	8012c78 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80136ba:	4601      	mov	r1, r0
 80136bc:	6860      	ldr	r0, [r4, #4]
 80136be:	f002 f807 	bl	80156d0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80136c2:	f7ff f883 	bl	80127cc <vPortExitCritical>
				return errQUEUE_EMPTY;
 80136c6:	2500      	movs	r5, #0
 80136c8:	e779      	b.n	80135be <xQueueSemaphoreTake+0x92>
 80136ca:	bf00      	nop
 80136cc:	e000ed04 	.word	0xe000ed04

080136d0 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80136d0:	b188      	cbz	r0, 80136f6 <xQueueTakeMutexRecursive+0x26>
	{
 80136d2:	b570      	push	{r4, r5, r6, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	460d      	mov	r5, r1
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80136d8:	6846      	ldr	r6, [r0, #4]
 80136da:	f001 ff45 	bl	8015568 <xTaskGetCurrentTaskHandle>
 80136de:	4286      	cmp	r6, r0
 80136e0:	d012      	beq.n	8013708 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80136e2:	4629      	mov	r1, r5
 80136e4:	4620      	mov	r0, r4
 80136e6:	f7ff ff21 	bl	801352c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80136ea:	4602      	mov	r2, r0
 80136ec:	b180      	cbz	r0, 8013710 <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.uxRecursiveCallCount )++;
 80136ee:	68e3      	ldr	r3, [r4, #12]
 80136f0:	3301      	adds	r3, #1
 80136f2:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80136f4:	e00c      	b.n	8013710 <xQueueTakeMutexRecursive+0x40>
 80136f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fa:	f383 8811 	msr	BASEPRI, r3
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	f3bf 8f4f 	dsb	sy
 8013706:	e7fe      	b.n	8013706 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.uxRecursiveCallCount )++;
 8013708:	68e3      	ldr	r3, [r4, #12]
 801370a:	3301      	adds	r3, #1
 801370c:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 801370e:	2201      	movs	r2, #1
	}
 8013710:	4610      	mov	r0, r2
 8013712:	bd70      	pop	{r4, r5, r6, pc}

08013714 <xQueuePeek>:
{
 8013714:	b570      	push	{r4, r5, r6, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801371a:	b160      	cbz	r0, 8013736 <xQueuePeek+0x22>
 801371c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801371e:	b199      	cbz	r1, 8013748 <xQueuePeek+0x34>
 8013720:	2501      	movs	r5, #1
 8013722:	b9bd      	cbnz	r5, 8013754 <xQueuePeek+0x40>
 8013724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013728:	f383 8811 	msr	BASEPRI, r3
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	e7fe      	b.n	8013734 <xQueuePeek+0x20>
 8013736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373a:	f383 8811 	msr	BASEPRI, r3
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	e7fe      	b.n	8013746 <xQueuePeek+0x32>
 8013748:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801374a:	b90b      	cbnz	r3, 8013750 <xQueuePeek+0x3c>
 801374c:	2501      	movs	r5, #1
 801374e:	e7e8      	b.n	8013722 <xQueuePeek+0xe>
 8013750:	2500      	movs	r5, #0
 8013752:	e7e6      	b.n	8013722 <xQueuePeek+0xe>
 8013754:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013756:	f001 ff0d 	bl	8015574 <xTaskGetSchedulerState>
 801375a:	b910      	cbnz	r0, 8013762 <xQueuePeek+0x4e>
 801375c:	9b01      	ldr	r3, [sp, #4]
 801375e:	b103      	cbz	r3, 8013762 <xQueuePeek+0x4e>
 8013760:	2500      	movs	r5, #0
 8013762:	b945      	cbnz	r5, 8013776 <xQueuePeek+0x62>
 8013764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013768:	f383 8811 	msr	BASEPRI, r3
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	f3bf 8f4f 	dsb	sy
 8013774:	e7fe      	b.n	8013774 <xQueuePeek+0x60>
 8013776:	2500      	movs	r5, #0
 8013778:	e02f      	b.n	80137da <xQueuePeek+0xc6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 801377a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801377c:	4631      	mov	r1, r6
 801377e:	4620      	mov	r0, r4
 8013780:	f7ff fada 	bl	8012d38 <prvCopyDataFromQueue>
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013784:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013788:	b163      	cbz	r3, 80137a4 <xQueuePeek+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801378a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801378e:	f001 fd1f 	bl	80151d0 <xTaskRemoveFromEventList>
 8013792:	b138      	cbz	r0, 80137a4 <xQueuePeek+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 8013794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013798:	4b34      	ldr	r3, [pc, #208]	; (801386c <xQueuePeek+0x158>)
 801379a:	601a      	str	r2, [r3, #0]
 801379c:	f3bf 8f4f 	dsb	sy
 80137a0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80137a4:	f7ff f812 	bl	80127cc <vPortExitCritical>
				return pdPASS;
 80137a8:	2001      	movs	r0, #1
}
 80137aa:	b004      	add	sp, #16
 80137ac:	bd70      	pop	{r4, r5, r6, pc}
					taskEXIT_CRITICAL();
 80137ae:	f7ff f80d 	bl	80127cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 80137b2:	2000      	movs	r0, #0
 80137b4:	e7f9      	b.n	80137aa <xQueuePeek+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137b6:	a802      	add	r0, sp, #8
 80137b8:	f001 fdaa 	bl	8015310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137bc:	2501      	movs	r5, #1
 80137be:	e016      	b.n	80137ee <xQueuePeek+0xda>
		prvLockQueue( pxQueue );
 80137c0:	2300      	movs	r3, #0
 80137c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80137c6:	e01e      	b.n	8013806 <xQueuePeek+0xf2>
 80137c8:	2300      	movs	r3, #0
 80137ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80137ce:	e020      	b.n	8013812 <xQueuePeek+0xfe>
				prvUnlockQueue( pxQueue );
 80137d0:	4620      	mov	r0, r4
 80137d2:	f7ff fac3 	bl	8012d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80137d6:	f001 fad7 	bl	8014d88 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80137da:	f7fe ffd5 	bl	8012788 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d1ca      	bne.n	801377a <xQueuePeek+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 80137e4:	9b01      	ldr	r3, [sp, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d0e1      	beq.n	80137ae <xQueuePeek+0x9a>
				else if( xEntryTimeSet == pdFALSE )
 80137ea:	2d00      	cmp	r5, #0
 80137ec:	d0e3      	beq.n	80137b6 <xQueuePeek+0xa2>
		taskEXIT_CRITICAL();
 80137ee:	f7fe ffed 	bl	80127cc <vPortExitCritical>
		vTaskSuspendAll();
 80137f2:	f001 fa0b 	bl	8014c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137f6:	f7fe ffc7 	bl	8012788 <vPortEnterCritical>
 80137fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80137fe:	b25b      	sxtb	r3, r3
 8013800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013804:	d0dc      	beq.n	80137c0 <xQueuePeek+0xac>
 8013806:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801380a:	b25b      	sxtb	r3, r3
 801380c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013810:	d0da      	beq.n	80137c8 <xQueuePeek+0xb4>
 8013812:	f7fe ffdb 	bl	80127cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013816:	a901      	add	r1, sp, #4
 8013818:	a802      	add	r0, sp, #8
 801381a:	f001 fd83 	bl	8015324 <xTaskCheckForTimeOut>
 801381e:	b9c8      	cbnz	r0, 8013854 <xQueuePeek+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013820:	4620      	mov	r0, r4
 8013822:	f7ff fa41 	bl	8012ca8 <prvIsQueueEmpty>
 8013826:	2800      	cmp	r0, #0
 8013828:	d0d2      	beq.n	80137d0 <xQueuePeek+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801382a:	9901      	ldr	r1, [sp, #4]
 801382c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013830:	f001 fc68 	bl	8015104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013834:	4620      	mov	r0, r4
 8013836:	f7ff fa91 	bl	8012d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801383a:	f001 faa5 	bl	8014d88 <xTaskResumeAll>
 801383e:	2800      	cmp	r0, #0
 8013840:	d1cb      	bne.n	80137da <xQueuePeek+0xc6>
					portYIELD_WITHIN_API();
 8013842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013846:	4b09      	ldr	r3, [pc, #36]	; (801386c <xQueuePeek+0x158>)
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	e7c2      	b.n	80137da <xQueuePeek+0xc6>
			prvUnlockQueue( pxQueue );
 8013854:	4620      	mov	r0, r4
 8013856:	f7ff fa81 	bl	8012d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801385a:	f001 fa95 	bl	8014d88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801385e:	4620      	mov	r0, r4
 8013860:	f7ff fa22 	bl	8012ca8 <prvIsQueueEmpty>
 8013864:	2800      	cmp	r0, #0
 8013866:	d0b8      	beq.n	80137da <xQueuePeek+0xc6>
				return errQUEUE_EMPTY;
 8013868:	2000      	movs	r0, #0
 801386a:	e79e      	b.n	80137aa <xQueuePeek+0x96>
 801386c:	e000ed04 	.word	0xe000ed04

08013870 <xQueueReceiveFromISR>:
{
 8013870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013874:	b160      	cbz	r0, 8013890 <xQueueReceiveFromISR+0x20>
 8013876:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013878:	b199      	cbz	r1, 80138a2 <xQueueReceiveFromISR+0x32>
 801387a:	2301      	movs	r3, #1
 801387c:	b9bb      	cbnz	r3, 80138ae <xQueueReceiveFromISR+0x3e>
 801387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013882:	f383 8811 	msr	BASEPRI, r3
 8013886:	f3bf 8f6f 	isb	sy
 801388a:	f3bf 8f4f 	dsb	sy
 801388e:	e7fe      	b.n	801388e <xQueueReceiveFromISR+0x1e>
 8013890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013894:	f383 8811 	msr	BASEPRI, r3
 8013898:	f3bf 8f6f 	isb	sy
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	e7fe      	b.n	80138a0 <xQueueReceiveFromISR+0x30>
 80138a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80138a4:	b90b      	cbnz	r3, 80138aa <xQueueReceiveFromISR+0x3a>
 80138a6:	2301      	movs	r3, #1
 80138a8:	e7e8      	b.n	801387c <xQueueReceiveFromISR+0xc>
 80138aa:	2300      	movs	r3, #0
 80138ac:	e7e6      	b.n	801387c <xQueueReceiveFromISR+0xc>
 80138ae:	4617      	mov	r7, r2
 80138b0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80138b2:	f7ff f88d 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 80138b6:	f3ef 8611 	mrs	r6, BASEPRI
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138ca:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80138ce:	f1b8 0f00 	cmp.w	r8, #0
 80138d2:	d020      	beq.n	8013916 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 80138d4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80138d8:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80138da:	4649      	mov	r1, r9
 80138dc:	4620      	mov	r0, r4
 80138de:	f7ff fa2b 	bl	8012d38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80138e2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80138e6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80138e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80138ec:	d10d      	bne.n	801390a <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138ee:	6923      	ldr	r3, [r4, #16]
 80138f0:	b19b      	cbz	r3, 801391a <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138f2:	f104 0010 	add.w	r0, r4, #16
 80138f6:	f001 fc6b 	bl	80151d0 <xTaskRemoveFromEventList>
 80138fa:	b180      	cbz	r0, 801391e <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 80138fc:	b18f      	cbz	r7, 8013922 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80138fe:	2001      	movs	r0, #1
 8013900:	6038      	str	r0, [r7, #0]
	__asm volatile
 8013902:	f386 8811 	msr	BASEPRI, r6
}
 8013906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801390a:	1c6b      	adds	r3, r5, #1
 801390c:	b25b      	sxtb	r3, r3
 801390e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8013912:	2001      	movs	r0, #1
 8013914:	e7f5      	b.n	8013902 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8013916:	2000      	movs	r0, #0
 8013918:	e7f3      	b.n	8013902 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 801391a:	2001      	movs	r0, #1
 801391c:	e7f1      	b.n	8013902 <xQueueReceiveFromISR+0x92>
 801391e:	2001      	movs	r0, #1
 8013920:	e7ef      	b.n	8013902 <xQueueReceiveFromISR+0x92>
 8013922:	2001      	movs	r0, #1
 8013924:	e7ed      	b.n	8013902 <xQueueReceiveFromISR+0x92>

08013926 <xQueuePeekFromISR>:
{
 8013926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxQueue );
 8013928:	b160      	cbz	r0, 8013944 <xQueuePeekFromISR+0x1e>
 801392a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801392c:	b199      	cbz	r1, 8013956 <xQueuePeekFromISR+0x30>
 801392e:	2301      	movs	r3, #1
 8013930:	b9bb      	cbnz	r3, 8013962 <xQueuePeekFromISR+0x3c>
	__asm volatile
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	e7fe      	b.n	8013942 <xQueuePeekFromISR+0x1c>
 8013944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	e7fe      	b.n	8013954 <xQueuePeekFromISR+0x2e>
 8013956:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013958:	b90b      	cbnz	r3, 801395e <xQueuePeekFromISR+0x38>
 801395a:	2301      	movs	r3, #1
 801395c:	e7e8      	b.n	8013930 <xQueuePeekFromISR+0xa>
 801395e:	2300      	movs	r3, #0
 8013960:	e7e6      	b.n	8013930 <xQueuePeekFromISR+0xa>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8013962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013964:	b943      	cbnz	r3, 8013978 <xQueuePeekFromISR+0x52>
 8013966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396a:	f383 8811 	msr	BASEPRI, r3
 801396e:	f3bf 8f6f 	isb	sy
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	e7fe      	b.n	8013976 <xQueuePeekFromISR+0x50>
 8013978:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801397a:	f7ff f829 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 801397e:	f3ef 8611 	mrs	r6, BASEPRI
 8013982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013986:	f383 8811 	msr	BASEPRI, r3
 801398a:	f3bf 8f6f 	isb	sy
 801398e:	f3bf 8f4f 	dsb	sy
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013994:	b14b      	cbz	r3, 80139aa <xQueuePeekFromISR+0x84>
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013996:	68e7      	ldr	r7, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013998:	4629      	mov	r1, r5
 801399a:	4620      	mov	r0, r4
 801399c:	f7ff f9cc 	bl	8012d38 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80139a0:	60e7      	str	r7, [r4, #12]
			xReturn = pdPASS;
 80139a2:	2001      	movs	r0, #1
	__asm volatile
 80139a4:	f386 8811 	msr	BASEPRI, r6
}
 80139a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdFAIL;
 80139aa:	2000      	movs	r0, #0
 80139ac:	e7fa      	b.n	80139a4 <xQueuePeekFromISR+0x7e>

080139ae <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80139ae:	b940      	cbnz	r0, 80139c2 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80139b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b4:	f383 8811 	msr	BASEPRI, r3
 80139b8:	f3bf 8f6f 	isb	sy
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	e7fe      	b.n	80139c0 <uxQueueMessagesWaiting+0x12>
{
 80139c2:	b510      	push	{r4, lr}
 80139c4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80139c6:	f7fe fedf 	bl	8012788 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80139ca:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80139cc:	f7fe fefe 	bl	80127cc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80139d0:	4620      	mov	r0, r4
 80139d2:	bd10      	pop	{r4, pc}

080139d4 <uxQueueSpacesAvailable>:
	configASSERT( pxQueue );
 80139d4:	b940      	cbnz	r0, 80139e8 <uxQueueSpacesAvailable+0x14>
 80139d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139da:	f383 8811 	msr	BASEPRI, r3
 80139de:	f3bf 8f6f 	isb	sy
 80139e2:	f3bf 8f4f 	dsb	sy
 80139e6:	e7fe      	b.n	80139e6 <uxQueueSpacesAvailable+0x12>
{
 80139e8:	b510      	push	{r4, lr}
 80139ea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80139ec:	f7fe fecc 	bl	8012788 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80139f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139f2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80139f4:	1b1c      	subs	r4, r3, r4
	taskEXIT_CRITICAL();
 80139f6:	f7fe fee9 	bl	80127cc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80139fa:	4620      	mov	r0, r4
 80139fc:	bd10      	pop	{r4, pc}

080139fe <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 80139fe:	b108      	cbz	r0, 8013a04 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013a00:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013a02:	4770      	bx	lr
 8013a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a08:	f383 8811 	msr	BASEPRI, r3
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	e7fe      	b.n	8013a14 <uxQueueMessagesWaitingFromISR+0x16>

08013a16 <uxQueueGetQueueNumber>:
	}
 8013a16:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013a18:	4770      	bx	lr

08013a1a <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8013a1a:	6481      	str	r1, [r0, #72]	; 0x48
 8013a1c:	4770      	bx	lr

08013a1e <ucQueueGetQueueType>:
	}
 8013a1e:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8013a22:	4770      	bx	lr

08013a24 <xQueueIsQueueEmptyFromISR>:
	configASSERT( xQueue );
 8013a24:	b118      	cbz	r0, 8013a2e <xQueueIsQueueEmptyFromISR+0xa>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8013a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013a28:	b153      	cbz	r3, 8013a40 <xQueueIsQueueEmptyFromISR+0x1c>
		xReturn = pdFALSE;
 8013a2a:	2000      	movs	r0, #0
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013a2c:	4770      	bx	lr
 8013a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a32:	f383 8811 	msr	BASEPRI, r3
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	f3bf 8f4f 	dsb	sy
 8013a3e:	e7fe      	b.n	8013a3e <xQueueIsQueueEmptyFromISR+0x1a>
		xReturn = pdTRUE;
 8013a40:	2001      	movs	r0, #1
 8013a42:	4770      	bx	lr

08013a44 <xQueueIsQueueFullFromISR>:

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 8013a44:	b128      	cbz	r0, 8013a52 <xQueueIsQueueFullFromISR+0xe>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8013a46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8013a48:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d00a      	beq.n	8013a64 <xQueueIsQueueFullFromISR+0x20>
	{
		xReturn = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
 8013a4e:	2000      	movs	r0, #0
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013a50:	4770      	bx	lr
 8013a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	e7fe      	b.n	8013a62 <xQueueIsQueueFullFromISR+0x1e>
		xReturn = pdTRUE;
 8013a64:	2001      	movs	r0, #1
 8013a66:	4770      	bx	lr

08013a68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a68:	2300      	movs	r3, #0
 8013a6a:	2b07      	cmp	r3, #7
 8013a6c:	d80c      	bhi.n	8013a88 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013a6e:	4a07      	ldr	r2, [pc, #28]	; (8013a8c <vQueueAddToRegistry+0x24>)
 8013a70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013a74:	b10a      	cbz	r2, 8013a7a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a76:	3301      	adds	r3, #1
 8013a78:	e7f7      	b.n	8013a6a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013a7a:	4a04      	ldr	r2, [pc, #16]	; (8013a8c <vQueueAddToRegistry+0x24>)
 8013a7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013a84:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013a86:	4770      	bx	lr
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	20005ecc 	.word	0x20005ecc

08013a90 <pcQueueGetName>:
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a90:	2300      	movs	r3, #0
 8013a92:	2b07      	cmp	r3, #7
 8013a94:	d80b      	bhi.n	8013aae <pcQueueGetName+0x1e>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013a96:	4a07      	ldr	r2, [pc, #28]	; (8013ab4 <pcQueueGetName+0x24>)
 8013a98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013a9c:	6852      	ldr	r2, [r2, #4]
 8013a9e:	4282      	cmp	r2, r0
 8013aa0:	d001      	beq.n	8013aa6 <pcQueueGetName+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	e7f5      	b.n	8013a92 <pcQueueGetName+0x2>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8013aa6:	4a03      	ldr	r2, [pc, #12]	; (8013ab4 <pcQueueGetName+0x24>)
 8013aa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
				break;
 8013aac:	4770      	bx	lr
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8013aae:	2000      	movs	r0, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	20005ecc 	.word	0x20005ecc

08013ab8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ab8:	2300      	movs	r3, #0
 8013aba:	2b07      	cmp	r3, #7
 8013abc:	d80f      	bhi.n	8013ade <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013abe:	4a08      	ldr	r2, [pc, #32]	; (8013ae0 <vQueueUnregisterQueue+0x28>)
 8013ac0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ac4:	6852      	ldr	r2, [r2, #4]
 8013ac6:	4282      	cmp	r2, r0
 8013ac8:	d001      	beq.n	8013ace <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013aca:	3301      	adds	r3, #1
 8013acc:	e7f5      	b.n	8013aba <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013ace:	4a04      	ldr	r2, [pc, #16]	; (8013ae0 <vQueueUnregisterQueue+0x28>)
 8013ad0:	2100      	movs	r1, #0
 8013ad2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013ad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ada:	6059      	str	r1, [r3, #4]
				break;
 8013adc:	4770      	bx	lr
 8013ade:	4770      	bx	lr
 8013ae0:	20005ecc 	.word	0x20005ecc

08013ae4 <vQueueDelete>:
	configASSERT( pxQueue );
 8013ae4:	b150      	cbz	r0, 8013afc <vQueueDelete+0x18>
{
 8013ae6:	b510      	push	{r4, lr}
 8013ae8:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8013aea:	f7ff ffe5 	bl	8013ab8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013aee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013af2:	b913      	cbnz	r3, 8013afa <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8013af4:	4620      	mov	r0, r4
 8013af6:	f7ff f879 	bl	8012bec <vPortFree>
 8013afa:	bd10      	pop	{r4, pc}
 8013afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b00:	f383 8811 	msr	BASEPRI, r3
 8013b04:	f3bf 8f6f 	isb	sy
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	e7fe      	b.n	8013b0c <vQueueDelete+0x28>

08013b0e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b0e:	b570      	push	{r4, r5, r6, lr}
 8013b10:	4604      	mov	r4, r0
 8013b12:	460d      	mov	r5, r1
 8013b14:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013b16:	f7fe fe37 	bl	8012788 <vPortEnterCritical>
 8013b1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013b1e:	b25b      	sxtb	r3, r3
 8013b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b24:	d00d      	beq.n	8013b42 <vQueueWaitForMessageRestricted+0x34>
 8013b26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013b2a:	b25b      	sxtb	r3, r3
 8013b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b30:	d00b      	beq.n	8013b4a <vQueueWaitForMessageRestricted+0x3c>
 8013b32:	f7fe fe4b 	bl	80127cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013b38:	b15b      	cbz	r3, 8013b52 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f7ff f90e 	bl	8012d5c <prvUnlockQueue>
 8013b40:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8013b42:	2300      	movs	r3, #0
 8013b44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013b48:	e7ed      	b.n	8013b26 <vQueueWaitForMessageRestricted+0x18>
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b50:	e7ef      	b.n	8013b32 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013b52:	4632      	mov	r2, r6
 8013b54:	4629      	mov	r1, r5
 8013b56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b5a:	f001 fb1b 	bl	8015194 <vTaskPlaceOnEventListRestricted>
 8013b5e:	e7ec      	b.n	8013b3a <vQueueWaitForMessageRestricted+0x2c>

08013b60 <prvBytesInBuffer>:
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8013b60:	6882      	ldr	r2, [r0, #8]
 8013b62:	6843      	ldr	r3, [r0, #4]
 8013b64:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
 8013b66:	6800      	ldr	r0, [r0, #0]
 8013b68:	1a18      	subs	r0, r3, r0
	if ( xCount >= pxStreamBuffer->xLength )
 8013b6a:	4282      	cmp	r2, r0
 8013b6c:	d800      	bhi.n	8013b70 <prvBytesInBuffer+0x10>
	{
		xCount -= pxStreamBuffer->xLength;
 8013b6e:	1a80      	subs	r0, r0, r2
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
 8013b70:	4770      	bx	lr

08013b72 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8013b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	4616      	mov	r6, r2
 8013b7a:	461f      	mov	r7, r3
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8013b7c:	2155      	movs	r1, #85	; 0x55
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f005 fab5 	bl	80190ee <memset>
 8013b84:	4285      	cmp	r5, r0
 8013b86:	d008      	beq.n	8013b9a <prvInitialiseNewStreamBuffer+0x28>
 8013b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b8c:	f383 8811 	msr	BASEPRI, r3
 8013b90:	f3bf 8f6f 	isb	sy
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	e7fe      	b.n	8013b98 <prvInitialiseNewStreamBuffer+0x26>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8013b9a:	2224      	movs	r2, #36	; 0x24
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f005 faa5 	bl	80190ee <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8013ba4:	61a5      	str	r5, [r4, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8013ba6:	60a6      	str	r6, [r4, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8013ba8:	60e7      	str	r7, [r4, #12]

	if( xIsMessageBuffer != pdFALSE )
 8013baa:	9b06      	ldr	r3, [sp, #24]
 8013bac:	b11b      	cbz	r3, 8013bb6 <prvInitialiseNewStreamBuffer+0x44>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8013bae:	7f23      	ldrb	r3, [r4, #28]
 8013bb0:	f043 0301 	orr.w	r3, r3, #1
 8013bb4:	7723      	strb	r3, [r4, #28]
 8013bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bb8 <prvWriteBytesToBuffer>:
	configASSERT( xCount > ( size_t ) 0 );
 8013bb8:	b942      	cbnz	r2, 8013bcc <prvWriteBytesToBuffer+0x14>
 8013bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	e7fe      	b.n	8013bca <prvWriteBytesToBuffer+0x12>
{
 8013bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd0:	4617      	mov	r7, r2
	xNextHead = pxStreamBuffer->xHead;
 8013bd2:	6846      	ldr	r6, [r0, #4]
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8013bd4:	6883      	ldr	r3, [r0, #8]
 8013bd6:	eba3 0806 	sub.w	r8, r3, r6
 8013bda:	4590      	cmp	r8, r2
 8013bdc:	bf28      	it	cs
 8013bde:	4690      	movcs	r8, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8013be0:	eb06 0208 	add.w	r2, r6, r8
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d208      	bcs.n	8013bfa <prvWriteBytesToBuffer+0x42>
 8013be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bec:	f383 8811 	msr	BASEPRI, r3
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	e7fe      	b.n	8013bf8 <prvWriteBytesToBuffer+0x40>
 8013bfa:	460d      	mov	r5, r1
 8013bfc:	4604      	mov	r4, r0
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8013bfe:	6980      	ldr	r0, [r0, #24]
 8013c00:	4642      	mov	r2, r8
 8013c02:	4430      	add	r0, r6
 8013c04:	f005 fa68 	bl	80190d8 <memcpy>
	if( xCount > xFirstLength )
 8013c08:	4547      	cmp	r7, r8
 8013c0a:	d912      	bls.n	8013c32 <prvWriteBytesToBuffer+0x7a>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8013c0c:	eba7 0208 	sub.w	r2, r7, r8
 8013c10:	68a3      	ldr	r3, [r4, #8]
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d908      	bls.n	8013c28 <prvWriteBytesToBuffer+0x70>
 8013c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1a:	f383 8811 	msr	BASEPRI, r3
 8013c1e:	f3bf 8f6f 	isb	sy
 8013c22:	f3bf 8f4f 	dsb	sy
 8013c26:	e7fe      	b.n	8013c26 <prvWriteBytesToBuffer+0x6e>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8013c28:	eb05 0108 	add.w	r1, r5, r8
 8013c2c:	69a0      	ldr	r0, [r4, #24]
 8013c2e:	f005 fa53 	bl	80190d8 <memcpy>
	xNextHead += xCount;
 8013c32:	443e      	add	r6, r7
	if( xNextHead >= pxStreamBuffer->xLength )
 8013c34:	68a2      	ldr	r2, [r4, #8]
 8013c36:	4296      	cmp	r6, r2
 8013c38:	d300      	bcc.n	8013c3c <prvWriteBytesToBuffer+0x84>
		xNextHead -= pxStreamBuffer->xLength;
 8013c3a:	1ab6      	subs	r6, r6, r2
	pxStreamBuffer->xHead = xNextHead;
 8013c3c:	6066      	str	r6, [r4, #4]
}
 8013c3e:	4638      	mov	r0, r7
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c44 <prvWriteMessageToBuffer>:
{
 8013c44:	b530      	push	{r4, r5, lr}
 8013c46:	b083      	sub	sp, #12
 8013c48:	4604      	mov	r4, r0
 8013c4a:	460d      	mov	r5, r1
 8013c4c:	9201      	str	r2, [sp, #4]
	if( xSpace == ( size_t ) 0 )
 8013c4e:	b1bb      	cbz	r3, 8013c80 <prvWriteMessageToBuffer+0x3c>
 8013c50:	461a      	mov	r2, r3
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8013c52:	7f03      	ldrb	r3, [r0, #28]
 8013c54:	f013 0f01 	tst.w	r3, #1
 8013c58:	d106      	bne.n	8013c68 <prvWriteMessageToBuffer+0x24>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8013c5a:	9b01      	ldr	r3, [sp, #4]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	bf28      	it	cs
 8013c60:	461a      	movcs	r2, r3
 8013c62:	9201      	str	r2, [sp, #4]
		xShouldWrite = pdTRUE;
 8013c64:	2301      	movs	r3, #1
 8013c66:	e00c      	b.n	8013c82 <prvWriteMessageToBuffer+0x3e>
	else if( xSpace >= xRequiredSpace )
 8013c68:	9b06      	ldr	r3, [sp, #24]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d201      	bcs.n	8013c72 <prvWriteMessageToBuffer+0x2e>
		xShouldWrite = pdFALSE;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e007      	b.n	8013c82 <prvWriteMessageToBuffer+0x3e>
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8013c72:	2204      	movs	r2, #4
 8013c74:	eb0d 0102 	add.w	r1, sp, r2
 8013c78:	f7ff ff9e 	bl	8013bb8 <prvWriteBytesToBuffer>
		xShouldWrite = pdTRUE;
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e000      	b.n	8013c82 <prvWriteMessageToBuffer+0x3e>
		xShouldWrite = pdFALSE;
 8013c80:	2300      	movs	r3, #0
	if( xShouldWrite != pdFALSE )
 8013c82:	b913      	cbnz	r3, 8013c8a <prvWriteMessageToBuffer+0x46>
		xReturn = 0;
 8013c84:	2000      	movs	r0, #0
}
 8013c86:	b003      	add	sp, #12
 8013c88:	bd30      	pop	{r4, r5, pc}
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8013c8a:	9a01      	ldr	r2, [sp, #4]
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f7ff ff92 	bl	8013bb8 <prvWriteBytesToBuffer>
 8013c94:	e7f7      	b.n	8013c86 <prvWriteMessageToBuffer+0x42>

08013c96 <prvReadBytesFromBuffer>:
{
 8013c96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8013c9a:	4690      	mov	r8, r2
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	bf28      	it	cs
 8013ca0:	4698      	movcs	r8, r3
	if( xCount > ( size_t ) 0 )
 8013ca2:	f1b8 0f00 	cmp.w	r8, #0
 8013ca6:	d03e      	beq.n	8013d26 <prvReadBytesFromBuffer+0x90>
		xNextTail = pxStreamBuffer->xTail;
 8013ca8:	6804      	ldr	r4, [r0, #0]
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8013caa:	6883      	ldr	r3, [r0, #8]
 8013cac:	1b1f      	subs	r7, r3, r4
 8013cae:	4547      	cmp	r7, r8
 8013cb0:	bf28      	it	cs
 8013cb2:	4647      	movcs	r7, r8
		configASSERT( xFirstLength <= xMaxCount );
 8013cb4:	42ba      	cmp	r2, r7
 8013cb6:	d208      	bcs.n	8013cca <prvReadBytesFromBuffer+0x34>
 8013cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbc:	f383 8811 	msr	BASEPRI, r3
 8013cc0:	f3bf 8f6f 	isb	sy
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	e7fe      	b.n	8013cc8 <prvReadBytesFromBuffer+0x32>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8013cca:	19e5      	adds	r5, r4, r7
 8013ccc:	42ab      	cmp	r3, r5
 8013cce:	d208      	bcs.n	8013ce2 <prvReadBytesFromBuffer+0x4c>
 8013cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd4:	f383 8811 	msr	BASEPRI, r3
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	f3bf 8f4f 	dsb	sy
 8013ce0:	e7fe      	b.n	8013ce0 <prvReadBytesFromBuffer+0x4a>
 8013ce2:	4691      	mov	r9, r2
 8013ce4:	460e      	mov	r6, r1
 8013ce6:	4605      	mov	r5, r0
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8013ce8:	6981      	ldr	r1, [r0, #24]
 8013cea:	463a      	mov	r2, r7
 8013cec:	4421      	add	r1, r4
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f005 f9f2 	bl	80190d8 <memcpy>
		if( xCount > xFirstLength )
 8013cf4:	45b8      	cmp	r8, r7
 8013cf6:	d910      	bls.n	8013d1a <prvReadBytesFromBuffer+0x84>
			configASSERT( xCount <= xMaxCount );
 8013cf8:	45c1      	cmp	r9, r8
 8013cfa:	d208      	bcs.n	8013d0e <prvReadBytesFromBuffer+0x78>
 8013cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d00:	f383 8811 	msr	BASEPRI, r3
 8013d04:	f3bf 8f6f 	isb	sy
 8013d08:	f3bf 8f4f 	dsb	sy
 8013d0c:	e7fe      	b.n	8013d0c <prvReadBytesFromBuffer+0x76>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8013d0e:	eba8 0207 	sub.w	r2, r8, r7
 8013d12:	69a9      	ldr	r1, [r5, #24]
 8013d14:	19f0      	adds	r0, r6, r7
 8013d16:	f005 f9df 	bl	80190d8 <memcpy>
		xNextTail += xCount;
 8013d1a:	4444      	add	r4, r8
		if( xNextTail >= pxStreamBuffer->xLength )
 8013d1c:	68ab      	ldr	r3, [r5, #8]
 8013d1e:	429c      	cmp	r4, r3
 8013d20:	d300      	bcc.n	8013d24 <prvReadBytesFromBuffer+0x8e>
			xNextTail -= pxStreamBuffer->xLength;
 8013d22:	1ae4      	subs	r4, r4, r3
		pxStreamBuffer->xTail = xNextTail;
 8013d24:	602c      	str	r4, [r5, #0]
}
 8013d26:	4640      	mov	r0, r8
 8013d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013d2c <prvReadMessageFromBuffer>:
{
 8013d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d30:	b083      	sub	sp, #12
 8013d32:	4605      	mov	r5, r0
 8013d34:	460f      	mov	r7, r1
 8013d36:	4690      	mov	r8, r2
 8013d38:	461c      	mov	r4, r3
 8013d3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8013d3c:	b94e      	cbnz	r6, 8013d52 <prvReadMessageFromBuffer+0x26>
		xNextMessageLength = xBufferLengthBytes;
 8013d3e:	9201      	str	r2, [sp, #4]
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8013d40:	4623      	mov	r3, r4
 8013d42:	9a01      	ldr	r2, [sp, #4]
 8013d44:	4639      	mov	r1, r7
 8013d46:	4628      	mov	r0, r5
 8013d48:	f7ff ffa5 	bl	8013c96 <prvReadBytesFromBuffer>
}
 8013d4c:	b003      	add	sp, #12
 8013d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xOriginalTail = pxStreamBuffer->xTail;
 8013d52:	f8d0 9000 	ldr.w	r9, [r0]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8013d56:	4632      	mov	r2, r6
 8013d58:	a901      	add	r1, sp, #4
 8013d5a:	f7ff ff9c 	bl	8013c96 <prvReadBytesFromBuffer>
		xBytesAvailable -= xBytesToStoreMessageLength;
 8013d5e:	1ba4      	subs	r4, r4, r6
		if( xNextMessageLength > xBufferLengthBytes )
 8013d60:	9b01      	ldr	r3, [sp, #4]
 8013d62:	4543      	cmp	r3, r8
 8013d64:	d9ec      	bls.n	8013d40 <prvReadMessageFromBuffer+0x14>
			pxStreamBuffer->xTail = xOriginalTail;
 8013d66:	f8c5 9000 	str.w	r9, [r5]
			xNextMessageLength = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	9301      	str	r3, [sp, #4]
 8013d6e:	e7e7      	b.n	8013d40 <prvReadMessageFromBuffer+0x14>

08013d70 <xStreamBufferGenericCreate>:
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8013d70:	2804      	cmp	r0, #4
 8013d72:	d808      	bhi.n	8013d86 <xStreamBufferGenericCreate+0x16>
 8013d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d78:	f383 8811 	msr	BASEPRI, r3
 8013d7c:	f3bf 8f6f 	isb	sy
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	e7fe      	b.n	8013d84 <xStreamBufferGenericCreate+0x14>
	{
 8013d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d88:	b083      	sub	sp, #12
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	4617      	mov	r7, r2
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8013d8e:	4288      	cmp	r0, r1
 8013d90:	d208      	bcs.n	8013da4 <xStreamBufferGenericCreate+0x34>
 8013d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d96:	f383 8811 	msr	BASEPRI, r3
 8013d9a:	f3bf 8f6f 	isb	sy
 8013d9e:	f3bf 8f4f 	dsb	sy
 8013da2:	e7fe      	b.n	8013da2 <xStreamBufferGenericCreate+0x32>
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8013da4:	b901      	cbnz	r1, 8013da8 <xStreamBufferGenericCreate+0x38>
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8013da6:	2401      	movs	r4, #1
		xBufferSizeBytes++;
 8013da8:	1c46      	adds	r6, r0, #1
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8013daa:	3025      	adds	r0, #37	; 0x25
 8013dac:	f7fe fe98 	bl	8012ae0 <pvPortMalloc>
		if( pucAllocatedMemory != NULL )
 8013db0:	4605      	mov	r5, r0
 8013db2:	b130      	cbz	r0, 8013dc2 <xStreamBufferGenericCreate+0x52>
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8013db4:	9700      	str	r7, [sp, #0]
 8013db6:	4623      	mov	r3, r4
 8013db8:	4632      	mov	r2, r6
 8013dba:	f100 0124 	add.w	r1, r0, #36	; 0x24
 8013dbe:	f7ff fed8 	bl	8013b72 <prvInitialiseNewStreamBuffer>
	}
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	b003      	add	sp, #12
 8013dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013dc8 <xStreamBufferGenericCreateStatic>:
	{
 8013dc8:	b530      	push	{r4, r5, lr}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	9c08      	ldr	r4, [sp, #32]
		configASSERT( pucStreamBufferStorageArea );
 8013dce:	b163      	cbz	r3, 8013dea <xStreamBufferGenericCreateStatic+0x22>
 8013dd0:	461d      	mov	r5, r3
		configASSERT( pxStaticStreamBuffer );
 8013dd2:	b19c      	cbz	r4, 8013dfc <xStreamBufferGenericCreateStatic+0x34>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8013dd4:	4281      	cmp	r1, r0
 8013dd6:	d91a      	bls.n	8013e0e <xStreamBufferGenericCreateStatic+0x46>
 8013dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ddc:	f383 8811 	msr	BASEPRI, r3
 8013de0:	f3bf 8f6f 	isb	sy
 8013de4:	f3bf 8f4f 	dsb	sy
 8013de8:	e7fe      	b.n	8013de8 <xStreamBufferGenericCreateStatic+0x20>
 8013dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dee:	f383 8811 	msr	BASEPRI, r3
 8013df2:	f3bf 8f6f 	isb	sy
 8013df6:	f3bf 8f4f 	dsb	sy
 8013dfa:	e7fe      	b.n	8013dfa <xStreamBufferGenericCreateStatic+0x32>
 8013dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	e7fe      	b.n	8013e0c <xStreamBufferGenericCreateStatic+0x44>
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8013e0e:	b901      	cbnz	r1, 8013e12 <xStreamBufferGenericCreateStatic+0x4a>
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Function parameter deliberately modified to ensure it is in range. */
 8013e10:	2101      	movs	r1, #1
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8013e12:	2804      	cmp	r0, #4
 8013e14:	d808      	bhi.n	8013e28 <xStreamBufferGenericCreateStatic+0x60>
 8013e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1a:	f383 8811 	msr	BASEPRI, r3
 8013e1e:	f3bf 8f6f 	isb	sy
 8013e22:	f3bf 8f4f 	dsb	sy
 8013e26:	e7fe      	b.n	8013e26 <xStreamBufferGenericCreateStatic+0x5e>
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8013e28:	2324      	movs	r3, #36	; 0x24
 8013e2a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8013e2c:	9b03      	ldr	r3, [sp, #12]
 8013e2e:	2b24      	cmp	r3, #36	; 0x24
 8013e30:	d008      	beq.n	8013e44 <xStreamBufferGenericCreateStatic+0x7c>
 8013e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	e7fe      	b.n	8013e42 <xStreamBufferGenericCreateStatic+0x7a>
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8013e44:	9200      	str	r2, [sp, #0]
 8013e46:	460b      	mov	r3, r1
 8013e48:	4602      	mov	r2, r0
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	f7ff fe90 	bl	8013b72 <prvInitialiseNewStreamBuffer>
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8013e52:	7f23      	ldrb	r3, [r4, #28]
 8013e54:	f043 0302 	orr.w	r3, r3, #2
 8013e58:	7723      	strb	r3, [r4, #28]
	}
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	b005      	add	sp, #20
 8013e5e:	bd30      	pop	{r4, r5, pc}

08013e60 <vStreamBufferDelete>:
{
 8013e60:	b508      	push	{r3, lr}
	configASSERT( pxStreamBuffer );
 8013e62:	b140      	cbz	r0, 8013e76 <vStreamBufferDelete+0x16>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8013e64:	7f03      	ldrb	r3, [r0, #28]
 8013e66:	f013 0f02 	tst.w	r3, #2
 8013e6a:	d00d      	beq.n	8013e88 <vStreamBufferDelete+0x28>
		memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 8013e6c:	2224      	movs	r2, #36	; 0x24
 8013e6e:	2100      	movs	r1, #0
 8013e70:	f005 f93d 	bl	80190ee <memset>
 8013e74:	bd08      	pop	{r3, pc}
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	e7fe      	b.n	8013e86 <vStreamBufferDelete+0x26>
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8013e88:	f7fe feb0 	bl	8012bec <vPortFree>
 8013e8c:	bd08      	pop	{r3, pc}

08013e8e <xStreamBufferReset>:
	configASSERT( pxStreamBuffer );
 8013e8e:	b140      	cbz	r0, 8013ea2 <xStreamBufferReset+0x14>
{
 8013e90:	b530      	push	{r4, r5, lr}
 8013e92:	b083      	sub	sp, #12
 8013e94:	4604      	mov	r4, r0
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8013e96:	6a05      	ldr	r5, [r0, #32]
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8013e98:	6903      	ldr	r3, [r0, #16]
 8013e9a:	b15b      	cbz	r3, 8013eb4 <xStreamBufferReset+0x26>
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
 8013e9c:	2000      	movs	r0, #0
}
 8013e9e:	b003      	add	sp, #12
 8013ea0:	bd30      	pop	{r4, r5, pc}
 8013ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea6:	f383 8811 	msr	BASEPRI, r3
 8013eaa:	f3bf 8f6f 	isb	sy
 8013eae:	f3bf 8f4f 	dsb	sy
 8013eb2:	e7fe      	b.n	8013eb2 <xStreamBufferReset+0x24>
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8013eb4:	6943      	ldr	r3, [r0, #20]
 8013eb6:	b10b      	cbz	r3, 8013ebc <xStreamBufferReset+0x2e>
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
 8013eb8:	2000      	movs	r0, #0
	return xReturn;
 8013eba:	e7f0      	b.n	8013e9e <xStreamBufferReset+0x10>
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8013ebc:	7f03      	ldrb	r3, [r0, #28]
 8013ebe:	f013 0f01 	tst.w	r3, #1
 8013ec2:	d00a      	beq.n	8013eda <xStreamBufferReset+0x4c>
				xIsMessageBuffer = pdTRUE;
 8013ec4:	2001      	movs	r0, #1
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8013ec6:	68e3      	ldr	r3, [r4, #12]
 8013ec8:	68a2      	ldr	r2, [r4, #8]
 8013eca:	69a1      	ldr	r1, [r4, #24]
 8013ecc:	9000      	str	r0, [sp, #0]
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f7ff fe4f 	bl	8013b72 <prvInitialiseNewStreamBuffer>
				pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8013ed4:	6225      	str	r5, [r4, #32]
			xReturn = pdPASS;
 8013ed6:	2001      	movs	r0, #1
 8013ed8:	e7e1      	b.n	8013e9e <xStreamBufferReset+0x10>
				xIsMessageBuffer = pdFALSE;
 8013eda:	2000      	movs	r0, #0
 8013edc:	e7f3      	b.n	8013ec6 <xStreamBufferReset+0x38>

08013ede <xStreamBufferSetTriggerLevel>:
	configASSERT( pxStreamBuffer );
 8013ede:	4603      	mov	r3, r0
 8013ee0:	b138      	cbz	r0, 8013ef2 <xStreamBufferSetTriggerLevel+0x14>
	if( xTriggerLevel == ( size_t ) 0 )
 8013ee2:	b901      	cbnz	r1, 8013ee6 <xStreamBufferSetTriggerLevel+0x8>
		xTriggerLevel = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8013ee4:	2101      	movs	r1, #1
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 8013ee6:	689a      	ldr	r2, [r3, #8]
 8013ee8:	4291      	cmp	r1, r2
 8013eea:	d80b      	bhi.n	8013f04 <xStreamBufferSetTriggerLevel+0x26>
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8013eec:	60d9      	str	r1, [r3, #12]
		xReturn = pdPASS;
 8013eee:	2001      	movs	r0, #1
 8013ef0:	4770      	bx	lr
 8013ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef6:	f383 8811 	msr	BASEPRI, r3
 8013efa:	f3bf 8f6f 	isb	sy
 8013efe:	f3bf 8f4f 	dsb	sy
 8013f02:	e7fe      	b.n	8013f02 <xStreamBufferSetTriggerLevel+0x24>
		xReturn = pdFALSE;
 8013f04:	2000      	movs	r0, #0
}
 8013f06:	4770      	bx	lr

08013f08 <xStreamBufferSpacesAvailable>:
	configASSERT( pxStreamBuffer );
 8013f08:	4602      	mov	r2, r0
 8013f0a:	b148      	cbz	r0, 8013f20 <xStreamBufferSpacesAvailable+0x18>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8013f0c:	6883      	ldr	r3, [r0, #8]
 8013f0e:	6800      	ldr	r0, [r0, #0]
 8013f10:	4418      	add	r0, r3
	xSpace -= pxStreamBuffer->xHead;
 8013f12:	6852      	ldr	r2, [r2, #4]
 8013f14:	1a80      	subs	r0, r0, r2
	xSpace -= ( size_t ) 1;
 8013f16:	3801      	subs	r0, #1
	if( xSpace >= pxStreamBuffer->xLength )
 8013f18:	4283      	cmp	r3, r0
 8013f1a:	d800      	bhi.n	8013f1e <xStreamBufferSpacesAvailable+0x16>
		xSpace -= pxStreamBuffer->xLength;
 8013f1c:	1ac0      	subs	r0, r0, r3
}
 8013f1e:	4770      	bx	lr
 8013f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f24:	f383 8811 	msr	BASEPRI, r3
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	e7fe      	b.n	8013f30 <xStreamBufferSpacesAvailable+0x28>

08013f32 <xStreamBufferBytesAvailable>:
{
 8013f32:	b508      	push	{r3, lr}
	configASSERT( pxStreamBuffer );
 8013f34:	b940      	cbnz	r0, 8013f48 <xStreamBufferBytesAvailable+0x16>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	e7fe      	b.n	8013f46 <xStreamBufferBytesAvailable+0x14>
	xReturn = prvBytesInBuffer( pxStreamBuffer );
 8013f48:	f7ff fe0a 	bl	8013b60 <prvBytesInBuffer>
}
 8013f4c:	bd08      	pop	{r3, pc}

08013f4e <xStreamBufferSend>:
{
 8013f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f52:	b087      	sub	sp, #28
 8013f54:	9303      	str	r3, [sp, #12]
	configASSERT( pvTxData );
 8013f56:	b141      	cbz	r1, 8013f6a <xStreamBufferSend+0x1c>
 8013f58:	460f      	mov	r7, r1
	configASSERT( pxStreamBuffer );
 8013f5a:	b178      	cbz	r0, 8013f7c <xStreamBufferSend+0x2e>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8013f5c:	7f03      	ldrb	r3, [r0, #28]
 8013f5e:	f013 0f01 	tst.w	r3, #1
 8013f62:	d014      	beq.n	8013f8e <xStreamBufferSend+0x40>
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8013f64:	f102 0804 	add.w	r8, r2, #4
 8013f68:	e012      	b.n	8013f90 <xStreamBufferSend+0x42>
 8013f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6e:	f383 8811 	msr	BASEPRI, r3
 8013f72:	f3bf 8f6f 	isb	sy
 8013f76:	f3bf 8f4f 	dsb	sy
 8013f7a:	e7fe      	b.n	8013f7a <xStreamBufferSend+0x2c>
 8013f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f80:	f383 8811 	msr	BASEPRI, r3
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	f3bf 8f4f 	dsb	sy
 8013f8c:	e7fe      	b.n	8013f8c <xStreamBufferSend+0x3e>
size_t xRequiredSpace = xDataLengthBytes;
 8013f8e:	4690      	mov	r8, r2
 8013f90:	4616      	mov	r6, r2
 8013f92:	4604      	mov	r4, r0
	if( xTicksToWait != ( TickType_t ) 0 )
 8013f94:	9b03      	ldr	r3, [sp, #12]
 8013f96:	bb23      	cbnz	r3, 8013fe2 <xStreamBufferSend+0x94>
size_t xReturn, xSpace = 0;
 8013f98:	2500      	movs	r5, #0
	if( xSpace == ( size_t ) 0 )
 8013f9a:	2d00      	cmp	r5, #0
 8013f9c:	d055      	beq.n	801404a <xStreamBufferSend+0xfc>
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8013f9e:	f8cd 8000 	str.w	r8, [sp]
 8013fa2:	462b      	mov	r3, r5
 8013fa4:	4632      	mov	r2, r6
 8013fa6:	4639      	mov	r1, r7
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f7ff fe4b 	bl	8013c44 <prvWriteMessageToBuffer>
	if( xReturn > ( size_t ) 0 )
 8013fae:	4605      	mov	r5, r0
 8013fb0:	b198      	cbz	r0, 8013fda <xStreamBufferSend+0x8c>
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f7ff fdd4 	bl	8013b60 <prvBytesInBuffer>
 8013fb8:	68e3      	ldr	r3, [r4, #12]
 8013fba:	4298      	cmp	r0, r3
 8013fbc:	d30d      	bcc.n	8013fda <xStreamBufferSend+0x8c>
			sbSEND_COMPLETED( pxStreamBuffer );
 8013fbe:	f000 fe25 	bl	8014c0c <vTaskSuspendAll>
 8013fc2:	6923      	ldr	r3, [r4, #16]
 8013fc4:	b13b      	cbz	r3, 8013fd6 <xStreamBufferSend+0x88>
 8013fc6:	6920      	ldr	r0, [r4, #16]
 8013fc8:	2300      	movs	r3, #0
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4619      	mov	r1, r3
 8013fce:	f001 fd61 	bl	8015a94 <xTaskGenericNotify>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	6123      	str	r3, [r4, #16]
 8013fd6:	f000 fed7 	bl	8014d88 <xTaskResumeAll>
}
 8013fda:	4628      	mov	r0, r5
 8013fdc:	b007      	add	sp, #28
 8013fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		vTaskSetTimeOutState( &xTimeOut );
 8013fe2:	a804      	add	r0, sp, #16
 8013fe4:	f001 f97a 	bl	80152dc <vTaskSetTimeOutState>
			taskENTER_CRITICAL();
 8013fe8:	f7fe fbce 	bl	8012788 <vPortEnterCritical>
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8013fec:	4620      	mov	r0, r4
 8013fee:	f7ff ff8b 	bl	8013f08 <xStreamBufferSpacesAvailable>
 8013ff2:	4605      	mov	r5, r0
				if( xSpace < xRequiredSpace )
 8013ff4:	4580      	cmp	r8, r0
 8013ff6:	d925      	bls.n	8014044 <xStreamBufferSend+0xf6>
					( void ) xTaskNotifyStateClear( NULL );
 8013ff8:	2000      	movs	r0, #0
 8013ffa:	f001 feb3 	bl	8015d64 <xTaskNotifyStateClear>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8013ffe:	6963      	ldr	r3, [r4, #20]
 8014000:	b9bb      	cbnz	r3, 8014032 <xStreamBufferSend+0xe4>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8014002:	f001 fab1 	bl	8015568 <xTaskGetCurrentTaskHandle>
 8014006:	6160      	str	r0, [r4, #20]
			taskEXIT_CRITICAL();
 8014008:	f7fe fbe0 	bl	80127cc <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 801400c:	f10d 0918 	add.w	r9, sp, #24
 8014010:	f859 3d0c 	ldr.w	r3, [r9, #-12]!
 8014014:	2200      	movs	r2, #0
 8014016:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801401a:	4610      	mov	r0, r2
 801401c:	f001 fce6 	bl	80159ec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8014020:	2300      	movs	r3, #0
 8014022:	6163      	str	r3, [r4, #20]
		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8014024:	4649      	mov	r1, r9
 8014026:	a804      	add	r0, sp, #16
 8014028:	f001 f97c 	bl	8015324 <xTaskCheckForTimeOut>
 801402c:	2800      	cmp	r0, #0
 801402e:	d0db      	beq.n	8013fe8 <xStreamBufferSend+0x9a>
 8014030:	e7b3      	b.n	8013f9a <xStreamBufferSend+0x4c>
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	e7fe      	b.n	8014042 <xStreamBufferSend+0xf4>
					taskEXIT_CRITICAL();
 8014044:	f7fe fbc2 	bl	80127cc <vPortExitCritical>
					break;
 8014048:	e7a7      	b.n	8013f9a <xStreamBufferSend+0x4c>
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801404a:	4620      	mov	r0, r4
 801404c:	f7ff ff5c 	bl	8013f08 <xStreamBufferSpacesAvailable>
 8014050:	4605      	mov	r5, r0
 8014052:	e7a4      	b.n	8013f9e <xStreamBufferSend+0x50>

08014054 <xStreamBufferSendFromISR>:
	configASSERT( pvTxData );
 8014054:	b159      	cbz	r1, 801406e <xStreamBufferSendFromISR+0x1a>
{
 8014056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	460e      	mov	r6, r1
	configASSERT( pxStreamBuffer );
 801405e:	b178      	cbz	r0, 8014080 <xStreamBufferSendFromISR+0x2c>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8014060:	7f01      	ldrb	r1, [r0, #28]
 8014062:	f011 0f01 	tst.w	r1, #1
 8014066:	d014      	beq.n	8014092 <xStreamBufferSendFromISR+0x3e>
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8014068:	f102 0804 	add.w	r8, r2, #4
 801406c:	e012      	b.n	8014094 <xStreamBufferSendFromISR+0x40>
 801406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014072:	f383 8811 	msr	BASEPRI, r3
 8014076:	f3bf 8f6f 	isb	sy
 801407a:	f3bf 8f4f 	dsb	sy
 801407e:	e7fe      	b.n	801407e <xStreamBufferSendFromISR+0x2a>
 8014080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014084:	f383 8811 	msr	BASEPRI, r3
 8014088:	f3bf 8f6f 	isb	sy
 801408c:	f3bf 8f4f 	dsb	sy
 8014090:	e7fe      	b.n	8014090 <xStreamBufferSendFromISR+0x3c>
size_t xRequiredSpace = xDataLengthBytes;
 8014092:	4690      	mov	r8, r2
 8014094:	461f      	mov	r7, r3
 8014096:	4615      	mov	r5, r2
 8014098:	4604      	mov	r4, r0
	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801409a:	f7ff ff35 	bl	8013f08 <xStreamBufferSpacesAvailable>
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 801409e:	f8cd 8000 	str.w	r8, [sp]
 80140a2:	4603      	mov	r3, r0
 80140a4:	462a      	mov	r2, r5
 80140a6:	4631      	mov	r1, r6
 80140a8:	4620      	mov	r0, r4
 80140aa:	f7ff fdcb 	bl	8013c44 <prvWriteMessageToBuffer>
	if( xReturn > ( size_t ) 0 )
 80140ae:	4605      	mov	r5, r0
 80140b0:	b918      	cbnz	r0, 80140ba <xStreamBufferSendFromISR+0x66>
}
 80140b2:	4628      	mov	r0, r5
 80140b4:	b002      	add	sp, #8
 80140b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80140ba:	4620      	mov	r0, r4
 80140bc:	f7ff fd50 	bl	8013b60 <prvBytesInBuffer>
 80140c0:	68e3      	ldr	r3, [r4, #12]
 80140c2:	4298      	cmp	r0, r3
 80140c4:	d3f5      	bcc.n	80140b2 <xStreamBufferSendFromISR+0x5e>
	__asm volatile
 80140c6:	f3ef 8611 	mrs	r6, BASEPRI
 80140ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80140da:	6923      	ldr	r3, [r4, #16]
 80140dc:	b143      	cbz	r3, 80140f0 <xStreamBufferSendFromISR+0x9c>
 80140de:	6920      	ldr	r0, [r4, #16]
 80140e0:	9700      	str	r7, [sp, #0]
 80140e2:	2300      	movs	r3, #0
 80140e4:	461a      	mov	r2, r3
 80140e6:	4619      	mov	r1, r3
 80140e8:	f001 fd46 	bl	8015b78 <xTaskGenericNotifyFromISR>
 80140ec:	2300      	movs	r3, #0
 80140ee:	6123      	str	r3, [r4, #16]
	__asm volatile
 80140f0:	f386 8811 	msr	BASEPRI, r6
	return xReturn;
 80140f4:	e7dd      	b.n	80140b2 <xStreamBufferSendFromISR+0x5e>

080140f6 <xStreamBufferReceive>:
	configASSERT( pvRxData );
 80140f6:	b321      	cbz	r1, 8014142 <xStreamBufferReceive+0x4c>
{
 80140f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140fc:	b083      	sub	sp, #12
 80140fe:	4688      	mov	r8, r1
	configASSERT( pxStreamBuffer );
 8014100:	b340      	cbz	r0, 8014154 <xStreamBufferReceive+0x5e>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8014102:	7f01      	ldrb	r1, [r0, #28]
 8014104:	f011 0f01 	tst.w	r1, #1
 8014108:	d02d      	beq.n	8014166 <xStreamBufferReceive+0x70>
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801410a:	2604      	movs	r6, #4
 801410c:	461f      	mov	r7, r3
 801410e:	4691      	mov	r9, r2
 8014110:	4604      	mov	r4, r0
	if( xTicksToWait != ( TickType_t ) 0 )
 8014112:	2b00      	cmp	r3, #0
 8014114:	d03e      	beq.n	8014194 <xStreamBufferReceive+0x9e>
		taskENTER_CRITICAL();
 8014116:	f7fe fb37 	bl	8012788 <vPortEnterCritical>
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 801411a:	4620      	mov	r0, r4
 801411c:	f7ff fd20 	bl	8013b60 <prvBytesInBuffer>
 8014120:	4605      	mov	r5, r0
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8014122:	4286      	cmp	r6, r0
 8014124:	d324      	bcc.n	8014170 <xStreamBufferReceive+0x7a>
				( void ) xTaskNotifyStateClear( NULL );
 8014126:	2000      	movs	r0, #0
 8014128:	f001 fe1c 	bl	8015d64 <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 801412c:	6923      	ldr	r3, [r4, #16]
 801412e:	b1e3      	cbz	r3, 801416a <xStreamBufferReceive+0x74>
	__asm volatile
 8014130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014134:	f383 8811 	msr	BASEPRI, r3
 8014138:	f3bf 8f6f 	isb	sy
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	e7fe      	b.n	8014140 <xStreamBufferReceive+0x4a>
 8014142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014146:	f383 8811 	msr	BASEPRI, r3
 801414a:	f3bf 8f6f 	isb	sy
 801414e:	f3bf 8f4f 	dsb	sy
 8014152:	e7fe      	b.n	8014152 <xStreamBufferReceive+0x5c>
 8014154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014158:	f383 8811 	msr	BASEPRI, r3
 801415c:	f3bf 8f6f 	isb	sy
 8014160:	f3bf 8f4f 	dsb	sy
 8014164:	e7fe      	b.n	8014164 <xStreamBufferReceive+0x6e>
		xBytesToStoreMessageLength = 0;
 8014166:	2600      	movs	r6, #0
 8014168:	e7d0      	b.n	801410c <xStreamBufferReceive+0x16>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 801416a:	f001 f9fd 	bl	8015568 <xTaskGetCurrentTaskHandle>
 801416e:	6120      	str	r0, [r4, #16]
		taskEXIT_CRITICAL();
 8014170:	f7fe fb2c 	bl	80127cc <vPortExitCritical>
		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8014174:	42ae      	cmp	r6, r5
 8014176:	d310      	bcc.n	801419a <xStreamBufferReceive+0xa4>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8014178:	463b      	mov	r3, r7
 801417a:	2200      	movs	r2, #0
 801417c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014180:	4610      	mov	r0, r2
 8014182:	f001 fc33 	bl	80159ec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8014186:	2300      	movs	r3, #0
 8014188:	6123      	str	r3, [r4, #16]
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 801418a:	4620      	mov	r0, r4
 801418c:	f7ff fce8 	bl	8013b60 <prvBytesInBuffer>
 8014190:	4605      	mov	r5, r0
 8014192:	e002      	b.n	801419a <xStreamBufferReceive+0xa4>
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8014194:	f7ff fce4 	bl	8013b60 <prvBytesInBuffer>
 8014198:	4605      	mov	r5, r0
	if( xBytesAvailable > xBytesToStoreMessageLength )
 801419a:	42b5      	cmp	r5, r6
 801419c:	d804      	bhi.n	80141a8 <xStreamBufferReceive+0xb2>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 801419e:	2500      	movs	r5, #0
}
 80141a0:	4628      	mov	r0, r5
 80141a2:	b003      	add	sp, #12
 80141a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80141a8:	9600      	str	r6, [sp, #0]
 80141aa:	462b      	mov	r3, r5
 80141ac:	464a      	mov	r2, r9
 80141ae:	4641      	mov	r1, r8
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7ff fdbb 	bl	8013d2c <prvReadMessageFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 80141b6:	4605      	mov	r5, r0
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0f1      	beq.n	80141a0 <xStreamBufferReceive+0xaa>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80141bc:	f000 fd26 	bl	8014c0c <vTaskSuspendAll>
 80141c0:	6963      	ldr	r3, [r4, #20]
 80141c2:	b13b      	cbz	r3, 80141d4 <xStreamBufferReceive+0xde>
 80141c4:	6960      	ldr	r0, [r4, #20]
 80141c6:	2300      	movs	r3, #0
 80141c8:	461a      	mov	r2, r3
 80141ca:	4619      	mov	r1, r3
 80141cc:	f001 fc62 	bl	8015a94 <xTaskGenericNotify>
 80141d0:	2300      	movs	r3, #0
 80141d2:	6163      	str	r3, [r4, #20]
 80141d4:	f000 fdd8 	bl	8014d88 <xTaskResumeAll>
 80141d8:	e7e2      	b.n	80141a0 <xStreamBufferReceive+0xaa>

080141da <xStreamBufferReceiveFromISR>:
	configASSERT( pvRxData );
 80141da:	b1b1      	cbz	r1, 801420a <xStreamBufferReceiveFromISR+0x30>
{
 80141dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e0:	b082      	sub	sp, #8
 80141e2:	460d      	mov	r5, r1
	configASSERT( pxStreamBuffer );
 80141e4:	b1d0      	cbz	r0, 801421c <xStreamBufferReceiveFromISR+0x42>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80141e6:	7f01      	ldrb	r1, [r0, #28]
 80141e8:	f011 0f01 	tst.w	r1, #1
 80141ec:	d01f      	beq.n	801422e <xStreamBufferReceiveFromISR+0x54>
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80141ee:	2704      	movs	r7, #4
 80141f0:	4698      	mov	r8, r3
 80141f2:	4616      	mov	r6, r2
 80141f4:	4604      	mov	r4, r0
	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80141f6:	f7ff fcb3 	bl	8013b60 <prvBytesInBuffer>
 80141fa:	4603      	mov	r3, r0
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80141fc:	4287      	cmp	r7, r0
 80141fe:	d318      	bcc.n	8014232 <xStreamBufferReceiveFromISR+0x58>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8014200:	2500      	movs	r5, #0
}
 8014202:	4628      	mov	r0, r5
 8014204:	b002      	add	sp, #8
 8014206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	e7fe      	b.n	801421a <xStreamBufferReceiveFromISR+0x40>
 801421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014220:	f383 8811 	msr	BASEPRI, r3
 8014224:	f3bf 8f6f 	isb	sy
 8014228:	f3bf 8f4f 	dsb	sy
 801422c:	e7fe      	b.n	801422c <xStreamBufferReceiveFromISR+0x52>
		xBytesToStoreMessageLength = 0;
 801422e:	2700      	movs	r7, #0
 8014230:	e7de      	b.n	80141f0 <xStreamBufferReceiveFromISR+0x16>
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8014232:	9700      	str	r7, [sp, #0]
 8014234:	4632      	mov	r2, r6
 8014236:	4629      	mov	r1, r5
 8014238:	4620      	mov	r0, r4
 801423a:	f7ff fd77 	bl	8013d2c <prvReadMessageFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 801423e:	4605      	mov	r5, r0
 8014240:	2800      	cmp	r0, #0
 8014242:	d0de      	beq.n	8014202 <xStreamBufferReceiveFromISR+0x28>
	__asm volatile
 8014244:	f3ef 8611 	mrs	r6, BASEPRI
 8014248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424c:	f383 8811 	msr	BASEPRI, r3
 8014250:	f3bf 8f6f 	isb	sy
 8014254:	f3bf 8f4f 	dsb	sy
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8014258:	6963      	ldr	r3, [r4, #20]
 801425a:	b14b      	cbz	r3, 8014270 <xStreamBufferReceiveFromISR+0x96>
 801425c:	6960      	ldr	r0, [r4, #20]
 801425e:	f8cd 8000 	str.w	r8, [sp]
 8014262:	2300      	movs	r3, #0
 8014264:	461a      	mov	r2, r3
 8014266:	4619      	mov	r1, r3
 8014268:	f001 fc86 	bl	8015b78 <xTaskGenericNotifyFromISR>
 801426c:	2300      	movs	r3, #0
 801426e:	6163      	str	r3, [r4, #20]
	__asm volatile
 8014270:	f386 8811 	msr	BASEPRI, r6
 8014274:	e7c5      	b.n	8014202 <xStreamBufferReceiveFromISR+0x28>

08014276 <xStreamBufferIsEmpty>:
	configASSERT( pxStreamBuffer );
 8014276:	b128      	cbz	r0, 8014284 <xStreamBufferIsEmpty+0xe>
	xTail = pxStreamBuffer->xTail;
 8014278:	6802      	ldr	r2, [r0, #0]
	if( pxStreamBuffer->xHead == xTail )
 801427a:	6843      	ldr	r3, [r0, #4]
 801427c:	429a      	cmp	r2, r3
 801427e:	d00a      	beq.n	8014296 <xStreamBufferIsEmpty+0x20>
		xReturn = pdFALSE;
 8014280:	2000      	movs	r0, #0
}
 8014282:	4770      	bx	lr
	__asm volatile
 8014284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014288:	f383 8811 	msr	BASEPRI, r3
 801428c:	f3bf 8f6f 	isb	sy
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	e7fe      	b.n	8014294 <xStreamBufferIsEmpty+0x1e>
		xReturn = pdTRUE;
 8014296:	2001      	movs	r0, #1
 8014298:	4770      	bx	lr

0801429a <xStreamBufferIsFull>:
	configASSERT( pxStreamBuffer );
 801429a:	b168      	cbz	r0, 80142b8 <xStreamBufferIsFull+0x1e>
{
 801429c:	b510      	push	{r4, lr}
 801429e:	4603      	mov	r3, r0
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80142a0:	7f02      	ldrb	r2, [r0, #28]
 80142a2:	f012 0f01 	tst.w	r2, #1
 80142a6:	d010      	beq.n	80142ca <xStreamBufferIsFull+0x30>
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80142a8:	2404      	movs	r4, #4
 80142aa:	4618      	mov	r0, r3
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80142ac:	f7ff fe2c 	bl	8013f08 <xStreamBufferSpacesAvailable>
 80142b0:	4284      	cmp	r4, r0
 80142b2:	d20c      	bcs.n	80142ce <xStreamBufferIsFull+0x34>
		xReturn = pdFALSE;
 80142b4:	2000      	movs	r0, #0
}
 80142b6:	bd10      	pop	{r4, pc}
 80142b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142bc:	f383 8811 	msr	BASEPRI, r3
 80142c0:	f3bf 8f6f 	isb	sy
 80142c4:	f3bf 8f4f 	dsb	sy
 80142c8:	e7fe      	b.n	80142c8 <xStreamBufferIsFull+0x2e>
		xBytesToStoreMessageLength = 0;
 80142ca:	2400      	movs	r4, #0
 80142cc:	e7ed      	b.n	80142aa <xStreamBufferIsFull+0x10>
		xReturn = pdTRUE;
 80142ce:	2001      	movs	r0, #1
 80142d0:	bd10      	pop	{r4, pc}

080142d2 <xStreamBufferSendCompletedFromISR>:
	configASSERT( pxStreamBuffer );
 80142d2:	b1e0      	cbz	r0, 801430e <xStreamBufferSendCompletedFromISR+0x3c>
{
 80142d4:	b530      	push	{r4, r5, lr}
 80142d6:	b083      	sub	sp, #12
 80142d8:	4604      	mov	r4, r0
	__asm volatile
 80142da:	f3ef 8511 	mrs	r5, BASEPRI
 80142de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e2:	f383 8811 	msr	BASEPRI, r3
 80142e6:	f3bf 8f6f 	isb	sy
 80142ea:	f3bf 8f4f 	dsb	sy
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 80142ee:	6903      	ldr	r3, [r0, #16]
 80142f0:	b1b3      	cbz	r3, 8014320 <xStreamBufferSendCompletedFromISR+0x4e>
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 80142f2:	6900      	ldr	r0, [r0, #16]
 80142f4:	9100      	str	r1, [sp, #0]
 80142f6:	2300      	movs	r3, #0
 80142f8:	461a      	mov	r2, r3
 80142fa:	4619      	mov	r1, r3
 80142fc:	f001 fc3c 	bl	8015b78 <xTaskGenericNotifyFromISR>
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8014300:	2300      	movs	r3, #0
 8014302:	6123      	str	r3, [r4, #16]
			xReturn = pdTRUE;
 8014304:	2001      	movs	r0, #1
	__asm volatile
 8014306:	f385 8811 	msr	BASEPRI, r5
}
 801430a:	b003      	add	sp, #12
 801430c:	bd30      	pop	{r4, r5, pc}
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	e7fe      	b.n	801431e <xStreamBufferSendCompletedFromISR+0x4c>
			xReturn = pdFALSE;
 8014320:	2000      	movs	r0, #0
 8014322:	e7f0      	b.n	8014306 <xStreamBufferSendCompletedFromISR+0x34>

08014324 <xStreamBufferReceiveCompletedFromISR>:
	configASSERT( pxStreamBuffer );
 8014324:	b1e0      	cbz	r0, 8014360 <xStreamBufferReceiveCompletedFromISR+0x3c>
{
 8014326:	b530      	push	{r4, r5, lr}
 8014328:	b083      	sub	sp, #12
 801432a:	4604      	mov	r4, r0
	__asm volatile
 801432c:	f3ef 8511 	mrs	r5, BASEPRI
 8014330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014334:	f383 8811 	msr	BASEPRI, r3
 8014338:	f3bf 8f6f 	isb	sy
 801433c:	f3bf 8f4f 	dsb	sy
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8014340:	6943      	ldr	r3, [r0, #20]
 8014342:	b1b3      	cbz	r3, 8014372 <xStreamBufferReceiveCompletedFromISR+0x4e>
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8014344:	6940      	ldr	r0, [r0, #20]
 8014346:	9100      	str	r1, [sp, #0]
 8014348:	2300      	movs	r3, #0
 801434a:	461a      	mov	r2, r3
 801434c:	4619      	mov	r1, r3
 801434e:	f001 fc13 	bl	8015b78 <xTaskGenericNotifyFromISR>
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8014352:	2300      	movs	r3, #0
 8014354:	6163      	str	r3, [r4, #20]
			xReturn = pdTRUE;
 8014356:	2001      	movs	r0, #1
	__asm volatile
 8014358:	f385 8811 	msr	BASEPRI, r5
}
 801435c:	b003      	add	sp, #12
 801435e:	bd30      	pop	{r4, r5, pc}
	__asm volatile
 8014360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	e7fe      	b.n	8014370 <xStreamBufferReceiveCompletedFromISR+0x4c>
			xReturn = pdFALSE;
 8014372:	2000      	movs	r0, #0
 8014374:	e7f0      	b.n	8014358 <xStreamBufferReceiveCompletedFromISR+0x34>

08014376 <uxStreamBufferGetStreamBufferNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxStreamBufferGetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer )
	{
		return ( ( StreamBuffer_t * ) xStreamBuffer )->uxStreamBufferNumber;
	}
 8014376:	6a00      	ldr	r0, [r0, #32]
 8014378:	4770      	bx	lr

0801437a <vStreamBufferSetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer, UBaseType_t uxStreamBufferNumber )
	{
		( ( StreamBuffer_t * ) xStreamBuffer )->uxStreamBufferNumber = uxStreamBufferNumber;
 801437a:	6201      	str	r1, [r0, #32]
 801437c:	4770      	bx	lr

0801437e <ucStreamBufferGetStreamBufferType>:

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
	{
		return ( ( StreamBuffer_t * )xStreamBuffer )->ucFlags | sbFLAGS_IS_MESSAGE_BUFFER;
 801437e:	7f00      	ldrb	r0, [r0, #28]
	}
 8014380:	f040 0001 	orr.w	r0, r0, #1
 8014384:	4770      	bx	lr
	...

08014388 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014388:	4602      	mov	r2, r0
 801438a:	b170      	cbz	r0, 80143aa <prvTaskIsTaskSuspended+0x22>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801438c:	6941      	ldr	r1, [r0, #20]
 801438e:	4b0f      	ldr	r3, [pc, #60]	; (80143cc <prvTaskIsTaskSuspended+0x44>)
 8014390:	4299      	cmp	r1, r3
 8014392:	d013      	beq.n	80143bc <prvTaskIsTaskSuspended+0x34>
 8014394:	2300      	movs	r3, #0
 8014396:	b1ab      	cbz	r3, 80143c4 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014398:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801439a:	490d      	ldr	r1, [pc, #52]	; (80143d0 <prvTaskIsTaskSuspended+0x48>)
 801439c:	428a      	cmp	r2, r1
 801439e:	d013      	beq.n	80143c8 <prvTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80143a0:	b102      	cbz	r2, 80143a4 <prvTaskIsTaskSuspended+0x1c>
 80143a2:	2300      	movs	r3, #0
 80143a4:	b163      	cbz	r3, 80143c0 <prvTaskIsTaskSuspended+0x38>
				{
					xReturn = pdTRUE;
 80143a6:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80143a8:	4770      	bx	lr
 80143aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ae:	f383 8811 	msr	BASEPRI, r3
 80143b2:	f3bf 8f6f 	isb	sy
 80143b6:	f3bf 8f4f 	dsb	sy
 80143ba:	e7fe      	b.n	80143ba <prvTaskIsTaskSuspended+0x32>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80143bc:	2301      	movs	r3, #1
 80143be:	e7ea      	b.n	8014396 <prvTaskIsTaskSuspended+0xe>
	BaseType_t xReturn = pdFALSE;
 80143c0:	2000      	movs	r0, #0
 80143c2:	4770      	bx	lr
 80143c4:	2000      	movs	r0, #0
 80143c6:	4770      	bx	lr
 80143c8:	2000      	movs	r0, #0
 80143ca:	4770      	bx	lr
 80143cc:	20005514 	.word	0x20005514
 80143d0:	20005528 	.word	0x20005528

080143d4 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80143d4:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80143d6:	e001      	b.n	80143dc <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 80143d8:	3001      	adds	r0, #1
			ulCount++;
 80143da:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80143dc:	7802      	ldrb	r2, [r0, #0]
 80143de:	2aa5      	cmp	r2, #165	; 0xa5
 80143e0:	d0fa      	beq.n	80143d8 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
 80143e2:	f3c3 008f 	ubfx	r0, r3, #2, #16
 80143e6:	4770      	bx	lr

080143e8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143e8:	4b09      	ldr	r3, [pc, #36]	; (8014410 <prvResetNextTaskUnblockTime+0x28>)
 80143ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	b943      	cbnz	r3, 8014402 <prvResetNextTaskUnblockTime+0x1a>
 80143f0:	2301      	movs	r3, #1
 80143f2:	b943      	cbnz	r3, 8014406 <prvResetNextTaskUnblockTime+0x1e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80143f4:	4b06      	ldr	r3, [pc, #24]	; (8014410 <prvResetNextTaskUnblockTime+0x28>)
 80143f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80143f8:	68d2      	ldr	r2, [r2, #12]
 80143fa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143fc:	6852      	ldr	r2, [r2, #4]
 80143fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8014400:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014402:	2300      	movs	r3, #0
 8014404:	e7f5      	b.n	80143f2 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8014406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801440a:	4b01      	ldr	r3, [pc, #4]	; (8014410 <prvResetNextTaskUnblockTime+0x28>)
 801440c:	62da      	str	r2, [r3, #44]	; 0x2c
 801440e:	4770      	bx	lr
 8014410:	20005514 	.word	0x20005514

08014414 <prvInitialiseNewTask>:
{
 8014414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014418:	4681      	mov	r9, r0
 801441a:	460d      	mov	r5, r1
 801441c:	4617      	mov	r7, r2
 801441e:	469a      	mov	sl, r3
 8014420:	9e08      	ldr	r6, [sp, #32]
 8014422:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8014426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014428:	0092      	lsls	r2, r2, #2
 801442a:	21a5      	movs	r1, #165	; 0xa5
 801442c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801442e:	f004 fe5e 	bl	80190ee <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8014432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014434:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8014438:	3a01      	subs	r2, #1
 801443a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801443e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8014442:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014444:	2300      	movs	r3, #0
 8014446:	2b0f      	cmp	r3, #15
 8014448:	d807      	bhi.n	801445a <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801444a:	5ce9      	ldrb	r1, [r5, r3]
 801444c:	18e2      	adds	r2, r4, r3
 801444e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8014452:	5cea      	ldrb	r2, [r5, r3]
 8014454:	b10a      	cbz	r2, 801445a <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014456:	3301      	adds	r3, #1
 8014458:	e7f5      	b.n	8014446 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801445a:	2300      	movs	r3, #0
 801445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014460:	2e37      	cmp	r6, #55	; 0x37
 8014462:	d900      	bls.n	8014466 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014464:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8014466:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8014468:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801446a:	2500      	movs	r5, #0
 801446c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801446e:	1d20      	adds	r0, r4, #4
 8014470:	f7fe f8d9 	bl	8012626 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014474:	f104 0018 	add.w	r0, r4, #24
 8014478:	f7fe f8d5 	bl	8012626 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801447c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801447e:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8014482:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014484:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8014486:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8014488:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801448a:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801448e:	4652      	mov	r2, sl
 8014490:	4649      	mov	r1, r9
 8014492:	4638      	mov	r0, r7
 8014494:	f7fe f93c 	bl	8012710 <pxPortInitialiseStack>
 8014498:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 801449a:	f1b8 0f00 	cmp.w	r8, #0
 801449e:	d001      	beq.n	80144a4 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80144a0:	f8c8 4000 	str.w	r4, [r8]
 80144a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080144a8 <prvInitialiseTaskLists>:
{
 80144a8:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144aa:	2400      	movs	r4, #0
 80144ac:	e007      	b.n	80144be <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144ae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80144b2:	0093      	lsls	r3, r2, #2
 80144b4:	4810      	ldr	r0, [pc, #64]	; (80144f8 <prvInitialiseTaskLists+0x50>)
 80144b6:	4418      	add	r0, r3
 80144b8:	f7fe f8aa 	bl	8012610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144bc:	3401      	adds	r4, #1
 80144be:	2c37      	cmp	r4, #55	; 0x37
 80144c0:	d9f5      	bls.n	80144ae <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80144c2:	4c0e      	ldr	r4, [pc, #56]	; (80144fc <prvInitialiseTaskLists+0x54>)
 80144c4:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7fe f8a1 	bl	8012610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80144ce:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 80144d2:	4628      	mov	r0, r5
 80144d4:	f7fe f89c 	bl	8012610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80144d8:	f104 0014 	add.w	r0, r4, #20
 80144dc:	f7fe f898 	bl	8012610 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80144e0:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 80144e4:	f7fe f894 	bl	8012610 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80144e8:	4620      	mov	r0, r4
 80144ea:	f7fe f891 	bl	8012610 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80144ee:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144f0:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 80144f4:	bd70      	pop	{r4, r5, r6, pc}
 80144f6:	bf00      	nop
 80144f8:	20005544 	.word	0x20005544
 80144fc:	20005514 	.word	0x20005514

08014500 <prvAddNewTaskToReadyList>:
{
 8014500:	b538      	push	{r3, r4, r5, lr}
 8014502:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8014504:	f7fe f940 	bl	8012788 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8014508:	4b27      	ldr	r3, [pc, #156]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 801450a:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 801450e:	3201      	adds	r2, #1
 8014510:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8014514:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014518:	2b00      	cmp	r3, #0
 801451a:	d03a      	beq.n	8014592 <prvAddNewTaskToReadyList+0x92>
			if( xSchedulerRunning == pdFALSE )
 801451c:	4b22      	ldr	r3, [pc, #136]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 801451e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8014522:	b94b      	cbnz	r3, 8014538 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014524:	4b20      	ldr	r3, [pc, #128]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 8014526:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 801452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801452c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801452e:	429a      	cmp	r2, r3
 8014530:	d802      	bhi.n	8014538 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8014532:	4b1d      	ldr	r3, [pc, #116]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 8014534:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
		uxTaskNumber++;
 8014538:	4a1b      	ldr	r2, [pc, #108]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 801453a:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 801453e:	3301      	adds	r3, #1
 8014540:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014544:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8014546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014548:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 801454c:	4293      	cmp	r3, r2
 801454e:	d902      	bls.n	8014556 <prvAddNewTaskToReadyList+0x56>
 8014550:	4a15      	ldr	r2, [pc, #84]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 8014552:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8014556:	4d14      	ldr	r5, [pc, #80]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 8014558:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801455c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014560:	009a      	lsls	r2, r3, #2
 8014562:	1d21      	adds	r1, r4, #4
 8014564:	4410      	add	r0, r2
 8014566:	f7fe f861 	bl	801262c <vListInsertEnd>
	taskEXIT_CRITICAL();
 801456a:	f7fe f92f 	bl	80127cc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801456e:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8014572:	b16b      	cbz	r3, 8014590 <prvAddNewTaskToReadyList+0x90>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014574:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8014578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801457a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801457c:	429a      	cmp	r2, r3
 801457e:	d207      	bcs.n	8014590 <prvAddNewTaskToReadyList+0x90>
			taskYIELD_IF_USING_PREEMPTION();
 8014580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014584:	4b09      	ldr	r3, [pc, #36]	; (80145ac <prvAddNewTaskToReadyList+0xac>)
 8014586:	601a      	str	r2, [r3, #0]
 8014588:	f3bf 8f4f 	dsb	sy
 801458c:	f3bf 8f6f 	isb	sy
 8014590:	bd38      	pop	{r3, r4, r5, pc}
			pxCurrentTCB = pxNewTCB;
 8014592:	4b05      	ldr	r3, [pc, #20]	; (80145a8 <prvAddNewTaskToReadyList+0xa8>)
 8014594:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014598:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 801459c:	2b01      	cmp	r3, #1
 801459e:	d1cb      	bne.n	8014538 <prvAddNewTaskToReadyList+0x38>
				prvInitialiseTaskLists();
 80145a0:	f7ff ff82 	bl	80144a8 <prvInitialiseTaskLists>
 80145a4:	e7c8      	b.n	8014538 <prvAddNewTaskToReadyList+0x38>
 80145a6:	bf00      	nop
 80145a8:	20005514 	.word	0x20005514
 80145ac:	e000ed04 	.word	0xe000ed04

080145b0 <prvDeleteTCB>:
	{
 80145b0:	b510      	push	{r4, lr}
 80145b2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145b4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80145b8:	b163      	cbz	r3, 80145d4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d011      	beq.n	80145e2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80145be:	2b02      	cmp	r3, #2
 80145c0:	d012      	beq.n	80145e8 <prvDeleteTCB+0x38>
 80145c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	e7fe      	b.n	80145d2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80145d4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80145d6:	f7fe fb09 	bl	8012bec <vPortFree>
				vPortFree( pxTCB );
 80145da:	4620      	mov	r0, r4
 80145dc:	f7fe fb06 	bl	8012bec <vPortFree>
 80145e0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80145e2:	f7fe fb03 	bl	8012bec <vPortFree>
 80145e6:	bd10      	pop	{r4, pc}
 80145e8:	bd10      	pop	{r4, pc}

080145ea <prvCheckTasksWaitingTermination>:
{
 80145ea:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145ec:	e017      	b.n	801461e <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 80145ee:	f7fe f8cb 	bl	8012788 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80145f2:	4c0e      	ldr	r4, [pc, #56]	; (801462c <prvCheckTasksWaitingTermination+0x42>)
 80145f4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80145f8:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145fa:	1d28      	adds	r0, r5, #4
 80145fc:	f7fe f83c 	bl	8012678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014600:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8014604:	3b01      	subs	r3, #1
 8014606:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 801460a:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 801460e:	3b01      	subs	r3, #1
 8014610:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8014614:	f7fe f8da 	bl	80127cc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8014618:	4628      	mov	r0, r5
 801461a:	f7ff ffc9 	bl	80145b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801461e:	4b03      	ldr	r3, [pc, #12]	; (801462c <prvCheckTasksWaitingTermination+0x42>)
 8014620:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8014624:	2b00      	cmp	r3, #0
 8014626:	d1e2      	bne.n	80145ee <prvCheckTasksWaitingTermination+0x4>
}
 8014628:	bd38      	pop	{r3, r4, r5, pc}
 801462a:	bf00      	nop
 801462c:	20005514 	.word	0x20005514

08014630 <prvIdleTask>:
{
 8014630:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8014632:	f7ff ffda 	bl	80145ea <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014636:	4b06      	ldr	r3, [pc, #24]	; (8014650 <prvIdleTask+0x20>)
 8014638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801463a:	2b01      	cmp	r3, #1
 801463c:	d9f9      	bls.n	8014632 <prvIdleTask+0x2>
				taskYIELD();
 801463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014642:	4b04      	ldr	r3, [pc, #16]	; (8014654 <prvIdleTask+0x24>)
 8014644:	601a      	str	r2, [r3, #0]
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	f3bf 8f6f 	isb	sy
 801464e:	e7f0      	b.n	8014632 <prvIdleTask+0x2>
 8014650:	20005514 	.word	0x20005514
 8014654:	e000ed04 	.word	0xe000ed04

08014658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014658:	b570      	push	{r4, r5, r6, lr}
 801465a:	4604      	mov	r4, r0
 801465c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801465e:	4b18      	ldr	r3, [pc, #96]	; (80146c0 <prvAddCurrentTaskToDelayedList+0x68>)
 8014660:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014664:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8014668:	3004      	adds	r0, #4
 801466a:	f7fe f805 	bl	8012678 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801466e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8014672:	d012      	beq.n	801469a <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014674:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014676:	4b12      	ldr	r3, [pc, #72]	; (80146c0 <prvAddCurrentTaskToDelayedList+0x68>)
 8014678:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 801467c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801467e:	42a5      	cmp	r5, r4
 8014680:	d814      	bhi.n	80146ac <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014682:	4d0f      	ldr	r5, [pc, #60]	; (80146c0 <prvAddCurrentTaskToDelayedList+0x68>)
 8014684:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8014686:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 801468a:	3104      	adds	r1, #4
 801468c:	f7fd ffda 	bl	8012644 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8014690:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014692:	429c      	cmp	r4, r3
 8014694:	d200      	bcs.n	8014698 <prvAddCurrentTaskToDelayedList+0x40>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8014696:	62ec      	str	r4, [r5, #44]	; 0x2c
 8014698:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801469a:	2e00      	cmp	r6, #0
 801469c:	d0ea      	beq.n	8014674 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801469e:	4808      	ldr	r0, [pc, #32]	; (80146c0 <prvAddCurrentTaskToDelayedList+0x68>)
 80146a0:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 80146a4:	3104      	adds	r1, #4
 80146a6:	f7fd ffc1 	bl	801262c <vListInsertEnd>
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146ac:	4b04      	ldr	r3, [pc, #16]	; (80146c0 <prvAddCurrentTaskToDelayedList+0x68>)
 80146ae:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 80146b2:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 80146b6:	3104      	adds	r1, #4
 80146b8:	f7fd ffc4 	bl	8012644 <vListInsert>
 80146bc:	bd70      	pop	{r4, r5, r6, pc}
 80146be:	bf00      	nop
 80146c0:	20005514 	.word	0x20005514

080146c4 <prvWriteNameToBuffer>:
	{
 80146c4:	b510      	push	{r4, lr}
 80146c6:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 80146c8:	f004 fd7a 	bl	80191c0 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80146cc:	4620      	mov	r0, r4
 80146ce:	f003 fbc3 	bl	8017e58 <strlen>
 80146d2:	e002      	b.n	80146da <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 80146d4:	2320      	movs	r3, #32
 80146d6:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80146d8:	3001      	adds	r0, #1
 80146da:	280e      	cmp	r0, #14
 80146dc:	d9fa      	bls.n	80146d4 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = 0x00;
 80146de:	2300      	movs	r3, #0
 80146e0:	5423      	strb	r3, [r4, r0]
	}
 80146e2:	4420      	add	r0, r4
 80146e4:	bd10      	pop	{r4, pc}

080146e6 <xTaskCreateStatic>:
	{
 80146e6:	b570      	push	{r4, r5, r6, lr}
 80146e8:	b086      	sub	sp, #24
 80146ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80146ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80146ee:	b175      	cbz	r5, 801470e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80146f0:	b1b4      	cbz	r4, 8014720 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80146f2:	2664      	movs	r6, #100	; 0x64
 80146f4:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80146f6:	9e04      	ldr	r6, [sp, #16]
 80146f8:	2e64      	cmp	r6, #100	; 0x64
 80146fa:	d01a      	beq.n	8014732 <xTaskCreateStatic+0x4c>
 80146fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014700:	f383 8811 	msr	BASEPRI, r3
 8014704:	f3bf 8f6f 	isb	sy
 8014708:	f3bf 8f4f 	dsb	sy
 801470c:	e7fe      	b.n	801470c <xTaskCreateStatic+0x26>
 801470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014712:	f383 8811 	msr	BASEPRI, r3
 8014716:	f3bf 8f6f 	isb	sy
 801471a:	f3bf 8f4f 	dsb	sy
 801471e:	e7fe      	b.n	801471e <xTaskCreateStatic+0x38>
 8014720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014724:	f383 8811 	msr	BASEPRI, r3
 8014728:	f3bf 8f6f 	isb	sy
 801472c:	f3bf 8f4f 	dsb	sy
 8014730:	e7fe      	b.n	8014730 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014732:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014734:	2502      	movs	r5, #2
 8014736:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801473a:	2500      	movs	r5, #0
 801473c:	9503      	str	r5, [sp, #12]
 801473e:	9402      	str	r4, [sp, #8]
 8014740:	ad05      	add	r5, sp, #20
 8014742:	9501      	str	r5, [sp, #4]
 8014744:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014746:	9500      	str	r5, [sp, #0]
 8014748:	f7ff fe64 	bl	8014414 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801474c:	4620      	mov	r0, r4
 801474e:	f7ff fed7 	bl	8014500 <prvAddNewTaskToReadyList>
	}
 8014752:	9805      	ldr	r0, [sp, #20]
 8014754:	b006      	add	sp, #24
 8014756:	bd70      	pop	{r4, r5, r6, pc}

08014758 <xTaskCreate>:
	{
 8014758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801475c:	b085      	sub	sp, #20
 801475e:	4606      	mov	r6, r0
 8014760:	460f      	mov	r7, r1
 8014762:	4615      	mov	r5, r2
 8014764:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014766:	0090      	lsls	r0, r2, #2
 8014768:	f7fe f9ba 	bl	8012ae0 <pvPortMalloc>
			if( pxStack != NULL )
 801476c:	b310      	cbz	r0, 80147b4 <xTaskCreate+0x5c>
 801476e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014770:	2064      	movs	r0, #100	; 0x64
 8014772:	f7fe f9b5 	bl	8012ae0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8014776:	4604      	mov	r4, r0
 8014778:	b1c0      	cbz	r0, 80147ac <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 801477a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 801477e:	b1dc      	cbz	r4, 80147b8 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014780:	2300      	movs	r3, #0
 8014782:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014786:	9303      	str	r3, [sp, #12]
 8014788:	9402      	str	r4, [sp, #8]
 801478a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	4643      	mov	r3, r8
 8014794:	462a      	mov	r2, r5
 8014796:	4639      	mov	r1, r7
 8014798:	4630      	mov	r0, r6
 801479a:	f7ff fe3b 	bl	8014414 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801479e:	4620      	mov	r0, r4
 80147a0:	f7ff feae 	bl	8014500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80147a4:	2001      	movs	r0, #1
	}
 80147a6:	b005      	add	sp, #20
 80147a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80147ac:	4648      	mov	r0, r9
 80147ae:	f7fe fa1d 	bl	8012bec <vPortFree>
 80147b2:	e7e4      	b.n	801477e <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80147b4:	2400      	movs	r4, #0
 80147b6:	e7e2      	b.n	801477e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80147b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80147bc:	e7f3      	b.n	80147a6 <xTaskCreate+0x4e>

080147be <vTaskDelete>:
	{
 80147be:	b570      	push	{r4, r5, r6, lr}
 80147c0:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80147c2:	f7fd ffe1 	bl	8012788 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80147c6:	b354      	cbz	r4, 801481e <vTaskDelete+0x60>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147c8:	1d26      	adds	r6, r4, #4
 80147ca:	4630      	mov	r0, r6
 80147cc:	f7fd ff54 	bl	8012678 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80147d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80147d2:	b11b      	cbz	r3, 80147dc <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147d4:	f104 0018 	add.w	r0, r4, #24
 80147d8:	f7fd ff4e 	bl	8012678 <uxListRemove>
			uxTaskNumber++;
 80147dc:	4b23      	ldr	r3, [pc, #140]	; (801486c <vTaskDelete+0xae>)
 80147de:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	; 0x4dc
 80147e2:	3201      	adds	r2, #1
 80147e4:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
			if( pxTCB == pxCurrentTCB )
 80147e8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80147ec:	429c      	cmp	r4, r3
 80147ee:	d01a      	beq.n	8014826 <vTaskDelete+0x68>
				--uxCurrentNumberOfTasks;
 80147f0:	4a1e      	ldr	r2, [pc, #120]	; (801486c <vTaskDelete+0xae>)
 80147f2:	f8d2 34d0 	ldr.w	r3, [r2, #1232]	; 0x4d0
 80147f6:	3b01      	subs	r3, #1
 80147f8:	f8c2 34d0 	str.w	r3, [r2, #1232]	; 0x4d0
				prvDeleteTCB( pxTCB );
 80147fc:	4620      	mov	r0, r4
 80147fe:	f7ff fed7 	bl	80145b0 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8014802:	f7ff fdf1 	bl	80143e8 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 8014806:	f7fd ffe1 	bl	80127cc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801480a:	4b18      	ldr	r3, [pc, #96]	; (801486c <vTaskDelete+0xae>)
 801480c:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8014810:	b123      	cbz	r3, 801481c <vTaskDelete+0x5e>
			if( pxTCB == pxCurrentTCB )
 8014812:	4b16      	ldr	r3, [pc, #88]	; (801486c <vTaskDelete+0xae>)
 8014814:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014818:	429c      	cmp	r4, r3
 801481a:	d010      	beq.n	801483e <vTaskDelete+0x80>
 801481c:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801481e:	4b13      	ldr	r3, [pc, #76]	; (801486c <vTaskDelete+0xae>)
 8014820:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
 8014824:	e7d0      	b.n	80147c8 <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014826:	4d11      	ldr	r5, [pc, #68]	; (801486c <vTaskDelete+0xae>)
 8014828:	4631      	mov	r1, r6
 801482a:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 801482e:	f7fd fefd 	bl	801262c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8014832:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
 8014836:	3301      	adds	r3, #1
 8014838:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 801483c:	e7e3      	b.n	8014806 <vTaskDelete+0x48>
				configASSERT( uxSchedulerSuspended == 0 );
 801483e:	4b0b      	ldr	r3, [pc, #44]	; (801486c <vTaskDelete+0xae>)
 8014840:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014844:	b143      	cbz	r3, 8014858 <vTaskDelete+0x9a>
 8014846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801484a:	f383 8811 	msr	BASEPRI, r3
 801484e:	f3bf 8f6f 	isb	sy
 8014852:	f3bf 8f4f 	dsb	sy
 8014856:	e7fe      	b.n	8014856 <vTaskDelete+0x98>
				portYIELD_WITHIN_API();
 8014858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801485c:	4b04      	ldr	r3, [pc, #16]	; (8014870 <vTaskDelete+0xb2>)
 801485e:	601a      	str	r2, [r3, #0]
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	f3bf 8f6f 	isb	sy
	}
 8014868:	e7d8      	b.n	801481c <vTaskDelete+0x5e>
 801486a:	bf00      	nop
 801486c:	20005514 	.word	0x20005514
 8014870:	e000ed04 	.word	0xe000ed04

08014874 <eTaskGetState>:
	{
 8014874:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8014876:	b1e0      	cbz	r0, 80148b2 <eTaskGetState+0x3e>
 8014878:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
 801487a:	4b1a      	ldr	r3, [pc, #104]	; (80148e4 <eTaskGetState+0x70>)
 801487c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014880:	4298      	cmp	r0, r3
 8014882:	d023      	beq.n	80148cc <eTaskGetState+0x58>
			taskENTER_CRITICAL();
 8014884:	f7fd ff80 	bl	8012788 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014888:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 801488a:	f7fd ff9f 	bl	80127cc <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 801488e:	4b15      	ldr	r3, [pc, #84]	; (80148e4 <eTaskGetState+0x70>)
 8014890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014892:	429c      	cmp	r4, r3
 8014894:	d01c      	beq.n	80148d0 <eTaskGetState+0x5c>
 8014896:	4b13      	ldr	r3, [pc, #76]	; (80148e4 <eTaskGetState+0x70>)
 8014898:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 801489c:	429c      	cmp	r4, r3
 801489e:	d019      	beq.n	80148d4 <eTaskGetState+0x60>
				else if( pxStateList == &xSuspendedTaskList )
 80148a0:	4b10      	ldr	r3, [pc, #64]	; (80148e4 <eTaskGetState+0x70>)
 80148a2:	429c      	cmp	r4, r3
 80148a4:	d00e      	beq.n	80148c4 <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80148a6:	4b10      	ldr	r3, [pc, #64]	; (80148e8 <eTaskGetState+0x74>)
 80148a8:	429c      	cmp	r4, r3
 80148aa:	d017      	beq.n	80148dc <eTaskGetState+0x68>
 80148ac:	b9c4      	cbnz	r4, 80148e0 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 80148ae:	2004      	movs	r0, #4
 80148b0:	bd38      	pop	{r3, r4, r5, pc}
 80148b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148b6:	f383 8811 	msr	BASEPRI, r3
 80148ba:	f3bf 8f6f 	isb	sy
 80148be:	f3bf 8f4f 	dsb	sy
 80148c2:	e7fe      	b.n	80148c2 <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80148c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80148c6:	b93b      	cbnz	r3, 80148d8 <eTaskGetState+0x64>
						eReturn = eSuspended;
 80148c8:	2003      	movs	r0, #3
 80148ca:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 80148cc:	2000      	movs	r0, #0
 80148ce:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
 80148d0:	2002      	movs	r0, #2
 80148d2:	bd38      	pop	{r3, r4, r5, pc}
 80148d4:	2002      	movs	r0, #2
 80148d6:	bd38      	pop	{r3, r4, r5, pc}
						eReturn = eBlocked;
 80148d8:	2002      	movs	r0, #2
 80148da:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 80148dc:	2004      	movs	r0, #4
 80148de:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eReady;
 80148e0:	2001      	movs	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	20005514 	.word	0x20005514
 80148e8:	200059cc 	.word	0x200059cc

080148ec <uxTaskPriorityGet>:
	{
 80148ec:	b510      	push	{r4, lr}
 80148ee:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80148f0:	f7fd ff4a 	bl	8012788 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80148f4:	b124      	cbz	r4, 8014900 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 80148f6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 80148f8:	f7fd ff68 	bl	80127cc <vPortExitCritical>
	}
 80148fc:	4620      	mov	r0, r4
 80148fe:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8014900:	4b01      	ldr	r3, [pc, #4]	; (8014908 <uxTaskPriorityGet+0x1c>)
 8014902:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
 8014906:	e7f6      	b.n	80148f6 <uxTaskPriorityGet+0xa>
 8014908:	20005514 	.word	0x20005514

0801490c <uxTaskPriorityGetFromISR>:
	{
 801490c:	b510      	push	{r4, lr}
 801490e:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014910:	f7fe f85e 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 8014914:	f3ef 8311 	mrs	r3, BASEPRI
 8014918:	f04f 0250 	mov.w	r2, #80	; 0x50
 801491c:	f382 8811 	msr	BASEPRI, r2
 8014920:	f3bf 8f6f 	isb	sy
 8014924:	f3bf 8f4f 	dsb	sy
			pxTCB = prvGetTCBFromHandle( xTask );
 8014928:	b11c      	cbz	r4, 8014932 <uxTaskPriorityGetFromISR+0x26>
			uxReturn = pxTCB->uxPriority;
 801492a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	__asm volatile
 801492c:	f383 8811 	msr	BASEPRI, r3
	}
 8014930:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8014932:	4a02      	ldr	r2, [pc, #8]	; (801493c <uxTaskPriorityGetFromISR+0x30>)
 8014934:	f8d2 44d4 	ldr.w	r4, [r2, #1236]	; 0x4d4
 8014938:	e7f7      	b.n	801492a <uxTaskPriorityGetFromISR+0x1e>
 801493a:	bf00      	nop
 801493c:	20005514 	.word	0x20005514

08014940 <vTaskPrioritySet>:
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8014940:	2937      	cmp	r1, #55	; 0x37
 8014942:	d908      	bls.n	8014956 <vTaskPrioritySet+0x16>
	__asm volatile
 8014944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014948:	f383 8811 	msr	BASEPRI, r3
 801494c:	f3bf 8f6f 	isb	sy
 8014950:	f3bf 8f4f 	dsb	sy
 8014954:	e7fe      	b.n	8014954 <vTaskPrioritySet+0x14>
	{
 8014956:	b570      	push	{r4, r5, r6, lr}
 8014958:	460d      	mov	r5, r1
 801495a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 801495c:	f7fd ff14 	bl	8012788 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8014960:	b914      	cbnz	r4, 8014968 <vTaskPrioritySet+0x28>
 8014962:	4b2c      	ldr	r3, [pc, #176]	; (8014a14 <vTaskPrioritySet+0xd4>)
 8014964:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8014968:	6d22      	ldr	r2, [r4, #80]	; 0x50
			if( uxCurrentBasePriority != uxNewPriority )
 801496a:	4295      	cmp	r5, r2
 801496c:	d03f      	beq.n	80149ee <vTaskPrioritySet+0xae>
				if( uxNewPriority > uxCurrentBasePriority )
 801496e:	d941      	bls.n	80149f4 <vTaskPrioritySet+0xb4>
					if( pxTCB != pxCurrentTCB )
 8014970:	4b28      	ldr	r3, [pc, #160]	; (8014a14 <vTaskPrioritySet+0xd4>)
 8014972:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014976:	429c      	cmp	r4, r3
 8014978:	d043      	beq.n	8014a02 <vTaskPrioritySet+0xc2>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 801497a:	4b26      	ldr	r3, [pc, #152]	; (8014a14 <vTaskPrioritySet+0xd4>)
 801497c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014982:	429d      	cmp	r5, r3
 8014984:	d23f      	bcs.n	8014a06 <vTaskPrioritySet+0xc6>
	BaseType_t xYieldRequired = pdFALSE;
 8014986:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 801498a:	429a      	cmp	r2, r3
 801498c:	d100      	bne.n	8014990 <vTaskPrioritySet+0x50>
						pxTCB->uxPriority = uxNewPriority;
 801498e:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 8014990:	6525      	str	r5, [r4, #80]	; 0x50
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014992:	69a2      	ldr	r2, [r4, #24]
 8014994:	2a00      	cmp	r2, #0
 8014996:	db02      	blt.n	801499e <vTaskPrioritySet+0x5e>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014998:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 801499c:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801499e:	6961      	ldr	r1, [r4, #20]
 80149a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80149a4:	009a      	lsls	r2, r3, #2
 80149a6:	4b1c      	ldr	r3, [pc, #112]	; (8014a18 <vTaskPrioritySet+0xd8>)
 80149a8:	4413      	add	r3, r2
 80149aa:	4299      	cmp	r1, r3
 80149ac:	d12f      	bne.n	8014a0e <vTaskPrioritySet+0xce>
 80149ae:	2301      	movs	r3, #1
 80149b0:	b1a3      	cbz	r3, 80149dc <vTaskPrioritySet+0x9c>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149b2:	1d25      	adds	r5, r4, #4
 80149b4:	4628      	mov	r0, r5
 80149b6:	f7fd fe5f 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80149ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80149bc:	4a15      	ldr	r2, [pc, #84]	; (8014a14 <vTaskPrioritySet+0xd4>)
 80149be:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80149c2:	4293      	cmp	r3, r2
 80149c4:	d902      	bls.n	80149cc <vTaskPrioritySet+0x8c>
 80149c6:	4a13      	ldr	r2, [pc, #76]	; (8014a14 <vTaskPrioritySet+0xd4>)
 80149c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80149cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80149d0:	009a      	lsls	r2, r3, #2
 80149d2:	4629      	mov	r1, r5
 80149d4:	4810      	ldr	r0, [pc, #64]	; (8014a18 <vTaskPrioritySet+0xd8>)
 80149d6:	4410      	add	r0, r2
 80149d8:	f7fd fe28 	bl	801262c <vListInsertEnd>
				if( xYieldRequired != pdFALSE )
 80149dc:	b13e      	cbz	r6, 80149ee <vTaskPrioritySet+0xae>
					taskYIELD_IF_USING_PREEMPTION();
 80149de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149e2:	4b0e      	ldr	r3, [pc, #56]	; (8014a1c <vTaskPrioritySet+0xdc>)
 80149e4:	601a      	str	r2, [r3, #0]
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80149ee:	f7fd feed 	bl	80127cc <vPortExitCritical>
 80149f2:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 80149f4:	4b07      	ldr	r3, [pc, #28]	; (8014a14 <vTaskPrioritySet+0xd4>)
 80149f6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80149fa:	429c      	cmp	r4, r3
 80149fc:	d005      	beq.n	8014a0a <vTaskPrioritySet+0xca>
	BaseType_t xYieldRequired = pdFALSE;
 80149fe:	2600      	movs	r6, #0
 8014a00:	e7c2      	b.n	8014988 <vTaskPrioritySet+0x48>
 8014a02:	2600      	movs	r6, #0
 8014a04:	e7c0      	b.n	8014988 <vTaskPrioritySet+0x48>
							xYieldRequired = pdTRUE;
 8014a06:	2601      	movs	r6, #1
 8014a08:	e7be      	b.n	8014988 <vTaskPrioritySet+0x48>
					xYieldRequired = pdTRUE;
 8014a0a:	2601      	movs	r6, #1
 8014a0c:	e7bc      	b.n	8014988 <vTaskPrioritySet+0x48>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e7ce      	b.n	80149b0 <vTaskPrioritySet+0x70>
 8014a12:	bf00      	nop
 8014a14:	20005514 	.word	0x20005514
 8014a18:	20005544 	.word	0x20005544
 8014a1c:	e000ed04 	.word	0xe000ed04

08014a20 <vTaskResume>:
		configASSERT( xTaskToResume );
 8014a20:	b178      	cbz	r0, 8014a42 <vTaskResume+0x22>
	{
 8014a22:	b570      	push	{r4, r5, r6, lr}
 8014a24:	4604      	mov	r4, r0
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8014a26:	4b1e      	ldr	r3, [pc, #120]	; (8014aa0 <vTaskResume+0x80>)
 8014a28:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014a2c:	4298      	cmp	r0, r3
 8014a2e:	d007      	beq.n	8014a40 <vTaskResume+0x20>
			taskENTER_CRITICAL();
 8014a30:	f7fd feaa 	bl	8012788 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014a34:	4620      	mov	r0, r4
 8014a36:	f7ff fca7 	bl	8014388 <prvTaskIsTaskSuspended>
 8014a3a:	b958      	cbnz	r0, 8014a54 <vTaskResume+0x34>
			taskEXIT_CRITICAL();
 8014a3c:	f7fd fec6 	bl	80127cc <vPortExitCritical>
 8014a40:	bd70      	pop	{r4, r5, r6, pc}
 8014a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a46:	f383 8811 	msr	BASEPRI, r3
 8014a4a:	f3bf 8f6f 	isb	sy
 8014a4e:	f3bf 8f4f 	dsb	sy
 8014a52:	e7fe      	b.n	8014a52 <vTaskResume+0x32>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014a54:	1d26      	adds	r6, r4, #4
 8014a56:	4630      	mov	r0, r6
 8014a58:	f7fd fe0e 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014a5e:	4a10      	ldr	r2, [pc, #64]	; (8014aa0 <vTaskResume+0x80>)
 8014a60:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d902      	bls.n	8014a6e <vTaskResume+0x4e>
 8014a68:	4a0d      	ldr	r2, [pc, #52]	; (8014aa0 <vTaskResume+0x80>)
 8014a6a:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8014a6e:	4d0c      	ldr	r5, [pc, #48]	; (8014aa0 <vTaskResume+0x80>)
 8014a70:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014a74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a78:	009a      	lsls	r2, r3, #2
 8014a7a:	4631      	mov	r1, r6
 8014a7c:	4410      	add	r0, r2
 8014a7e:	f7fd fdd5 	bl	801262c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014a84:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8014a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d3d6      	bcc.n	8014a3c <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8014a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a92:	4b04      	ldr	r3, [pc, #16]	; (8014aa4 <vTaskResume+0x84>)
 8014a94:	601a      	str	r2, [r3, #0]
 8014a96:	f3bf 8f4f 	dsb	sy
 8014a9a:	f3bf 8f6f 	isb	sy
 8014a9e:	e7cd      	b.n	8014a3c <vTaskResume+0x1c>
 8014aa0:	20005514 	.word	0x20005514
 8014aa4:	e000ed04 	.word	0xe000ed04

08014aa8 <xTaskResumeFromISR>:
	{
 8014aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d036      	beq.n	8014b1c <xTaskResumeFromISR+0x74>
 8014aae:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ab0:	f7fd ff8e 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 8014ab4:	f3ef 8711 	mrs	r7, BASEPRI
 8014ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014abc:	f383 8811 	msr	BASEPRI, r3
 8014ac0:	f3bf 8f6f 	isb	sy
 8014ac4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014ac8:	4620      	mov	r0, r4
 8014aca:	f7ff fc5d 	bl	8014388 <prvTaskIsTaskSuspended>
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d036      	beq.n	8014b40 <xTaskResumeFromISR+0x98>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ad2:	4b1c      	ldr	r3, [pc, #112]	; (8014b44 <xTaskResumeFromISR+0x9c>)
 8014ad4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014ad8:	bb5b      	cbnz	r3, 8014b32 <xTaskResumeFromISR+0x8a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014adc:	4b19      	ldr	r3, [pc, #100]	; (8014b44 <xTaskResumeFromISR+0x9c>)
 8014ade:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d222      	bcs.n	8014b2e <xTaskResumeFromISR+0x86>
	BaseType_t xYieldRequired = pdFALSE;
 8014ae8:	2500      	movs	r5, #0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014aea:	1d26      	adds	r6, r4, #4
 8014aec:	4630      	mov	r0, r6
 8014aee:	f7fd fdc3 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014af4:	4a13      	ldr	r2, [pc, #76]	; (8014b44 <xTaskResumeFromISR+0x9c>)
 8014af6:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d902      	bls.n	8014b04 <xTaskResumeFromISR+0x5c>
 8014afe:	4a11      	ldr	r2, [pc, #68]	; (8014b44 <xTaskResumeFromISR+0x9c>)
 8014b00:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8014b04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014b08:	009a      	lsls	r2, r3, #2
 8014b0a:	4631      	mov	r1, r6
 8014b0c:	480e      	ldr	r0, [pc, #56]	; (8014b48 <xTaskResumeFromISR+0xa0>)
 8014b0e:	4410      	add	r0, r2
 8014b10:	f7fd fd8c 	bl	801262c <vListInsertEnd>
	__asm volatile
 8014b14:	f387 8811 	msr	BASEPRI, r7
	}
 8014b18:	4628      	mov	r0, r5
 8014b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm volatile
 8014b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	e7fe      	b.n	8014b2c <xTaskResumeFromISR+0x84>
						xYieldRequired = pdTRUE;
 8014b2e:	2501      	movs	r5, #1
 8014b30:	e7db      	b.n	8014aea <xTaskResumeFromISR+0x42>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014b32:	f104 0118 	add.w	r1, r4, #24
 8014b36:	4805      	ldr	r0, [pc, #20]	; (8014b4c <xTaskResumeFromISR+0xa4>)
 8014b38:	f7fd fd78 	bl	801262c <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8014b3c:	2500      	movs	r5, #0
 8014b3e:	e7e9      	b.n	8014b14 <xTaskResumeFromISR+0x6c>
 8014b40:	2500      	movs	r5, #0
 8014b42:	e7e7      	b.n	8014b14 <xTaskResumeFromISR+0x6c>
 8014b44:	20005514 	.word	0x20005514
 8014b48:	20005544 	.word	0x20005544
 8014b4c:	20005528 	.word	0x20005528

08014b50 <vTaskStartScheduler>:
{
 8014b50:	b510      	push	{r4, lr}
 8014b52:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014b54:	2400      	movs	r4, #0
 8014b56:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b58:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b5a:	aa07      	add	r2, sp, #28
 8014b5c:	a906      	add	r1, sp, #24
 8014b5e:	a805      	add	r0, sp, #20
 8014b60:	f7fd fb35 	bl	80121ce <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b64:	9b05      	ldr	r3, [sp, #20]
 8014b66:	9302      	str	r3, [sp, #8]
 8014b68:	9b06      	ldr	r3, [sp, #24]
 8014b6a:	9301      	str	r3, [sp, #4]
 8014b6c:	9400      	str	r4, [sp, #0]
 8014b6e:	4623      	mov	r3, r4
 8014b70:	9a07      	ldr	r2, [sp, #28]
 8014b72:	491a      	ldr	r1, [pc, #104]	; (8014bdc <vTaskStartScheduler+0x8c>)
 8014b74:	481a      	ldr	r0, [pc, #104]	; (8014be0 <vTaskStartScheduler+0x90>)
 8014b76:	f7ff fdb6 	bl	80146e6 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8014b7a:	b148      	cbz	r0, 8014b90 <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
 8014b7c:	2001      	movs	r0, #1
		if( xReturn == pdPASS )
 8014b7e:	2801      	cmp	r0, #1
 8014b80:	d008      	beq.n	8014b94 <vTaskStartScheduler+0x44>
	if( xReturn == pdPASS )
 8014b82:	2801      	cmp	r0, #1
 8014b84:	d009      	beq.n	8014b9a <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014b8a:	d01d      	beq.n	8014bc8 <vTaskStartScheduler+0x78>
}
 8014b8c:	b008      	add	sp, #32
 8014b8e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8014b90:	2000      	movs	r0, #0
 8014b92:	e7f4      	b.n	8014b7e <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
 8014b94:	f001 f980 	bl	8015e98 <xTimerCreateTimerTask>
 8014b98:	e7f3      	b.n	8014b82 <vTaskStartScheduler+0x32>
 8014b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8014baa:	4b0e      	ldr	r3, [pc, #56]	; (8014be4 <vTaskStartScheduler+0x94>)
 8014bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bb0:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) 0U;
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014bbe:	f7eb fdd3 	bl	8000768 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8014bc2:	f7fd fe81 	bl	80128c8 <xPortStartScheduler>
 8014bc6:	e7e1      	b.n	8014b8c <vTaskStartScheduler+0x3c>
 8014bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bcc:	f383 8811 	msr	BASEPRI, r3
 8014bd0:	f3bf 8f6f 	isb	sy
 8014bd4:	f3bf 8f4f 	dsb	sy
 8014bd8:	e7fe      	b.n	8014bd8 <vTaskStartScheduler+0x88>
 8014bda:	bf00      	nop
 8014bdc:	0801cec8 	.word	0x0801cec8
 8014be0:	08014631 	.word	0x08014631
 8014be4:	20005514 	.word	0x20005514

08014be8 <vTaskEndScheduler>:
{
 8014be8:	b508      	push	{r3, lr}
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	4b02      	ldr	r3, [pc, #8]	; (8014c08 <vTaskEndScheduler+0x20>)
 8014bfe:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
	vPortEndScheduler();
 8014c02:	f7fd fdaf 	bl	8012764 <vPortEndScheduler>
 8014c06:	bd08      	pop	{r3, pc}
 8014c08:	20005514 	.word	0x20005514

08014c0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8014c0c:	4a03      	ldr	r2, [pc, #12]	; (8014c1c <vTaskSuspendAll+0x10>)
 8014c0e:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8014c12:	3301      	adds	r3, #1
 8014c14:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop
 8014c1c:	20005514 	.word	0x20005514

08014c20 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8014c20:	4b01      	ldr	r3, [pc, #4]	; (8014c28 <xTaskGetTickCount+0x8>)
 8014c22:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 8014c26:	4770      	bx	lr
 8014c28:	20005514 	.word	0x20005514

08014c2c <xTaskGetTickCountFromISR>:
{
 8014c2c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c2e:	f7fd fecf 	bl	80129d0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8014c32:	4b02      	ldr	r3, [pc, #8]	; (8014c3c <xTaskGetTickCountFromISR+0x10>)
 8014c34:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 8014c38:	bd08      	pop	{r3, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20005514 	.word	0x20005514

08014c40 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
 8014c40:	4b01      	ldr	r3, [pc, #4]	; (8014c48 <uxTaskGetNumberOfTasks+0x8>)
 8014c42:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	; 0x4d0
}
 8014c46:	4770      	bx	lr
 8014c48:	20005514 	.word	0x20005514

08014c4c <pcTaskGetName>:
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8014c4c:	b110      	cbz	r0, 8014c54 <pcTaskGetName+0x8>
	configASSERT( pxTCB );
 8014c4e:	b128      	cbz	r0, 8014c5c <pcTaskGetName+0x10>
}
 8014c50:	3034      	adds	r0, #52	; 0x34
 8014c52:	4770      	bx	lr
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8014c54:	4b06      	ldr	r3, [pc, #24]	; (8014c70 <pcTaskGetName+0x24>)
 8014c56:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8014c5a:	e7f8      	b.n	8014c4e <pcTaskGetName+0x2>
 8014c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c60:	f383 8811 	msr	BASEPRI, r3
 8014c64:	f3bf 8f6f 	isb	sy
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	e7fe      	b.n	8014c6c <pcTaskGetName+0x20>
 8014c6e:	bf00      	nop
 8014c70:	20005514 	.word	0x20005514

08014c74 <xTaskIncrementTick>:
{
 8014c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c78:	4b42      	ldr	r3, [pc, #264]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014c7a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d171      	bne.n	8014d66 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014c82:	4b40      	ldr	r3, [pc, #256]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014c84:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8014c88:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8014c8a:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014c8e:	b9cd      	cbnz	r5, 8014cc4 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8014c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	b143      	cbz	r3, 8014ca8 <xTaskIncrementTick+0x34>
 8014c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	e7fe      	b.n	8014ca6 <xTaskIncrementTick+0x32>
 8014ca8:	4b36      	ldr	r3, [pc, #216]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cac:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8014cb0:	6299      	str	r1, [r3, #40]	; 0x28
 8014cb2:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 8014cb6:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8014cba:	3201      	adds	r2, #1
 8014cbc:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8014cc0:	f7ff fb92 	bl	80143e8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014cc4:	4b2f      	ldr	r3, [pc, #188]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc8:	429d      	cmp	r5, r3
 8014cca:	d240      	bcs.n	8014d4e <xTaskIncrementTick+0xda>
BaseType_t xSwitchRequired = pdFALSE;
 8014ccc:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014cce:	4a2d      	ldr	r2, [pc, #180]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014cd0:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 8014cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014cda:	0099      	lsls	r1, r3, #2
 8014cdc:	440a      	add	r2, r1
 8014cde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8014ce0:	2b01      	cmp	r3, #1
 8014ce2:	d947      	bls.n	8014d74 <xTaskIncrementTick+0x100>
				xSwitchRequired = pdTRUE;
 8014ce4:	2401      	movs	r4, #1
 8014ce6:	e045      	b.n	8014d74 <xTaskIncrementTick+0x100>
							xSwitchRequired = pdTRUE;
 8014ce8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014cea:	4b26      	ldr	r3, [pc, #152]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	b37b      	cbz	r3, 8014d52 <xTaskIncrementTick+0xde>
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	bb7b      	cbnz	r3, 8014d56 <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014cf6:	4b23      	ldr	r3, [pc, #140]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cfa:	68db      	ldr	r3, [r3, #12]
 8014cfc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014cfe:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8014d00:	429d      	cmp	r5, r3
 8014d02:	d32d      	bcc.n	8014d60 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d04:	f106 0804 	add.w	r8, r6, #4
 8014d08:	4640      	mov	r0, r8
 8014d0a:	f7fd fcb5 	bl	8012678 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d0e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8014d10:	b11b      	cbz	r3, 8014d1a <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014d12:	f106 0018 	add.w	r0, r6, #24
 8014d16:	f7fd fcaf 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014d1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8014d1c:	4a19      	ldr	r2, [pc, #100]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d1e:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8014d22:	4293      	cmp	r3, r2
 8014d24:	d902      	bls.n	8014d2c <xTaskIncrementTick+0xb8>
 8014d26:	4a17      	ldr	r2, [pc, #92]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d28:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8014d2c:	4f15      	ldr	r7, [pc, #84]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d2e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014d32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014d36:	009a      	lsls	r2, r3, #2
 8014d38:	4641      	mov	r1, r8
 8014d3a:	4410      	add	r0, r2
 8014d3c:	f7fd fc76 	bl	801262c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014d40:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8014d42:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8014d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d2cd      	bcs.n	8014ce8 <xTaskIncrementTick+0x74>
 8014d4c:	e7cd      	b.n	8014cea <xTaskIncrementTick+0x76>
 8014d4e:	2400      	movs	r4, #0
 8014d50:	e7cb      	b.n	8014cea <xTaskIncrementTick+0x76>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d52:	2301      	movs	r3, #1
 8014d54:	e7ce      	b.n	8014cf4 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d5a:	4b0a      	ldr	r3, [pc, #40]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d5c:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8014d5e:	e7b6      	b.n	8014cce <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 8014d60:	4a08      	ldr	r2, [pc, #32]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d62:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 8014d64:	e7b3      	b.n	8014cce <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8014d66:	4a07      	ldr	r2, [pc, #28]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d68:	f8d2 34f4 	ldr.w	r3, [r2, #1268]	; 0x4f4
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
BaseType_t xSwitchRequired = pdFALSE;
 8014d72:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8014d74:	4b03      	ldr	r3, [pc, #12]	; (8014d84 <xTaskIncrementTick+0x110>)
 8014d76:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8014d7a:	b103      	cbz	r3, 8014d7e <xTaskIncrementTick+0x10a>
			xSwitchRequired = pdTRUE;
 8014d7c:	2401      	movs	r4, #1
}
 8014d7e:	4620      	mov	r0, r4
 8014d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d84:	20005514 	.word	0x20005514

08014d88 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8014d88:	4b3a      	ldr	r3, [pc, #232]	; (8014e74 <xTaskResumeAll+0xec>)
 8014d8a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014d8e:	b943      	cbnz	r3, 8014da2 <xTaskResumeAll+0x1a>
 8014d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	e7fe      	b.n	8014da0 <xTaskResumeAll+0x18>
{
 8014da2:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8014da4:	f7fd fcf0 	bl	8012788 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8014da8:	4b32      	ldr	r3, [pc, #200]	; (8014e74 <xTaskResumeAll+0xec>)
 8014daa:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8014dae:	3a01      	subs	r2, #1
 8014db0:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014db4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d157      	bne.n	8014e6c <xTaskResumeAll+0xe4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014dbc:	4b2d      	ldr	r3, [pc, #180]	; (8014e74 <xTaskResumeAll+0xec>)
 8014dbe:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8014dc2:	b923      	cbnz	r3, 8014dce <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8014dc4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014dc6:	f7fd fd01 	bl	80127cc <vPortExitCritical>
}
 8014dca:	4620      	mov	r0, r4
 8014dcc:	bd70      	pop	{r4, r5, r6, pc}
 8014dce:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014dd0:	4b28      	ldr	r3, [pc, #160]	; (8014e74 <xTaskResumeAll+0xec>)
 8014dd2:	695b      	ldr	r3, [r3, #20]
 8014dd4:	b32b      	cbz	r3, 8014e22 <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014dd6:	4d27      	ldr	r5, [pc, #156]	; (8014e74 <xTaskResumeAll+0xec>)
 8014dd8:	6a2b      	ldr	r3, [r5, #32]
 8014dda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ddc:	f104 0018 	add.w	r0, r4, #24
 8014de0:	f7fd fc4a 	bl	8012678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014de4:	1d26      	adds	r6, r4, #4
 8014de6:	4630      	mov	r0, r6
 8014de8:	f7fd fc46 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014dee:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d901      	bls.n	8014dfa <xTaskResumeAll+0x72>
 8014df6:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 8014dfa:	4d1e      	ldr	r5, [pc, #120]	; (8014e74 <xTaskResumeAll+0xec>)
 8014dfc:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e04:	009a      	lsls	r2, r3, #2
 8014e06:	4631      	mov	r1, r6
 8014e08:	4410      	add	r0, r2
 8014e0a:	f7fd fc0f 	bl	801262c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014e10:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8014e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d3da      	bcc.n	8014dd0 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	f8c5 24f8 	str.w	r2, [r5, #1272]	; 0x4f8
 8014e20:	e7d6      	b.n	8014dd0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8014e22:	b10c      	cbz	r4, 8014e28 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8014e24:	f7ff fae0 	bl	80143e8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014e28:	4b12      	ldr	r3, [pc, #72]	; (8014e74 <xTaskResumeAll+0xec>)
 8014e2a:	f8d3 44f4 	ldr.w	r4, [r3, #1268]	; 0x4f4
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014e2e:	b97c      	cbnz	r4, 8014e50 <xTaskResumeAll+0xc8>
				if( xYieldPending != pdFALSE )
 8014e30:	4b10      	ldr	r3, [pc, #64]	; (8014e74 <xTaskResumeAll+0xec>)
 8014e32:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8014e36:	b1db      	cbz	r3, 8014e70 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8014e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e3c:	4b0e      	ldr	r3, [pc, #56]	; (8014e78 <xTaskResumeAll+0xf0>)
 8014e3e:	601a      	str	r2, [r3, #0]
 8014e40:	f3bf 8f4f 	dsb	sy
 8014e44:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8014e48:	2401      	movs	r4, #1
 8014e4a:	e7bc      	b.n	8014dc6 <xTaskResumeAll+0x3e>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014e4c:	3c01      	subs	r4, #1
 8014e4e:	d008      	beq.n	8014e62 <xTaskResumeAll+0xda>
							if( xTaskIncrementTick() != pdFALSE )
 8014e50:	f7ff ff10 	bl	8014c74 <xTaskIncrementTick>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d0f9      	beq.n	8014e4c <xTaskResumeAll+0xc4>
								xYieldPending = pdTRUE;
 8014e58:	2201      	movs	r2, #1
 8014e5a:	4b06      	ldr	r3, [pc, #24]	; (8014e74 <xTaskResumeAll+0xec>)
 8014e5c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8014e60:	e7f4      	b.n	8014e4c <xTaskResumeAll+0xc4>
						uxPendedTicks = 0;
 8014e62:	2200      	movs	r2, #0
 8014e64:	4b03      	ldr	r3, [pc, #12]	; (8014e74 <xTaskResumeAll+0xec>)
 8014e66:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8014e6a:	e7e1      	b.n	8014e30 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 8014e6c:	2400      	movs	r4, #0
 8014e6e:	e7aa      	b.n	8014dc6 <xTaskResumeAll+0x3e>
 8014e70:	2400      	movs	r4, #0
 8014e72:	e7a8      	b.n	8014dc6 <xTaskResumeAll+0x3e>
 8014e74:	20005514 	.word	0x20005514
 8014e78:	e000ed04 	.word	0xe000ed04

08014e7c <vTaskDelayUntil>:
	{
 8014e7c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8014e7e:	b150      	cbz	r0, 8014e96 <vTaskDelayUntil+0x1a>
 8014e80:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8014e82:	b989      	cbnz	r1, 8014ea8 <vTaskDelayUntil+0x2c>
 8014e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e88:	f383 8811 	msr	BASEPRI, r3
 8014e8c:	f3bf 8f6f 	isb	sy
 8014e90:	f3bf 8f4f 	dsb	sy
 8014e94:	e7fe      	b.n	8014e94 <vTaskDelayUntil+0x18>
 8014e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9a:	f383 8811 	msr	BASEPRI, r3
 8014e9e:	f3bf 8f6f 	isb	sy
 8014ea2:	f3bf 8f4f 	dsb	sy
 8014ea6:	e7fe      	b.n	8014ea6 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8014ea8:	4b1d      	ldr	r3, [pc, #116]	; (8014f20 <vTaskDelayUntil+0xa4>)
 8014eaa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014eae:	b143      	cbz	r3, 8014ec2 <vTaskDelayUntil+0x46>
 8014eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb4:	f383 8811 	msr	BASEPRI, r3
 8014eb8:	f3bf 8f6f 	isb	sy
 8014ebc:	f3bf 8f4f 	dsb	sy
 8014ec0:	e7fe      	b.n	8014ec0 <vTaskDelayUntil+0x44>
 8014ec2:	460c      	mov	r4, r1
		vTaskSuspendAll();
 8014ec4:	f7ff fea2 	bl	8014c0c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8014ec8:	4b15      	ldr	r3, [pc, #84]	; (8014f20 <vTaskDelayUntil+0xa4>)
 8014eca:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014ece:	682a      	ldr	r2, [r5, #0]
 8014ed0:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8014ed2:	4290      	cmp	r0, r2
 8014ed4:	d216      	bcs.n	8014f04 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014ed6:	42a2      	cmp	r2, r4
 8014ed8:	d91a      	bls.n	8014f10 <vTaskDelayUntil+0x94>
 8014eda:	42a0      	cmp	r0, r4
 8014edc:	d31a      	bcc.n	8014f14 <vTaskDelayUntil+0x98>
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014ede:	2200      	movs	r2, #0
			*pxPreviousWakeTime = xTimeToWake;
 8014ee0:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8014ee2:	b11a      	cbz	r2, 8014eec <vTaskDelayUntil+0x70>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	1a20      	subs	r0, r4, r0
 8014ee8:	f7ff fbb6 	bl	8014658 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8014eec:	f7ff ff4c 	bl	8014d88 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8014ef0:	b938      	cbnz	r0, 8014f02 <vTaskDelayUntil+0x86>
			portYIELD_WITHIN_API();
 8014ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef6:	4b0b      	ldr	r3, [pc, #44]	; (8014f24 <vTaskDelayUntil+0xa8>)
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	f3bf 8f4f 	dsb	sy
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014f04:	42a2      	cmp	r2, r4
 8014f06:	d807      	bhi.n	8014f18 <vTaskDelayUntil+0x9c>
 8014f08:	42a0      	cmp	r0, r4
 8014f0a:	d307      	bcc.n	8014f1c <vTaskDelayUntil+0xa0>
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	e7e7      	b.n	8014ee0 <vTaskDelayUntil+0x64>
 8014f10:	2200      	movs	r2, #0
 8014f12:	e7e5      	b.n	8014ee0 <vTaskDelayUntil+0x64>
					xShouldDelay = pdTRUE;
 8014f14:	2201      	movs	r2, #1
 8014f16:	e7e3      	b.n	8014ee0 <vTaskDelayUntil+0x64>
					xShouldDelay = pdTRUE;
 8014f18:	2201      	movs	r2, #1
 8014f1a:	e7e1      	b.n	8014ee0 <vTaskDelayUntil+0x64>
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	e7df      	b.n	8014ee0 <vTaskDelayUntil+0x64>
 8014f20:	20005514 	.word	0x20005514
 8014f24:	e000ed04 	.word	0xe000ed04

08014f28 <vTaskDelay>:
	{
 8014f28:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014f2a:	b1b0      	cbz	r0, 8014f5a <vTaskDelay+0x32>
 8014f2c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8014f2e:	4b10      	ldr	r3, [pc, #64]	; (8014f70 <vTaskDelay+0x48>)
 8014f30:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014f34:	b143      	cbz	r3, 8014f48 <vTaskDelay+0x20>
 8014f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f3a:	f383 8811 	msr	BASEPRI, r3
 8014f3e:	f3bf 8f6f 	isb	sy
 8014f42:	f3bf 8f4f 	dsb	sy
 8014f46:	e7fe      	b.n	8014f46 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8014f48:	f7ff fe60 	bl	8014c0c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	4620      	mov	r0, r4
 8014f50:	f7ff fb82 	bl	8014658 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8014f54:	f7ff ff18 	bl	8014d88 <xTaskResumeAll>
 8014f58:	e000      	b.n	8014f5c <vTaskDelay+0x34>
	BaseType_t xAlreadyYielded = pdFALSE;
 8014f5a:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8014f5c:	b938      	cbnz	r0, 8014f6e <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 8014f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f62:	4b04      	ldr	r3, [pc, #16]	; (8014f74 <vTaskDelay+0x4c>)
 8014f64:	601a      	str	r2, [r3, #0]
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	f3bf 8f6f 	isb	sy
 8014f6e:	bd10      	pop	{r4, pc}
 8014f70:	20005514 	.word	0x20005514
 8014f74:	e000ed04 	.word	0xe000ed04

08014f78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014f78:	4b31      	ldr	r3, [pc, #196]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014f7a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014f7e:	b123      	cbz	r3, 8014f8a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8014f80:	2201      	movs	r2, #1
 8014f82:	4b2f      	ldr	r3, [pc, #188]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014f84:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8014f88:	4770      	bx	lr
{
 8014f8a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8014f8c:	4c2c      	ldr	r4, [pc, #176]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014f8e:	2300      	movs	r3, #0
 8014f90:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014f94:	f7eb fbe9 	bl	800076a <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014f98:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8014f9c:	4298      	cmp	r0, r3
 8014f9e:	d905      	bls.n	8014fac <vTaskSwitchContext+0x34>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8014fa0:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	; 0x4d4
 8014fa4:	1ac3      	subs	r3, r0, r3
 8014fa6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8014fa8:	4413      	add	r3, r2
 8014faa:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8014fac:	4b24      	ldr	r3, [pc, #144]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014fae:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
		taskCHECK_FOR_STACK_OVERFLOW();
 8014fb2:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8014fb6:	6812      	ldr	r2, [r2, #0]
 8014fb8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8014fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d807      	bhi.n	8014fd2 <vTaskSwitchContext+0x5a>
 8014fc2:	4b1f      	ldr	r3, [pc, #124]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014fc4:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8014fc8:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8014fcc:	3134      	adds	r1, #52	; 0x34
 8014fce:	f7eb fbce 	bl	800076e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014fd2:	4b1b      	ldr	r3, [pc, #108]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014fd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8014fd8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014fdc:	0091      	lsls	r1, r2, #2
 8014fde:	4a18      	ldr	r2, [pc, #96]	; (8015040 <vTaskSwitchContext+0xc8>)
 8014fe0:	440a      	add	r2, r1
 8014fe2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014fe4:	b95a      	cbnz	r2, 8014ffe <vTaskSwitchContext+0x86>
 8014fe6:	b10b      	cbz	r3, 8014fec <vTaskSwitchContext+0x74>
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	e7f5      	b.n	8014fd8 <vTaskSwitchContext+0x60>
 8014fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff0:	f383 8811 	msr	BASEPRI, r3
 8014ff4:	f3bf 8f6f 	isb	sy
 8014ff8:	f3bf 8f4f 	dsb	sy
 8014ffc:	e7fe      	b.n	8014ffc <vTaskSwitchContext+0x84>
 8014ffe:	4a10      	ldr	r2, [pc, #64]	; (8015040 <vTaskSwitchContext+0xc8>)
 8015000:	0099      	lsls	r1, r3, #2
 8015002:	18cc      	adds	r4, r1, r3
 8015004:	00a0      	lsls	r0, r4, #2
 8015006:	4410      	add	r0, r2
 8015008:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801500a:	6864      	ldr	r4, [r4, #4]
 801500c:	6344      	str	r4, [r0, #52]	; 0x34
 801500e:	3230      	adds	r2, #48	; 0x30
 8015010:	4419      	add	r1, r3
 8015012:	0088      	lsls	r0, r1, #2
 8015014:	4601      	mov	r1, r0
 8015016:	3008      	adds	r0, #8
 8015018:	4402      	add	r2, r0
 801501a:	4294      	cmp	r4, r2
 801501c:	d00b      	beq.n	8015036 <vTaskSwitchContext+0xbe>
 801501e:	4908      	ldr	r1, [pc, #32]	; (8015040 <vTaskSwitchContext+0xc8>)
 8015020:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8015024:	0082      	lsls	r2, r0, #2
 8015026:	440a      	add	r2, r1
 8015028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801502a:	68d2      	ldr	r2, [r2, #12]
 801502c:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 8015030:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
 8015034:	bd10      	pop	{r4, pc}
 8015036:	6860      	ldr	r0, [r4, #4]
 8015038:	4a01      	ldr	r2, [pc, #4]	; (8015040 <vTaskSwitchContext+0xc8>)
 801503a:	440a      	add	r2, r1
 801503c:	6350      	str	r0, [r2, #52]	; 0x34
 801503e:	e7ee      	b.n	801501e <vTaskSwitchContext+0xa6>
 8015040:	20005514 	.word	0x20005514

08015044 <vTaskSuspend>:
	{
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8015048:	f7fd fb9e 	bl	8012788 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801504c:	b1f4      	cbz	r4, 801508c <vTaskSuspend+0x48>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801504e:	1d25      	adds	r5, r4, #4
 8015050:	4628      	mov	r0, r5
 8015052:	f7fd fb11 	bl	8012678 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015058:	b11b      	cbz	r3, 8015062 <vTaskSuspend+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801505a:	f104 0018 	add.w	r0, r4, #24
 801505e:	f7fd fb0b 	bl	8012678 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015062:	4629      	mov	r1, r5
 8015064:	4825      	ldr	r0, [pc, #148]	; (80150fc <vTaskSuspend+0xb8>)
 8015066:	f7fd fae1 	bl	801262c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801506a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801506e:	b2db      	uxtb	r3, r3
 8015070:	2b01      	cmp	r3, #1
 8015072:	d00f      	beq.n	8015094 <vTaskSuspend+0x50>
		taskEXIT_CRITICAL();
 8015074:	f7fd fbaa 	bl	80127cc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8015078:	4b20      	ldr	r3, [pc, #128]	; (80150fc <vTaskSuspend+0xb8>)
 801507a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801507e:	b96b      	cbnz	r3, 801509c <vTaskSuspend+0x58>
		if( pxTCB == pxCurrentTCB )
 8015080:	4b1e      	ldr	r3, [pc, #120]	; (80150fc <vTaskSuspend+0xb8>)
 8015082:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015086:	429c      	cmp	r4, r3
 8015088:	d00f      	beq.n	80150aa <vTaskSuspend+0x66>
 801508a:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801508c:	4b1b      	ldr	r3, [pc, #108]	; (80150fc <vTaskSuspend+0xb8>)
 801508e:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
 8015092:	e7dc      	b.n	801504e <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015094:	2300      	movs	r3, #0
 8015096:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801509a:	e7eb      	b.n	8015074 <vTaskSuspend+0x30>
			taskENTER_CRITICAL();
 801509c:	f7fd fb74 	bl	8012788 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80150a0:	f7ff f9a2 	bl	80143e8 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80150a4:	f7fd fb92 	bl	80127cc <vPortExitCritical>
 80150a8:	e7ea      	b.n	8015080 <vTaskSuspend+0x3c>
			if( xSchedulerRunning != pdFALSE )
 80150aa:	4b14      	ldr	r3, [pc, #80]	; (80150fc <vTaskSuspend+0xb8>)
 80150ac:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80150b0:	b1ab      	cbz	r3, 80150de <vTaskSuspend+0x9a>
				configASSERT( uxSchedulerSuspended == 0 );
 80150b2:	4b12      	ldr	r3, [pc, #72]	; (80150fc <vTaskSuspend+0xb8>)
 80150b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80150b8:	b143      	cbz	r3, 80150cc <vTaskSuspend+0x88>
 80150ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150be:	f383 8811 	msr	BASEPRI, r3
 80150c2:	f3bf 8f6f 	isb	sy
 80150c6:	f3bf 8f4f 	dsb	sy
 80150ca:	e7fe      	b.n	80150ca <vTaskSuspend+0x86>
				portYIELD_WITHIN_API();
 80150cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150d0:	4b0b      	ldr	r3, [pc, #44]	; (8015100 <vTaskSuspend+0xbc>)
 80150d2:	601a      	str	r2, [r3, #0]
 80150d4:	f3bf 8f4f 	dsb	sy
 80150d8:	f3bf 8f6f 	isb	sy
 80150dc:	bd38      	pop	{r3, r4, r5, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80150de:	4b07      	ldr	r3, [pc, #28]	; (80150fc <vTaskSuspend+0xb8>)
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d104      	bne.n	80150f4 <vTaskSuspend+0xb0>
					pxCurrentTCB = NULL;
 80150ea:	2200      	movs	r2, #0
 80150ec:	4b03      	ldr	r3, [pc, #12]	; (80150fc <vTaskSuspend+0xb8>)
 80150ee:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
 80150f2:	bd38      	pop	{r3, r4, r5, pc}
					vTaskSwitchContext();
 80150f4:	f7ff ff40 	bl	8014f78 <vTaskSwitchContext>
	}
 80150f8:	e7c7      	b.n	801508a <vTaskSuspend+0x46>
 80150fa:	bf00      	nop
 80150fc:	20005514 	.word	0x20005514
 8015100:	e000ed04 	.word	0xe000ed04

08015104 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8015104:	b940      	cbnz	r0, 8015118 <vTaskPlaceOnEventList+0x14>
 8015106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801510a:	f383 8811 	msr	BASEPRI, r3
 801510e:	f3bf 8f6f 	isb	sy
 8015112:	f3bf 8f4f 	dsb	sy
 8015116:	e7fe      	b.n	8015116 <vTaskPlaceOnEventList+0x12>
{
 8015118:	b510      	push	{r4, lr}
 801511a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801511c:	4b05      	ldr	r3, [pc, #20]	; (8015134 <vTaskPlaceOnEventList+0x30>)
 801511e:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8015122:	3118      	adds	r1, #24
 8015124:	f7fd fa8e 	bl	8012644 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015128:	2101      	movs	r1, #1
 801512a:	4620      	mov	r0, r4
 801512c:	f7ff fa94 	bl	8014658 <prvAddCurrentTaskToDelayedList>
 8015130:	bd10      	pop	{r4, pc}
 8015132:	bf00      	nop
 8015134:	20005514 	.word	0x20005514

08015138 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8015138:	b168      	cbz	r0, 8015156 <vTaskPlaceOnUnorderedEventList+0x1e>
 801513a:	4603      	mov	r3, r0
	configASSERT( uxSchedulerSuspended != 0 );
 801513c:	4814      	ldr	r0, [pc, #80]	; (8015190 <vTaskPlaceOnUnorderedEventList+0x58>)
 801513e:	f8d0 04ec 	ldr.w	r0, [r0, #1260]	; 0x4ec
 8015142:	b988      	cbnz	r0, 8015168 <vTaskPlaceOnUnorderedEventList+0x30>
 8015144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015148:	f383 8811 	msr	BASEPRI, r3
 801514c:	f3bf 8f6f 	isb	sy
 8015150:	f3bf 8f4f 	dsb	sy
 8015154:	e7fe      	b.n	8015154 <vTaskPlaceOnUnorderedEventList+0x1c>
 8015156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801515a:	f383 8811 	msr	BASEPRI, r3
 801515e:	f3bf 8f6f 	isb	sy
 8015162:	f3bf 8f4f 	dsb	sy
 8015166:	e7fe      	b.n	8015166 <vTaskPlaceOnUnorderedEventList+0x2e>
{
 8015168:	b510      	push	{r4, lr}
 801516a:	4618      	mov	r0, r3
 801516c:	4614      	mov	r4, r2
 801516e:	460b      	mov	r3, r1
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015170:	4a07      	ldr	r2, [pc, #28]	; (8015190 <vTaskPlaceOnUnorderedEventList+0x58>)
 8015172:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8015176:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801517a:	618b      	str	r3, [r1, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801517c:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8015180:	3118      	adds	r1, #24
 8015182:	f7fd fa53 	bl	801262c <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015186:	2101      	movs	r1, #1
 8015188:	4620      	mov	r0, r4
 801518a:	f7ff fa65 	bl	8014658 <prvAddCurrentTaskToDelayedList>
 801518e:	bd10      	pop	{r4, pc}
 8015190:	20005514 	.word	0x20005514

08015194 <vTaskPlaceOnEventListRestricted>:
	{
 8015194:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8015196:	b178      	cbz	r0, 80151b8 <vTaskPlaceOnEventListRestricted+0x24>
 8015198:	460c      	mov	r4, r1
 801519a:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801519c:	4a0b      	ldr	r2, [pc, #44]	; (80151cc <vTaskPlaceOnEventListRestricted+0x38>)
 801519e:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80151a2:	3118      	adds	r1, #24
 80151a4:	f7fd fa42 	bl	801262c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80151a8:	b10d      	cbz	r5, 80151ae <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 80151aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80151ae:	4629      	mov	r1, r5
 80151b0:	4620      	mov	r0, r4
 80151b2:	f7ff fa51 	bl	8014658 <prvAddCurrentTaskToDelayedList>
 80151b6:	bd38      	pop	{r3, r4, r5, pc}
 80151b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151bc:	f383 8811 	msr	BASEPRI, r3
 80151c0:	f3bf 8f6f 	isb	sy
 80151c4:	f3bf 8f4f 	dsb	sy
 80151c8:	e7fe      	b.n	80151c8 <vTaskPlaceOnEventListRestricted+0x34>
 80151ca:	bf00      	nop
 80151cc:	20005514 	.word	0x20005514

080151d0 <xTaskRemoveFromEventList>:
{
 80151d0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80151d2:	68c3      	ldr	r3, [r0, #12]
 80151d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80151d6:	b34c      	cbz	r4, 801522c <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80151d8:	f104 0518 	add.w	r5, r4, #24
 80151dc:	4628      	mov	r0, r5
 80151de:	f7fd fa4b 	bl	8012678 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151e2:	4b1a      	ldr	r3, [pc, #104]	; (801524c <xTaskRemoveFromEventList+0x7c>)
 80151e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80151e8:	bb4b      	cbnz	r3, 801523e <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80151ea:	1d25      	adds	r5, r4, #4
 80151ec:	4628      	mov	r0, r5
 80151ee:	f7fd fa43 	bl	8012678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80151f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80151f4:	4a15      	ldr	r2, [pc, #84]	; (801524c <xTaskRemoveFromEventList+0x7c>)
 80151f6:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d902      	bls.n	8015204 <xTaskRemoveFromEventList+0x34>
 80151fe:	4a13      	ldr	r2, [pc, #76]	; (801524c <xTaskRemoveFromEventList+0x7c>)
 8015200:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8015204:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015208:	009a      	lsls	r2, r3, #2
 801520a:	4629      	mov	r1, r5
 801520c:	4810      	ldr	r0, [pc, #64]	; (8015250 <xTaskRemoveFromEventList+0x80>)
 801520e:	4410      	add	r0, r2
 8015210:	f7fd fa0c 	bl	801262c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015214:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015216:	4b0d      	ldr	r3, [pc, #52]	; (801524c <xTaskRemoveFromEventList+0x7c>)
 8015218:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 801521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521e:	429a      	cmp	r2, r3
 8015220:	d912      	bls.n	8015248 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8015222:	2001      	movs	r0, #1
 8015224:	4b09      	ldr	r3, [pc, #36]	; (801524c <xTaskRemoveFromEventList+0x7c>)
 8015226:	f8c3 04f8 	str.w	r0, [r3, #1272]	; 0x4f8
 801522a:	bd38      	pop	{r3, r4, r5, pc}
 801522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015230:	f383 8811 	msr	BASEPRI, r3
 8015234:	f3bf 8f6f 	isb	sy
 8015238:	f3bf 8f4f 	dsb	sy
 801523c:	e7fe      	b.n	801523c <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801523e:	4629      	mov	r1, r5
 8015240:	4804      	ldr	r0, [pc, #16]	; (8015254 <xTaskRemoveFromEventList+0x84>)
 8015242:	f7fd f9f3 	bl	801262c <vListInsertEnd>
 8015246:	e7e5      	b.n	8015214 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8015248:	2000      	movs	r0, #0
}
 801524a:	bd38      	pop	{r3, r4, r5, pc}
 801524c:	20005514 	.word	0x20005514
 8015250:	20005544 	.word	0x20005544
 8015254:	20005528 	.word	0x20005528

08015258 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015258:	4b1f      	ldr	r3, [pc, #124]	; (80152d8 <vTaskRemoveFromUnorderedEventList+0x80>)
 801525a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801525e:	b943      	cbnz	r3, 8015272 <vTaskRemoveFromUnorderedEventList+0x1a>
 8015260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015264:	f383 8811 	msr	BASEPRI, r3
 8015268:	f3bf 8f6f 	isb	sy
 801526c:	f3bf 8f4f 	dsb	sy
 8015270:	e7fe      	b.n	8015270 <vTaskRemoveFromUnorderedEventList+0x18>
{
 8015272:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015274:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8015278:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 801527a:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 801527c:	b314      	cbz	r4, 80152c4 <vTaskRemoveFromUnorderedEventList+0x6c>
	( void ) uxListRemove( pxEventListItem );
 801527e:	f7fd f9fb 	bl	8012678 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015282:	1d26      	adds	r6, r4, #4
 8015284:	4630      	mov	r0, r6
 8015286:	f7fd f9f7 	bl	8012678 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801528a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801528c:	4a12      	ldr	r2, [pc, #72]	; (80152d8 <vTaskRemoveFromUnorderedEventList+0x80>)
 801528e:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8015292:	4293      	cmp	r3, r2
 8015294:	d902      	bls.n	801529c <vTaskRemoveFromUnorderedEventList+0x44>
 8015296:	4a10      	ldr	r2, [pc, #64]	; (80152d8 <vTaskRemoveFromUnorderedEventList+0x80>)
 8015298:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 801529c:	4d0e      	ldr	r5, [pc, #56]	; (80152d8 <vTaskRemoveFromUnorderedEventList+0x80>)
 801529e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80152a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80152a6:	009a      	lsls	r2, r3, #2
 80152a8:	4631      	mov	r1, r6
 80152aa:	4410      	add	r0, r2
 80152ac:	f7fd f9be 	bl	801262c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80152b2:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 80152b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d902      	bls.n	80152c2 <vTaskRemoveFromUnorderedEventList+0x6a>
		xYieldPending = pdTRUE;
 80152bc:	2201      	movs	r2, #1
 80152be:	f8c5 24f8 	str.w	r2, [r5, #1272]	; 0x4f8
 80152c2:	bd70      	pop	{r4, r5, r6, pc}
 80152c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c8:	f383 8811 	msr	BASEPRI, r3
 80152cc:	f3bf 8f6f 	isb	sy
 80152d0:	f3bf 8f4f 	dsb	sy
 80152d4:	e7fe      	b.n	80152d4 <vTaskRemoveFromUnorderedEventList+0x7c>
 80152d6:	bf00      	nop
 80152d8:	20005514 	.word	0x20005514

080152dc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80152dc:	b940      	cbnz	r0, 80152f0 <vTaskSetTimeOutState+0x14>
 80152de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e2:	f383 8811 	msr	BASEPRI, r3
 80152e6:	f3bf 8f6f 	isb	sy
 80152ea:	f3bf 8f4f 	dsb	sy
 80152ee:	e7fe      	b.n	80152ee <vTaskSetTimeOutState+0x12>
{
 80152f0:	b510      	push	{r4, lr}
 80152f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80152f4:	f7fd fa48 	bl	8012788 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80152f8:	4b04      	ldr	r3, [pc, #16]	; (801530c <vTaskSetTimeOutState+0x30>)
 80152fa:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80152fe:	6022      	str	r2, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8015300:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8015304:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 8015306:	f7fd fa61 	bl	80127cc <vPortExitCritical>
 801530a:	bd10      	pop	{r4, pc}
 801530c:	20005514 	.word	0x20005514

08015310 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015310:	4b03      	ldr	r3, [pc, #12]	; (8015320 <vTaskInternalSetTimeOutState+0x10>)
 8015312:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8015316:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015318:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 801531c:	6043      	str	r3, [r0, #4]
 801531e:	4770      	bx	lr
 8015320:	20005514 	.word	0x20005514

08015324 <xTaskCheckForTimeOut>:
{
 8015324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8015326:	b1f0      	cbz	r0, 8015366 <xTaskCheckForTimeOut+0x42>
 8015328:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801532a:	b329      	cbz	r1, 8015378 <xTaskCheckForTimeOut+0x54>
 801532c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 801532e:	f7fd fa2b 	bl	8012788 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8015332:	4b1b      	ldr	r3, [pc, #108]	; (80153a0 <xTaskCheckForTimeOut+0x7c>)
 8015334:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015338:	6869      	ldr	r1, [r5, #4]
 801533a:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 801533c:	6823      	ldr	r3, [r4, #0]
 801533e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015342:	d029      	beq.n	8015398 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015344:	682f      	ldr	r7, [r5, #0]
 8015346:	4e16      	ldr	r6, [pc, #88]	; (80153a0 <xTaskCheckForTimeOut+0x7c>)
 8015348:	f8d6 64f0 	ldr.w	r6, [r6, #1264]	; 0x4f0
 801534c:	42b7      	cmp	r7, r6
 801534e:	d001      	beq.n	8015354 <xTaskCheckForTimeOut+0x30>
 8015350:	4288      	cmp	r0, r1
 8015352:	d223      	bcs.n	801539c <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015354:	429a      	cmp	r2, r3
 8015356:	d318      	bcc.n	801538a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801535c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801535e:	f7fd fa35 	bl	80127cc <vPortExitCritical>
}
 8015362:	4620      	mov	r0, r4
 8015364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536a:	f383 8811 	msr	BASEPRI, r3
 801536e:	f3bf 8f6f 	isb	sy
 8015372:	f3bf 8f4f 	dsb	sy
 8015376:	e7fe      	b.n	8015376 <xTaskCheckForTimeOut+0x52>
 8015378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537c:	f383 8811 	msr	BASEPRI, r3
 8015380:	f3bf 8f6f 	isb	sy
 8015384:	f3bf 8f4f 	dsb	sy
 8015388:	e7fe      	b.n	8015388 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 801538a:	1a9b      	subs	r3, r3, r2
 801538c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801538e:	4628      	mov	r0, r5
 8015390:	f7ff ffbe 	bl	8015310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015394:	2400      	movs	r4, #0
 8015396:	e7e2      	b.n	801535e <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
 8015398:	2400      	movs	r4, #0
 801539a:	e7e0      	b.n	801535e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
 801539c:	2401      	movs	r4, #1
 801539e:	e7de      	b.n	801535e <xTaskCheckForTimeOut+0x3a>
 80153a0:	20005514 	.word	0x20005514

080153a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80153a4:	2201      	movs	r2, #1
 80153a6:	4b02      	ldr	r3, [pc, #8]	; (80153b0 <vTaskMissedYield+0xc>)
 80153a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	20005514 	.word	0x20005514

080153b4 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 80153b4:	b108      	cbz	r0, 80153ba <uxTaskGetTaskNumber+0x6>
			uxReturn = pxTCB->uxTaskNumber;
 80153b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80153b8:	4770      	bx	lr
			uxReturn = 0U;
 80153ba:	2000      	movs	r0, #0
	}
 80153bc:	4770      	bx	lr

080153be <vTaskSetTaskNumber>:
		if( xTask != NULL )
 80153be:	b100      	cbz	r0, 80153c2 <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 80153c0:	64c1      	str	r1, [r0, #76]	; 0x4c
 80153c2:	4770      	bx	lr

080153c4 <vTaskGetInfo>:
	{
 80153c4:	b570      	push	{r4, r5, r6, lr}
 80153c6:	460d      	mov	r5, r1
 80153c8:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 80153ca:	4604      	mov	r4, r0
 80153cc:	b1d8      	cbz	r0, 8015406 <vTaskGetInfo+0x42>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80153ce:	602c      	str	r4, [r5, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80153d0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80153d4:	606a      	str	r2, [r5, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80153d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80153d8:	612a      	str	r2, [r5, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80153da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80153dc:	61ea      	str	r2, [r5, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80153de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80153e0:	60aa      	str	r2, [r5, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80153e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80153e4:	616a      	str	r2, [r5, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80153e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80153e8:	61aa      	str	r2, [r5, #24]
		if( eState != eInvalid )
 80153ea:	2b05      	cmp	r3, #5
 80153ec:	d01b      	beq.n	8015426 <vTaskGetInfo+0x62>
			if( pxTCB == pxCurrentTCB )
 80153ee:	4a13      	ldr	r2, [pc, #76]	; (801543c <vTaskGetInfo+0x78>)
 80153f0:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 80153f4:	4294      	cmp	r4, r2
 80153f6:	d00a      	beq.n	801540e <vTaskGetInfo+0x4a>
				pxTaskStatus->eCurrentState = eState;
 80153f8:	732b      	strb	r3, [r5, #12]
					if( eState == eSuspended )
 80153fa:	2b03      	cmp	r3, #3
 80153fc:	d00a      	beq.n	8015414 <vTaskGetInfo+0x50>
		if( xGetFreeStackSpace != pdFALSE )
 80153fe:	b9be      	cbnz	r6, 8015430 <vTaskGetInfo+0x6c>
			pxTaskStatus->usStackHighWaterMark = 0;
 8015400:	2300      	movs	r3, #0
 8015402:	842b      	strh	r3, [r5, #32]
 8015404:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8015406:	4a0d      	ldr	r2, [pc, #52]	; (801543c <vTaskGetInfo+0x78>)
 8015408:	f8d2 44d4 	ldr.w	r4, [r2, #1236]	; 0x4d4
 801540c:	e7df      	b.n	80153ce <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 801540e:	2300      	movs	r3, #0
 8015410:	732b      	strb	r3, [r5, #12]
 8015412:	e7f4      	b.n	80153fe <vTaskGetInfo+0x3a>
						vTaskSuspendAll();
 8015414:	f7ff fbfa 	bl	8014c0c <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801541a:	b10b      	cbz	r3, 8015420 <vTaskGetInfo+0x5c>
								pxTaskStatus->eCurrentState = eBlocked;
 801541c:	2302      	movs	r3, #2
 801541e:	732b      	strb	r3, [r5, #12]
						( void ) xTaskResumeAll();
 8015420:	f7ff fcb2 	bl	8014d88 <xTaskResumeAll>
 8015424:	e7eb      	b.n	80153fe <vTaskGetInfo+0x3a>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8015426:	4620      	mov	r0, r4
 8015428:	f7ff fa24 	bl	8014874 <eTaskGetState>
 801542c:	7328      	strb	r0, [r5, #12]
 801542e:	e7e6      	b.n	80153fe <vTaskGetInfo+0x3a>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8015430:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015432:	f7fe ffcf 	bl	80143d4 <prvTaskCheckFreeStackSpace>
 8015436:	8428      	strh	r0, [r5, #32]
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	bf00      	nop
 801543c:	20005514 	.word	0x20005514

08015440 <prvListTasksWithinSingleList>:
	{
 8015440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8015444:	680b      	ldr	r3, [r1, #0]
 8015446:	b33b      	cbz	r3, 8015498 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8015448:	684b      	ldr	r3, [r1, #4]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	604b      	str	r3, [r1, #4]
 801544e:	f101 0908 	add.w	r9, r1, #8
 8015452:	454b      	cmp	r3, r9
 8015454:	d007      	beq.n	8015466 <prvListTasksWithinSingleList+0x26>
 8015456:	4690      	mov	r8, r2
 8015458:	460d      	mov	r5, r1
 801545a:	4607      	mov	r7, r0
 801545c:	684b      	ldr	r3, [r1, #4]
 801545e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 8015462:	2400      	movs	r4, #0
 8015464:	e010      	b.n	8015488 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	604b      	str	r3, [r1, #4]
 801546a:	e7f4      	b.n	8015456 <prvListTasksWithinSingleList+0x16>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 801546c:	686b      	ldr	r3, [r5, #4]
 801546e:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8015470:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8015474:	0099      	lsls	r1, r3, #2
 8015476:	4643      	mov	r3, r8
 8015478:	2201      	movs	r2, #1
 801547a:	4439      	add	r1, r7
 801547c:	4630      	mov	r0, r6
 801547e:	f7ff ffa1 	bl	80153c4 <vTaskGetInfo>
				uxTask++;
 8015482:	3401      	adds	r4, #1
			} while( pxNextTCB != pxFirstTCB );
 8015484:	45b2      	cmp	sl, r6
 8015486:	d008      	beq.n	801549a <prvListTasksWithinSingleList+0x5a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8015488:	686b      	ldr	r3, [r5, #4]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	606b      	str	r3, [r5, #4]
 801548e:	4599      	cmp	r9, r3
 8015490:	d1ec      	bne.n	801546c <prvListTasksWithinSingleList+0x2c>
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	606b      	str	r3, [r5, #4]
 8015496:	e7e9      	b.n	801546c <prvListTasksWithinSingleList+0x2c>
	UBaseType_t uxTask = 0;
 8015498:	2400      	movs	r4, #0
	}
 801549a:	4620      	mov	r0, r4
 801549c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080154a0 <uxTaskGetSystemState>:
	{
 80154a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a4:	4607      	mov	r7, r0
 80154a6:	460c      	mov	r4, r1
 80154a8:	4616      	mov	r6, r2
		vTaskSuspendAll();
 80154aa:	f7ff fbaf 	bl	8014c0c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80154ae:	4b25      	ldr	r3, [pc, #148]	; (8015544 <uxTaskGetSystemState+0xa4>)
 80154b0:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80154b4:	42a3      	cmp	r3, r4
 80154b6:	d843      	bhi.n	8015540 <uxTaskGetSystemState+0xa0>
 80154b8:	2438      	movs	r4, #56	; 0x38
 80154ba:	2500      	movs	r5, #0
					uxQueue--;
 80154bc:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80154be:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80154c2:	0098      	lsls	r0, r3, #2
 80154c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80154c8:	0093      	lsls	r3, r2, #2
 80154ca:	2201      	movs	r2, #1
 80154cc:	491e      	ldr	r1, [pc, #120]	; (8015548 <uxTaskGetSystemState+0xa8>)
 80154ce:	4419      	add	r1, r3
 80154d0:	4438      	add	r0, r7
 80154d2:	f7ff ffb5 	bl	8015440 <prvListTasksWithinSingleList>
 80154d6:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154d8:	2c00      	cmp	r4, #0
 80154da:	d1ef      	bne.n	80154bc <uxTaskGetSystemState+0x1c>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80154dc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80154e0:	0098      	lsls	r0, r3, #2
 80154e2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8015544 <uxTaskGetSystemState+0xa4>
 80154e6:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80154ea:	2202      	movs	r2, #2
 80154ec:	4438      	add	r0, r7
 80154ee:	f7ff ffa7 	bl	8015440 <prvListTasksWithinSingleList>
 80154f2:	182c      	adds	r4, r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80154f4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80154f8:	0098      	lsls	r0, r3, #2
 80154fa:	f8d8 14cc 	ldr.w	r1, [r8, #1228]	; 0x4cc
 80154fe:	2202      	movs	r2, #2
 8015500:	4438      	add	r0, r7
 8015502:	f7ff ff9d 	bl	8015440 <prvListTasksWithinSingleList>
 8015506:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8015508:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 801550c:	0098      	lsls	r0, r3, #2
 801550e:	2204      	movs	r2, #4
 8015510:	f508 6197 	add.w	r1, r8, #1208	; 0x4b8
 8015514:	4438      	add	r0, r7
 8015516:	f7ff ff93 	bl	8015440 <prvListTasksWithinSingleList>
 801551a:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 801551c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8015520:	0098      	lsls	r0, r3, #2
 8015522:	2203      	movs	r2, #3
 8015524:	4641      	mov	r1, r8
 8015526:	4438      	add	r0, r7
 8015528:	f7ff ff8a 	bl	8015440 <prvListTasksWithinSingleList>
 801552c:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 801552e:	b116      	cbz	r6, 8015536 <uxTaskGetSystemState+0x96>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015530:	f7eb f91b 	bl	800076a <getRunTimeCounterValue>
 8015534:	6030      	str	r0, [r6, #0]
		( void ) xTaskResumeAll();
 8015536:	f7ff fc27 	bl	8014d88 <xTaskResumeAll>
	}
 801553a:	4620      	mov	r0, r4
 801553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8015540:	2400      	movs	r4, #0
 8015542:	e7f8      	b.n	8015536 <uxTaskGetSystemState+0x96>
 8015544:	20005514 	.word	0x20005514
 8015548:	20005544 	.word	0x20005544

0801554c <uxTaskGetStackHighWaterMark>:
	{
 801554c:	b508      	push	{r3, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 801554e:	4603      	mov	r3, r0
 8015550:	b118      	cbz	r0, 801555a <uxTaskGetStackHighWaterMark+0xe>
		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8015552:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015554:	f7fe ff3e 	bl	80143d4 <prvTaskCheckFreeStackSpace>
	}
 8015558:	bd08      	pop	{r3, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 801555a:	4b02      	ldr	r3, [pc, #8]	; (8015564 <uxTaskGetStackHighWaterMark+0x18>)
 801555c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015560:	e7f7      	b.n	8015552 <uxTaskGetStackHighWaterMark+0x6>
 8015562:	bf00      	nop
 8015564:	20005514 	.word	0x20005514

08015568 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8015568:	4b01      	ldr	r3, [pc, #4]	; (8015570 <xTaskGetCurrentTaskHandle+0x8>)
 801556a:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 801556e:	4770      	bx	lr
 8015570:	20005514 	.word	0x20005514

08015574 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8015574:	4b06      	ldr	r3, [pc, #24]	; (8015590 <xTaskGetSchedulerState+0x1c>)
 8015576:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801557a:	b12b      	cbz	r3, 8015588 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801557c:	4b04      	ldr	r3, [pc, #16]	; (8015590 <xTaskGetSchedulerState+0x1c>)
 801557e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8015582:	b91b      	cbnz	r3, 801558c <xTaskGetSchedulerState+0x18>
				xReturn = taskSCHEDULER_RUNNING;
 8015584:	2002      	movs	r0, #2
 8015586:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015588:	2001      	movs	r0, #1
 801558a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 801558c:	2000      	movs	r0, #0
	}
 801558e:	4770      	bx	lr
 8015590:	20005514 	.word	0x20005514

08015594 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8015594:	2800      	cmp	r0, #0
 8015596:	d04a      	beq.n	801562e <xTaskPriorityInherit+0x9a>
	{
 8015598:	b538      	push	{r3, r4, r5, lr}
 801559a:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801559c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801559e:	4925      	ldr	r1, [pc, #148]	; (8015634 <xTaskPriorityInherit+0xa0>)
 80155a0:	f8d1 14d4 	ldr.w	r1, [r1, #1236]	; 0x4d4
 80155a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80155a6:	428a      	cmp	r2, r1
 80155a8:	d236      	bcs.n	8015618 <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80155aa:	6981      	ldr	r1, [r0, #24]
 80155ac:	2900      	cmp	r1, #0
 80155ae:	db06      	blt.n	80155be <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155b0:	4920      	ldr	r1, [pc, #128]	; (8015634 <xTaskPriorityInherit+0xa0>)
 80155b2:	f8d1 14d4 	ldr.w	r1, [r1, #1236]	; 0x4d4
 80155b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80155b8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 80155bc:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80155be:	6968      	ldr	r0, [r5, #20]
 80155c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80155c4:	0091      	lsls	r1, r2, #2
 80155c6:	4a1c      	ldr	r2, [pc, #112]	; (8015638 <xTaskPriorityInherit+0xa4>)
 80155c8:	440a      	add	r2, r1
 80155ca:	4290      	cmp	r0, r2
 80155cc:	d008      	beq.n	80155e0 <xTaskPriorityInherit+0x4c>
 80155ce:	2200      	movs	r2, #0
 80155d0:	b942      	cbnz	r2, 80155e4 <xTaskPriorityInherit+0x50>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155d2:	4a18      	ldr	r2, [pc, #96]	; (8015634 <xTaskPriorityInherit+0xa0>)
 80155d4:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 80155d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80155da:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 80155dc:	2001      	movs	r0, #1
 80155de:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80155e0:	2201      	movs	r2, #1
 80155e2:	e7f5      	b.n	80155d0 <xTaskPriorityInherit+0x3c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155e4:	1d2c      	adds	r4, r5, #4
 80155e6:	4620      	mov	r0, r4
 80155e8:	f7fd f846 	bl	8012678 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155ec:	4a11      	ldr	r2, [pc, #68]	; (8015634 <xTaskPriorityInherit+0xa0>)
 80155ee:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 80155f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f4:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80155f6:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80155fa:	4293      	cmp	r3, r2
 80155fc:	d902      	bls.n	8015604 <xTaskPriorityInherit+0x70>
 80155fe:	4a0d      	ldr	r2, [pc, #52]	; (8015634 <xTaskPriorityInherit+0xa0>)
 8015600:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8015604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015608:	009a      	lsls	r2, r3, #2
 801560a:	4621      	mov	r1, r4
 801560c:	480a      	ldr	r0, [pc, #40]	; (8015638 <xTaskPriorityInherit+0xa4>)
 801560e:	4410      	add	r0, r2
 8015610:	f7fd f80c 	bl	801262c <vListInsertEnd>
				xReturn = pdTRUE;
 8015614:	2001      	movs	r0, #1
 8015616:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015618:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801561a:	4b06      	ldr	r3, [pc, #24]	; (8015634 <xTaskPriorityInherit+0xa0>)
 801561c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015622:	429a      	cmp	r2, r3
 8015624:	d201      	bcs.n	801562a <xTaskPriorityInherit+0x96>
					xReturn = pdTRUE;
 8015626:	2001      	movs	r0, #1
	}
 8015628:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 801562a:	2000      	movs	r0, #0
 801562c:	bd38      	pop	{r3, r4, r5, pc}
 801562e:	2000      	movs	r0, #0
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	20005514 	.word	0x20005514
 8015638:	20005544 	.word	0x20005544

0801563c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801563c:	2800      	cmp	r0, #0
 801563e:	d03c      	beq.n	80156ba <xTaskPriorityDisinherit+0x7e>
	{
 8015640:	b538      	push	{r3, r4, r5, lr}
 8015642:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8015644:	4a20      	ldr	r2, [pc, #128]	; (80156c8 <xTaskPriorityDisinherit+0x8c>)
 8015646:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 801564a:	4290      	cmp	r0, r2
 801564c:	d008      	beq.n	8015660 <xTaskPriorityDisinherit+0x24>
 801564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015652:	f383 8811 	msr	BASEPRI, r3
 8015656:	f3bf 8f6f 	isb	sy
 801565a:	f3bf 8f4f 	dsb	sy
 801565e:	e7fe      	b.n	801565e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8015660:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8015662:	b942      	cbnz	r2, 8015676 <xTaskPriorityDisinherit+0x3a>
 8015664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015668:	f383 8811 	msr	BASEPRI, r3
 801566c:	f3bf 8f6f 	isb	sy
 8015670:	f3bf 8f4f 	dsb	sy
 8015674:	e7fe      	b.n	8015674 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8015676:	3a01      	subs	r2, #1
 8015678:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801567a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801567c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801567e:	4288      	cmp	r0, r1
 8015680:	d01d      	beq.n	80156be <xTaskPriorityDisinherit+0x82>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015682:	b9f2      	cbnz	r2, 80156c2 <xTaskPriorityDisinherit+0x86>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015684:	1d25      	adds	r5, r4, #4
 8015686:	4628      	mov	r0, r5
 8015688:	f7fc fff6 	bl	8012678 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801568c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801568e:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015690:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015694:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8015696:	4a0c      	ldr	r2, [pc, #48]	; (80156c8 <xTaskPriorityDisinherit+0x8c>)
 8015698:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 801569c:	4293      	cmp	r3, r2
 801569e:	d902      	bls.n	80156a6 <xTaskPriorityDisinherit+0x6a>
 80156a0:	4a09      	ldr	r2, [pc, #36]	; (80156c8 <xTaskPriorityDisinherit+0x8c>)
 80156a2:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80156a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80156aa:	009a      	lsls	r2, r3, #2
 80156ac:	4629      	mov	r1, r5
 80156ae:	4807      	ldr	r0, [pc, #28]	; (80156cc <xTaskPriorityDisinherit+0x90>)
 80156b0:	4410      	add	r0, r2
 80156b2:	f7fc ffbb 	bl	801262c <vListInsertEnd>
					xReturn = pdTRUE;
 80156b6:	2001      	movs	r0, #1
 80156b8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80156ba:	2000      	movs	r0, #0
 80156bc:	4770      	bx	lr
 80156be:	2000      	movs	r0, #0
 80156c0:	bd38      	pop	{r3, r4, r5, pc}
 80156c2:	2000      	movs	r0, #0
	}
 80156c4:	bd38      	pop	{r3, r4, r5, pc}
 80156c6:	bf00      	nop
 80156c8:	20005514 	.word	0x20005514
 80156cc:	20005544 	.word	0x20005544

080156d0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d04e      	beq.n	8015772 <vTaskPriorityDisinheritAfterTimeout+0xa2>
	{
 80156d4:	b538      	push	{r3, r4, r5, lr}
 80156d6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80156d8:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80156da:	b940      	cbnz	r0, 80156ee <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80156dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e0:	f383 8811 	msr	BASEPRI, r3
 80156e4:	f3bf 8f6f 	isb	sy
 80156e8:	f3bf 8f4f 	dsb	sy
 80156ec:	e7fe      	b.n	80156ec <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80156ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80156f0:	428a      	cmp	r2, r1
 80156f2:	d200      	bcs.n	80156f6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80156f4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80156f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80156f8:	428a      	cmp	r2, r1
 80156fa:	d001      	beq.n	8015700 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80156fc:	2801      	cmp	r0, #1
 80156fe:	d000      	beq.n	8015702 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8015700:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8015702:	481c      	ldr	r0, [pc, #112]	; (8015774 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8015704:	f8d0 04d4 	ldr.w	r0, [r0, #1236]	; 0x4d4
 8015708:	4284      	cmp	r4, r0
 801570a:	d108      	bne.n	801571e <vTaskPriorityDisinheritAfterTimeout+0x4e>
 801570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015710:	f383 8811 	msr	BASEPRI, r3
 8015714:	f3bf 8f6f 	isb	sy
 8015718:	f3bf 8f4f 	dsb	sy
 801571c:	e7fe      	b.n	801571c <vTaskPriorityDisinheritAfterTimeout+0x4c>
					pxTCB->uxPriority = uxPriorityToUse;
 801571e:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015720:	69a0      	ldr	r0, [r4, #24]
 8015722:	2800      	cmp	r0, #0
 8015724:	db02      	blt.n	801572c <vTaskPriorityDisinheritAfterTimeout+0x5c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015726:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801572a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801572c:	6963      	ldr	r3, [r4, #20]
 801572e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015732:	0088      	lsls	r0, r1, #2
 8015734:	4a10      	ldr	r2, [pc, #64]	; (8015778 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8015736:	4402      	add	r2, r0
 8015738:	4293      	cmp	r3, r2
 801573a:	d118      	bne.n	801576e <vTaskPriorityDisinheritAfterTimeout+0x9e>
 801573c:	2201      	movs	r2, #1
 801573e:	2a00      	cmp	r2, #0
 8015740:	d0de      	beq.n	8015700 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015742:	1d25      	adds	r5, r4, #4
 8015744:	4628      	mov	r0, r5
 8015746:	f7fc ff97 	bl	8012678 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801574a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801574c:	4a09      	ldr	r2, [pc, #36]	; (8015774 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 801574e:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8015752:	4293      	cmp	r3, r2
 8015754:	d902      	bls.n	801575c <vTaskPriorityDisinheritAfterTimeout+0x8c>
 8015756:	4a07      	ldr	r2, [pc, #28]	; (8015774 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8015758:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 801575c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015760:	009a      	lsls	r2, r3, #2
 8015762:	4629      	mov	r1, r5
 8015764:	4804      	ldr	r0, [pc, #16]	; (8015778 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8015766:	4410      	add	r0, r2
 8015768:	f7fc ff60 	bl	801262c <vListInsertEnd>
	}
 801576c:	e7c8      	b.n	8015700 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801576e:	2200      	movs	r2, #0
 8015770:	e7e5      	b.n	801573e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8015772:	4770      	bx	lr
 8015774:	20005514 	.word	0x20005514
 8015778:	20005544 	.word	0x20005544

0801577c <vTaskList>:
	{
 801577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801577e:	b085      	sub	sp, #20
 8015780:	4605      	mov	r5, r0
		*pcWriteBuffer = 0x00;
 8015782:	2300      	movs	r3, #0
 8015784:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8015786:	4b34      	ldr	r3, [pc, #208]	; (8015858 <vTaskList+0xdc>)
 8015788:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 801578c:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 801578e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8015792:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8015796:	0098      	lsls	r0, r3, #2
 8015798:	f7fd f9a2 	bl	8012ae0 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 801579c:	2800      	cmp	r0, #0
 801579e:	d058      	beq.n	8015852 <vTaskList+0xd6>
 80157a0:	4604      	mov	r4, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80157a2:	9903      	ldr	r1, [sp, #12]
 80157a4:	2200      	movs	r2, #0
 80157a6:	f7ff fe7b 	bl	80154a0 <uxTaskGetSystemState>
 80157aa:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
 80157ac:	2300      	movs	r3, #0
 80157ae:	9302      	str	r3, [sp, #8]
 80157b0:	e033      	b.n	801581a <vTaskList+0x9e>
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80157b2:	2658      	movs	r6, #88	; 0x58
 80157b4:	e008      	b.n	80157c8 <vTaskList+0x4c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80157b6:	2642      	movs	r6, #66	; 0x42
										break;
 80157b8:	e006      	b.n	80157c8 <vTaskList+0x4c>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80157ba:	2653      	movs	r6, #83	; 0x53
										break;
 80157bc:	e004      	b.n	80157c8 <vTaskList+0x4c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80157be:	2644      	movs	r6, #68	; 0x44
										break;
 80157c0:	e002      	b.n	80157c8 <vTaskList+0x4c>
										cStatus = 0x00;
 80157c2:	2600      	movs	r6, #0
										break;
 80157c4:	e000      	b.n	80157c8 <vTaskList+0x4c>
					case eReady:		cStatus = tskREADY_CHAR;
 80157c6:	2652      	movs	r6, #82	; 0x52
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80157c8:	9b02      	ldr	r3, [sp, #8]
 80157ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80157ce:	009a      	lsls	r2, r3, #2
 80157d0:	4422      	add	r2, r4
 80157d2:	6851      	ldr	r1, [r2, #4]
 80157d4:	4628      	mov	r0, r5
 80157d6:	f7fe ff75 	bl	80146c4 <prvWriteNameToBuffer>
 80157da:	4605      	mov	r5, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80157dc:	9b02      	ldr	r3, [sp, #8]
 80157de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80157e2:	009a      	lsls	r2, r3, #2
 80157e4:	4422      	add	r2, r4
 80157e6:	6913      	ldr	r3, [r2, #16]
 80157e8:	9a02      	ldr	r2, [sp, #8]
 80157ea:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80157ee:	0091      	lsls	r1, r2, #2
 80157f0:	4421      	add	r1, r4
 80157f2:	8c0f      	ldrh	r7, [r1, #32]
 80157f4:	9a02      	ldr	r2, [sp, #8]
 80157f6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80157fa:	0091      	lsls	r1, r2, #2
 80157fc:	4421      	add	r1, r4
 80157fe:	688a      	ldr	r2, [r1, #8]
 8015800:	9201      	str	r2, [sp, #4]
 8015802:	9700      	str	r7, [sp, #0]
 8015804:	4632      	mov	r2, r6
 8015806:	4915      	ldr	r1, [pc, #84]	; (801585c <vTaskList+0xe0>)
 8015808:	f003 fcb6 	bl	8019178 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 801580c:	4628      	mov	r0, r5
 801580e:	f002 fb23 	bl	8017e58 <strlen>
 8015812:	4405      	add	r5, r0
			for( x = 0; x < uxArraySize; x++ )
 8015814:	9b02      	ldr	r3, [sp, #8]
 8015816:	3301      	adds	r3, #1
 8015818:	9302      	str	r3, [sp, #8]
 801581a:	9a02      	ldr	r2, [sp, #8]
 801581c:	9b03      	ldr	r3, [sp, #12]
 801581e:	429a      	cmp	r2, r3
 8015820:	d214      	bcs.n	801584c <vTaskList+0xd0>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015822:	9b02      	ldr	r3, [sp, #8]
 8015824:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8015828:	009a      	lsls	r2, r3, #2
 801582a:	4422      	add	r2, r4
 801582c:	7b13      	ldrb	r3, [r2, #12]
 801582e:	2b04      	cmp	r3, #4
 8015830:	d8c7      	bhi.n	80157c2 <vTaskList+0x46>
 8015832:	a201      	add	r2, pc, #4	; (adr r2, 8015838 <vTaskList+0xbc>)
 8015834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015838:	080157b3 	.word	0x080157b3
 801583c:	080157c7 	.word	0x080157c7
 8015840:	080157b7 	.word	0x080157b7
 8015844:	080157bb 	.word	0x080157bb
 8015848:	080157bf 	.word	0x080157bf
			vPortFree( pxTaskStatusArray );
 801584c:	4620      	mov	r0, r4
 801584e:	f7fd f9cd 	bl	8012bec <vPortFree>
	}
 8015852:	b005      	add	sp, #20
 8015854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015856:	bf00      	nop
 8015858:	20005514 	.word	0x20005514
 801585c:	0801ced0 	.word	0x0801ced0

08015860 <vTaskGetRunTimeStats>:
	{
 8015860:	b570      	push	{r4, r5, r6, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	4604      	mov	r4, r0
		*pcWriteBuffer = 0x00;
 8015866:	2300      	movs	r3, #0
 8015868:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 801586a:	4b2b      	ldr	r3, [pc, #172]	; (8015918 <vTaskGetRunTimeStats+0xb8>)
 801586c:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8015870:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8015872:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8015876:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801587a:	0098      	lsls	r0, r3, #2
 801587c:	f7fd f930 	bl	8012ae0 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8015880:	2800      	cmp	r0, #0
 8015882:	d047      	beq.n	8015914 <vTaskGetRunTimeStats+0xb4>
 8015884:	4605      	mov	r5, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8015886:	9903      	ldr	r1, [sp, #12]
 8015888:	aa01      	add	r2, sp, #4
 801588a:	f7ff fe09 	bl	80154a0 <uxTaskGetSystemState>
 801588e:	9003      	str	r0, [sp, #12]
			ulTotalTime /= 100UL;
 8015890:	4a22      	ldr	r2, [pc, #136]	; (801591c <vTaskGetRunTimeStats+0xbc>)
 8015892:	9b01      	ldr	r3, [sp, #4]
 8015894:	fba2 2303 	umull	r2, r3, r2, r3
 8015898:	095b      	lsrs	r3, r3, #5
 801589a:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0 )
 801589c:	2b00      	cmp	r3, #0
 801589e:	d036      	beq.n	801590e <vTaskGetRunTimeStats+0xae>
				for( x = 0; x < uxArraySize; x++ )
 80158a0:	2300      	movs	r3, #0
 80158a2:	9302      	str	r3, [sp, #8]
 80158a4:	e00f      	b.n	80158c6 <vTaskGetRunTimeStats+0x66>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 80158a6:	9b02      	ldr	r3, [sp, #8]
 80158a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80158ac:	009a      	lsls	r2, r3, #2
 80158ae:	442a      	add	r2, r5
 80158b0:	6992      	ldr	r2, [r2, #24]
 80158b2:	491b      	ldr	r1, [pc, #108]	; (8015920 <vTaskGetRunTimeStats+0xc0>)
 80158b4:	f003 fc60 	bl	8019178 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 80158b8:	4620      	mov	r0, r4
 80158ba:	f002 facd 	bl	8017e58 <strlen>
 80158be:	4404      	add	r4, r0
				for( x = 0; x < uxArraySize; x++ )
 80158c0:	9b02      	ldr	r3, [sp, #8]
 80158c2:	3301      	adds	r3, #1
 80158c4:	9302      	str	r3, [sp, #8]
 80158c6:	9a02      	ldr	r2, [sp, #8]
 80158c8:	9b03      	ldr	r3, [sp, #12]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d21f      	bcs.n	801590e <vTaskGetRunTimeStats+0xae>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80158ce:	9b02      	ldr	r3, [sp, #8]
 80158d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80158d4:	009a      	lsls	r2, r3, #2
 80158d6:	442a      	add	r2, r5
 80158d8:	6996      	ldr	r6, [r2, #24]
 80158da:	9b01      	ldr	r3, [sp, #4]
 80158dc:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80158e0:	9b02      	ldr	r3, [sp, #8]
 80158e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80158e6:	009a      	lsls	r2, r3, #2
 80158e8:	442a      	add	r2, r5
 80158ea:	6851      	ldr	r1, [r2, #4]
 80158ec:	4620      	mov	r0, r4
 80158ee:	f7fe fee9 	bl	80146c4 <prvWriteNameToBuffer>
 80158f2:	4604      	mov	r4, r0
					if( ulStatsAsPercentage > 0UL )
 80158f4:	2e00      	cmp	r6, #0
 80158f6:	d0d6      	beq.n	80158a6 <vTaskGetRunTimeStats+0x46>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80158f8:	9b02      	ldr	r3, [sp, #8]
 80158fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80158fe:	009a      	lsls	r2, r3, #2
 8015900:	442a      	add	r2, r5
 8015902:	4633      	mov	r3, r6
 8015904:	6992      	ldr	r2, [r2, #24]
 8015906:	4907      	ldr	r1, [pc, #28]	; (8015924 <vTaskGetRunTimeStats+0xc4>)
 8015908:	f003 fc36 	bl	8019178 <sprintf>
 801590c:	e7d4      	b.n	80158b8 <vTaskGetRunTimeStats+0x58>
			vPortFree( pxTaskStatusArray );
 801590e:	4628      	mov	r0, r5
 8015910:	f7fd f96c 	bl	8012bec <vPortFree>
	}
 8015914:	b004      	add	sp, #16
 8015916:	bd70      	pop	{r4, r5, r6, pc}
 8015918:	20005514 	.word	0x20005514
 801591c:	51eb851f 	.word	0x51eb851f
 8015920:	0801ceec 	.word	0x0801ceec
 8015924:	0801cee0 	.word	0x0801cee0

08015928 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015928:	4b06      	ldr	r3, [pc, #24]	; (8015944 <uxTaskResetEventItemValue+0x1c>)
 801592a:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 801592e:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015930:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8015934:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801593a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801593e:	6193      	str	r3, [r2, #24]
}
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20005514 	.word	0x20005514

08015948 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8015948:	4b06      	ldr	r3, [pc, #24]	; (8015964 <pvTaskIncrementMutexHeldCount+0x1c>)
 801594a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 801594e:	b12b      	cbz	r3, 801595c <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8015950:	4b04      	ldr	r3, [pc, #16]	; (8015964 <pvTaskIncrementMutexHeldCount+0x1c>)
 8015952:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8015956:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8015958:	3301      	adds	r3, #1
 801595a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 801595c:	4b01      	ldr	r3, [pc, #4]	; (8015964 <pvTaskIncrementMutexHeldCount+0x1c>)
 801595e:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 8015962:	4770      	bx	lr
 8015964:	20005514 	.word	0x20005514

08015968 <ulTaskNotifyTake>:
	{
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4605      	mov	r5, r0
 801596c:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 801596e:	f7fc ff0b 	bl	8012788 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015972:	4b1c      	ldr	r3, [pc, #112]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 8015974:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801597a:	b933      	cbnz	r3, 801598a <ulTaskNotifyTake+0x22>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801597c:	4b19      	ldr	r3, [pc, #100]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 801597e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015982:	2201      	movs	r2, #1
 8015984:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8015988:	b9c4      	cbnz	r4, 80159bc <ulTaskNotifyTake+0x54>
		taskEXIT_CRITICAL();
 801598a:	f7fc ff1f 	bl	80127cc <vPortExitCritical>
		taskENTER_CRITICAL();
 801598e:	f7fc fefb 	bl	8012788 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015992:	4b14      	ldr	r3, [pc, #80]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 8015994:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015998:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 801599a:	b12c      	cbz	r4, 80159a8 <ulTaskNotifyTake+0x40>
				if( xClearCountOnExit != pdFALSE )
 801599c:	b9dd      	cbnz	r5, 80159d6 <ulTaskNotifyTake+0x6e>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801599e:	4b11      	ldr	r3, [pc, #68]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 80159a0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80159a4:	1e62      	subs	r2, r4, #1
 80159a6:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80159a8:	4b0e      	ldr	r3, [pc, #56]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 80159aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80159ae:	2200      	movs	r2, #0
 80159b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 80159b4:	f7fc ff0a 	bl	80127cc <vPortExitCritical>
	}
 80159b8:	4620      	mov	r0, r4
 80159ba:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80159bc:	4611      	mov	r1, r2
 80159be:	4620      	mov	r0, r4
 80159c0:	f7fe fe4a 	bl	8014658 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80159c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159c8:	4b07      	ldr	r3, [pc, #28]	; (80159e8 <ulTaskNotifyTake+0x80>)
 80159ca:	601a      	str	r2, [r3, #0]
 80159cc:	f3bf 8f4f 	dsb	sy
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	e7d9      	b.n	801598a <ulTaskNotifyTake+0x22>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80159d6:	4b03      	ldr	r3, [pc, #12]	; (80159e4 <ulTaskNotifyTake+0x7c>)
 80159d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80159dc:	2200      	movs	r2, #0
 80159de:	65da      	str	r2, [r3, #92]	; 0x5c
 80159e0:	e7e2      	b.n	80159a8 <ulTaskNotifyTake+0x40>
 80159e2:	bf00      	nop
 80159e4:	20005514 	.word	0x20005514
 80159e8:	e000ed04 	.word	0xe000ed04

080159ec <xTaskNotifyWait>:
	{
 80159ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ee:	4607      	mov	r7, r0
 80159f0:	460d      	mov	r5, r1
 80159f2:	4614      	mov	r4, r2
 80159f4:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 80159f6:	f7fc fec7 	bl	8012788 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80159fa:	4b24      	ldr	r3, [pc, #144]	; (8015a8c <xTaskNotifyWait+0xa0>)
 80159fc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015a00:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	d00c      	beq.n	8015a24 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8015a0a:	4b20      	ldr	r3, [pc, #128]	; (8015a8c <xTaskNotifyWait+0xa0>)
 8015a0c:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8015a10:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8015a12:	ea20 0007 	bic.w	r0, r0, r7
 8015a16:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015a18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015a1c:	2201      	movs	r2, #1
 8015a1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8015a22:	b9e6      	cbnz	r6, 8015a5e <xTaskNotifyWait+0x72>
		taskEXIT_CRITICAL();
 8015a24:	f7fc fed2 	bl	80127cc <vPortExitCritical>
		taskENTER_CRITICAL();
 8015a28:	f7fc feae 	bl	8012788 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8015a2c:	b124      	cbz	r4, 8015a38 <xTaskNotifyWait+0x4c>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8015a2e:	4b17      	ldr	r3, [pc, #92]	; (8015a8c <xTaskNotifyWait+0xa0>)
 8015a30:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a36:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8015a38:	4b14      	ldr	r3, [pc, #80]	; (8015a8c <xTaskNotifyWait+0xa0>)
 8015a3a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015a3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	d017      	beq.n	8015a78 <xTaskNotifyWait+0x8c>
				xReturn = pdFALSE;
 8015a48:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015a4a:	4b10      	ldr	r3, [pc, #64]	; (8015a8c <xTaskNotifyWait+0xa0>)
 8015a4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015a50:	2200      	movs	r2, #0
 8015a52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8015a56:	f7fc feb9 	bl	80127cc <vPortExitCritical>
	}
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015a5e:	4611      	mov	r1, r2
 8015a60:	4630      	mov	r0, r6
 8015a62:	f7fe fdf9 	bl	8014658 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8015a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a6a:	4b09      	ldr	r3, [pc, #36]	; (8015a90 <xTaskNotifyWait+0xa4>)
 8015a6c:	601a      	str	r2, [r3, #0]
 8015a6e:	f3bf 8f4f 	dsb	sy
 8015a72:	f3bf 8f6f 	isb	sy
 8015a76:	e7d5      	b.n	8015a24 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8015a78:	4b04      	ldr	r3, [pc, #16]	; (8015a8c <xTaskNotifyWait+0xa0>)
 8015a7a:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8015a7e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8015a80:	ea23 0505 	bic.w	r5, r3, r5
 8015a84:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 8015a86:	2401      	movs	r4, #1
 8015a88:	e7df      	b.n	8015a4a <xTaskNotifyWait+0x5e>
 8015a8a:	bf00      	nop
 8015a8c:	20005514 	.word	0x20005514
 8015a90:	e000ed04 	.word	0xe000ed04

08015a94 <xTaskGenericNotify>:
	{
 8015a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8015a96:	b1a8      	cbz	r0, 8015ac4 <xTaskGenericNotify+0x30>
 8015a98:	4604      	mov	r4, r0
 8015a9a:	461f      	mov	r7, r3
 8015a9c:	4615      	mov	r5, r2
 8015a9e:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8015aa0:	f7fc fe72 	bl	8012788 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8015aa4:	b10f      	cbz	r7, 8015aaa <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015aa6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015aa8:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015aaa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015aae:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015ab0:	2202      	movs	r2, #2
 8015ab2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 8015ab6:	1e6a      	subs	r2, r5, #1
 8015ab8:	2a03      	cmp	r2, #3
 8015aba:	d83f      	bhi.n	8015b3c <xTaskGenericNotify+0xa8>
 8015abc:	e8df f002 	tbb	[pc, r2]
 8015ac0:	3936310b 	.word	0x3936310b
 8015ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac8:	f383 8811 	msr	BASEPRI, r3
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	f3bf 8f4f 	dsb	sy
 8015ad4:	e7fe      	b.n	8015ad4 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 8015ad6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015ad8:	4316      	orrs	r6, r2
 8015ada:	65e6      	str	r6, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015adc:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d13f      	bne.n	8015b62 <xTaskGenericNotify+0xce>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ae2:	1d26      	adds	r6, r4, #4
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f7fc fdc7 	bl	8012678 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015aec:	4a1f      	ldr	r2, [pc, #124]	; (8015b6c <xTaskGenericNotify+0xd8>)
 8015aee:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8015af2:	4293      	cmp	r3, r2
 8015af4:	d902      	bls.n	8015afc <xTaskGenericNotify+0x68>
 8015af6:	4a1d      	ldr	r2, [pc, #116]	; (8015b6c <xTaskGenericNotify+0xd8>)
 8015af8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8015afc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015b00:	009a      	lsls	r2, r3, #2
 8015b02:	4631      	mov	r1, r6
 8015b04:	481a      	ldr	r0, [pc, #104]	; (8015b70 <xTaskGenericNotify+0xdc>)
 8015b06:	4410      	add	r0, r2
 8015b08:	f7fc fd90 	bl	801262c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015b0e:	b1cb      	cbz	r3, 8015b44 <xTaskGenericNotify+0xb0>
 8015b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b14:	f383 8811 	msr	BASEPRI, r3
 8015b18:	f3bf 8f6f 	isb	sy
 8015b1c:	f3bf 8f4f 	dsb	sy
 8015b20:	e7fe      	b.n	8015b20 <xTaskGenericNotify+0x8c>
					( pxTCB->ulNotifiedValue )++;
 8015b22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015b24:	3201      	adds	r2, #1
 8015b26:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015b28:	2501      	movs	r5, #1
					break;
 8015b2a:	e7d8      	b.n	8015ade <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8015b2c:	65e6      	str	r6, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015b2e:	2501      	movs	r5, #1
					break;
 8015b30:	e7d5      	b.n	8015ade <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015b32:	2b02      	cmp	r3, #2
 8015b34:	d004      	beq.n	8015b40 <xTaskGenericNotify+0xac>
						pxTCB->ulNotifiedValue = ulValue;
 8015b36:	65e6      	str	r6, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015b38:	2501      	movs	r5, #1
 8015b3a:	e7d0      	b.n	8015ade <xTaskGenericNotify+0x4a>
 8015b3c:	2501      	movs	r5, #1
 8015b3e:	e7ce      	b.n	8015ade <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8015b40:	2500      	movs	r5, #0
 8015b42:	e7cc      	b.n	8015ade <xTaskGenericNotify+0x4a>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015b44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015b46:	4b09      	ldr	r3, [pc, #36]	; (8015b6c <xTaskGenericNotify+0xd8>)
 8015b48:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d907      	bls.n	8015b62 <xTaskGenericNotify+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8015b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b56:	4b07      	ldr	r3, [pc, #28]	; (8015b74 <xTaskGenericNotify+0xe0>)
 8015b58:	601a      	str	r2, [r3, #0]
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8015b62:	f7fc fe33 	bl	80127cc <vPortExitCritical>
	}
 8015b66:	4628      	mov	r0, r5
 8015b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	20005514 	.word	0x20005514
 8015b70:	20005544 	.word	0x20005544
 8015b74:	e000ed04 	.word	0xe000ed04

08015b78 <xTaskGenericNotifyFromISR>:
	{
 8015b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b7c:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8015b7e:	b310      	cbz	r0, 8015bc6 <xTaskGenericNotifyFromISR+0x4e>
 8015b80:	4604      	mov	r4, r0
 8015b82:	4699      	mov	r9, r3
 8015b84:	4615      	mov	r5, r2
 8015b86:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b88:	f7fc ff22 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 8015b8c:	f3ef 8711 	mrs	r7, BASEPRI
 8015b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b94:	f383 8811 	msr	BASEPRI, r3
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8015ba0:	f1b9 0f00 	cmp.w	r9, #0
 8015ba4:	d002      	beq.n	8015bac <xTaskGenericNotifyFromISR+0x34>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015ba6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015ba8:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015bac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015bb0:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015bb2:	2202      	movs	r2, #2
 8015bb4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 8015bb8:	1e6a      	subs	r2, r5, #1
 8015bba:	2a03      	cmp	r2, #3
 8015bbc:	d82d      	bhi.n	8015c1a <xTaskGenericNotifyFromISR+0xa2>
 8015bbe:	e8df f002 	tbb	[pc, r2]
 8015bc2:	1d0b      	.short	0x1d0b
 8015bc4:	2622      	.short	0x2622
	__asm volatile
 8015bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bca:	f383 8811 	msr	BASEPRI, r3
 8015bce:	f3bf 8f6f 	isb	sy
 8015bd2:	f3bf 8f4f 	dsb	sy
 8015bd6:	e7fe      	b.n	8015bd6 <xTaskGenericNotifyFromISR+0x5e>
					pxTCB->ulNotifiedValue |= ulValue;
 8015bd8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015bda:	ea42 0208 	orr.w	r2, r2, r8
 8015bde:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015be0:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	d141      	bne.n	8015c6a <xTaskGenericNotifyFromISR+0xf2>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015be8:	b1db      	cbz	r3, 8015c22 <xTaskGenericNotifyFromISR+0xaa>
 8015bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bee:	f383 8811 	msr	BASEPRI, r3
 8015bf2:	f3bf 8f6f 	isb	sy
 8015bf6:	f3bf 8f4f 	dsb	sy
 8015bfa:	e7fe      	b.n	8015bfa <xTaskGenericNotifyFromISR+0x82>
					( pxTCB->ulNotifiedValue )++;
 8015bfc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015bfe:	3201      	adds	r2, #1
 8015c00:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015c02:	2501      	movs	r5, #1
					break;
 8015c04:	e7ed      	b.n	8015be2 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8015c06:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015c0a:	2501      	movs	r5, #1
					break;
 8015c0c:	e7e9      	b.n	8015be2 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015c0e:	2b02      	cmp	r3, #2
 8015c10:	d005      	beq.n	8015c1e <xTaskGenericNotifyFromISR+0xa6>
						pxTCB->ulNotifiedValue = ulValue;
 8015c12:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8015c16:	2501      	movs	r5, #1
 8015c18:	e7e3      	b.n	8015be2 <xTaskGenericNotifyFromISR+0x6a>
 8015c1a:	2501      	movs	r5, #1
 8015c1c:	e7e1      	b.n	8015be2 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8015c1e:	2500      	movs	r5, #0
 8015c20:	e7df      	b.n	8015be2 <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c22:	4b1a      	ldr	r3, [pc, #104]	; (8015c8c <xTaskGenericNotifyFromISR+0x114>)
 8015c24:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8015c28:	bb23      	cbnz	r3, 8015c74 <xTaskGenericNotifyFromISR+0xfc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c2a:	f104 0804 	add.w	r8, r4, #4
 8015c2e:	4640      	mov	r0, r8
 8015c30:	f7fc fd22 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015c36:	4a15      	ldr	r2, [pc, #84]	; (8015c8c <xTaskGenericNotifyFromISR+0x114>)
 8015c38:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8015c3c:	4293      	cmp	r3, r2
 8015c3e:	d902      	bls.n	8015c46 <xTaskGenericNotifyFromISR+0xce>
 8015c40:	4a12      	ldr	r2, [pc, #72]	; (8015c8c <xTaskGenericNotifyFromISR+0x114>)
 8015c42:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8015c46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015c4a:	009a      	lsls	r2, r3, #2
 8015c4c:	4641      	mov	r1, r8
 8015c4e:	4810      	ldr	r0, [pc, #64]	; (8015c90 <xTaskGenericNotifyFromISR+0x118>)
 8015c50:	4410      	add	r0, r2
 8015c52:	f7fc fceb 	bl	801262c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015c58:	4b0c      	ldr	r3, [pc, #48]	; (8015c8c <xTaskGenericNotifyFromISR+0x114>)
 8015c5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d902      	bls.n	8015c6a <xTaskGenericNotifyFromISR+0xf2>
					if( pxHigherPriorityTaskWoken != NULL )
 8015c64:	b166      	cbz	r6, 8015c80 <xTaskGenericNotifyFromISR+0x108>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015c66:	2301      	movs	r3, #1
 8015c68:	6033      	str	r3, [r6, #0]
	__asm volatile
 8015c6a:	f387 8811 	msr	BASEPRI, r7
	}
 8015c6e:	4628      	mov	r0, r5
 8015c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015c74:	f104 0118 	add.w	r1, r4, #24
 8015c78:	4806      	ldr	r0, [pc, #24]	; (8015c94 <xTaskGenericNotifyFromISR+0x11c>)
 8015c7a:	f7fc fcd7 	bl	801262c <vListInsertEnd>
 8015c7e:	e7ea      	b.n	8015c56 <xTaskGenericNotifyFromISR+0xde>
						xYieldPending = pdTRUE;
 8015c80:	2201      	movs	r2, #1
 8015c82:	4b02      	ldr	r3, [pc, #8]	; (8015c8c <xTaskGenericNotifyFromISR+0x114>)
 8015c84:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8015c88:	e7ef      	b.n	8015c6a <xTaskGenericNotifyFromISR+0xf2>
 8015c8a:	bf00      	nop
 8015c8c:	20005514 	.word	0x20005514
 8015c90:	20005544 	.word	0x20005544
 8015c94:	20005528 	.word	0x20005528

08015c98 <vTaskNotifyGiveFromISR>:
	{
 8015c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8015c9a:	b318      	cbz	r0, 8015ce4 <vTaskNotifyGiveFromISR+0x4c>
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ca0:	f7fc fe96 	bl	80129d0 <vPortValidateInterruptPriority>
	__asm volatile
 8015ca4:	f3ef 8611 	mrs	r6, BASEPRI
 8015ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cac:	f383 8811 	msr	BASEPRI, r3
 8015cb0:	f3bf 8f6f 	isb	sy
 8015cb4:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015cb8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015cbc:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015cbe:	2202      	movs	r2, #2
 8015cc0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 8015cc4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015cc6:	3201      	adds	r2, #1
 8015cc8:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015cca:	2b01      	cmp	r3, #1
 8015ccc:	d136      	bne.n	8015d3c <vTaskNotifyGiveFromISR+0xa4>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015cd0:	b18b      	cbz	r3, 8015cf6 <vTaskNotifyGiveFromISR+0x5e>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	e7fe      	b.n	8015ce2 <vTaskNotifyGiveFromISR+0x4a>
 8015ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce8:	f383 8811 	msr	BASEPRI, r3
 8015cec:	f3bf 8f6f 	isb	sy
 8015cf0:	f3bf 8f4f 	dsb	sy
 8015cf4:	e7fe      	b.n	8015cf4 <vTaskNotifyGiveFromISR+0x5c>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015cf6:	4b18      	ldr	r3, [pc, #96]	; (8015d58 <vTaskNotifyGiveFromISR+0xc0>)
 8015cf8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8015cfc:	bb0b      	cbnz	r3, 8015d42 <vTaskNotifyGiveFromISR+0xaa>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015cfe:	1d27      	adds	r7, r4, #4
 8015d00:	4638      	mov	r0, r7
 8015d02:	f7fc fcb9 	bl	8012678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015d08:	4a13      	ldr	r2, [pc, #76]	; (8015d58 <vTaskNotifyGiveFromISR+0xc0>)
 8015d0a:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8015d0e:	4293      	cmp	r3, r2
 8015d10:	d902      	bls.n	8015d18 <vTaskNotifyGiveFromISR+0x80>
 8015d12:	4a11      	ldr	r2, [pc, #68]	; (8015d58 <vTaskNotifyGiveFromISR+0xc0>)
 8015d14:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8015d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015d1c:	009a      	lsls	r2, r3, #2
 8015d1e:	4639      	mov	r1, r7
 8015d20:	480e      	ldr	r0, [pc, #56]	; (8015d5c <vTaskNotifyGiveFromISR+0xc4>)
 8015d22:	4410      	add	r0, r2
 8015d24:	f7fc fc82 	bl	801262c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015d28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015d2a:	4b0b      	ldr	r3, [pc, #44]	; (8015d58 <vTaskNotifyGiveFromISR+0xc0>)
 8015d2c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8015d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d902      	bls.n	8015d3c <vTaskNotifyGiveFromISR+0xa4>
					if( pxHigherPriorityTaskWoken != NULL )
 8015d36:	b155      	cbz	r5, 8015d4e <vTaskNotifyGiveFromISR+0xb6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	602b      	str	r3, [r5, #0]
	__asm volatile
 8015d3c:	f386 8811 	msr	BASEPRI, r6
 8015d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015d42:	f104 0118 	add.w	r1, r4, #24
 8015d46:	4806      	ldr	r0, [pc, #24]	; (8015d60 <vTaskNotifyGiveFromISR+0xc8>)
 8015d48:	f7fc fc70 	bl	801262c <vListInsertEnd>
 8015d4c:	e7ec      	b.n	8015d28 <vTaskNotifyGiveFromISR+0x90>
						xYieldPending = pdTRUE;
 8015d4e:	2201      	movs	r2, #1
 8015d50:	4b01      	ldr	r3, [pc, #4]	; (8015d58 <vTaskNotifyGiveFromISR+0xc0>)
 8015d52:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8015d56:	e7f1      	b.n	8015d3c <vTaskNotifyGiveFromISR+0xa4>
 8015d58:	20005514 	.word	0x20005514
 8015d5c:	20005544 	.word	0x20005544
 8015d60:	20005528 	.word	0x20005528

08015d64 <xTaskNotifyStateClear>:
	{
 8015d64:	b510      	push	{r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 8015d66:	4604      	mov	r4, r0
 8015d68:	b158      	cbz	r0, 8015d82 <xTaskNotifyStateClear+0x1e>
		taskENTER_CRITICAL();
 8015d6a:	f7fc fd0d 	bl	8012788 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8015d6e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	d008      	beq.n	8015d8a <xTaskNotifyStateClear+0x26>
				xReturn = pdFAIL;
 8015d78:	2400      	movs	r4, #0
		taskEXIT_CRITICAL();
 8015d7a:	f7fc fd27 	bl	80127cc <vPortExitCritical>
	}
 8015d7e:	4620      	mov	r0, r4
 8015d80:	bd10      	pop	{r4, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8015d82:	4b04      	ldr	r3, [pc, #16]	; (8015d94 <xTaskNotifyStateClear+0x30>)
 8015d84:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
 8015d88:	e7ef      	b.n	8015d6a <xTaskNotifyStateClear+0x6>
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				xReturn = pdPASS;
 8015d90:	2401      	movs	r4, #1
 8015d92:	e7f2      	b.n	8015d7a <xTaskNotifyStateClear+0x16>
 8015d94:	20005514 	.word	0x20005514

08015d98 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015d98:	4b06      	ldr	r3, [pc, #24]	; (8015db4 <prvGetNextExpireTime+0x1c>)
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	6813      	ldr	r3, [r2, #0]
 8015d9e:	fab3 f383 	clz	r3, r3
 8015da2:	095b      	lsrs	r3, r3, #5
 8015da4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015da6:	b913      	cbnz	r3, 8015dae <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015da8:	68d3      	ldr	r3, [r2, #12]
 8015daa:	6818      	ldr	r0, [r3, #0]
 8015dac:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015dae:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8015db0:	4770      	bx	lr
 8015db2:	bf00      	nop
 8015db4:	20005a14 	.word	0x20005a14

08015db8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015db8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015dba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015dbc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015dbe:	4291      	cmp	r1, r2
 8015dc0:	d80c      	bhi.n	8015ddc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dc2:	1ad2      	subs	r2, r2, r3
 8015dc4:	6983      	ldr	r3, [r0, #24]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d301      	bcc.n	8015dce <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015dca:	2001      	movs	r0, #1
 8015dcc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015dce:	1d01      	adds	r1, r0, #4
 8015dd0:	4b09      	ldr	r3, [pc, #36]	; (8015df8 <prvInsertTimerInActiveList+0x40>)
 8015dd2:	6858      	ldr	r0, [r3, #4]
 8015dd4:	f7fc fc36 	bl	8012644 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8015dd8:	2000      	movs	r0, #0
 8015dda:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d201      	bcs.n	8015de4 <prvInsertTimerInActiveList+0x2c>
 8015de0:	4299      	cmp	r1, r3
 8015de2:	d206      	bcs.n	8015df2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015de4:	1d01      	adds	r1, r0, #4
 8015de6:	4b04      	ldr	r3, [pc, #16]	; (8015df8 <prvInsertTimerInActiveList+0x40>)
 8015de8:	6818      	ldr	r0, [r3, #0]
 8015dea:	f7fc fc2b 	bl	8012644 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8015dee:	2000      	movs	r0, #0
 8015df0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8015df2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
 8015df4:	bd08      	pop	{r3, pc}
 8015df6:	bf00      	nop
 8015df8:	20005a14 	.word	0x20005a14

08015dfc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015dfc:	b570      	push	{r4, r5, r6, lr}
 8015dfe:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015e00:	f7fc fcc2 	bl	8012788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015e04:	4b12      	ldr	r3, [pc, #72]	; (8015e50 <prvCheckForValidListAndQueue+0x54>)
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	b11b      	cbz	r3, 8015e12 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015e0a:	f7fc fcdf 	bl	80127cc <vPortExitCritical>
}
 8015e0e:	b002      	add	sp, #8
 8015e10:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8015e12:	4c0f      	ldr	r4, [pc, #60]	; (8015e50 <prvCheckForValidListAndQueue+0x54>)
 8015e14:	f104 060c 	add.w	r6, r4, #12
 8015e18:	4630      	mov	r0, r6
 8015e1a:	f7fc fbf9 	bl	8012610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015e1e:	f104 0520 	add.w	r5, r4, #32
 8015e22:	4628      	mov	r0, r5
 8015e24:	f7fc fbf4 	bl	8012610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015e28:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015e2a:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	9300      	str	r3, [sp, #0]
 8015e30:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8015e34:	f104 0284 	add.w	r2, r4, #132	; 0x84
 8015e38:	2110      	movs	r1, #16
 8015e3a:	200a      	movs	r0, #10
 8015e3c:	f7fd f817 	bl	8012e6e <xQueueGenericCreateStatic>
 8015e40:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d0e1      	beq.n	8015e0a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015e46:	4903      	ldr	r1, [pc, #12]	; (8015e54 <prvCheckForValidListAndQueue+0x58>)
 8015e48:	f7fd fe0e 	bl	8013a68 <vQueueAddToRegistry>
 8015e4c:	e7dd      	b.n	8015e0a <prvCheckForValidListAndQueue+0xe>
 8015e4e:	bf00      	nop
 8015e50:	20005a14 	.word	0x20005a14
 8015e54:	0801cef8 	.word	0x0801cef8

08015e58 <prvInitialiseNewTimer>:
{
 8015e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e5c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015e5e:	b941      	cbnz	r1, 8015e72 <prvInitialiseNewTimer+0x1a>
	__asm volatile
 8015e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e64:	f383 8811 	msr	BASEPRI, r3
 8015e68:	f3bf 8f6f 	isb	sy
 8015e6c:	f3bf 8f4f 	dsb	sy
 8015e70:	e7fe      	b.n	8015e70 <prvInitialiseNewTimer+0x18>
 8015e72:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 8015e74:	b174      	cbz	r4, 8015e94 <prvInitialiseNewTimer+0x3c>
 8015e76:	461d      	mov	r5, r3
 8015e78:	4616      	mov	r6, r2
 8015e7a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 8015e7c:	f7ff ffbe 	bl	8015dfc <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8015e80:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015e84:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8015e86:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8015e88:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015e8a:	9b06      	ldr	r3, [sp, #24]
 8015e8c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015e8e:	1d20      	adds	r0, r4, #4
 8015e90:	f7fc fbc9 	bl	8012626 <vListInitialiseItem>
 8015e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e98 <xTimerCreateTimerTask>:
{
 8015e98:	b510      	push	{r4, lr}
 8015e9a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8015e9c:	f7ff ffae 	bl	8015dfc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8015ea0:	4b15      	ldr	r3, [pc, #84]	; (8015ef8 <xTimerCreateTimerTask+0x60>)
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	b323      	cbz	r3, 8015ef0 <xTimerCreateTimerTask+0x58>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015ea6:	2400      	movs	r4, #0
 8015ea8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015eaa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015eac:	aa07      	add	r2, sp, #28
 8015eae:	a906      	add	r1, sp, #24
 8015eb0:	a805      	add	r0, sp, #20
 8015eb2:	f7fc f99b 	bl	80121ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015eb6:	9b05      	ldr	r3, [sp, #20]
 8015eb8:	9302      	str	r3, [sp, #8]
 8015eba:	9b06      	ldr	r3, [sp, #24]
 8015ebc:	9301      	str	r3, [sp, #4]
 8015ebe:	2318      	movs	r3, #24
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	4623      	mov	r3, r4
 8015ec4:	9a07      	ldr	r2, [sp, #28]
 8015ec6:	490d      	ldr	r1, [pc, #52]	; (8015efc <xTimerCreateTimerTask+0x64>)
 8015ec8:	480d      	ldr	r0, [pc, #52]	; (8015f00 <xTimerCreateTimerTask+0x68>)
 8015eca:	f7fe fc0c 	bl	80146e6 <xTaskCreateStatic>
 8015ece:	4b0a      	ldr	r3, [pc, #40]	; (8015ef8 <xTimerCreateTimerTask+0x60>)
 8015ed0:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 8015ed4:	b150      	cbz	r0, 8015eec <xTimerCreateTimerTask+0x54>
				xReturn = pdPASS;
 8015ed6:	2001      	movs	r0, #1
	configASSERT( xReturn );
 8015ed8:	b960      	cbnz	r0, 8015ef4 <xTimerCreateTimerTask+0x5c>
 8015eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ede:	f383 8811 	msr	BASEPRI, r3
 8015ee2:	f3bf 8f6f 	isb	sy
 8015ee6:	f3bf 8f4f 	dsb	sy
 8015eea:	e7fe      	b.n	8015eea <xTimerCreateTimerTask+0x52>
BaseType_t xReturn = pdFAIL;
 8015eec:	4620      	mov	r0, r4
 8015eee:	e7f3      	b.n	8015ed8 <xTimerCreateTimerTask+0x40>
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	e7f1      	b.n	8015ed8 <xTimerCreateTimerTask+0x40>
}
 8015ef4:	b008      	add	sp, #32
 8015ef6:	bd10      	pop	{r4, pc}
 8015ef8:	20005a14 	.word	0x20005a14
 8015efc:	0801cf00 	.word	0x0801cf00
 8015f00:	08016279 	.word	0x08016279

08015f04 <xTimerCreate>:
	{
 8015f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f08:	b082      	sub	sp, #8
 8015f0a:	4605      	mov	r5, r0
 8015f0c:	460e      	mov	r6, r1
 8015f0e:	4617      	mov	r7, r2
 8015f10:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8015f12:	2030      	movs	r0, #48	; 0x30
 8015f14:	f7fc fde4 	bl	8012ae0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8015f18:	4604      	mov	r4, r0
 8015f1a:	b158      	cbz	r0, 8015f34 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015f1c:	9001      	str	r0, [sp, #4]
 8015f1e:	9b08      	ldr	r3, [sp, #32]
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	4643      	mov	r3, r8
 8015f24:	463a      	mov	r2, r7
 8015f26:	4631      	mov	r1, r6
 8015f28:	4628      	mov	r0, r5
 8015f2a:	f7ff ff95 	bl	8015e58 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8015f34:	4620      	mov	r0, r4
 8015f36:	b002      	add	sp, #8
 8015f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f3c <xTimerCreateStatic>:
	{
 8015f3c:	b530      	push	{r4, r5, lr}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 8015f42:	2530      	movs	r5, #48	; 0x30
 8015f44:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8015f46:	9d03      	ldr	r5, [sp, #12]
 8015f48:	2d30      	cmp	r5, #48	; 0x30
 8015f4a:	d008      	beq.n	8015f5e <xTimerCreateStatic+0x22>
 8015f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f50:	f383 8811 	msr	BASEPRI, r3
 8015f54:	f3bf 8f6f 	isb	sy
 8015f58:	f3bf 8f4f 	dsb	sy
 8015f5c:	e7fe      	b.n	8015f5c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
 8015f5e:	b944      	cbnz	r4, 8015f72 <xTimerCreateStatic+0x36>
 8015f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f64:	f383 8811 	msr	BASEPRI, r3
 8015f68:	f3bf 8f6f 	isb	sy
 8015f6c:	f3bf 8f4f 	dsb	sy
 8015f70:	e7fe      	b.n	8015f70 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015f72:	9401      	str	r4, [sp, #4]
 8015f74:	9d08      	ldr	r5, [sp, #32]
 8015f76:	9500      	str	r5, [sp, #0]
 8015f78:	f7ff ff6e 	bl	8015e58 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8015f82:	4620      	mov	r0, r4
 8015f84:	b005      	add	sp, #20
 8015f86:	bd30      	pop	{r4, r5, pc}

08015f88 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8015f88:	b1c0      	cbz	r0, 8015fbc <xTimerGenericCommand+0x34>
{
 8015f8a:	b530      	push	{r4, r5, lr}
 8015f8c:	b085      	sub	sp, #20
 8015f8e:	4615      	mov	r5, r2
 8015f90:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8015f92:	4a17      	ldr	r2, [pc, #92]	; (8015ff0 <xTimerGenericCommand+0x68>)
 8015f94:	6890      	ldr	r0, [r2, #8]
 8015f96:	b340      	cbz	r0, 8015fea <xTimerGenericCommand+0x62>
 8015f98:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8015f9a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015f9c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8015f9e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015fa0:	2905      	cmp	r1, #5
 8015fa2:	dc1c      	bgt.n	8015fde <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015fa4:	f7ff fae6 	bl	8015574 <xTaskGetSchedulerState>
 8015fa8:	2802      	cmp	r0, #2
 8015faa:	d010      	beq.n	8015fce <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015fac:	2300      	movs	r3, #0
 8015fae:	461a      	mov	r2, r3
 8015fb0:	4669      	mov	r1, sp
 8015fb2:	480f      	ldr	r0, [pc, #60]	; (8015ff0 <xTimerGenericCommand+0x68>)
 8015fb4:	6880      	ldr	r0, [r0, #8]
 8015fb6:	f7fd f833 	bl	8013020 <xQueueGenericSend>
 8015fba:	e014      	b.n	8015fe6 <xTimerGenericCommand+0x5e>
 8015fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc0:	f383 8811 	msr	BASEPRI, r3
 8015fc4:	f3bf 8f6f 	isb	sy
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	e7fe      	b.n	8015fcc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015fce:	2300      	movs	r3, #0
 8015fd0:	9a08      	ldr	r2, [sp, #32]
 8015fd2:	4669      	mov	r1, sp
 8015fd4:	4806      	ldr	r0, [pc, #24]	; (8015ff0 <xTimerGenericCommand+0x68>)
 8015fd6:	6880      	ldr	r0, [r0, #8]
 8015fd8:	f7fd f822 	bl	8013020 <xQueueGenericSend>
 8015fdc:	e003      	b.n	8015fe6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015fde:	2300      	movs	r3, #0
 8015fe0:	4669      	mov	r1, sp
 8015fe2:	f7fd f927 	bl	8013234 <xQueueGenericSendFromISR>
}
 8015fe6:	b005      	add	sp, #20
 8015fe8:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8015fea:	2000      	movs	r0, #0
	return xReturn;
 8015fec:	e7fb      	b.n	8015fe6 <xTimerGenericCommand+0x5e>
 8015fee:	bf00      	nop
 8015ff0:	20005a14 	.word	0x20005a14

08015ff4 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ff4:	4b20      	ldr	r3, [pc, #128]	; (8016078 <prvSwitchTimerLists+0x84>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	2a00      	cmp	r2, #0
 8015ffc:	d037      	beq.n	801606e <prvSwitchTimerLists+0x7a>
{
 8015ffe:	b570      	push	{r4, r5, r6, lr}
 8016000:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016002:	68db      	ldr	r3, [r3, #12]
 8016004:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016006:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016008:	1d25      	adds	r5, r4, #4
 801600a:	4628      	mov	r0, r5
 801600c:	f7fc fb34 	bl	8012678 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016012:	4620      	mov	r0, r4
 8016014:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016016:	69e3      	ldr	r3, [r4, #28]
 8016018:	2b01      	cmp	r3, #1
 801601a:	d00a      	beq.n	8016032 <prvSwitchTimerLists+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801601c:	4b16      	ldr	r3, [pc, #88]	; (8016078 <prvSwitchTimerLists+0x84>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	2a00      	cmp	r2, #0
 8016024:	d1ed      	bne.n	8016002 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8016026:	4a14      	ldr	r2, [pc, #80]	; (8016078 <prvSwitchTimerLists+0x84>)
 8016028:	6851      	ldr	r1, [r2, #4]
 801602a:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801602c:	6053      	str	r3, [r2, #4]
}
 801602e:	b002      	add	sp, #8
 8016030:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016032:	69a3      	ldr	r3, [r4, #24]
 8016034:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8016036:	429e      	cmp	r6, r3
 8016038:	d207      	bcs.n	801604a <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801603a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801603c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801603e:	4629      	mov	r1, r5
 8016040:	4b0d      	ldr	r3, [pc, #52]	; (8016078 <prvSwitchTimerLists+0x84>)
 8016042:	6818      	ldr	r0, [r3, #0]
 8016044:	f7fc fafe 	bl	8012644 <vListInsert>
 8016048:	e7e8      	b.n	801601c <prvSwitchTimerLists+0x28>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801604a:	2100      	movs	r1, #0
 801604c:	9100      	str	r1, [sp, #0]
 801604e:	460b      	mov	r3, r1
 8016050:	4632      	mov	r2, r6
 8016052:	4620      	mov	r0, r4
 8016054:	f7ff ff98 	bl	8015f88 <xTimerGenericCommand>
				configASSERT( xResult );
 8016058:	2800      	cmp	r0, #0
 801605a:	d1df      	bne.n	801601c <prvSwitchTimerLists+0x28>
 801605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016060:	f383 8811 	msr	BASEPRI, r3
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	e7fe      	b.n	801606c <prvSwitchTimerLists+0x78>
	pxCurrentTimerList = pxOverflowTimerList;
 801606e:	4a02      	ldr	r2, [pc, #8]	; (8016078 <prvSwitchTimerLists+0x84>)
 8016070:	6851      	ldr	r1, [r2, #4]
 8016072:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016074:	6053      	str	r3, [r2, #4]
 8016076:	4770      	bx	lr
 8016078:	20005a14 	.word	0x20005a14

0801607c <prvSampleTimeNow>:
{
 801607c:	b538      	push	{r3, r4, r5, lr}
 801607e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8016080:	f7fe fdce 	bl	8014c20 <xTaskGetTickCount>
 8016084:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8016086:	4b08      	ldr	r3, [pc, #32]	; (80160a8 <prvSampleTimeNow+0x2c>)
 8016088:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801608c:	4298      	cmp	r0, r3
 801608e:	d306      	bcc.n	801609e <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8016090:	2300      	movs	r3, #0
 8016092:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8016094:	4b04      	ldr	r3, [pc, #16]	; (80160a8 <prvSampleTimeNow+0x2c>)
 8016096:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 801609a:	4620      	mov	r0, r4
 801609c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801609e:	f7ff ffa9 	bl	8015ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80160a2:	2301      	movs	r3, #1
 80160a4:	602b      	str	r3, [r5, #0]
 80160a6:	e7f5      	b.n	8016094 <prvSampleTimeNow+0x18>
 80160a8:	20005a14 	.word	0x20005a14

080160ac <prvProcessExpiredTimer>:
{
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	4605      	mov	r5, r0
 80160b2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160b4:	4b14      	ldr	r3, [pc, #80]	; (8016108 <prvProcessExpiredTimer+0x5c>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	68db      	ldr	r3, [r3, #12]
 80160ba:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80160bc:	1d20      	adds	r0, r4, #4
 80160be:	f7fc fadb 	bl	8012678 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80160c2:	69e3      	ldr	r3, [r4, #28]
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	d004      	beq.n	80160d2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80160c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160ca:	4620      	mov	r0, r4
 80160cc:	4798      	blx	r3
}
 80160ce:	b002      	add	sp, #8
 80160d0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80160d2:	69a1      	ldr	r1, [r4, #24]
 80160d4:	462b      	mov	r3, r5
 80160d6:	4632      	mov	r2, r6
 80160d8:	4429      	add	r1, r5
 80160da:	4620      	mov	r0, r4
 80160dc:	f7ff fe6c 	bl	8015db8 <prvInsertTimerInActiveList>
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d0f1      	beq.n	80160c8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80160e4:	2100      	movs	r1, #0
 80160e6:	9100      	str	r1, [sp, #0]
 80160e8:	460b      	mov	r3, r1
 80160ea:	462a      	mov	r2, r5
 80160ec:	4620      	mov	r0, r4
 80160ee:	f7ff ff4b 	bl	8015f88 <xTimerGenericCommand>
			configASSERT( xResult );
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d1e8      	bne.n	80160c8 <prvProcessExpiredTimer+0x1c>
 80160f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fa:	f383 8811 	msr	BASEPRI, r3
 80160fe:	f3bf 8f6f 	isb	sy
 8016102:	f3bf 8f4f 	dsb	sy
 8016106:	e7fe      	b.n	8016106 <prvProcessExpiredTimer+0x5a>
 8016108:	20005a14 	.word	0x20005a14

0801610c <prvProcessTimerOrBlockTask>:
{
 801610c:	b570      	push	{r4, r5, r6, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	4606      	mov	r6, r0
 8016112:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8016114:	f7fe fd7a 	bl	8014c0c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016118:	a801      	add	r0, sp, #4
 801611a:	f7ff ffaf 	bl	801607c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	bb23      	cbnz	r3, 801616c <prvProcessTimerOrBlockTask+0x60>
 8016122:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016124:	b90c      	cbnz	r4, 801612a <prvProcessTimerOrBlockTask+0x1e>
 8016126:	42b0      	cmp	r0, r6
 8016128:	d219      	bcs.n	801615e <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 801612a:	b12c      	cbz	r4, 8016138 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801612c:	4b11      	ldr	r3, [pc, #68]	; (8016174 <prvProcessTimerOrBlockTask+0x68>)
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	681c      	ldr	r4, [r3, #0]
 8016132:	fab4 f484 	clz	r4, r4
 8016136:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016138:	4622      	mov	r2, r4
 801613a:	1b71      	subs	r1, r6, r5
 801613c:	4b0d      	ldr	r3, [pc, #52]	; (8016174 <prvProcessTimerOrBlockTask+0x68>)
 801613e:	6898      	ldr	r0, [r3, #8]
 8016140:	f7fd fce5 	bl	8013b0e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016144:	f7fe fe20 	bl	8014d88 <xTaskResumeAll>
 8016148:	b938      	cbnz	r0, 801615a <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
 801614a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801614e:	4b0a      	ldr	r3, [pc, #40]	; (8016178 <prvProcessTimerOrBlockTask+0x6c>)
 8016150:	601a      	str	r2, [r3, #0]
 8016152:	f3bf 8f4f 	dsb	sy
 8016156:	f3bf 8f6f 	isb	sy
}
 801615a:	b002      	add	sp, #8
 801615c:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 801615e:	f7fe fe13 	bl	8014d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016162:	4629      	mov	r1, r5
 8016164:	4630      	mov	r0, r6
 8016166:	f7ff ffa1 	bl	80160ac <prvProcessExpiredTimer>
 801616a:	e7f6      	b.n	801615a <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
 801616c:	f7fe fe0c 	bl	8014d88 <xTaskResumeAll>
}
 8016170:	e7f3      	b.n	801615a <prvProcessTimerOrBlockTask+0x4e>
 8016172:	bf00      	nop
 8016174:	20005a14 	.word	0x20005a14
 8016178:	e000ed04 	.word	0xe000ed04

0801617c <prvProcessReceivedCommands>:
{
 801617c:	b530      	push	{r4, r5, lr}
 801617e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016180:	e002      	b.n	8016188 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016182:	9b04      	ldr	r3, [sp, #16]
 8016184:	2b00      	cmp	r3, #0
 8016186:	da0f      	bge.n	80161a8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016188:	2200      	movs	r2, #0
 801618a:	a904      	add	r1, sp, #16
 801618c:	4b39      	ldr	r3, [pc, #228]	; (8016274 <prvProcessReceivedCommands+0xf8>)
 801618e:	6898      	ldr	r0, [r3, #8]
 8016190:	f7fd f91d 	bl	80133ce <xQueueReceive>
 8016194:	2800      	cmp	r0, #0
 8016196:	d06a      	beq.n	801626e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016198:	9b04      	ldr	r3, [sp, #16]
 801619a:	2b00      	cmp	r3, #0
 801619c:	daf1      	bge.n	8016182 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801619e:	9907      	ldr	r1, [sp, #28]
 80161a0:	9806      	ldr	r0, [sp, #24]
 80161a2:	9b05      	ldr	r3, [sp, #20]
 80161a4:	4798      	blx	r3
 80161a6:	e7ec      	b.n	8016182 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80161a8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80161aa:	6963      	ldr	r3, [r4, #20]
 80161ac:	b113      	cbz	r3, 80161b4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80161ae:	1d20      	adds	r0, r4, #4
 80161b0:	f7fc fa62 	bl	8012678 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80161b4:	a803      	add	r0, sp, #12
 80161b6:	f7ff ff61 	bl	801607c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80161ba:	9b04      	ldr	r3, [sp, #16]
 80161bc:	2b09      	cmp	r3, #9
 80161be:	d8e3      	bhi.n	8016188 <prvProcessReceivedCommands+0xc>
 80161c0:	a201      	add	r2, pc, #4	; (adr r2, 80161c8 <prvProcessReceivedCommands+0x4c>)
 80161c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161c6:	bf00      	nop
 80161c8:	080161f1 	.word	0x080161f1
 80161cc:	080161f1 	.word	0x080161f1
 80161d0:	080161f1 	.word	0x080161f1
 80161d4:	08016189 	.word	0x08016189
 80161d8:	08016239 	.word	0x08016239
 80161dc:	0801625f 	.word	0x0801625f
 80161e0:	080161f1 	.word	0x080161f1
 80161e4:	080161f1 	.word	0x080161f1
 80161e8:	08016189 	.word	0x08016189
 80161ec:	08016239 	.word	0x08016239
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161f0:	9905      	ldr	r1, [sp, #20]
 80161f2:	69a5      	ldr	r5, [r4, #24]
 80161f4:	460b      	mov	r3, r1
 80161f6:	4602      	mov	r2, r0
 80161f8:	4429      	add	r1, r5
 80161fa:	4620      	mov	r0, r4
 80161fc:	f7ff fddc 	bl	8015db8 <prvInsertTimerInActiveList>
 8016200:	2800      	cmp	r0, #0
 8016202:	d0c1      	beq.n	8016188 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016206:	4620      	mov	r0, r4
 8016208:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801620a:	69e3      	ldr	r3, [r4, #28]
 801620c:	2b01      	cmp	r3, #1
 801620e:	d1bb      	bne.n	8016188 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016210:	69a2      	ldr	r2, [r4, #24]
 8016212:	2100      	movs	r1, #0
 8016214:	9100      	str	r1, [sp, #0]
 8016216:	460b      	mov	r3, r1
 8016218:	9805      	ldr	r0, [sp, #20]
 801621a:	4402      	add	r2, r0
 801621c:	4620      	mov	r0, r4
 801621e:	f7ff feb3 	bl	8015f88 <xTimerGenericCommand>
							configASSERT( xResult );
 8016222:	2800      	cmp	r0, #0
 8016224:	d1b0      	bne.n	8016188 <prvProcessReceivedCommands+0xc>
 8016226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801622a:	f383 8811 	msr	BASEPRI, r3
 801622e:	f3bf 8f6f 	isb	sy
 8016232:	f3bf 8f4f 	dsb	sy
 8016236:	e7fe      	b.n	8016236 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016238:	9905      	ldr	r1, [sp, #20]
 801623a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801623c:	b131      	cbz	r1, 801624c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801623e:	4603      	mov	r3, r0
 8016240:	4602      	mov	r2, r0
 8016242:	4401      	add	r1, r0
 8016244:	4620      	mov	r0, r4
 8016246:	f7ff fdb7 	bl	8015db8 <prvInsertTimerInActiveList>
					break;
 801624a:	e79d      	b.n	8016188 <prvProcessReceivedCommands+0xc>
 801624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016250:	f383 8811 	msr	BASEPRI, r3
 8016254:	f3bf 8f6f 	isb	sy
 8016258:	f3bf 8f4f 	dsb	sy
 801625c:	e7fe      	b.n	801625c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801625e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016262:	2b00      	cmp	r3, #0
 8016264:	d190      	bne.n	8016188 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8016266:	4620      	mov	r0, r4
 8016268:	f7fc fcc0 	bl	8012bec <vPortFree>
 801626c:	e78c      	b.n	8016188 <prvProcessReceivedCommands+0xc>
}
 801626e:	b009      	add	sp, #36	; 0x24
 8016270:	bd30      	pop	{r4, r5, pc}
 8016272:	bf00      	nop
 8016274:	20005a14 	.word	0x20005a14

08016278 <prvTimerTask>:
{
 8016278:	b500      	push	{lr}
 801627a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801627c:	a801      	add	r0, sp, #4
 801627e:	f7ff fd8b 	bl	8015d98 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016282:	9901      	ldr	r1, [sp, #4]
 8016284:	f7ff ff42 	bl	801610c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8016288:	f7ff ff78 	bl	801617c <prvProcessReceivedCommands>
 801628c:	e7f6      	b.n	801627c <prvTimerTask+0x4>

0801628e <xTimerGetTimerDaemonTaskHandle>:
	configASSERT( ( xTimerTaskHandle != NULL ) );
 801628e:	4b07      	ldr	r3, [pc, #28]	; (80162ac <xTimerGetTimerDaemonTaskHandle+0x1e>)
 8016290:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8016294:	b100      	cbz	r0, 8016298 <xTimerGetTimerDaemonTaskHandle+0xa>
}
 8016296:	4770      	bx	lr
 8016298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801629c:	f383 8811 	msr	BASEPRI, r3
 80162a0:	f3bf 8f6f 	isb	sy
 80162a4:	f3bf 8f4f 	dsb	sy
 80162a8:	e7fe      	b.n	80162a8 <xTimerGetTimerDaemonTaskHandle+0x1a>
 80162aa:	bf00      	nop
 80162ac:	20005a14 	.word	0x20005a14

080162b0 <xTimerGetPeriod>:
	configASSERT( xTimer );
 80162b0:	b108      	cbz	r0, 80162b6 <xTimerGetPeriod+0x6>
}
 80162b2:	6980      	ldr	r0, [r0, #24]
 80162b4:	4770      	bx	lr
 80162b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ba:	f383 8811 	msr	BASEPRI, r3
 80162be:	f3bf 8f6f 	isb	sy
 80162c2:	f3bf 8f4f 	dsb	sy
 80162c6:	e7fe      	b.n	80162c6 <xTimerGetPeriod+0x16>

080162c8 <xTimerGetExpiryTime>:
	configASSERT( xTimer );
 80162c8:	b108      	cbz	r0, 80162ce <xTimerGetExpiryTime+0x6>
}
 80162ca:	6840      	ldr	r0, [r0, #4]
 80162cc:	4770      	bx	lr
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	f383 8811 	msr	BASEPRI, r3
 80162d6:	f3bf 8f6f 	isb	sy
 80162da:	f3bf 8f4f 	dsb	sy
 80162de:	e7fe      	b.n	80162de <xTimerGetExpiryTime+0x16>

080162e0 <pcTimerGetName>:
	configASSERT( xTimer );
 80162e0:	b108      	cbz	r0, 80162e6 <pcTimerGetName+0x6>
}
 80162e2:	6800      	ldr	r0, [r0, #0]
 80162e4:	4770      	bx	lr
 80162e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ea:	f383 8811 	msr	BASEPRI, r3
 80162ee:	f3bf 8f6f 	isb	sy
 80162f2:	f3bf 8f4f 	dsb	sy
 80162f6:	e7fe      	b.n	80162f6 <pcTimerGetName+0x16>

080162f8 <xTimerIsTimerActive>:
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 80162f8:	b940      	cbnz	r0, 801630c <xTimerIsTimerActive+0x14>
 80162fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162fe:	f383 8811 	msr	BASEPRI, r3
 8016302:	f3bf 8f6f 	isb	sy
 8016306:	f3bf 8f4f 	dsb	sy
 801630a:	e7fe      	b.n	801630a <xTimerIsTimerActive+0x12>
{
 801630c:	b510      	push	{r4, lr}
 801630e:	4604      	mov	r4, r0

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8016310:	f7fc fa3a 	bl	8012788 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8016314:	6964      	ldr	r4, [r4, #20]
 8016316:	3400      	adds	r4, #0
 8016318:	bf18      	it	ne
 801631a:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 801631c:	f7fc fa56 	bl	80127cc <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8016320:	4620      	mov	r0, r4
 8016322:	bd10      	pop	{r4, pc}

08016324 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8016324:	b940      	cbnz	r0, 8016338 <pvTimerGetTimerID+0x14>
 8016326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801632a:	f383 8811 	msr	BASEPRI, r3
 801632e:	f3bf 8f6f 	isb	sy
 8016332:	f3bf 8f4f 	dsb	sy
 8016336:	e7fe      	b.n	8016336 <pvTimerGetTimerID+0x12>
{
 8016338:	b510      	push	{r4, lr}
 801633a:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 801633c:	f7fc fa24 	bl	8012788 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8016340:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8016342:	f7fc fa43 	bl	80127cc <vPortExitCritical>

	return pvReturn;
}
 8016346:	4620      	mov	r0, r4
 8016348:	bd10      	pop	{r4, pc}

0801634a <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 801634a:	b538      	push	{r3, r4, r5, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 801634c:	b940      	cbnz	r0, 8016360 <vTimerSetTimerID+0x16>
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	e7fe      	b.n	801635e <vTimerSetTimerID+0x14>
 8016360:	4604      	mov	r4, r0
 8016362:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8016364:	f7fc fa10 	bl	8012788 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8016368:	6225      	str	r5, [r4, #32]
	}
	taskEXIT_CRITICAL();
 801636a:	f7fc fa2f 	bl	80127cc <vPortExitCritical>
 801636e:	bd38      	pop	{r3, r4, r5, pc}

08016370 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016370:	b510      	push	{r4, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	461c      	mov	r4, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016376:	f06f 0301 	mvn.w	r3, #1
 801637a:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801637c:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801637e:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016380:	9203      	str	r2, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016382:	2300      	movs	r3, #0
 8016384:	4622      	mov	r2, r4
 8016386:	4669      	mov	r1, sp
 8016388:	4802      	ldr	r0, [pc, #8]	; (8016394 <xTimerPendFunctionCallFromISR+0x24>)
 801638a:	6880      	ldr	r0, [r0, #8]
 801638c:	f7fc ff52 	bl	8013234 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8016390:	b004      	add	sp, #16
 8016392:	bd10      	pop	{r4, pc}
 8016394:	20005a14 	.word	0x20005a14

08016398 <xTimerPendFunctionCall>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
	{
 8016398:	b530      	push	{r4, r5, lr}
 801639a:	b085      	sub	sp, #20
 801639c:	4614      	mov	r4, r2
	BaseType_t xReturn;

		/* This function can only be called after a timer has been created or
		after the scheduler has been started because, until then, the timer
		queue does not exist. */
		configASSERT( xTimerQueue );
 801639e:	4a0d      	ldr	r2, [pc, #52]	; (80163d4 <xTimerPendFunctionCall+0x3c>)
 80163a0:	6895      	ldr	r5, [r2, #8]
 80163a2:	b945      	cbnz	r5, 80163b6 <xTimerPendFunctionCall+0x1e>
 80163a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a8:	f383 8811 	msr	BASEPRI, r3
 80163ac:	f3bf 8f6f 	isb	sy
 80163b0:	f3bf 8f4f 	dsb	sy
 80163b4:	e7fe      	b.n	80163b4 <xTimerPendFunctionCall+0x1c>
 80163b6:	461a      	mov	r2, r3
 80163b8:	4603      	mov	r3, r0

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80163ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163be:	9000      	str	r0, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80163c0:	9301      	str	r3, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80163c2:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80163c4:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80163c6:	2300      	movs	r3, #0
 80163c8:	4669      	mov	r1, sp
 80163ca:	4628      	mov	r0, r5
 80163cc:	f7fc fe28 	bl	8013020 <xQueueGenericSend>

		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80163d0:	b005      	add	sp, #20
 80163d2:	bd30      	pop	{r4, r5, pc}
 80163d4:	20005a14 	.word	0x20005a14

080163d8 <uxTimerGetTimerNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
	}
 80163d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80163da:	4770      	bx	lr

080163dc <vTimerSetTimerNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 80163dc:	6281      	str	r1, [r0, #40]	; 0x28
 80163de:	4770      	bx	lr

080163e0 <analogTask>:
	t = (new - old) * filter;
	return (uint16_t) old + t / 100;
}

void analogTask(void * argument)
{
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	e01f      	b.n	8016424 <analogTask+0x44>
uint16_t i;

	for(;;)
	{
		for( i = 0; i < ANALOG_CHANNEL_COUNT; i++)
			status.analog[i] = filterADC(status.analog[i], ADCBuffer[i], config.analog.ADCFilter[i]);
 80163e4:	f102 031c 	add.w	r3, r2, #28
 80163e8:	4c0f      	ldr	r4, [pc, #60]	; (8016428 <analogTask+0x48>)
 80163ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80163ee:	88a1      	ldrh	r1, [r4, #4]
 80163f0:	4b0e      	ldr	r3, [pc, #56]	; (801642c <analogTask+0x4c>)
 80163f2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80163f6:	f102 0524 	add.w	r5, r2, #36	; 0x24
 80163fa:	4b0d      	ldr	r3, [pc, #52]	; (8016430 <analogTask+0x50>)
 80163fc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8016400:	889b      	ldrh	r3, [r3, #4]
	t = (new - old) * filter;
 8016402:	1a40      	subs	r0, r0, r1
 8016404:	fb03 f300 	mul.w	r3, r3, r0
	return (uint16_t) old + t / 100;
 8016408:	480a      	ldr	r0, [pc, #40]	; (8016434 <analogTask+0x54>)
 801640a:	fb80 5003 	smull	r5, r0, r0, r3
 801640e:	17db      	asrs	r3, r3, #31
 8016410:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8016414:	440b      	add	r3, r1
			status.analog[i] = filterADC(status.analog[i], ADCBuffer[i], config.analog.ADCFilter[i]);
 8016416:	80a3      	strh	r3, [r4, #4]
		for( i = 0; i < ANALOG_CHANNEL_COUNT; i++)
 8016418:	3201      	adds	r2, #1
 801641a:	b292      	uxth	r2, r2
 801641c:	2a0b      	cmp	r2, #11
 801641e:	d9e1      	bls.n	80163e4 <analogTask+0x4>
		osThreadYield();
 8016420:	f7fa fe16 	bl	8011050 <osThreadYield>
		for( i = 0; i < ANALOG_CHANNEL_COUNT; i++)
 8016424:	2200      	movs	r2, #0
 8016426:	e7f9      	b.n	801641c <analogTask+0x3c>
 8016428:	20005d14 	.word	0x20005d14
 801642c:	20005bc0 	.word	0x20005bc0
 8016430:	200063a4 	.word	0x200063a4
 8016434:	51eb851f 	.word	0x51eb851f

08016438 <packetReset>:
	/* USER CODE END communicationTask */
}

// resets the packet header
void packetReset(void)
{
 8016438:	b508      	push	{r3, lr}
	packet.size = 0;
 801643a:	4b07      	ldr	r3, [pc, #28]	; (8016458 <packetReset+0x20>)
 801643c:	2200      	movs	r2, #0
 801643e:	801a      	strh	r2, [r3, #0]
	packet.command = 0;
 8016440:	709a      	strb	r2, [r3, #2]
	packet.offset = 0;
 8016442:	809a      	strh	r2, [r3, #4]
	packet.length = 0;
 8016444:	80da      	strh	r2, [r3, #6]
	packet.crc = 0xFFFFFFFF;
 8016446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801644a:	609a      	str	r2, [r3, #8]
	osTimerStop(envelopeTimeoutTimerHandle);
 801644c:	4b03      	ldr	r3, [pc, #12]	; (801645c <packetReset+0x24>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	f7fb f8fa 	bl	8011648 <osTimerStop>
 8016454:	bd08      	pop	{r3, pc}
 8016456:	bf00      	nop
 8016458:	20005f0c 	.word	0x20005f0c
 801645c:	20005c78 	.word	0x20005c78

08016460 <envelope_CDC_Transmit>:
}

uint8_t envelope_CDC_Transmit(uint8_t flag, uint8_t *src, uint16_t len)
{
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016462:	4607      	mov	r7, r0
 8016464:	460e      	mov	r6, r1
 8016466:	4615      	mov	r5, r2
uint16_t i = 0;
uint32_t crc;
TickType_t ticks;

	packet.size = OUTBOUND_HEADER + len + PACKET_CRC;
 8016468:	f102 030d 	add.w	r3, r2, #13
 801646c:	4c22      	ldr	r4, [pc, #136]	; (80164f8 <envelope_CDC_Transmit+0x98>)
 801646e:	8023      	strh	r3, [r4, #0]
	ticks = xTaskGetTickCount();
 8016470:	f7fe fbd6 	bl	8014c20 <xTaskGetTickCount>

	if (packet.size  > MAX_PACKET_SIZE)
 8016474:	8821      	ldrh	r1, [r4, #0]
 8016476:	f240 430d 	movw	r3, #1037	; 0x40d
 801647a:	4299      	cmp	r1, r3
 801647c:	d900      	bls.n	8016480 <envelope_CDC_Transmit+0x20>
		__ASM("bkpt");
 801647e:	be00      	bkpt	0x0000

	packet.data[i++] = 1;
 8016480:	4b1d      	ldr	r3, [pc, #116]	; (80164f8 <envelope_CDC_Transmit+0x98>)
 8016482:	2201      	movs	r2, #1
 8016484:	731a      	strb	r2, [r3, #12]
	packet.data[i++] = 1;
 8016486:	735a      	strb	r2, [r3, #13]
	packet.data[i++] = flag;
 8016488:	739f      	strb	r7, [r3, #14]
	packet.data[i++] = (packet.size) >> 8;
 801648a:	0a0a      	lsrs	r2, r1, #8
 801648c:	73da      	strb	r2, [r3, #15]
	packet.data[i++] = (packet.size) & 0xff;
 801648e:	7419      	strb	r1, [r3, #16]

	packet.data[i++] = ticks & 0xff;
 8016490:	7458      	strb	r0, [r3, #17]
	packet.data[i++] = (ticks >> 8) & 0xff;
 8016492:	0a02      	lsrs	r2, r0, #8
 8016494:	749a      	strb	r2, [r3, #18]
	packet.data[i++] = (ticks >> 16) & 0xff;
 8016496:	0c02      	lsrs	r2, r0, #16
 8016498:	74da      	strb	r2, [r3, #19]
	packet.data[i++] = (ticks >> 24);
 801649a:	0e00      	lsrs	r0, r0, #24
 801649c:	7518      	strb	r0, [r3, #20]
 801649e:	2409      	movs	r4, #9
	
	// copy len bytes into buffer
	while (len--)
 80164a0:	e007      	b.n	80164b2 <envelope_CDC_Transmit+0x52>
		packet.data[i++] = *src++;
 80164a2:	1c60      	adds	r0, r4, #1
 80164a4:	7835      	ldrb	r5, [r6, #0]
 80164a6:	4a14      	ldr	r2, [pc, #80]	; (80164f8 <envelope_CDC_Transmit+0x98>)
 80164a8:	4422      	add	r2, r4
 80164aa:	7315      	strb	r5, [r2, #12]
 80164ac:	b284      	uxth	r4, r0
	while (len--)
 80164ae:	461d      	mov	r5, r3
		packet.data[i++] = *src++;
 80164b0:	3601      	adds	r6, #1
	while (len--)
 80164b2:	1e6b      	subs	r3, r5, #1
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	2d00      	cmp	r5, #0
 80164b8:	d1f3      	bne.n	80164a2 <envelope_CDC_Transmit+0x42>

	// save crc into tx buffer
	crc = crc32(packet.data, packet.size - PACKET_CRC);
 80164ba:	4d10      	ldr	r5, [pc, #64]	; (80164fc <envelope_CDC_Transmit+0x9c>)
 80164bc:	3904      	subs	r1, #4
 80164be:	4628      	mov	r0, r5
 80164c0:	f000 fd76 	bl	8016fb0 <crc32>
	packet.data[i++] = crc >> 24;
 80164c4:	1c62      	adds	r2, r4, #1
 80164c6:	0e06      	lsrs	r6, r0, #24
 80164c8:	f1a5 030c 	sub.w	r3, r5, #12
 80164cc:	1919      	adds	r1, r3, r4
 80164ce:	730e      	strb	r6, [r1, #12]
	packet.data[i++] = (crc >> 16) & 0xff;
 80164d0:	1ca1      	adds	r1, r4, #2
 80164d2:	0c06      	lsrs	r6, r0, #16
 80164d4:	fa13 f282 	uxtah	r2, r3, r2
 80164d8:	7316      	strb	r6, [r2, #12]
	packet.data[i++] = (crc >> 8) & 0xff;
 80164da:	1ce2      	adds	r2, r4, #3
 80164dc:	0a04      	lsrs	r4, r0, #8
 80164de:	fa13 f181 	uxtah	r1, r3, r1
 80164e2:	730c      	strb	r4, [r1, #12]
	packet.data[i++] = crc & 0xff;
 80164e4:	fa13 f282 	uxtah	r2, r3, r2
 80164e8:	7310      	strb	r0, [r2, #12]
	
	return CDC_Transmit_FS(packet.data, packet.size);
 80164ea:	f835 1c0c 	ldrh.w	r1, [r5, #-12]
 80164ee:	4628      	mov	r0, r5
 80164f0:	f001 fa66 	bl	80179c0 <CDC_Transmit_FS>
}
 80164f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164f6:	bf00      	nop
 80164f8:	20005f0c 	.word	0x20005f0c
 80164fc:	20005f18 	.word	0x20005f18

08016500 <communicationTask>:
{
 8016500:	b570      	push	{r4, r5, r6, lr}
enum_serialState_t state= START;
 8016502:	2400      	movs	r4, #0
uint16_t seen = 0;
 8016504:	4625      	mov	r5, r4
 8016506:	e140      	b.n	801678a <communicationTask+0x28a>
					packet.data[seen++] = c;
 8016508:	1c6b      	adds	r3, r5, #1
 801650a:	b29b      	uxth	r3, r3
 801650c:	4aa6      	ldr	r2, [pc, #664]	; (80167a8 <communicationTask+0x2a8>)
 801650e:	4415      	add	r5, r2
 8016510:	7329      	strb	r1, [r5, #12]
					if (seen == 2) state = HEADER;
 8016512:	2b02      	cmp	r3, #2
 8016514:	d001      	beq.n	801651a <communicationTask+0x1a>
					packet.data[seen++] = c;
 8016516:	461d      	mov	r5, r3
					continue;
 8016518:	e007      	b.n	801652a <communicationTask+0x2a>
					if (seen == 2) state = HEADER;
 801651a:	2401      	movs	r4, #1
 801651c:	e7fb      	b.n	8016516 <communicationTask+0x16>
			if (state == HEADER)
 801651e:	2c01      	cmp	r4, #1
 8016520:	d01b      	beq.n	801655a <communicationTask+0x5a>
			if (state == PACKET)
 8016522:	2c02      	cmp	r4, #2
 8016524:	d037      	beq.n	8016596 <communicationTask+0x96>
			if (state == CRC32)
 8016526:	2c03      	cmp	r4, #3
 8016528:	d042      	beq.n	80165b0 <communicationTask+0xb0>
		while (!FIFO_EMPTY(FIFO))
 801652a:	4ba0      	ldr	r3, [pc, #640]	; (80167ac <communicationTask+0x2ac>)
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	429a      	cmp	r2, r3
 8016532:	f000 8129 	beq.w	8016788 <communicationTask+0x288>
			osTimerStop(envelopeTimeoutTimerHandle);
 8016536:	4b9e      	ldr	r3, [pc, #632]	; (80167b0 <communicationTask+0x2b0>)
 8016538:	6818      	ldr	r0, [r3, #0]
 801653a:	f7fb f885 	bl	8011648 <osTimerStop>
			c = FIFO.data[FIFO.tail];
 801653e:	4a9b      	ldr	r2, [pc, #620]	; (80167ac <communicationTask+0x2ac>)
 8016540:	6853      	ldr	r3, [r2, #4]
 8016542:	18d1      	adds	r1, r2, r3
 8016544:	7a09      	ldrb	r1, [r1, #8]
			FIFO.tail = FIFO_INCR(FIFO.tail);
 8016546:	3301      	adds	r3, #1
 8016548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801654c:	6053      	str	r3, [r2, #4]
			if (state == START)
 801654e:	2c00      	cmp	r4, #0
 8016550:	d1e5      	bne.n	801651e <communicationTask+0x1e>
				if (c != 0x01)
 8016552:	2901      	cmp	r1, #1
 8016554:	d0d8      	beq.n	8016508 <communicationTask+0x8>
					seen = 0;
 8016556:	2500      	movs	r5, #0
 8016558:	e7e7      	b.n	801652a <communicationTask+0x2a>
				packet.data[seen++] = c;
 801655a:	1c6e      	adds	r6, r5, #1
 801655c:	b2b6      	uxth	r6, r6
 801655e:	4b92      	ldr	r3, [pc, #584]	; (80167a8 <communicationTask+0x2a8>)
 8016560:	441d      	add	r5, r3
 8016562:	7329      	strb	r1, [r5, #12]
	            if (seen >= INBOUND_HEADER)
 8016564:	2e04      	cmp	r6, #4
 8016566:	d90b      	bls.n	8016580 <communicationTask+0x80>
	                packet.size = packet.data[PACKET_SIZE] << 8 | packet.data[PACKET_SIZE + 1];
 8016568:	7bd9      	ldrb	r1, [r3, #15]
 801656a:	7c1a      	ldrb	r2, [r3, #16]
 801656c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016570:	801a      	strh	r2, [r3, #0]
					packet.command = packet.data[PACKET_COMMAND];
 8016572:	7b99      	ldrb	r1, [r3, #14]
 8016574:	7099      	strb	r1, [r3, #2]
	    			if (packet.size > MAX_PACKET_SIZE)
 8016576:	f240 430d 	movw	r3, #1037	; 0x40d
 801657a:	429a      	cmp	r2, r3
 801657c:	d802      	bhi.n	8016584 <communicationTask+0x84>
	                state = PACKET;
 801657e:	2402      	movs	r4, #2
				packet.data[seen++] = c;
 8016580:	4635      	mov	r5, r6
	            continue;
 8016582:	e7d2      	b.n	801652a <communicationTask+0x2a>
	    				envelope_CDC_Transmit(OVER_RUN, 0, 0);
 8016584:	2200      	movs	r2, #0
 8016586:	4611      	mov	r1, r2
 8016588:	2081      	movs	r0, #129	; 0x81
 801658a:	f7ff ff69 	bl	8016460 <envelope_CDC_Transmit>
	    				packetReset();
 801658e:	f7ff ff53 	bl	8016438 <packetReset>
	                state = PACKET;
 8016592:	2402      	movs	r4, #2
 8016594:	e7f4      	b.n	8016580 <communicationTask+0x80>
				packet.data[seen++] = c;
 8016596:	1c6b      	adds	r3, r5, #1
 8016598:	b29b      	uxth	r3, r3
 801659a:	4a83      	ldr	r2, [pc, #524]	; (80167a8 <communicationTask+0x2a8>)
 801659c:	4415      	add	r5, r2
 801659e:	7329      	strb	r1, [r5, #12]
		        if (seen >= packet.size) state = CRC32;
 80165a0:	8812      	ldrh	r2, [r2, #0]
 80165a2:	4293      	cmp	r3, r2
 80165a4:	d201      	bcs.n	80165aa <communicationTask+0xaa>
				packet.data[seen++] = c;
 80165a6:	461d      	mov	r5, r3
 80165a8:	e7bd      	b.n	8016526 <communicationTask+0x26>
 80165aa:	461d      	mov	r5, r3
		        if (seen >= packet.size) state = CRC32;
 80165ac:	2403      	movs	r4, #3
 80165ae:	e7ba      	b.n	8016526 <communicationTask+0x26>
				packet.crc = packet.data[packet.size - 4] << 24 | packet.data[packet.size - 3] << 16 | packet.data[packet.size - 2] << 8 | packet.data[packet.size - 1];
 80165b0:	487d      	ldr	r0, [pc, #500]	; (80167a8 <communicationTask+0x2a8>)
 80165b2:	8803      	ldrh	r3, [r0, #0]
 80165b4:	1f19      	subs	r1, r3, #4
 80165b6:	1842      	adds	r2, r0, r1
 80165b8:	7b15      	ldrb	r5, [r2, #12]
 80165ba:	1eda      	subs	r2, r3, #3
 80165bc:	4402      	add	r2, r0
 80165be:	7b14      	ldrb	r4, [r2, #12]
 80165c0:	0424      	lsls	r4, r4, #16
 80165c2:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80165c6:	1e9a      	subs	r2, r3, #2
 80165c8:	4402      	add	r2, r0
 80165ca:	7b12      	ldrb	r2, [r2, #12]
 80165cc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80165d0:	3b01      	subs	r3, #1
 80165d2:	4403      	add	r3, r0
 80165d4:	7b1b      	ldrb	r3, [r3, #12]
 80165d6:	431c      	orrs	r4, r3
 80165d8:	6084      	str	r4, [r0, #8]
				if (packet.crc == crc32(packet.data, packet.size - PACKET_CRC))
 80165da:	300c      	adds	r0, #12
 80165dc:	f000 fce8 	bl	8016fb0 <crc32>
 80165e0:	4284      	cmp	r4, r0
 80165e2:	d009      	beq.n	80165f8 <communicationTask+0xf8>
					envelope_CDC_Transmit(CRC_ERROR, 0, 0);
 80165e4:	2200      	movs	r2, #0
 80165e6:	4611      	mov	r1, r2
 80165e8:	2082      	movs	r0, #130	; 0x82
 80165ea:	f7ff ff39 	bl	8016460 <envelope_CDC_Transmit>
					packetReset();
 80165ee:	f7ff ff23 	bl	8016438 <packetReset>
				state = START;
 80165f2:	2400      	movs	r4, #0
				seen = 0;
 80165f4:	4625      	mov	r5, r4
 80165f6:	e798      	b.n	801652a <communicationTask+0x2a>
					switch (packet.command)
 80165f8:	4b6b      	ldr	r3, [pc, #428]	; (80167a8 <communicationTask+0x2a8>)
 80165fa:	789b      	ldrb	r3, [r3, #2]
 80165fc:	3b3f      	subs	r3, #63	; 0x3f
 80165fe:	2b18      	cmp	r3, #24
 8016600:	f200 80b8 	bhi.w	8016774 <communicationTask+0x274>
 8016604:	e8df f003 	tbb	[pc, r3]
 8016608:	b6b6b60d 	.word	0xb6b6b60d
 801660c:	7db6b635 	.word	0x7db6b635
 8016610:	b6a2b6b6 	.word	0xb6a2b6b6
 8016614:	b6b6b6b6 	.word	0xb6b6b6b6
 8016618:	17b6b6b6 	.word	0x17b6b6b6
 801661c:	acb6b6b6 	.word	0xacb6b6b6
 8016620:	49          	.byte	0x49
 8016621:	00          	.byte	0x00
							envelope_CDC_Transmit(REALTIME_DATA, (uint8_t *)&status, sizeof(status));
 8016622:	2254      	movs	r2, #84	; 0x54
 8016624:	4963      	ldr	r1, [pc, #396]	; (80167b4 <communicationTask+0x2b4>)
 8016626:	2001      	movs	r0, #1
 8016628:	f7ff ff1a 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 801662c:	f7ff ff04 	bl	8016438 <packetReset>
				state = START;
 8016630:	2400      	movs	r4, #0
				seen = 0;
 8016632:	4625      	mov	r5, r4
							break;
 8016634:	e779      	b.n	801652a <communicationTask+0x2a>
							packet.offset = packet.data[PACKET_OFFSET] << 8 | packet.data[PACKET_OFFSET + 1];
 8016636:	4b5c      	ldr	r3, [pc, #368]	; (80167a8 <communicationTask+0x2a8>)
 8016638:	7c9a      	ldrb	r2, [r3, #18]
 801663a:	7cd9      	ldrb	r1, [r3, #19]
 801663c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8016640:	8099      	strh	r1, [r3, #4]
							if (packet.length > PACKET_PAYLOAD)
 8016642:	88da      	ldrh	r2, [r3, #6]
 8016644:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8016648:	d909      	bls.n	801665e <communicationTask+0x15e>
								envelope_CDC_Transmit(FRAMING_ERROR, 0, 0);
 801664a:	2200      	movs	r2, #0
 801664c:	4611      	mov	r1, r2
 801664e:	208d      	movs	r0, #141	; 0x8d
 8016650:	f7ff ff06 	bl	8016460 <envelope_CDC_Transmit>
								packetReset();
 8016654:	f7ff fef0 	bl	8016438 <packetReset>
				state = START;
 8016658:	2400      	movs	r4, #0
				seen = 0;
 801665a:	4625      	mov	r5, r4
								break;
 801665c:	e765      	b.n	801652a <communicationTask+0x2a>
							envelope_CDC_Transmit(REALTIME_DATA, (uint8_t *)&config + packet.offset, packet.length);
 801665e:	4b56      	ldr	r3, [pc, #344]	; (80167b8 <communicationTask+0x2b8>)
 8016660:	4419      	add	r1, r3
 8016662:	2001      	movs	r0, #1
 8016664:	f7ff fefc 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 8016668:	f7ff fee6 	bl	8016438 <packetReset>
				state = START;
 801666c:	2400      	movs	r4, #0
				seen = 0;
 801666e:	4625      	mov	r5, r4
							break;
 8016670:	e75b      	b.n	801652a <communicationTask+0x2a>
							packet.offset = *((uint16_t *) &packet.data[PACKET_OFFSET]);
 8016672:	4c4d      	ldr	r4, [pc, #308]	; (80167a8 <communicationTask+0x2a8>)
 8016674:	8a63      	ldrh	r3, [r4, #18]
 8016676:	80a3      	strh	r3, [r4, #4]
							crc = crc32((uint8_t *)&config + packet.offset, packet.length);
 8016678:	88e1      	ldrh	r1, [r4, #6]
 801667a:	484f      	ldr	r0, [pc, #316]	; (80167b8 <communicationTask+0x2b8>)
 801667c:	4418      	add	r0, r3
 801667e:	f000 fc97 	bl	8016fb0 <crc32>
							*((uint32_t *) &packet.data[OUTBOUND_HEADER]) = crc;
 8016682:	4621      	mov	r1, r4
 8016684:	f841 0f15 	str.w	r0, [r1, #21]!
							envelope_CDC_Transmit(OK, (uint8_t *)&packet.data[OUTBOUND_HEADER], PACKET_CRC);
 8016688:	2204      	movs	r2, #4
 801668a:	2000      	movs	r0, #0
 801668c:	f7ff fee8 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 8016690:	f7ff fed2 	bl	8016438 <packetReset>
				state = START;
 8016694:	2400      	movs	r4, #0
				seen = 0;
 8016696:	4625      	mov	r5, r4
							break;
 8016698:	e747      	b.n	801652a <communicationTask+0x2a>
							packet.offset = *((uint16_t *) &packet.data[PACKET_OFFSET]);
 801669a:	4a43      	ldr	r2, [pc, #268]	; (80167a8 <communicationTask+0x2a8>)
 801669c:	8a53      	ldrh	r3, [r2, #18]
 801669e:	8093      	strh	r3, [r2, #4]
							if (packet.offset + packet.length > sizeof(config))
 80166a0:	88d2      	ldrh	r2, [r2, #6]
 80166a2:	4413      	add	r3, r2
 80166a4:	2b64      	cmp	r3, #100	; 0x64
 80166a6:	d80a      	bhi.n	80166be <communicationTask+0x1be>
 80166a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ac:	f383 8811 	msr	BASEPRI, r3
 80166b0:	f3bf 8f6f 	isb	sy
 80166b4:	f3bf 8f4f 	dsb	sy
							ptr += INBOUND_HEADER;
 80166b8:	4940      	ldr	r1, [pc, #256]	; (80167bc <communicationTask+0x2bc>)
							for (i = INBOUND_HEADER; i < packet.length - PACKET_CRC; i++)
 80166ba:	2305      	movs	r3, #5
 80166bc:	e010      	b.n	80166e0 <communicationTask+0x1e0>
								envelope_CDC_Transmit(OUT_OF_RANGE, 0, 0);
 80166be:	2200      	movs	r2, #0
 80166c0:	4611      	mov	r1, r2
 80166c2:	2084      	movs	r0, #132	; 0x84
 80166c4:	f7ff fecc 	bl	8016460 <envelope_CDC_Transmit>
								packetReset();
 80166c8:	f7ff feb6 	bl	8016438 <packetReset>
				state = START;
 80166cc:	2400      	movs	r4, #0
				seen = 0;
 80166ce:	4625      	mov	r5, r4
								break;
 80166d0:	e72b      	b.n	801652a <communicationTask+0x2a>
								*ptr++ = packet.data[i];
 80166d2:	4a35      	ldr	r2, [pc, #212]	; (80167a8 <communicationTask+0x2a8>)
 80166d4:	441a      	add	r2, r3
 80166d6:	7b12      	ldrb	r2, [r2, #12]
 80166d8:	700a      	strb	r2, [r1, #0]
							for (i = INBOUND_HEADER; i < packet.length - PACKET_CRC; i++)
 80166da:	3301      	adds	r3, #1
 80166dc:	b29b      	uxth	r3, r3
								*ptr++ = packet.data[i];
 80166de:	3101      	adds	r1, #1
							for (i = INBOUND_HEADER; i < packet.length - PACKET_CRC; i++)
 80166e0:	4a31      	ldr	r2, [pc, #196]	; (80167a8 <communicationTask+0x2a8>)
 80166e2:	88d2      	ldrh	r2, [r2, #6]
 80166e4:	3a04      	subs	r2, #4
 80166e6:	4293      	cmp	r3, r2
 80166e8:	dbf3      	blt.n	80166d2 <communicationTask+0x1d2>
	__asm volatile
 80166ea:	2500      	movs	r5, #0
 80166ec:	f385 8811 	msr	BASEPRI, r5
							envelope_CDC_Transmit(OK, 0, 0);
 80166f0:	462a      	mov	r2, r5
 80166f2:	4629      	mov	r1, r5
 80166f4:	4628      	mov	r0, r5
 80166f6:	f7ff feb3 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 80166fa:	f7ff fe9d 	bl	8016438 <packetReset>
				state = START;
 80166fe:	462c      	mov	r4, r5
							break;
 8016700:	e713      	b.n	801652a <communicationTask+0x2a>
							HAL_FLASH_Unlock();
 8016702:	f7ee ff99 	bl	8005638 <HAL_FLASH_Unlock>
							FLASH_Erase_Sector(FLASH_SECTOR_11, FLASH_VOLTAGE_RANGE_3);
 8016706:	2102      	movs	r1, #2
 8016708:	200b      	movs	r0, #11
 801670a:	f7ef f93e 	bl	800598a <FLASH_Erase_Sector>
							src = (uint32_t)&config;
 801670e:	4c2a      	ldr	r4, [pc, #168]	; (80167b8 <communicationTask+0x2b8>)
							end = src + sizeof(config_t)+3;
 8016710:	f104 0667 	add.w	r6, r4, #103	; 0x67
							dst = (uint32_t)0x080E0000;
 8016714:	4d2a      	ldr	r5, [pc, #168]	; (80167c0 <communicationTask+0x2c0>)
							while (src < end)
 8016716:	e000      	b.n	801671a <communicationTask+0x21a>
									__asm__("BKPT");
 8016718:	be00      	bkpt	0x0000
							while (src < end)
 801671a:	42b4      	cmp	r4, r6
 801671c:	d20a      	bcs.n	8016734 <communicationTask+0x234>
								if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, dst, *(uint32_t *)src) == HAL_OK)
 801671e:	6822      	ldr	r2, [r4, #0]
 8016720:	2300      	movs	r3, #0
 8016722:	4629      	mov	r1, r5
 8016724:	2002      	movs	r0, #2
 8016726:	f7ee ffff 	bl	8005728 <HAL_FLASH_Program>
 801672a:	2800      	cmp	r0, #0
 801672c:	d1f4      	bne.n	8016718 <communicationTask+0x218>
									src += 4;
 801672e:	3404      	adds	r4, #4
									dst += 4;
 8016730:	3504      	adds	r5, #4
 8016732:	e7f2      	b.n	801671a <communicationTask+0x21a>
							HAL_FLASH_Lock();
 8016734:	f7ee ff98 	bl	8005668 <HAL_FLASH_Lock>
							envelope_CDC_Transmit(BURN_OK, 0, 0);
 8016738:	2200      	movs	r2, #0
 801673a:	4611      	mov	r1, r2
 801673c:	2004      	movs	r0, #4
 801673e:	f7ff fe8f 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 8016742:	f7ff fe79 	bl	8016438 <packetReset>
				state = START;
 8016746:	2400      	movs	r4, #0
				seen = 0;
 8016748:	4625      	mov	r5, r4
							break;
 801674a:	e6ee      	b.n	801652a <communicationTask+0x2a>
							envelope_CDC_Transmit(OK, config.identity, sizeof(config.identity));
 801674c:	223c      	movs	r2, #60	; 0x3c
 801674e:	491a      	ldr	r1, [pc, #104]	; (80167b8 <communicationTask+0x2b8>)
 8016750:	2000      	movs	r0, #0
 8016752:	f7ff fe85 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 8016756:	f7ff fe6f 	bl	8016438 <packetReset>
				state = START;
 801675a:	2400      	movs	r4, #0
				seen = 0;
 801675c:	4625      	mov	r5, r4
							break;
 801675e:	e6e4      	b.n	801652a <communicationTask+0x2a>
							envelope_CDC_Transmit(OK, config.version, sizeof(config.version));
 8016760:	220a      	movs	r2, #10
 8016762:	4918      	ldr	r1, [pc, #96]	; (80167c4 <communicationTask+0x2c4>)
 8016764:	2000      	movs	r0, #0
 8016766:	f7ff fe7b 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 801676a:	f7ff fe65 	bl	8016438 <packetReset>
				state = START;
 801676e:	2400      	movs	r4, #0
				seen = 0;
 8016770:	4625      	mov	r5, r4
							break;
 8016772:	e6da      	b.n	801652a <communicationTask+0x2a>
							envelope_CDC_Transmit(UNKNOWN_COMMAND, config.version, sizeof(config.version));
 8016774:	220a      	movs	r2, #10
 8016776:	4913      	ldr	r1, [pc, #76]	; (80167c4 <communicationTask+0x2c4>)
 8016778:	2083      	movs	r0, #131	; 0x83
 801677a:	f7ff fe71 	bl	8016460 <envelope_CDC_Transmit>
							packetReset();
 801677e:	f7ff fe5b 	bl	8016438 <packetReset>
				state = START;
 8016782:	2400      	movs	r4, #0
				seen = 0;
 8016784:	4625      	mov	r5, r4
							break;
 8016786:	e6d0      	b.n	801652a <communicationTask+0x2a>
		if (seen) osTimerStart(envelopeTimeoutTimerHandle, 50);
 8016788:	b945      	cbnz	r5, 801679c <communicationTask+0x29c>
		if (FIFO_EMPTY(FIFO))
 801678a:	4b08      	ldr	r3, [pc, #32]	; (80167ac <communicationTask+0x2ac>)
 801678c:	681a      	ldr	r2, [r3, #0]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	429a      	cmp	r2, r3
 8016792:	f47f aeca 	bne.w	801652a <communicationTask+0x2a>
			osThreadYield();
 8016796:	f7fa fc5b 	bl	8011050 <osThreadYield>
			continue;
 801679a:	e7f6      	b.n	801678a <communicationTask+0x28a>
		if (seen) osTimerStart(envelopeTimeoutTimerHandle, 50);
 801679c:	2132      	movs	r1, #50	; 0x32
 801679e:	4b04      	ldr	r3, [pc, #16]	; (80167b0 <communicationTask+0x2b0>)
 80167a0:	6818      	ldr	r0, [r3, #0]
 80167a2:	f7fa ff23 	bl	80115ec <osTimerStart>
 80167a6:	e7f0      	b.n	801678a <communicationTask+0x28a>
 80167a8:	20005f0c 	.word	0x20005f0c
 80167ac:	20006328 	.word	0x20006328
 80167b0:	20005c78 	.word	0x20005c78
 80167b4:	20005d14 	.word	0x20005d14
 80167b8:	200063a4 	.word	0x200063a4
 80167bc:	200063a9 	.word	0x200063a9
 80167c0:	080e0000 	.word	0x080e0000
 80167c4:	200063e0 	.word	0x200063e0

080167c8 <envelopeTimeout>:
#include "Tasks/communication.h"
#include "usbd_cdc_if.h"

/* envelopeTimeout function */
void envelopeTimeout(void const * argument)
{
 80167c8:	b508      	push	{r3, lr}
	packetReset();
 80167ca:	f7ff fe35 	bl	8016438 <packetReset>
	osTimerStop(envelopeTimeoutTimerHandle);
 80167ce:	4b02      	ldr	r3, [pc, #8]	; (80167d8 <envelopeTimeout+0x10>)
 80167d0:	6818      	ldr	r0, [r3, #0]
 80167d2:	f7fa ff39 	bl	8011648 <osTimerStop>
 80167d6:	bd08      	pop	{r3, pc}
 80167d8:	20005c78 	.word	0x20005c78

080167dc <heartBeat>:
#include "i2c.h"
#include "hx711.h"
#include "status.h"

void heartBeat(void *arg)
{
 80167dc:	b508      	push	{r3, lr}
uint8_t i, hubTurningFlag = 0;

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80167de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80167e2:	4815      	ldr	r0, [pc, #84]	; (8016838 <heartBeat+0x5c>)
 80167e4:	f7ef fb3f 	bl	8005e66 <HAL_GPIO_TogglePin>
uint8_t i, hubTurningFlag = 0;
 80167e8:	2100      	movs	r1, #0
	// see if any rollers are moving and turn on blue LED
	for (i=0; i < HUBS; i++)
 80167ea:	460b      	mov	r3, r1
 80167ec:	e001      	b.n	80167f2 <heartBeat+0x16>
 80167ee:	3301      	adds	r3, #1
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	2b03      	cmp	r3, #3
 80167f4:	d808      	bhi.n	8016808 <heartBeat+0x2c>
		if (hub[i].valid)
 80167f6:	4a11      	ldr	r2, [pc, #68]	; (801683c <heartBeat+0x60>)
 80167f8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80167fc:	7b12      	ldrb	r2, [r2, #12]
 80167fe:	f012 0f01 	tst.w	r2, #1
 8016802:	d0f4      	beq.n	80167ee <heartBeat+0x12>
			hubTurningFlag = 1;
 8016804:	2101      	movs	r1, #1
 8016806:	e7f2      	b.n	80167ee <heartBeat+0x12>

	if (hubTurningFlag)
 8016808:	b179      	cbz	r1, 801682a <heartBeat+0x4e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 801680a:	2201      	movs	r2, #1
 801680c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016810:	4809      	ldr	r0, [pc, #36]	; (8016838 <heartBeat+0x5c>)
 8016812:	f7ef fb22 	bl	8005e5a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);

	//	bool bme280p = bmp280.id == BME280_CHIP_ID;
	// update weather station
	if(!bmp280_read_fixed(&bmp280, &status.weather.temperature, &status.weather.pressure, &status.weather.humidity))
 8016816:	490a      	ldr	r1, [pc, #40]	; (8016840 <heartBeat+0x64>)
 8016818:	460b      	mov	r3, r1
 801681a:	1f0a      	subs	r2, r1, #4
 801681c:	3908      	subs	r1, #8
 801681e:	4809      	ldr	r0, [pc, #36]	; (8016844 <heartBeat+0x68>)
 8016820:	f000 fa09 	bl	8016c36 <bmp280_read_fixed>
 8016824:	b900      	cbnz	r0, 8016828 <heartBeat+0x4c>
	{
		__asm__("bkpt");
 8016826:	be00      	bkpt	0x0000
 8016828:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 801682a:	2200      	movs	r2, #0
 801682c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016830:	4801      	ldr	r0, [pc, #4]	; (8016838 <heartBeat+0x5c>)
 8016832:	f7ef fb12 	bl	8005e5a <HAL_GPIO_WritePin>
 8016836:	e7ee      	b.n	8016816 <heartBeat+0x3a>
 8016838:	40020c00 	.word	0x40020c00
 801683c:	2000640c 	.word	0x2000640c
 8016840:	20005d1c 	.word	0x20005d1c
 8016844:	20006370 	.word	0x20006370

08016848 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8016848:	b530      	push	{r4, r5, lr}
 801684a:	b087      	sub	sp, #28
 801684c:	4615      	mov	r5, r2
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801684e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 8016850:	0064      	lsls	r4, r4, #1
 8016852:	b2a4      	uxth	r4, r4

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8016854:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016856:	f241 3388 	movw	r3, #5000	; 0x1388
 801685a:	9302      	str	r3, [sp, #8]
 801685c:	2302      	movs	r3, #2
 801685e:	9301      	str	r3, [sp, #4]
 8016860:	ab05      	add	r3, sp, #20
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	2301      	movs	r3, #1
 8016866:	460a      	mov	r2, r1
 8016868:	4621      	mov	r1, r4
 801686a:	f7f1 f993 	bl	8007b94 <HAL_I2C_Mem_Read>
 801686e:	b948      	cbnz	r0, 8016884 <read_register16+0x3c>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8016870:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8016874:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801687c:	802b      	strh	r3, [r5, #0]
		return true;
 801687e:	2001      	movs	r0, #1
	} else
		return false;

}
 8016880:	b007      	add	sp, #28
 8016882:	bd30      	pop	{r4, r5, pc}
		return false;
 8016884:	2000      	movs	r0, #0
 8016886:	e7fb      	b.n	8016880 <read_register16+0x38>

08016888 <read_calibration_data>:
	else
		return 1;

}

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8016888:	b510      	push	{r4, lr}
 801688a:	4604      	mov	r4, r0

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801688c:	4602      	mov	r2, r0
 801688e:	2188      	movs	r1, #136	; 0x88
 8016890:	f7ff ffda 	bl	8016848 <read_register16>
 8016894:	4603      	mov	r3, r0
 8016896:	b908      	cbnz	r0, 801689c <read_calibration_data+0x14>

		return true;
	}

	return false;
}
 8016898:	4618      	mov	r0, r3
 801689a:	bd10      	pop	{r4, pc}
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801689c:	1ca2      	adds	r2, r4, #2
 801689e:	218a      	movs	r1, #138	; 0x8a
 80168a0:	4620      	mov	r0, r4
 80168a2:	f7ff ffd1 	bl	8016848 <read_register16>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2800      	cmp	r0, #0
 80168aa:	d0f5      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80168ac:	1d22      	adds	r2, r4, #4
 80168ae:	218c      	movs	r1, #140	; 0x8c
 80168b0:	4620      	mov	r0, r4
 80168b2:	f7ff ffc9 	bl	8016848 <read_register16>
 80168b6:	4603      	mov	r3, r0
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d0ed      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80168bc:	1da2      	adds	r2, r4, #6
 80168be:	218e      	movs	r1, #142	; 0x8e
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7ff ffc1 	bl	8016848 <read_register16>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d0e5      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80168cc:	f104 0208 	add.w	r2, r4, #8
 80168d0:	2190      	movs	r1, #144	; 0x90
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7ff ffb8 	bl	8016848 <read_register16>
 80168d8:	4603      	mov	r3, r0
 80168da:	2800      	cmp	r0, #0
 80168dc:	d0dc      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80168de:	f104 020a 	add.w	r2, r4, #10
 80168e2:	2192      	movs	r1, #146	; 0x92
 80168e4:	4620      	mov	r0, r4
 80168e6:	f7ff ffaf 	bl	8016848 <read_register16>
 80168ea:	4603      	mov	r3, r0
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d0d3      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80168f0:	f104 020c 	add.w	r2, r4, #12
 80168f4:	2194      	movs	r1, #148	; 0x94
 80168f6:	4620      	mov	r0, r4
 80168f8:	f7ff ffa6 	bl	8016848 <read_register16>
 80168fc:	4603      	mov	r3, r0
 80168fe:	2800      	cmp	r0, #0
 8016900:	d0ca      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8016902:	f104 020e 	add.w	r2, r4, #14
 8016906:	2196      	movs	r1, #150	; 0x96
 8016908:	4620      	mov	r0, r4
 801690a:	f7ff ff9d 	bl	8016848 <read_register16>
 801690e:	4603      	mov	r3, r0
 8016910:	2800      	cmp	r0, #0
 8016912:	d0c1      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8016914:	f104 0210 	add.w	r2, r4, #16
 8016918:	2198      	movs	r1, #152	; 0x98
 801691a:	4620      	mov	r0, r4
 801691c:	f7ff ff94 	bl	8016848 <read_register16>
 8016920:	4603      	mov	r3, r0
 8016922:	2800      	cmp	r0, #0
 8016924:	d0b8      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8016926:	f104 0212 	add.w	r2, r4, #18
 801692a:	219a      	movs	r1, #154	; 0x9a
 801692c:	4620      	mov	r0, r4
 801692e:	f7ff ff8b 	bl	8016848 <read_register16>
 8016932:	4603      	mov	r3, r0
 8016934:	2800      	cmp	r0, #0
 8016936:	d0af      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8016938:	f104 0214 	add.w	r2, r4, #20
 801693c:	219c      	movs	r1, #156	; 0x9c
 801693e:	4620      	mov	r0, r4
 8016940:	f7ff ff82 	bl	8016848 <read_register16>
 8016944:	4603      	mov	r3, r0
 8016946:	2800      	cmp	r0, #0
 8016948:	d0a6      	beq.n	8016898 <read_calibration_data+0x10>
			&& read_register16(dev, 0x9e,
 801694a:	f104 0216 	add.w	r2, r4, #22
 801694e:	219e      	movs	r1, #158	; 0x9e
 8016950:	4620      	mov	r0, r4
 8016952:	f7ff ff79 	bl	8016848 <read_register16>
 8016956:	4603      	mov	r3, r0
 8016958:	e79e      	b.n	8016898 <read_calibration_data+0x10>

0801695a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801695a:	b570      	push	{r4, r5, r6, lr}
 801695c:	b086      	sub	sp, #24
 801695e:	4604      	mov	r4, r0
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8016960:	f100 0218 	add.w	r2, r0, #24
	tx_buff = (dev->addr << 1);
 8016964:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8016966:	0049      	lsls	r1, r1, #1
 8016968:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801696a:	f241 3388 	movw	r3, #5000	; 0x1388
 801696e:	9302      	str	r3, [sp, #8]
 8016970:	2301      	movs	r3, #1
 8016972:	9301      	str	r3, [sp, #4]
 8016974:	9200      	str	r2, [sp, #0]
 8016976:	22a1      	movs	r2, #161	; 0xa1
 8016978:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801697a:	f7f1 f90b 	bl	8007b94 <HAL_I2C_Mem_Read>
 801697e:	b928      	cbnz	r0, 801698c <read_hum_calibration_data+0x32>
		return 0;
 8016980:	2500      	movs	r5, #0
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8016982:	b12d      	cbz	r5, 8016990 <read_hum_calibration_data+0x36>
		dev->dig_H5 = h5 >> 4;

		return true;
	}

	return false;
 8016984:	2600      	movs	r6, #0
}
 8016986:	4630      	mov	r0, r6
 8016988:	b006      	add	sp, #24
 801698a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 801698c:	2501      	movs	r5, #1
 801698e:	e7f8      	b.n	8016982 <read_hum_calibration_data+0x28>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8016990:	f104 021a 	add.w	r2, r4, #26
 8016994:	21e1      	movs	r1, #225	; 0xe1
 8016996:	4620      	mov	r0, r4
 8016998:	f7ff ff56 	bl	8016848 <read_register16>
 801699c:	4606      	mov	r6, r0
 801699e:	2800      	cmp	r0, #0
 80169a0:	d0f1      	beq.n	8016986 <read_hum_calibration_data+0x2c>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80169a2:	f104 021c 	add.w	r2, r4, #28
	tx_buff = (dev->addr << 1);
 80169a6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80169a8:	0049      	lsls	r1, r1, #1
 80169aa:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80169ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80169b0:	9302      	str	r3, [sp, #8]
 80169b2:	2301      	movs	r3, #1
 80169b4:	9301      	str	r3, [sp, #4]
 80169b6:	9200      	str	r2, [sp, #0]
 80169b8:	22e3      	movs	r2, #227	; 0xe3
 80169ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80169bc:	f7f1 f8ea 	bl	8007b94 <HAL_I2C_Mem_Read>
 80169c0:	b100      	cbz	r0, 80169c4 <read_hum_calibration_data+0x6a>
		return 1;
 80169c2:	2501      	movs	r5, #1
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80169c4:	b10d      	cbz	r5, 80169ca <read_hum_calibration_data+0x70>
	return false;
 80169c6:	2600      	movs	r6, #0
 80169c8:	e7dd      	b.n	8016986 <read_hum_calibration_data+0x2c>
			&& read_register16(dev, 0xe4, &h4)
 80169ca:	f10d 0216 	add.w	r2, sp, #22
 80169ce:	21e4      	movs	r1, #228	; 0xe4
 80169d0:	4620      	mov	r0, r4
 80169d2:	f7ff ff39 	bl	8016848 <read_register16>
 80169d6:	4606      	mov	r6, r0
 80169d8:	2800      	cmp	r0, #0
 80169da:	d0d4      	beq.n	8016986 <read_hum_calibration_data+0x2c>
			&& read_register16(dev, 0xe5, &h5)
 80169dc:	aa05      	add	r2, sp, #20
 80169de:	21e5      	movs	r1, #229	; 0xe5
 80169e0:	4620      	mov	r0, r4
 80169e2:	f7ff ff31 	bl	8016848 <read_register16>
 80169e6:	4606      	mov	r6, r0
 80169e8:	2800      	cmp	r0, #0
 80169ea:	d0cc      	beq.n	8016986 <read_hum_calibration_data+0x2c>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80169ec:	f104 0222 	add.w	r2, r4, #34	; 0x22
	tx_buff = (dev->addr << 1);
 80169f0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80169f2:	0049      	lsls	r1, r1, #1
 80169f4:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80169f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80169fa:	9302      	str	r3, [sp, #8]
 80169fc:	2301      	movs	r3, #1
 80169fe:	9301      	str	r3, [sp, #4]
 8016a00:	9200      	str	r2, [sp, #0]
 8016a02:	22e7      	movs	r2, #231	; 0xe7
 8016a04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016a06:	f7f1 f8c5 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016a0a:	b100      	cbz	r0, 8016a0e <read_hum_calibration_data+0xb4>
		return 1;
 8016a0c:	2501      	movs	r5, #1
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8016a0e:	b96d      	cbnz	r5, 8016a2c <read_hum_calibration_data+0xd2>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8016a10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016a14:	0113      	lsls	r3, r2, #4
 8016a16:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8016a1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8016a1e:	4313      	orrs	r3, r2
 8016a20:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 8016a22:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016a26:	091b      	lsrs	r3, r3, #4
 8016a28:	8423      	strh	r3, [r4, #32]
		return true;
 8016a2a:	e7ac      	b.n	8016986 <read_hum_calibration_data+0x2c>
	return false;
 8016a2c:	2600      	movs	r6, #0
 8016a2e:	e7aa      	b.n	8016986 <read_hum_calibration_data+0x2c>

08016a30 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8016a30:	b530      	push	{r4, r5, lr}
 8016a32:	b087      	sub	sp, #28
 8016a34:	ad06      	add	r5, sp, #24
 8016a36:	f805 2d01 	strb.w	r2, [r5, #-1]!
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8016a3a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 8016a3c:	0064      	lsls	r4, r4, #1
 8016a3e:	b2a4      	uxth	r4, r4

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8016a40:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016a42:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a46:	9302      	str	r3, [sp, #8]
 8016a48:	2301      	movs	r3, #1
 8016a4a:	9301      	str	r3, [sp, #4]
 8016a4c:	9500      	str	r5, [sp, #0]
 8016a4e:	460a      	mov	r2, r1
 8016a50:	4621      	mov	r1, r4
 8016a52:	f7f0 ffeb 	bl	8007a2c <HAL_I2C_Mem_Write>
 8016a56:	b100      	cbz	r0, 8016a5a <write_register8+0x2a>
		return false;
	else
		return true;
 8016a58:	2001      	movs	r0, #1
}
 8016a5a:	b007      	add	sp, #28
 8016a5c:	bd30      	pop	{r4, r5, pc}

08016a5e <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 8016a5e:	2303      	movs	r3, #3
 8016a60:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 8016a62:	2200      	movs	r2, #0
 8016a64:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8016a66:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8016a68:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8016a6a:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8016a6c:	7143      	strb	r3, [r0, #5]
 8016a6e:	4770      	bx	lr

08016a70 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8016a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a72:	b087      	sub	sp, #28

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8016a74:	8c82      	ldrh	r2, [r0, #36]	; 0x24
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8016a76:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 8016a7a:	b29b      	uxth	r3, r3
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d903      	bls.n	8016a88 <bmp280_init+0x18>

		return false;
 8016a80:	2600      	movs	r6, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 8016a82:	4630      	mov	r0, r6
 8016a84:	b007      	add	sp, #28
 8016a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a88:	460d      	mov	r5, r1
 8016a8a:	4604      	mov	r4, r0
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8016a8c:	3032      	adds	r0, #50	; 0x32
	tx_buff = (dev->addr << 1);
 8016a8e:	0052      	lsls	r2, r2, #1
 8016a90:	b291      	uxth	r1, r2
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8016a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8016a96:	9302      	str	r3, [sp, #8]
 8016a98:	2301      	movs	r3, #1
 8016a9a:	9301      	str	r3, [sp, #4]
 8016a9c:	9000      	str	r0, [sp, #0]
 8016a9e:	22d0      	movs	r2, #208	; 0xd0
 8016aa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016aa2:	f7f1 f877 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016aa6:	b950      	cbnz	r0, 8016abe <bmp280_init+0x4e>
		return 0;
 8016aa8:	2300      	movs	r3, #0
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d16f      	bne.n	8016b8e <bmp280_init+0x11e>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8016aae:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8016ab2:	2b58      	cmp	r3, #88	; 0x58
 8016ab4:	d005      	beq.n	8016ac2 <bmp280_init+0x52>
 8016ab6:	2b60      	cmp	r3, #96	; 0x60
 8016ab8:	d003      	beq.n	8016ac2 <bmp280_init+0x52>
		return false;
 8016aba:	2600      	movs	r6, #0
 8016abc:	e7e1      	b.n	8016a82 <bmp280_init+0x12>
		return 1;
 8016abe:	2301      	movs	r3, #1
 8016ac0:	e7f3      	b.n	8016aaa <bmp280_init+0x3a>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8016ac2:	22b6      	movs	r2, #182	; 0xb6
 8016ac4:	21e0      	movs	r1, #224	; 0xe0
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f7ff ffb2 	bl	8016a30 <write_register8>
 8016acc:	4606      	mov	r6, r0
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d15f      	bne.n	8016b92 <bmp280_init+0x122>
	tx_buff = (dev->addr << 1);
 8016ad2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8016ad4:	0049      	lsls	r1, r1, #1
 8016ad6:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8016ad8:	f241 3388 	movw	r3, #5000	; 0x1388
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	2301      	movs	r3, #1
 8016ae0:	9301      	str	r3, [sp, #4]
 8016ae2:	f10d 0217 	add.w	r2, sp, #23
 8016ae6:	9200      	str	r2, [sp, #0]
 8016ae8:	22f3      	movs	r2, #243	; 0xf3
 8016aea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016aec:	f7f1 f852 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	d137      	bne.n	8016b64 <bmp280_init+0xf4>
		return 0;
 8016af4:	4633      	mov	r3, r6
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1eb      	bne.n	8016ad2 <bmp280_init+0x62>
				&& (status & 1) == 0)
 8016afa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016afe:	f013 0f01 	tst.w	r3, #1
 8016b02:	d1e6      	bne.n	8016ad2 <bmp280_init+0x62>
	if (!read_calibration_data(dev)) {
 8016b04:	4620      	mov	r0, r4
 8016b06:	f7ff febf 	bl	8016888 <read_calibration_data>
 8016b0a:	4606      	mov	r6, r0
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d0b8      	beq.n	8016a82 <bmp280_init+0x12>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8016b10:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8016b14:	2b60      	cmp	r3, #96	; 0x60
 8016b16:	d027      	beq.n	8016b68 <bmp280_init+0xf8>
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8016b18:	796b      	ldrb	r3, [r5, #5]
 8016b1a:	786a      	ldrb	r2, [r5, #1]
 8016b1c:	0092      	lsls	r2, r2, #2
 8016b1e:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8016b22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016b26:	21f5      	movs	r1, #245	; 0xf5
 8016b28:	4620      	mov	r0, r4
 8016b2a:	f7ff ff81 	bl	8016a30 <write_register8>
 8016b2e:	bb90      	cbnz	r0, 8016b96 <bmp280_init+0x126>
	if (params->mode == BMP280_MODE_FORCED) {
 8016b30:	782b      	ldrb	r3, [r5, #0]
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d01f      	beq.n	8016b76 <bmp280_init+0x106>
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8016b36:	78ea      	ldrb	r2, [r5, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 8016b38:	78ab      	ldrb	r3, [r5, #2]
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8016b40:	b25b      	sxtb	r3, r3
 8016b42:	f995 2000 	ldrsb.w	r2, [r5]
 8016b46:	4313      	orrs	r3, r2
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8016b48:	b2df      	uxtb	r7, r3
	if (dev->id == BME280_CHIP_ID) {
 8016b4a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8016b4e:	2b60      	cmp	r3, #96	; 0x60
 8016b50:	d014      	beq.n	8016b7c <bmp280_init+0x10c>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8016b52:	463a      	mov	r2, r7
 8016b54:	21f4      	movs	r1, #244	; 0xf4
 8016b56:	4620      	mov	r0, r4
 8016b58:	f7ff ff6a 	bl	8016a30 <write_register8>
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	d090      	beq.n	8016a82 <bmp280_init+0x12>
		return false;
 8016b60:	2600      	movs	r6, #0
 8016b62:	e78e      	b.n	8016a82 <bmp280_init+0x12>
		return 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	e7c6      	b.n	8016af6 <bmp280_init+0x86>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f7ff fef6 	bl	801695a <read_hum_calibration_data>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	d1d2      	bne.n	8016b18 <bmp280_init+0xa8>
		return false;
 8016b72:	4606      	mov	r6, r0
 8016b74:	e785      	b.n	8016a82 <bmp280_init+0x12>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8016b76:	2300      	movs	r3, #0
 8016b78:	702b      	strb	r3, [r5, #0]
 8016b7a:	e7dc      	b.n	8016b36 <bmp280_init+0xc6>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8016b7c:	792a      	ldrb	r2, [r5, #4]
 8016b7e:	21f2      	movs	r1, #242	; 0xf2
 8016b80:	4620      	mov	r0, r4
 8016b82:	f7ff ff55 	bl	8016a30 <write_register8>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d0e3      	beq.n	8016b52 <bmp280_init+0xe2>
			return false;
 8016b8a:	2600      	movs	r6, #0
 8016b8c:	e779      	b.n	8016a82 <bmp280_init+0x12>
		return false;
 8016b8e:	2600      	movs	r6, #0
 8016b90:	e777      	b.n	8016a82 <bmp280_init+0x12>
		return false;
 8016b92:	2600      	movs	r6, #0
 8016b94:	e775      	b.n	8016a82 <bmp280_init+0x12>
		return false;
 8016b96:	2600      	movs	r6, #0
 8016b98:	e773      	b.n	8016a82 <bmp280_init+0x12>

08016b9a <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8016b9a:	b510      	push	{r4, lr}
 8016b9c:	b086      	sub	sp, #24
 8016b9e:	4604      	mov	r4, r0
	tx_buff = (dev->addr << 1);
 8016ba0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8016ba2:	0049      	lsls	r1, r1, #1
 8016ba4:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8016ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8016baa:	9302      	str	r3, [sp, #8]
 8016bac:	2301      	movs	r3, #1
 8016bae:	9301      	str	r3, [sp, #4]
 8016bb0:	f10d 0217 	add.w	r2, sp, #23
 8016bb4:	9200      	str	r2, [sp, #0]
 8016bb6:	22f4      	movs	r2, #244	; 0xf4
 8016bb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016bba:	f7f0 ffeb 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016bbe:	b920      	cbnz	r0, 8016bca <bmp280_force_measurement+0x30>
		return 0;
 8016bc0:	2300      	movs	r3, #0
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8016bc2:	b123      	cbz	r3, 8016bce <bmp280_force_measurement+0x34>
		return false;
 8016bc4:	2000      	movs	r0, #0
	ctrl |= BMP280_MODE_FORCED;
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}
	return true;
}
 8016bc6:	b006      	add	sp, #24
 8016bc8:	bd10      	pop	{r4, pc}
		return 1;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	e7f9      	b.n	8016bc2 <bmp280_force_measurement+0x28>
	ctrl &= ~0b11;  // clear two lower bits
 8016bce:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016bd2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
	ctrl |= BMP280_MODE_FORCED;
 8016bd6:	f042 0201 	orr.w	r2, r2, #1
 8016bda:	f88d 2017 	strb.w	r2, [sp, #23]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8016bde:	21f4      	movs	r1, #244	; 0xf4
 8016be0:	4620      	mov	r0, r4
 8016be2:	f7ff ff25 	bl	8016a30 <write_register8>
 8016be6:	b908      	cbnz	r0, 8016bec <bmp280_force_measurement+0x52>
	return true;
 8016be8:	2001      	movs	r0, #1
 8016bea:	e7ec      	b.n	8016bc6 <bmp280_force_measurement+0x2c>
		return false;
 8016bec:	2000      	movs	r0, #0
 8016bee:	e7ea      	b.n	8016bc6 <bmp280_force_measurement+0x2c>

08016bf0 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8016bf0:	b500      	push	{lr}
 8016bf2:	b087      	sub	sp, #28
	tx_buff = (dev->addr << 1);
 8016bf4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8016bf6:	0049      	lsls	r1, r1, #1
 8016bf8:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8016bfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016bfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8016c00:	9302      	str	r3, [sp, #8]
 8016c02:	2301      	movs	r3, #1
 8016c04:	9301      	str	r3, [sp, #4]
 8016c06:	f10d 0217 	add.w	r2, sp, #23
 8016c0a:	9200      	str	r2, [sp, #0]
 8016c0c:	22f3      	movs	r2, #243	; 0xf3
 8016c0e:	f7f0 ffc1 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016c12:	b940      	cbnz	r0, 8016c26 <bmp280_is_measuring+0x36>
		return 0;
 8016c14:	2300      	movs	r3, #0
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8016c16:	b953      	cbnz	r3, 8016c2e <bmp280_is_measuring+0x3e>
		return false;
	if (status & (1 << 3)) {
 8016c18:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016c1c:	f013 0f08 	tst.w	r3, #8
 8016c20:	d103      	bne.n	8016c2a <bmp280_is_measuring+0x3a>
		return true;
	}
	return false;
 8016c22:	2000      	movs	r0, #0
 8016c24:	e004      	b.n	8016c30 <bmp280_is_measuring+0x40>
		return 1;
 8016c26:	2301      	movs	r3, #1
 8016c28:	e7f5      	b.n	8016c16 <bmp280_is_measuring+0x26>
		return true;
 8016c2a:	2001      	movs	r0, #1
 8016c2c:	e000      	b.n	8016c30 <bmp280_is_measuring+0x40>
		return false;
 8016c2e:	2000      	movs	r0, #0
}
 8016c30:	b007      	add	sp, #28
 8016c32:	f85d fb04 	ldr.w	pc, [sp], #4

08016c36 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8016c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3a:	b08b      	sub	sp, #44	; 0x2c
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	460e      	mov	r6, r1
 8016c40:	9207      	str	r2, [sp, #28]
 8016c42:	461d      	mov	r5, r3
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8016c44:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8016c48:	2b60      	cmp	r3, #96	; 0x60
 8016c4a:	d003      	beq.n	8016c54 <bmp280_read_fixed+0x1e>
		if (humidity)
 8016c4c:	b115      	cbz	r5, 8016c54 <bmp280_read_fixed+0x1e>
			*humidity = 0;
 8016c4e:	2300      	movs	r3, #0
 8016c50:	602b      	str	r3, [r5, #0]
		humidity = NULL;
 8016c52:	461d      	mov	r5, r3
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8016c54:	2d00      	cmp	r5, #0
 8016c56:	f000 8169 	beq.w	8016f2c <bmp280_read_fixed+0x2f6>
 8016c5a:	2308      	movs	r3, #8
	tx_buff = (dev->addr << 1);
 8016c5c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8016c5e:	0049      	lsls	r1, r1, #1
 8016c60:	b289      	uxth	r1, r1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8016c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8016c66:	9202      	str	r2, [sp, #8]
 8016c68:	9301      	str	r3, [sp, #4]
 8016c6a:	ab08      	add	r3, sp, #32
 8016c6c:	9300      	str	r3, [sp, #0]
 8016c6e:	2301      	movs	r3, #1
 8016c70:	22f7      	movs	r2, #247	; 0xf7
 8016c72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016c74:	f7f0 ff8e 	bl	8007b94 <HAL_I2C_Mem_Read>
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	f040 8159 	bne.w	8016f30 <bmp280_read_fixed+0x2fa>
		return 0;
 8016c7e:	2300      	movs	r3, #0
	if (read_data(dev, 0xf7, data, size)) {
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f040 8159 	bne.w	8016f38 <bmp280_read_fixed+0x302>
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8016c86:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016c8a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
 8016c8e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8016c92:	ea4e 3e03 	orr.w	lr, lr, r3, lsl #12
 8016c96:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8016c9a:	ea4e 1e13 	orr.w	lr, lr, r3, lsr #4
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8016c9e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8016ca2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016ca6:	011b      	lsls	r3, r3, #4
 8016ca8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8016cac:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8016cb0:	ea43 1212 	orr.w	r2, r3, r2, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8016cb4:	8823      	ldrh	r3, [r4, #0]
 8016cb6:	0059      	lsls	r1, r3, #1
 8016cb8:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
			* (int32_t) dev->dig_T2) >> 11;
 8016cbc:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
 8016cc0:	fb0a f101 	mul.w	r1, sl, r1
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8016cc4:	ebc3 1322 	rsb	r3, r3, r2, asr #4
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8016cc8:	fb03 f303 	mul.w	r3, r3, r3
 8016ccc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8016cce:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 8016cd2:	fb0a fa03 	mul.w	sl, sl, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8016cd6:	ea4f 3aaa 	mov.w	sl, sl, asr #14
	*fine_temp = var1 + var2;
 8016cda:	eb0a 2ae1 	add.w	sl, sl, r1, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 8016cde:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8016ce2:	3380      	adds	r3, #128	; 0x80
 8016ce4:	121b      	asrs	r3, r3, #8

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8016ce6:	6033      	str	r3, [r6, #0]
	var1 = (int64_t) fine_temp - 128000;
 8016ce8:	4650      	mov	r0, sl
 8016cea:	17c1      	asrs	r1, r0, #31
 8016cec:	f5ba 3bfa 	subs.w	fp, sl, #128000	; 0x1f400
 8016cf0:	f141 3cff 	adc.w	ip, r1, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8016cf4:	fb0b f30c 	mul.w	r3, fp, ip
 8016cf8:	fbab 670b 	umull	r6, r7, fp, fp
 8016cfc:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8016d00:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 8016d04:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8016d08:	fb06 f309 	mul.w	r3, r6, r9
 8016d0c:	fb08 3307 	mla	r3, r8, r7, r3
 8016d10:	fba6 1208 	umull	r1, r2, r6, r8
 8016d14:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016d18:	4413      	add	r3, r2
 8016d1a:	9305      	str	r3, [sp, #20]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8016d1c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8016d20:	17d3      	asrs	r3, r2, #31
 8016d22:	fb0b f103 	mul.w	r1, fp, r3
 8016d26:	fb02 110c 	mla	r1, r2, ip, r1
 8016d2a:	fbab 2302 	umull	r2, r3, fp, r2
 8016d2e:	440b      	add	r3, r1
 8016d30:	ea4f 4943 	mov.w	r9, r3, lsl #17
 8016d34:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 8016d38:	ea4f 4842 	mov.w	r8, r2, lsl #17
 8016d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d40:	eb12 0208 	adds.w	r2, r2, r8
 8016d44:	eb43 0309 	adc.w	r3, r3, r9
 8016d48:	4690      	mov	r8, r2
 8016d4a:	4699      	mov	r9, r3
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8016d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d50:	2000      	movs	r0, #0
 8016d52:	00d1      	lsls	r1, r2, #3
 8016d54:	eb18 0200 	adds.w	r2, r8, r0
 8016d58:	eb49 0301 	adc.w	r3, r9, r1
 8016d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8016d60:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016d64:	17d3      	asrs	r3, r2, #31
 8016d66:	fb06 f103 	mul.w	r1, r6, r3
 8016d6a:	fb02 1107 	mla	r1, r2, r7, r1
 8016d6e:	fba6 2302 	umull	r2, r3, r6, r2
 8016d72:	440b      	add	r3, r1
 8016d74:	0a16      	lsrs	r6, r2, #8
 8016d76:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8016d7a:	121f      	asrs	r7, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8016d7c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8016d80:	17c1      	asrs	r1, r0, #31
 8016d82:	fb0b f301 	mul.w	r3, fp, r1
 8016d86:	fb00 330c 	mla	r3, r0, ip, r3
 8016d8a:	fbab 0100 	umull	r0, r1, fp, r0
 8016d8e:	4419      	add	r1, r3
 8016d90:	ea4f 3901 	mov.w	r9, r1, lsl #12
 8016d94:	ea49 5910 	orr.w	r9, r9, r0, lsr #20
 8016d98:	ea4f 3800 	mov.w	r8, r0, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8016d9c:	eb18 0206 	adds.w	r2, r8, r6
 8016da0:	eb49 0307 	adc.w	r3, r9, r7
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8016da4:	f112 0800 	adds.w	r8, r2, #0
 8016da8:	f543 4900 	adc.w	r9, r3, #32768	; 0x8000
 8016dac:	88e6      	ldrh	r6, [r4, #6]
 8016dae:	fba8 0106 	umull	r0, r1, r8, r6
 8016db2:	fb06 1109 	mla	r1, r6, r9, r1
 8016db6:	104a      	asrs	r2, r1, #1
 8016db8:	17cb      	asrs	r3, r1, #31
	if (var1 == 0) {
 8016dba:	ea52 0103 	orrs.w	r1, r2, r3
 8016dbe:	f000 80b9 	beq.w	8016f34 <bmp280_read_fixed+0x2fe>
	p = 1048576 - adc_press;
 8016dc2:	f5ce 1e80 	rsb	lr, lr, #1048576	; 0x100000
	p = (((p << 31) - var2) * 3125) / var1;
 8016dc6:	ea4f 096e 	mov.w	r9, lr, asr #1
 8016dca:	ea4f 78ce 	mov.w	r8, lr, lsl #31
 8016dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016dd2:	ebb8 0000 	subs.w	r0, r8, r0
 8016dd6:	eb69 0101 	sbc.w	r1, r9, r1
 8016dda:	4680      	mov	r8, r0
 8016ddc:	4689      	mov	r9, r1
 8016dde:	1806      	adds	r6, r0, r0
 8016de0:	eb41 0701 	adc.w	r7, r1, r1
 8016de4:	eb16 0b00 	adds.w	fp, r6, r0
 8016de8:	eb47 0c01 	adc.w	ip, r7, r1
 8016dec:	4666      	mov	r6, ip
 8016dee:	01b1      	lsls	r1, r6, #6
 8016df0:	465e      	mov	r6, fp
 8016df2:	ea41 619b 	orr.w	r1, r1, fp, lsr #26
 8016df6:	01b0      	lsls	r0, r6, #6
 8016df8:	eb1b 0b00 	adds.w	fp, fp, r0
 8016dfc:	eb4c 0c01 	adc.w	ip, ip, r1
 8016e00:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8016e04:	ea46 769b 	orr.w	r6, r6, fp, lsr #30
 8016e08:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8016e0c:	eb17 0008 	adds.w	r0, r7, r8
 8016e10:	eb46 0109 	adc.w	r1, r6, r9
 8016e14:	008e      	lsls	r6, r1, #2
 8016e16:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
 8016e1a:	0087      	lsls	r7, r0, #2
 8016e1c:	eb17 0008 	adds.w	r0, r7, r8
 8016e20:	eb46 0109 	adc.w	r1, r6, r9
 8016e24:	f001 fd0e 	bl	8018844 <__aeabi_ldivmod>
 8016e28:	4683      	mov	fp, r0
 8016e2a:	468c      	mov	ip, r1
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8016e2c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8016e30:	17d3      	asrs	r3, r2, #31
 8016e32:	0b46      	lsrs	r6, r0, #13
 8016e34:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
 8016e38:	134f      	asrs	r7, r1, #13
 8016e3a:	fb02 fe07 	mul.w	lr, r2, r7
 8016e3e:	fb06 ee03 	mla	lr, r6, r3, lr
 8016e42:	fba2 1206 	umull	r1, r2, r2, r6
 8016e46:	4472      	add	r2, lr
 8016e48:	fb06 f302 	mul.w	r3, r6, r2
 8016e4c:	fb07 3701 	mla	r7, r7, r1, r3
 8016e50:	fba6 2301 	umull	r2, r3, r6, r1
 8016e54:	443b      	add	r3, r7
 8016e56:	ea4f 6852 	mov.w	r8, r2, lsr #25
 8016e5a:	ea48 18c3 	orr.w	r8, r8, r3, lsl #7
 8016e5e:	ea4f 6963 	mov.w	r9, r3, asr #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8016e62:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8016e66:	17d3      	asrs	r3, r2, #31
 8016e68:	fb0b f603 	mul.w	r6, fp, r3
 8016e6c:	fb02 660c 	mla	r6, r2, ip, r6
 8016e70:	fbab 2302 	umull	r2, r3, fp, r2
 8016e74:	4433      	add	r3, r6
 8016e76:	0cd6      	lsrs	r6, r2, #19
 8016e78:	ea46 3643 	orr.w	r6, r6, r3, lsl #13
 8016e7c:	14df      	asrs	r7, r3, #19
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8016e7e:	eb1b 0008 	adds.w	r0, fp, r8
 8016e82:	eb4c 0109 	adc.w	r1, ip, r9
 8016e86:	eb10 0806 	adds.w	r8, r0, r6
 8016e8a:	eb41 0907 	adc.w	r9, r1, r7
 8016e8e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8016e92:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 8016e96:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8016e9a:	0102      	lsls	r2, r0, #4
	return p;
 8016e9c:	4413      	add	r3, r2
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8016e9e:	9a07      	ldr	r2, [sp, #28]
 8016ea0:	6013      	str	r3, [r2, #0]

	if (humidity) {
 8016ea2:	2d00      	cmp	r5, #0
 8016ea4:	d04a      	beq.n	8016f3c <bmp280_read_fixed+0x306>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8016ea6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8016eaa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016eae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8016eb2:	f5aa 3a96 	sub.w	sl, sl, #76800	; 0x12c00
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8016eb6:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
 8016eba:	0509      	lsls	r1, r1, #20
 8016ebc:	ebc1 3282 	rsb	r2, r1, r2, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8016ec0:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 8016ec4:	fb01 211a 	mls	r1, r1, sl, r2
 8016ec8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8016ecc:	13c9      	asrs	r1, r1, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8016ece:	f994 2022 	ldrsb.w	r2, [r4, #34]	; 0x22
 8016ed2:	fb02 f20a 	mul.w	r2, r2, sl
 8016ed6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8016ed8:	7f23      	ldrb	r3, [r4, #28]
 8016eda:	fb03 f30a 	mul.w	r3, r3, sl
 8016ede:	12db      	asrs	r3, r3, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8016ee0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8016ee4:	fb03 f302 	mul.w	r3, r3, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8016ee8:	129b      	asrs	r3, r3, #10
 8016eea:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8016eee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8016ef2:	fb03 f302 	mul.w	r3, r3, r2
 8016ef6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016efa:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8016efc:	fb03 f301 	mul.w	r3, r3, r1
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8016f00:	13da      	asrs	r2, r3, #15
 8016f02:	fb02 f202 	mul.w	r2, r2, r2
 8016f06:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 8016f08:	7e21      	ldrb	r1, [r4, #24]
 8016f0a:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 8016f0e:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8016f12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8016f16:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8016f1a:	bfa8      	it	ge
 8016f1c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 8016f20:	131b      	asrs	r3, r3, #12
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8016f22:	602b      	str	r3, [r5, #0]
	}

	return true;
 8016f24:	2001      	movs	r0, #1
}
 8016f26:	b00b      	add	sp, #44	; 0x2c
 8016f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 8016f2c:	2306      	movs	r3, #6
 8016f2e:	e695      	b.n	8016c5c <bmp280_read_fixed+0x26>
		return 1;
 8016f30:	2301      	movs	r3, #1
 8016f32:	e6a5      	b.n	8016c80 <bmp280_read_fixed+0x4a>
		return 0;  // avoid exception caused by division by zero
 8016f34:	2300      	movs	r3, #0
 8016f36:	e7b2      	b.n	8016e9e <bmp280_read_fixed+0x268>
		return false;
 8016f38:	2000      	movs	r0, #0
 8016f3a:	e7f4      	b.n	8016f26 <bmp280_read_fixed+0x2f0>
	return true;
 8016f3c:	2001      	movs	r0, #1
 8016f3e:	e7f2      	b.n	8016f26 <bmp280_read_fixed+0x2f0>

08016f40 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8016f40:	b570      	push	{r4, r5, r6, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	460e      	mov	r6, r1
 8016f46:	4615      	mov	r5, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8016f48:	461c      	mov	r4, r3
 8016f4a:	b343      	cbz	r3, 8016f9e <bmp280_read_float+0x5e>
 8016f4c:	ab01      	add	r3, sp, #4
 8016f4e:	aa02      	add	r2, sp, #8
 8016f50:	a903      	add	r1, sp, #12
 8016f52:	f7ff fe70 	bl	8016c36 <bmp280_read_fixed>
 8016f56:	4603      	mov	r3, r0
 8016f58:	b1f0      	cbz	r0, 8016f98 <bmp280_read_float+0x58>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8016f5a:	eddd 7a03 	vldr	s15, [sp, #12]
 8016f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f62:	eddf 6a10 	vldr	s13, [pc, #64]	; 8016fa4 <bmp280_read_float+0x64>
 8016f66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016f6a:	ed86 7a00 	vstr	s14, [r6]
		*pressure = (float) fixed_pressure / 256;
 8016f6e:	eddd 7a02 	vldr	s15, [sp, #8]
 8016f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f76:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016fa8 <bmp280_read_float+0x68>
 8016f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f7e:	edc5 7a00 	vstr	s15, [r5]
		if (humidity)
 8016f82:	b14c      	cbz	r4, 8016f98 <bmp280_read_float+0x58>
			*humidity = (float) fixed_humidity / 1024;
 8016f84:	eddd 7a01 	vldr	s15, [sp, #4]
 8016f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f8c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8016fac <bmp280_read_float+0x6c>
 8016f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f94:	edc4 7a00 	vstr	s15, [r4]
		return true;
	}

	return false;
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	b004      	add	sp, #16
 8016f9c:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	e7d5      	b.n	8016f4e <bmp280_read_float+0xe>
 8016fa2:	bf00      	nop
 8016fa4:	42c80000 	.word	0x42c80000
 8016fa8:	3b800000 	.word	0x3b800000
 8016fac:	3a800000 	.word	0x3a800000

08016fb0 <crc32>:
  0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4, 
  0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4, 
};

uint32_t crc32(uint8_t * pData, uint32_t DataLength)
{
 8016fb0:	b430      	push	{r4, r5}
 8016fb2:	4605      	mov	r5, r0
    uint32_t Checksum = 0xFFFFFFFF;
    for(unsigned int i=0; i < DataLength; i++)
 8016fb4:	2300      	movs	r3, #0
    uint32_t Checksum = 0xFFFFFFFF;
 8016fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    for(unsigned int i=0; i < DataLength; i++)
 8016fba:	e008      	b.n	8016fce <crc32+0x1e>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
        top ^= pData[i];
 8016fbc:	5cea      	ldrb	r2, [r5, r3]
 8016fbe:	ea82 6210 	eor.w	r2, r2, r0, lsr #24
        Checksum = (Checksum << 8) ^ crc_table[top];
 8016fc2:	4c05      	ldr	r4, [pc, #20]	; (8016fd8 <crc32+0x28>)
 8016fc4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016fc8:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
    for(unsigned int i=0; i < DataLength; i++)
 8016fcc:	3301      	adds	r3, #1
 8016fce:	428b      	cmp	r3, r1
 8016fd0:	d3f4      	bcc.n	8016fbc <crc32+0xc>
    }
    return Checksum;
}
 8016fd2:	bc30      	pop	{r4, r5}
 8016fd4:	4770      	bx	lr
 8016fd6:	bf00      	nop
 8016fd8:	0801ca58 	.word	0x0801ca58

08016fdc <_write>:

#include "debug.h"
#include "stm32f4xx.h"

int _write(int file, char *ptr, int len)
{
 8016fdc:	b430      	push	{r4, r5}
  // Implement your write code here, this is used by puts and printf for example
  int i=0;
  for(i=0 ; i<len ; i++)
 8016fde:	2400      	movs	r4, #0
 8016fe0:	e00a      	b.n	8016ff8 <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8016fe2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8016fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d0f9      	beq.n	8016fe2 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8016fee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016ff2:	7019      	strb	r1, [r3, #0]
 8016ff4:	3401      	adds	r4, #1
    ITM_SendChar((*ptr++));
 8016ff6:	4629      	mov	r1, r5
  for(i=0 ; i<len ; i++)
 8016ff8:	4294      	cmp	r4, r2
 8016ffa:	da10      	bge.n	801701e <_write+0x42>
    ITM_SendChar((*ptr++));
 8016ffc:	1c4d      	adds	r5, r1, #1
 8016ffe:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8017008:	f013 0f01 	tst.w	r3, #1
 801700c:	d0f2      	beq.n	8016ff4 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801700e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017012:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017016:	f013 0f01 	tst.w	r3, #1
 801701a:	d1e3      	bne.n	8016fe4 <_write+0x8>
 801701c:	e7ea      	b.n	8016ff4 <_write+0x18>
  return len;
}
 801701e:	4610      	mov	r0, r2
 8017020:	bc30      	pop	{r4, r5}
 8017022:	4770      	bx	lr

08017024 <hubTimeout>:
	}
}

// called when a hub times out between trigger intervals so we consider it as stalled
void hubTimeout(uint8_t hubIndex)
{
 8017024:	b430      	push	{r4, r5}
	hub[hubIndex].valid = 0;
 8017026:	490b      	ldr	r1, [pc, #44]	; (8017054 <hubTimeout+0x30>)
 8017028:	0102      	lsls	r2, r0, #4
 801702a:	188c      	adds	r4, r1, r2
 801702c:	7b25      	ldrb	r5, [r4, #12]
 801702e:	f36f 0500 	bfc	r5, #0, #1
 8017032:	7325      	strb	r5, [r4, #12]
	hub[hubIndex].lastTimeStamp = 0;
 8017034:	2300      	movs	r3, #0
 8017036:	6063      	str	r3, [r4, #4]
	hub[hubIndex].thisTimeStamp = 0;
 8017038:	60a3      	str	r3, [r4, #8]
	status.hub[hubIndex].interval = 0;
 801703a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801703e:	0084      	lsls	r4, r0, #2
 8017040:	4805      	ldr	r0, [pc, #20]	; (8017058 <hubTimeout+0x34>)
 8017042:	4420      	add	r0, r4
 8017044:	60c3      	str	r3, [r0, #12]
	hub[hubIndex].watchDogEnabled = 0;
 8017046:	5c88      	ldrb	r0, [r1, r2]
 8017048:	f363 0000 	bfi	r0, r3, #0, #1
 801704c:	5488      	strb	r0, [r1, r2]

	// turn watch dog off for this roller
}
 801704e:	bc30      	pop	{r4, r5}
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop
 8017054:	2000640c 	.word	0x2000640c
 8017058:	20005d14 	.word	0x20005d14

0801705c <hubWatchDog>:
{
 801705c:	b510      	push	{r4, lr}
	for (i = 0; i < HUBS; i++)
 801705e:	2400      	movs	r4, #0
 8017060:	e001      	b.n	8017066 <hubWatchDog+0xa>
 8017062:	3401      	adds	r4, #1
 8017064:	b2e4      	uxtb	r4, r4
 8017066:	2c03      	cmp	r4, #3
 8017068:	d812      	bhi.n	8017090 <hubWatchDog+0x34>
		if (hub[i].watchDogEnabled)
 801706a:	0123      	lsls	r3, r4, #4
 801706c:	4a09      	ldr	r2, [pc, #36]	; (8017094 <hubWatchDog+0x38>)
 801706e:	5cd3      	ldrb	r3, [r2, r3]
 8017070:	f013 0f01 	tst.w	r3, #1
 8017074:	d0f5      	beq.n	8017062 <hubWatchDog+0x6>
			hub[i].watchDogCount += HUB_WATCH_DOG_INTERVAL_MS;
 8017076:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801707a:	8853      	ldrh	r3, [r2, #2]
 801707c:	330a      	adds	r3, #10
 801707e:	b29b      	uxth	r3, r3
 8017080:	8053      	strh	r3, [r2, #2]
			if (hub[i].watchDogCount >= HUB_WATCH_DOG_TIMEOUT_MS)
 8017082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017086:	d3ec      	bcc.n	8017062 <hubWatchDog+0x6>
				hubTimeout(i);
 8017088:	4620      	mov	r0, r4
 801708a:	f7ff ffcb 	bl	8017024 <hubTimeout>
 801708e:	e7e8      	b.n	8017062 <hubWatchDog+0x6>
}
 8017090:	bd10      	pop	{r4, pc}
 8017092:	bf00      	nop
 8017094:	2000640c 	.word	0x2000640c

08017098 <hubUpdate>:

// when a trigger pulse comes in this routine is called to update the hub details
void hubUpdate(uint8_t hubIndex, uint32_t now)
{
 8017098:	b410      	push	{r4}
	hub[hubIndex].thisTimeStamp = now;
 801709a:	4b12      	ldr	r3, [pc, #72]	; (80170e4 <hubUpdate+0x4c>)
 801709c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80170a0:	6099      	str	r1, [r3, #8]
	if (hub[hubIndex].valid)
 80170a2:	7b1b      	ldrb	r3, [r3, #12]
 80170a4:	f013 0f01 	tst.w	r3, #1
 80170a8:	d00a      	beq.n	80170c0 <hubUpdate+0x28>
		status.hub[hubIndex].interval = PERIOD(hub[hubIndex].thisTimeStamp, hub[hubIndex].lastTimeStamp);
 80170aa:	4b0e      	ldr	r3, [pc, #56]	; (80170e4 <hubUpdate+0x4c>)
 80170ac:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80170b0:	685a      	ldr	r2, [r3, #4]
 80170b2:	1a8a      	subs	r2, r1, r2
 80170b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80170b8:	009c      	lsls	r4, r3, #2
 80170ba:	4b0b      	ldr	r3, [pc, #44]	; (80170e8 <hubUpdate+0x50>)
 80170bc:	4423      	add	r3, r4
 80170be:	60da      	str	r2, [r3, #12]

	hub[hubIndex].lastTimeStamp = hub[hubIndex].thisTimeStamp;
 80170c0:	4b08      	ldr	r3, [pc, #32]	; (80170e4 <hubUpdate+0x4c>)
 80170c2:	0100      	lsls	r0, r0, #4
 80170c4:	181a      	adds	r2, r3, r0
 80170c6:	6051      	str	r1, [r2, #4]
	hub[hubIndex].valid = 1;
 80170c8:	7b11      	ldrb	r1, [r2, #12]
 80170ca:	f041 0101 	orr.w	r1, r1, #1
 80170ce:	7311      	strb	r1, [r2, #12]

	// reset watch dog
	hub[hubIndex].watchDogCount = 0;
 80170d0:	2100      	movs	r1, #0
 80170d2:	8051      	strh	r1, [r2, #2]
	hub[hubIndex].watchDogEnabled = 1;
 80170d4:	5c1a      	ldrb	r2, [r3, r0]
 80170d6:	f042 0201 	orr.w	r2, r2, #1
 80170da:	541a      	strb	r2, [r3, r0]
}
 80170dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop
 80170e4:	2000640c 	.word	0x2000640c
 80170e8:	20005d14 	.word	0x20005d14

080170ec <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
	TIM1->SR &= ~TIM_SR_UIF;
 80170ec:	4a04      	ldr	r2, [pc, #16]	; (8017100 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80170ee:	6913      	ldr	r3, [r2, #16]
 80170f0:	f023 0301 	bic.w	r3, r3, #1
 80170f4:	6113      	str	r3, [r2, #16]
	msw++;
 80170f6:	4a03      	ldr	r2, [pc, #12]	; (8017104 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80170f8:	8813      	ldrh	r3, [r2, #0]
 80170fa:	3301      	adds	r3, #1
 80170fc:	8013      	strh	r3, [r2, #0]
 80170fe:	4770      	bx	lr
 8017100:	40010000 	.word	0x40010000
 8017104:	20006408 	.word	0x20006408

08017108 <TIM1_CC_IRQHandler>:
}

//void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
void TIM1_CC_IRQHandler(void)
{
 8017108:	b508      	push	{r3, lr}
uint16_t ccr;

	// capture overflow?
	if ((TIM1->SR & TIM_SR_CC1OF) != 0)
 801710a:	4b41      	ldr	r3, [pc, #260]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 801710c:	691b      	ldr	r3, [r3, #16]
 801710e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017112:	d002      	beq.n	801711a <TIM1_CC_IRQHandler+0x12>
		TIM1->SR = 0;
 8017114:	2200      	movs	r2, #0
 8017116:	4b3e      	ldr	r3, [pc, #248]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 8017118:	611a      	str	r2, [r3, #16]

	if ((TIM1->SR & TIM_SR_CC1IF) != 0)
 801711a:	4b3d      	ldr	r3, [pc, #244]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 801711c:	691b      	ldr	r3, [r3, #16]
 801711e:	f013 0f02 	tst.w	r3, #2
 8017122:	d016      	beq.n	8017152 <TIM1_CC_IRQHandler+0x4a>
	{
		ccr = TIM1->CCR1;
 8017124:	4a3a      	ldr	r2, [pc, #232]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 8017126:	6b53      	ldr	r3, [r2, #52]	; 0x34
		if (TIM1->SR & TIM_SR_UIF)
 8017128:	6912      	ldr	r2, [r2, #16]
 801712a:	f012 0f01 	tst.w	r2, #1
 801712e:	d008      	beq.n	8017142 <TIM1_CC_IRQHandler+0x3a>
			if (ccr >= 0)
			{
				msw++;
 8017130:	4938      	ldr	r1, [pc, #224]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 8017132:	880a      	ldrh	r2, [r1, #0]
 8017134:	3201      	adds	r2, #1
 8017136:	800a      	strh	r2, [r1, #0]
				TIM1->SR &= ~TIM_SR_UIF;
 8017138:	4935      	ldr	r1, [pc, #212]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 801713a:	690a      	ldr	r2, [r1, #16]
 801713c:	f022 0201 	bic.w	r2, r2, #1
 8017140:	610a      	str	r2, [r1, #16]
			}
		hubUpdate(0, (msw << 16) + ccr);
 8017142:	4a34      	ldr	r2, [pc, #208]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 8017144:	8811      	ldrh	r1, [r2, #0]
 8017146:	b29b      	uxth	r3, r3
 8017148:	eb03 4101 	add.w	r1, r3, r1, lsl #16
 801714c:	2000      	movs	r0, #0
 801714e:	f7ff ffa3 	bl	8017098 <hubUpdate>
	}

	if ((TIM1->SR & TIM_SR_CC2IF) != 0)
 8017152:	4b2f      	ldr	r3, [pc, #188]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 8017154:	691b      	ldr	r3, [r3, #16]
 8017156:	f013 0f04 	tst.w	r3, #4
 801715a:	d019      	beq.n	8017190 <TIM1_CC_IRQHandler+0x88>
	{
		ccr = TIM1->CCR2;
 801715c:	4a2c      	ldr	r2, [pc, #176]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 801715e:	6b93      	ldr	r3, [r2, #56]	; 0x38
		if (TIM1->SR & TIM_SR_UIF)
 8017160:	6912      	ldr	r2, [r2, #16]
 8017162:	f012 0f01 	tst.w	r2, #1
 8017166:	d00b      	beq.n	8017180 <TIM1_CC_IRQHandler+0x78>
			if (ccr < 0x8000)
 8017168:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 801716c:	d108      	bne.n	8017180 <TIM1_CC_IRQHandler+0x78>
			{
				msw++;
 801716e:	4929      	ldr	r1, [pc, #164]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 8017170:	880a      	ldrh	r2, [r1, #0]
 8017172:	3201      	adds	r2, #1
 8017174:	800a      	strh	r2, [r1, #0]
				TIM1->SR &= ~TIM_SR_UIF;
 8017176:	4926      	ldr	r1, [pc, #152]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 8017178:	690a      	ldr	r2, [r1, #16]
 801717a:	f022 0201 	bic.w	r2, r2, #1
 801717e:	610a      	str	r2, [r1, #16]
			}
		hubUpdate(1, ((msw << 16) + ccr));
 8017180:	4a24      	ldr	r2, [pc, #144]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 8017182:	8811      	ldrh	r1, [r2, #0]
 8017184:	b29b      	uxth	r3, r3
 8017186:	eb03 4101 	add.w	r1, r3, r1, lsl #16
 801718a:	2001      	movs	r0, #1
 801718c:	f7ff ff84 	bl	8017098 <hubUpdate>
	}

	if ((TIM1->SR & TIM_SR_CC3IF) != 0)
 8017190:	4b1f      	ldr	r3, [pc, #124]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 8017192:	691b      	ldr	r3, [r3, #16]
 8017194:	f013 0f08 	tst.w	r3, #8
 8017198:	d019      	beq.n	80171ce <TIM1_CC_IRQHandler+0xc6>
	{
		ccr = TIM1->CCR3;
 801719a:	4a1d      	ldr	r2, [pc, #116]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 801719c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		if (TIM1->SR & TIM_SR_UIF)
 801719e:	6912      	ldr	r2, [r2, #16]
 80171a0:	f012 0f01 	tst.w	r2, #1
 80171a4:	d00b      	beq.n	80171be <TIM1_CC_IRQHandler+0xb6>
			if (ccr < 0x8000)
 80171a6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80171aa:	d108      	bne.n	80171be <TIM1_CC_IRQHandler+0xb6>
			{
				msw++;
 80171ac:	4919      	ldr	r1, [pc, #100]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 80171ae:	880a      	ldrh	r2, [r1, #0]
 80171b0:	3201      	adds	r2, #1
 80171b2:	800a      	strh	r2, [r1, #0]
				TIM1->SR &= ~TIM_SR_UIF;
 80171b4:	4916      	ldr	r1, [pc, #88]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 80171b6:	690a      	ldr	r2, [r1, #16]
 80171b8:	f022 0201 	bic.w	r2, r2, #1
 80171bc:	610a      	str	r2, [r1, #16]
			}
		hubUpdate(2, ((msw << 16) + ccr));
 80171be:	4a15      	ldr	r2, [pc, #84]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 80171c0:	8811      	ldrh	r1, [r2, #0]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	eb03 4101 	add.w	r1, r3, r1, lsl #16
 80171c8:	2002      	movs	r0, #2
 80171ca:	f7ff ff65 	bl	8017098 <hubUpdate>
	}

	if ((TIM1->SR & TIM_SR_CC4IF) != 0)
 80171ce:	4b10      	ldr	r3, [pc, #64]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 80171d0:	691b      	ldr	r3, [r3, #16]
 80171d2:	f013 0f10 	tst.w	r3, #16
 80171d6:	d019      	beq.n	801720c <TIM1_CC_IRQHandler+0x104>
	{
		ccr = TIM1->CCR4;
 80171d8:	4a0d      	ldr	r2, [pc, #52]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 80171da:	6c13      	ldr	r3, [r2, #64]	; 0x40
		if (TIM1->SR & TIM_SR_UIF)
 80171dc:	6912      	ldr	r2, [r2, #16]
 80171de:	f012 0f01 	tst.w	r2, #1
 80171e2:	d00b      	beq.n	80171fc <TIM1_CC_IRQHandler+0xf4>
			if (ccr < 0x8000)
 80171e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80171e8:	d108      	bne.n	80171fc <TIM1_CC_IRQHandler+0xf4>
			{
				msw++;
 80171ea:	490a      	ldr	r1, [pc, #40]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 80171ec:	880a      	ldrh	r2, [r1, #0]
 80171ee:	3201      	adds	r2, #1
 80171f0:	800a      	strh	r2, [r1, #0]
				TIM1->SR &= ~TIM_SR_UIF;
 80171f2:	4907      	ldr	r1, [pc, #28]	; (8017210 <TIM1_CC_IRQHandler+0x108>)
 80171f4:	690a      	ldr	r2, [r1, #16]
 80171f6:	f022 0201 	bic.w	r2, r2, #1
 80171fa:	610a      	str	r2, [r1, #16]
			}
		hubUpdate(3, ((msw << 16) + ccr));
 80171fc:	4a05      	ldr	r2, [pc, #20]	; (8017214 <TIM1_CC_IRQHandler+0x10c>)
 80171fe:	8811      	ldrh	r1, [r2, #0]
 8017200:	b29b      	uxth	r3, r3
 8017202:	eb03 4101 	add.w	r1, r3, r1, lsl #16
 8017206:	2003      	movs	r0, #3
 8017208:	f7ff ff46 	bl	8017098 <hubUpdate>
 801720c:	bd08      	pop	{r3, pc}
 801720e:	bf00      	nop
 8017210:	40010000 	.word	0x40010000
 8017214:	20006408 	.word	0x20006408

08017218 <TIM8_CC_IRQHandler>:
#define PERIOD(now, then) (now < then) ? (now + (0xffffffff - then) + 1) : (now - then)

HX711 hx[4];

void TIM8_CC_IRQHandler(void)
{
 8017218:	b508      	push	{r3, lr}
	if ((TIM8->SR & TIM_SR_CC1IF) != 0)
 801721a:	4b3c      	ldr	r3, [pc, #240]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 801721c:	691b      	ldr	r3, [r3, #16]
 801721e:	f013 0f02 	tst.w	r3, #2
 8017222:	d01f      	beq.n	8017264 <TIM8_CC_IRQHandler+0x4c>
	{
		if (hx[0].bitCount < 24)
 8017224:	4b3a      	ldr	r3, [pc, #232]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 8017226:	699b      	ldr	r3, [r3, #24]
 8017228:	2b17      	cmp	r3, #23
 801722a:	dd20      	ble.n	801726e <TIM8_CC_IRQHandler+0x56>
				TIM8->CCR1 = TIM8->CNT + 10;
			}
		}
		else
		{
			if (hx[0].gainCount < hx[0].gain)
 801722c:	4b38      	ldr	r3, [pc, #224]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 801722e:	69da      	ldr	r2, [r3, #28]
 8017230:	691b      	ldr	r3, [r3, #16]
 8017232:	429a      	cmp	r2, r3
 8017234:	db4a      	blt.n	80172cc <TIM8_CC_IRQHandler+0xb4>
					TIM8->CCR1 = TIM8->CNT + 10;
				}
			}
			else
			{
				status.hub[0].loadCell = hx[0].value ^ 0x800000;
 8017236:	4b36      	ldr	r3, [pc, #216]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 8017238:	695b      	ldr	r3, [r3, #20]
 801723a:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 801723e:	4a35      	ldr	r2, [pc, #212]	; (8017314 <TIM8_CC_IRQHandler+0xfc>)
 8017240:	6113      	str	r3, [r2, #16]
				// disable timer
				TIM8->CCER &= ~TIM_CCER_CC1E;
 8017242:	4b32      	ldr	r3, [pc, #200]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 8017244:	6a1a      	ldr	r2, [r3, #32]
 8017246:	f022 0201 	bic.w	r2, r2, #1
 801724a:	621a      	str	r2, [r3, #32]
				TIM8->DIER &= ~TIM_DIER_CC1IE;
 801724c:	68da      	ldr	r2, [r3, #12]
 801724e:	f022 0202 	bic.w	r2, r2, #2
 8017252:	60da      	str	r2, [r3, #12]
				// enable external interrupt
				EXTI->IMR |= EXTI_IMR_MR6;
 8017254:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8017258:	681a      	ldr	r2, [r3, #0]
 801725a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801725e:	601a      	str	r2, [r3, #0]
				EXTI->PR = EXTI_PR_PR6;
 8017260:	2240      	movs	r2, #64	; 0x40
 8017262:	615a      	str	r2, [r3, #20]
			}
		}
	}

	if ((TIM8->SR & TIM_SR_CC2IF) != 0)
 8017264:	4b29      	ldr	r3, [pc, #164]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 8017266:	691a      	ldr	r2, [r3, #16]
	{

	}

	if ((TIM8->SR & TIM_SR_CC3IF) != 0)
 8017268:	691a      	ldr	r2, [r3, #16]
	{

	}

	if ((TIM8->SR & TIM_SR_CC4IF) != 0)
 801726a:	691b      	ldr	r3, [r3, #16]
 801726c:	bd08      	pop	{r3, pc}
			if (HAL_GPIO_ReadPin(hx[0].gpioSck, hx[0].pinSck) == GPIO_PIN_SET)
 801726e:	4b28      	ldr	r3, [pc, #160]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 8017270:	8919      	ldrh	r1, [r3, #8]
 8017272:	6818      	ldr	r0, [r3, #0]
 8017274:	f7ee fdea 	bl	8005e4c <HAL_GPIO_ReadPin>
 8017278:	2801      	cmp	r0, #1
 801727a:	d00a      	beq.n	8017292 <TIM8_CC_IRQHandler+0x7a>
				HAL_GPIO_WritePin(hx[0].gpioSck, hx[0].pinSck, GPIO_PIN_SET);
 801727c:	4b24      	ldr	r3, [pc, #144]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 801727e:	2201      	movs	r2, #1
 8017280:	8919      	ldrh	r1, [r3, #8]
 8017282:	6818      	ldr	r0, [r3, #0]
 8017284:	f7ee fde9 	bl	8005e5a <HAL_GPIO_WritePin>
				TIM8->CCR1 = TIM8->CNT + 10;
 8017288:	4a20      	ldr	r2, [pc, #128]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 801728a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801728c:	330a      	adds	r3, #10
 801728e:	6353      	str	r3, [r2, #52]	; 0x34
 8017290:	e7e8      	b.n	8017264 <TIM8_CC_IRQHandler+0x4c>
				hx[0].bitCount++;
 8017292:	4b1f      	ldr	r3, [pc, #124]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 8017294:	699a      	ldr	r2, [r3, #24]
 8017296:	3201      	adds	r2, #1
 8017298:	619a      	str	r2, [r3, #24]
				hx[0].value = hx[0].value << 1;
 801729a:	695a      	ldr	r2, [r3, #20]
 801729c:	0052      	lsls	r2, r2, #1
 801729e:	615a      	str	r2, [r3, #20]
				if (HAL_GPIO_ReadPin(hx[0].gpioData, hx[0].pinData) == GPIO_PIN_SET) hx[0].value++;
 80172a0:	8959      	ldrh	r1, [r3, #10]
 80172a2:	6858      	ldr	r0, [r3, #4]
 80172a4:	f7ee fdd2 	bl	8005e4c <HAL_GPIO_ReadPin>
 80172a8:	2801      	cmp	r0, #1
 80172aa:	d00a      	beq.n	80172c2 <TIM8_CC_IRQHandler+0xaa>
				HAL_GPIO_WritePin(hx[0].gpioSck, hx[0].pinSck, GPIO_PIN_RESET);
 80172ac:	4b18      	ldr	r3, [pc, #96]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	8919      	ldrh	r1, [r3, #8]
 80172b2:	6818      	ldr	r0, [r3, #0]
 80172b4:	f7ee fdd1 	bl	8005e5a <HAL_GPIO_WritePin>
				TIM8->CCR1 = TIM8->CNT + 10;
 80172b8:	4a14      	ldr	r2, [pc, #80]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 80172ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80172bc:	330a      	adds	r3, #10
 80172be:	6353      	str	r3, [r2, #52]	; 0x34
 80172c0:	e7d0      	b.n	8017264 <TIM8_CC_IRQHandler+0x4c>
				if (HAL_GPIO_ReadPin(hx[0].gpioData, hx[0].pinData) == GPIO_PIN_SET) hx[0].value++;
 80172c2:	4a13      	ldr	r2, [pc, #76]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 80172c4:	6953      	ldr	r3, [r2, #20]
 80172c6:	3301      	adds	r3, #1
 80172c8:	6153      	str	r3, [r2, #20]
 80172ca:	e7ef      	b.n	80172ac <TIM8_CC_IRQHandler+0x94>
				if (HAL_GPIO_ReadPin(hx[0].gpioData, hx[0].pinData) == GPIO_PIN_SET)
 80172cc:	4b10      	ldr	r3, [pc, #64]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 80172ce:	8959      	ldrh	r1, [r3, #10]
 80172d0:	6858      	ldr	r0, [r3, #4]
 80172d2:	f7ee fdbb 	bl	8005e4c <HAL_GPIO_ReadPin>
 80172d6:	2801      	cmp	r0, #1
 80172d8:	d00a      	beq.n	80172f0 <TIM8_CC_IRQHandler+0xd8>
			    	HAL_GPIO_WritePin(hx[0].gpioSck, hx[0].pinSck, GPIO_PIN_SET);
 80172da:	4b0d      	ldr	r3, [pc, #52]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 80172dc:	2201      	movs	r2, #1
 80172de:	8919      	ldrh	r1, [r3, #8]
 80172e0:	6818      	ldr	r0, [r3, #0]
 80172e2:	f7ee fdba 	bl	8005e5a <HAL_GPIO_WritePin>
					TIM8->CCR1 = TIM8->CNT + 10;
 80172e6:	4a09      	ldr	r2, [pc, #36]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 80172e8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80172ea:	330a      	adds	r3, #10
 80172ec:	6353      	str	r3, [r2, #52]	; 0x34
 80172ee:	e7b9      	b.n	8017264 <TIM8_CC_IRQHandler+0x4c>
					hx[0].gainCount++;
 80172f0:	4b07      	ldr	r3, [pc, #28]	; (8017310 <TIM8_CC_IRQHandler+0xf8>)
 80172f2:	69da      	ldr	r2, [r3, #28]
 80172f4:	3201      	adds	r2, #1
 80172f6:	61da      	str	r2, [r3, #28]
			    	HAL_GPIO_WritePin(hx[0].gpioSck, hx[0].pinSck, GPIO_PIN_RESET);
 80172f8:	2200      	movs	r2, #0
 80172fa:	8919      	ldrh	r1, [r3, #8]
 80172fc:	6818      	ldr	r0, [r3, #0]
 80172fe:	f7ee fdac 	bl	8005e5a <HAL_GPIO_WritePin>
					TIM8->CCR1 = TIM8->CNT + 10;
 8017302:	4a02      	ldr	r2, [pc, #8]	; (801730c <TIM8_CC_IRQHandler+0xf4>)
 8017304:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8017306:	330a      	adds	r3, #10
 8017308:	6353      	str	r3, [r2, #52]	; 0x34
 801730a:	e7ab      	b.n	8017264 <TIM8_CC_IRQHandler+0x4c>
 801730c:	40010400 	.word	0x40010400
 8017310:	2000644c 	.word	0x2000644c
 8017314:	20005d14 	.word	0x20005d14

08017318 <EXTI9_5_IRQHandler>:

	}
}

void EXTI9_5_IRQHandler(void)
{
 8017318:	b508      	push	{r3, lr}

	if ((EXTI->PR & EXTI_PR_PR6) != 0)
 801731a:	4b12      	ldr	r3, [pc, #72]	; (8017364 <EXTI9_5_IRQHandler+0x4c>)
 801731c:	695b      	ldr	r3, [r3, #20]
 801731e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017322:	d100      	bne.n	8017326 <EXTI9_5_IRQHandler+0xe>
 8017324:	bd08      	pop	{r3, pc}
	{
		hx[0].value = 0;
 8017326:	4810      	ldr	r0, [pc, #64]	; (8017368 <EXTI9_5_IRQHandler+0x50>)
 8017328:	2300      	movs	r3, #0
 801732a:	6143      	str	r3, [r0, #20]
		hx[0].bitCount = 0;
 801732c:	6183      	str	r3, [r0, #24]
		hx[0].gainCount = 0;
 801732e:	61c3      	str	r3, [r0, #28]

		// disable interrupt on this channel
		EXTI->IMR &= ~EXTI_IMR_MR6;
 8017330:	4b0c      	ldr	r3, [pc, #48]	; (8017364 <EXTI9_5_IRQHandler+0x4c>)
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017338:	601a      	str	r2, [r3, #0]
		EXTI->PR = EXTI_PR_PR6;
 801733a:	2240      	movs	r2, #64	; 0x40
 801733c:	615a      	str	r2, [r3, #20]
		// set the clock line high for reading this HX711
		TIM8->CCR1 = TIM8->CNT + 10;
 801733e:	f5a3 5360 	sub.w	r3, r3, #14336	; 0x3800
 8017342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017344:	320a      	adds	r2, #10
 8017346:	635a      	str	r2, [r3, #52]	; 0x34
		TIM8->CCER |= TIM_CCER_CC1E;
 8017348:	6a1a      	ldr	r2, [r3, #32]
 801734a:	f042 0201 	orr.w	r2, r2, #1
 801734e:	621a      	str	r2, [r3, #32]
		TIM8->DIER |= TIM_DIER_CC1IE;
 8017350:	68da      	ldr	r2, [r3, #12]
 8017352:	f042 0202 	orr.w	r2, r2, #2
 8017356:	60da      	str	r2, [r3, #12]
		// set a timer to start reading HX711
    	HAL_GPIO_WritePin(hx[0].gpioSck, hx[0].pinSck, GPIO_PIN_SET);
 8017358:	2201      	movs	r2, #1
 801735a:	8901      	ldrh	r1, [r0, #8]
 801735c:	6800      	ldr	r0, [r0, #0]
 801735e:	f7ee fd7c 	bl	8005e5a <HAL_GPIO_WritePin>
	}
}
 8017362:	e7df      	b.n	8017324 <EXTI9_5_IRQHandler+0xc>
 8017364:	40013c00 	.word	0x40013c00
 8017368:	2000644c 	.word	0x2000644c

0801736c <HX711_Init>:

void HX711_Init(HX711 data)
{
 801736c:	b084      	sub	sp, #16
 801736e:	b510      	push	{r4, lr}
 8017370:	ac02      	add	r4, sp, #8
 8017372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8017376:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801737a:	2201      	movs	r2, #1
 801737c:	4621      	mov	r1, r4
 801737e:	f7ee fd6c 	bl	8005e5a <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8017382:	2014      	movs	r0, #20
 8017384:	f7ea f864 	bl	8001450 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 8017388:	2200      	movs	r2, #0
 801738a:	4621      	mov	r1, r4
 801738c:	9803      	ldr	r0, [sp, #12]
 801738e:	f7ee fd64 	bl	8005e5a <HAL_GPIO_WritePin>
}
 8017392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017396:	b004      	add	sp, #16
 8017398:	4770      	bx	lr

0801739a <HX711_Value>:
	uint32_t start;
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
}

int HX711_Value(HX711 data)
{
 801739a:	b084      	sub	sp, #16
 801739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173a0:	ac08      	add	r4, sp, #32
 80173a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1);
 80173a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80173a8:	f8bd 702a 	ldrh.w	r7, [sp, #42]	; 0x2a
 80173ac:	4639      	mov	r1, r7
 80173ae:	4630      	mov	r0, r6
 80173b0:	f7ee fd4c 	bl	8005e4c <HAL_GPIO_ReadPin>
 80173b4:	2801      	cmp	r0, #1
 80173b6:	d0f6      	beq.n	80173a6 <HX711_Value+0xc>
 80173b8:	2400      	movs	r4, #0
 80173ba:	4625      	mov	r5, r4
 80173bc:	e03c      	b.n	8017438 <HX711_Value+0x9e>
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
 80173be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c4:	1a9b      	subs	r3, r3, r2
 80173c6:	2b09      	cmp	r3, #9
 80173c8:	bf8c      	ite	hi
 80173ca:	2300      	movhi	r3, #0
 80173cc:	2301      	movls	r3, #1
 80173ce:	b163      	cbz	r3, 80173ea <HX711_Value+0x50>
 80173d0:	bf00      	nop
 80173d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d8:	429a      	cmp	r2, r3
 80173da:	d9f0      	bls.n	80173be <HX711_Value+0x24>
 80173dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173e2:	1ad3      	subs	r3, r2, r3
 80173e4:	bf18      	it	ne
 80173e6:	2301      	movne	r3, #1
 80173e8:	e7f1      	b.n	80173ce <HX711_Value+0x34>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
        buffer = buffer << 1 ;

        delay(TIM2, 10);

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 80173ea:	4639      	mov	r1, r7
 80173ec:	4630      	mov	r0, r6
 80173ee:	f7ee fd2d 	bl	8005e4c <HAL_GPIO_ReadPin>
 80173f2:	b100      	cbz	r0, 80173f6 <HX711_Value+0x5c>
        {
            buffer ++;
 80173f4:	3501      	adds	r5, #1
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80173f6:	2200      	movs	r2, #0
 80173f8:	4649      	mov	r1, r9
 80173fa:	4640      	mov	r0, r8
 80173fc:	f7ee fd2d 	bl	8005e5a <HAL_GPIO_WritePin>
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
 8017400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017406:	e009      	b.n	801741c <HX711_Value+0x82>
 8017408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801740e:	1a9b      	subs	r3, r3, r2
 8017410:	2b09      	cmp	r3, #9
 8017412:	bf8c      	ite	hi
 8017414:	2300      	movhi	r3, #0
 8017416:	2301      	movls	r3, #1
 8017418:	b163      	cbz	r3, 8017434 <HX711_Value+0x9a>
 801741a:	bf00      	nop
 801741c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017422:	429a      	cmp	r2, r3
 8017424:	d9f0      	bls.n	8017408 <HX711_Value+0x6e>
 8017426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801742c:	1ad3      	subs	r3, r2, r3
 801742e:	bf18      	it	ne
 8017430:	2301      	movne	r3, #1
 8017432:	e7f1      	b.n	8017418 <HX711_Value+0x7e>
    for (uint8_t i = 0; i < 24; i++)
 8017434:	3401      	adds	r4, #1
 8017436:	b2e4      	uxtb	r4, r4
 8017438:	2c17      	cmp	r4, #23
 801743a:	d80d      	bhi.n	8017458 <HX711_Value+0xbe>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 801743c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017440:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8017444:	2201      	movs	r2, #1
 8017446:	4649      	mov	r1, r9
 8017448:	4640      	mov	r0, r8
 801744a:	f7ee fd06 	bl	8005e5a <HAL_GPIO_WritePin>
        buffer = buffer << 1 ;
 801744e:	006d      	lsls	r5, r5, #1
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
 8017450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017456:	e7bc      	b.n	80173d2 <HX711_Value+0x38>
 8017458:	2400      	movs	r4, #0
 801745a:	e035      	b.n	80174c8 <HX711_Value+0x12e>
 801745c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017462:	1a9b      	subs	r3, r3, r2
 8017464:	2b09      	cmp	r3, #9
 8017466:	bf8c      	ite	hi
 8017468:	2300      	movhi	r3, #0
 801746a:	2301      	movls	r3, #1
 801746c:	b163      	cbz	r3, 8017488 <HX711_Value+0xee>
 801746e:	bf00      	nop
 8017470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017476:	429a      	cmp	r2, r3
 8017478:	d9f0      	bls.n	801745c <HX711_Value+0xc2>
 801747a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	bf18      	it	ne
 8017484:	2301      	movne	r3, #1
 8017486:	e7f1      	b.n	801746c <HX711_Value+0xd2>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);

        delay(TIM2, 10);

    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8017488:	2200      	movs	r2, #0
 801748a:	4639      	mov	r1, r7
 801748c:	4630      	mov	r0, r6
 801748e:	f7ee fce4 	bl	8005e5a <HAL_GPIO_WritePin>
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
 8017492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017498:	e009      	b.n	80174ae <HX711_Value+0x114>
 801749a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a0:	1a9b      	subs	r3, r3, r2
 80174a2:	2b09      	cmp	r3, #9
 80174a4:	bf8c      	ite	hi
 80174a6:	2300      	movhi	r3, #0
 80174a8:	2301      	movls	r3, #1
 80174aa:	b163      	cbz	r3, 80174c6 <HX711_Value+0x12c>
 80174ac:	bf00      	nop
 80174ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d9f0      	bls.n	801749a <HX711_Value+0x100>
 80174b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174be:	1ad3      	subs	r3, r2, r3
 80174c0:	bf18      	it	ne
 80174c2:	2301      	movne	r3, #1
 80174c4:	e7f1      	b.n	80174aa <HX711_Value+0x110>
    for (int i = 0; i < data.gain; i++)
 80174c6:	3401      	adds	r4, #1
 80174c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174ca:	429c      	cmp	r4, r3
 80174cc:	da0b      	bge.n	80174e6 <HX711_Value+0x14c>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80174ce:	9e08      	ldr	r6, [sp, #32]
 80174d0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 80174d4:	2201      	movs	r2, #1
 80174d6:	4639      	mov	r1, r7
 80174d8:	4630      	mov	r0, r6
 80174da:	f7ee fcbe 	bl	8005e5a <HAL_GPIO_WritePin>
	for (start = timer->CNT; PERIOD(timer->CNT, start) < tics;) __asm__("nop");
 80174de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174e4:	e7c4      	b.n	8017470 <HX711_Value+0xd6>
    }

    buffer = buffer ^ 0x800000;

    return buffer;
}
 80174e6:	f485 0000 	eor.w	r0, r5, #8388608	; 0x800000
 80174ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174ee:	b004      	add	sp, #16
 80174f0:	4770      	bx	lr

080174f2 <HX711_Average_Value>:
{
 80174f2:	b084      	sub	sp, #16
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	b084      	sub	sp, #16
 80174f8:	ac08      	add	r4, sp, #32
 80174fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80174fe:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
    for (int i = 0; i < times; i++)
 8017502:	2400      	movs	r4, #0
    int sum = 0;
 8017504:	4626      	mov	r6, r4
    for (int i = 0; i < times; i++)
 8017506:	e009      	b.n	801751c <HX711_Average_Value+0x2a>
        sum += HX711_Value(data);
 8017508:	ab0c      	add	r3, sp, #48	; 0x30
 801750a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801750c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017510:	ab08      	add	r3, sp, #32
 8017512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017514:	f7ff ff41 	bl	801739a <HX711_Value>
 8017518:	4406      	add	r6, r0
    for (int i = 0; i < times; i++)
 801751a:	3401      	adds	r4, #1
 801751c:	42ac      	cmp	r4, r5
 801751e:	dbf3      	blt.n	8017508 <HX711_Average_Value+0x16>
}
 8017520:	fb96 f0f5 	sdiv	r0, r6, r5
 8017524:	b004      	add	sp, #16
 8017526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801752a:	b004      	add	sp, #16
 801752c:	4770      	bx	lr

0801752e <HX711_Tare>:

HX711 HX711_Tare(HX711 data, uint8_t times)
{
 801752e:	b084      	sub	sp, #16
 8017530:	b570      	push	{r4, r5, r6, lr}
 8017532:	b086      	sub	sp, #24
 8017534:	4606      	mov	r6, r0
 8017536:	ac0b      	add	r4, sp, #44	; 0x2c
 8017538:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    int sum = HX711_Average_Value(data, times);
 801753c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017540:	9304      	str	r3, [sp, #16]
 8017542:	ab0f      	add	r3, sp, #60	; 0x3c
 8017544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017546:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801754a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801754e:	f7ff ffd0 	bl	80174f2 <HX711_Average_Value>
    data.offset = sum;
 8017552:	900e      	str	r0, [sp, #56]	; 0x38
    return data;
 8017554:	4635      	mov	r5, r6
 8017556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801755a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801755e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8017562:	4630      	mov	r0, r6
 8017564:	b006      	add	sp, #24
 8017566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801756a:	b004      	add	sp, #16
 801756c:	4770      	bx	lr
 801756e:	bf00      	nop

08017570 <stepperHome>:

stepper_t stepper[HUBS];

void stepperHome(uint8_t hubIndex)
{
	status.hub[hubIndex].stepper.position = 0;
 8017570:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017574:	0082      	lsls	r2, r0, #2
 8017576:	4b02      	ldr	r3, [pc, #8]	; (8017580 <stepperHome+0x10>)
 8017578:	4413      	add	r3, r2
 801757a:	2200      	movs	r2, #0
 801757c:	829a      	strh	r2, [r3, #20]
 801757e:	4770      	bx	lr
 8017580:	20005d14 	.word	0x20005d14

08017584 <stepperAbs>:
		TIM5->CCR1 += stepper[0].step_delay;
	}
}

void stepperAbs(uint8_t hubIndex, int16_t newPosition)
{}
 8017584:	4770      	bx	lr

08017586 <stepperRel>:

// values passed here for accel / decel / speed are in radians
void stepperRel(uint8_t hubIndex, int16_t step, uint32_t accel, uint32_t decel, uint32_t speed)
{
 8017586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758a:	4604      	mov	r4, r0
 801758c:	4616      	mov	r6, r2
 801758e:	461f      	mov	r7, r3
	if(step < 0)
 8017590:	1e0d      	subs	r5, r1, #0
 8017592:	db0a      	blt.n	80175aa <stepperRel+0x24>
		stepper[hubIndex].dir = CCW;
		step = -step;
	}
	else
	{
		stepper[hubIndex].dir = CW;
 8017594:	2334      	movs	r3, #52	; 0x34
 8017596:	4a68      	ldr	r2, [pc, #416]	; (8017738 <stepperRel+0x1b2>)
 8017598:	fb03 2300 	mla	r3, r3, r0, r2
 801759c:	2200      	movs	r2, #0
 801759e:	761a      	strb	r2, [r3, #24]
	}

	// If moving only 1 step.
	if(step == 1)
 80175a0:	2d01      	cmp	r5, #1
 80175a2:	d00b      	beq.n	80175bc <stepperRel+0x36>
		//    TCCR1B |= ((0<<CS12)|(1<<CS11)|(0<<CS10));
	}
	// Only move if number of steps to move is not zero.
	else
	{
		if(step != 0)
 80175a4:	b9ed      	cbnz	r5, 80175e2 <stepperRel+0x5c>
 80175a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		stepper[hubIndex].dir = CCW;
 80175aa:	2334      	movs	r3, #52	; 0x34
 80175ac:	4a62      	ldr	r2, [pc, #392]	; (8017738 <stepperRel+0x1b2>)
 80175ae:	fb03 2300 	mla	r3, r3, r0, r2
 80175b2:	2201      	movs	r2, #1
 80175b4:	761a      	strb	r2, [r3, #24]
		step = -step;
 80175b6:	426d      	negs	r5, r5
 80175b8:	b22d      	sxth	r5, r5
 80175ba:	e7f1      	b.n	80175a0 <stepperRel+0x1a>
		stepper[hubIndex].accel_count = -1;
 80175bc:	2334      	movs	r3, #52	; 0x34
 80175be:	4a5e      	ldr	r2, [pc, #376]	; (8017738 <stepperRel+0x1b2>)
 80175c0:	fb03 2304 	mla	r3, r3, r4, r2
 80175c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80175c8:	621a      	str	r2, [r3, #32]
		status.hub[hubIndex].stepper.state = DECEL;
 80175ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80175ce:	00a1      	lsls	r1, r4, #2
 80175d0:	4a5a      	ldr	r2, [pc, #360]	; (801773c <stepperRel+0x1b6>)
 80175d2:	440a      	add	r2, r1
 80175d4:	2102      	movs	r1, #2
 80175d6:	7591      	strb	r1, [r2, #22]
		stepper[hubIndex].step_delay = 1000;
 80175d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80175dc:	605a      	str	r2, [r3, #4]
 80175de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			stepper[hubIndex].min_delay = A_T_x100 / speed;
 80175e2:	4a57      	ldr	r2, [pc, #348]	; (8017740 <stepperRel+0x1ba>)
 80175e4:	9b06      	ldr	r3, [sp, #24]
 80175e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80175ea:	4953      	ldr	r1, [pc, #332]	; (8017738 <stepperRel+0x1b2>)
 80175ec:	2334      	movs	r3, #52	; 0x34
 80175ee:	fb03 f304 	mul.w	r3, r3, r4
 80175f2:	eb01 0803 	add.w	r8, r1, r3
 80175f6:	50ca      	str	r2, [r1, r3]
			stepper[hubIndex].step_delay = (T5_FREQ_148 * sqrt(A_SQ / accel)) / 100;
 80175f8:	4852      	ldr	r0, [pc, #328]	; (8017744 <stepperRel+0x1be>)
 80175fa:	fbb0 f0f6 	udiv	r0, r0, r6
 80175fe:	f000 fdd3 	bl	80181a8 <__aeabi_ui2d>
 8017602:	ec41 0b10 	vmov	d0, r0, r1
 8017606:	f005 f87d 	bl	801c704 <sqrt>
 801760a:	a349      	add	r3, pc, #292	; (adr r3, 8017730 <stepperRel+0x1aa>)
 801760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017610:	ec51 0b10 	vmov	r0, r1, d0
 8017614:	f000 fe3e 	bl	8018294 <__aeabi_dmul>
 8017618:	2200      	movs	r2, #0
 801761a:	4b4b      	ldr	r3, [pc, #300]	; (8017748 <stepperRel+0x1c2>)
 801761c:	f000 ff64 	bl	80184e8 <__aeabi_ddiv>
 8017620:	f001 f8e8 	bl	80187f4 <__aeabi_d2iz>
 8017624:	f8c8 0004 	str.w	r0, [r8, #4]
			stepper[hubIndex].max_s_lim = (long)speed * speed / (long)(((long)A_x20000 * accel) / 100);
 8017628:	9b06      	ldr	r3, [sp, #24]
 801762a:	fb03 f303 	mul.w	r3, r3, r3
 801762e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8017632:	fb02 f206 	mul.w	r2, r2, r6
 8017636:	4945      	ldr	r1, [pc, #276]	; (801774c <stepperRel+0x1c6>)
 8017638:	fba1 1202 	umull	r1, r2, r1, r2
 801763c:	0952      	lsrs	r2, r2, #5
 801763e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017642:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c

			if (stepper[hubIndex].max_s_lim == 0)
 8017646:	b913      	cbnz	r3, 801764e <stepperRel+0xc8>
				stepper[hubIndex].max_s_lim = 1;
 8017648:	2201      	movs	r2, #1
 801764a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c

			stepper[hubIndex].accel_lim = ((long)step * decel) / (accel + decel);
 801764e:	4629      	mov	r1, r5
 8017650:	fb07 f305 	mul.w	r3, r7, r5
 8017654:	19f2      	adds	r2, r6, r7
 8017656:	fbb3 f3f2 	udiv	r3, r3, r2
 801765a:	2234      	movs	r2, #52	; 0x34
 801765c:	4836      	ldr	r0, [pc, #216]	; (8017738 <stepperRel+0x1b2>)
 801765e:	fb02 0204 	mla	r2, r2, r4, r0
 8017662:	6313      	str	r3, [r2, #48]	; 0x30

			if (stepper[hubIndex].accel_lim == 0)
 8017664:	b923      	cbnz	r3, 8017670 <stepperRel+0xea>
				stepper[hubIndex].accel_lim = 1;
 8017666:	2334      	movs	r3, #52	; 0x34
 8017668:	fb03 0304 	mla	r3, r3, r4, r0
 801766c:	2201      	movs	r2, #1
 801766e:	631a      	str	r2, [r3, #48]	; 0x30

			if (stepper[hubIndex].accel_lim <= stepper[hubIndex].max_s_lim)
 8017670:	2334      	movs	r3, #52	; 0x34
 8017672:	4a31      	ldr	r2, [pc, #196]	; (8017738 <stepperRel+0x1b2>)
 8017674:	fb03 2304 	mla	r3, r3, r4, r2
 8017678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801767c:	429a      	cmp	r2, r3
 801767e:	d843      	bhi.n	8017708 <stepperRel+0x182>
				stepper[hubIndex].decel_val = stepper[hubIndex].accel_lim - step;
 8017680:	1a52      	subs	r2, r2, r1
 8017682:	2334      	movs	r3, #52	; 0x34
 8017684:	492c      	ldr	r1, [pc, #176]	; (8017738 <stepperRel+0x1b2>)
 8017686:	fb03 1304 	mla	r3, r3, r4, r1
 801768a:	629a      	str	r2, [r3, #40]	; 0x28
			else
				stepper[hubIndex].decel_val = -((long)stepper[hubIndex].max_s_lim * accel) / decel;

			if(stepper[hubIndex].decel_val == 0)
 801768c:	2334      	movs	r3, #52	; 0x34
 801768e:	4a2a      	ldr	r2, [pc, #168]	; (8017738 <stepperRel+0x1b2>)
 8017690:	fb03 2304 	mla	r3, r3, r4, r2
 8017694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017696:	b92b      	cbnz	r3, 80176a4 <stepperRel+0x11e>
				stepper[hubIndex].decel_val = -1;
 8017698:	2334      	movs	r3, #52	; 0x34
 801769a:	fb03 2304 	mla	r3, r3, r4, r2
 801769e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176a2:	629a      	str	r2, [r3, #40]	; 0x28

			stepper[hubIndex].decel_start = step + stepper[hubIndex].decel_val;
 80176a4:	4924      	ldr	r1, [pc, #144]	; (8017738 <stepperRel+0x1b2>)
 80176a6:	2334      	movs	r3, #52	; 0x34
 80176a8:	fb03 f304 	mul.w	r3, r3, r4
 80176ac:	18ca      	adds	r2, r1, r3
 80176ae:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80176b0:	4405      	add	r5, r0
 80176b2:	6255      	str	r5, [r2, #36]	; 0x24

			if(stepper[hubIndex].step_delay <= stepper[hubIndex].min_delay)
 80176b4:	6852      	ldr	r2, [r2, #4]
 80176b6:	58cb      	ldr	r3, [r1, r3]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d830      	bhi.n	801771e <stepperRel+0x198>
			{
				stepper[hubIndex].step_delay = stepper[hubIndex].min_delay;
 80176bc:	2234      	movs	r2, #52	; 0x34
 80176be:	fb02 1204 	mla	r2, r2, r4, r1
 80176c2:	6053      	str	r3, [r2, #4]
				status.hub[hubIndex].stepper.state = RUN;
 80176c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80176c8:	009a      	lsls	r2, r3, #2
 80176ca:	4b1c      	ldr	r3, [pc, #112]	; (801773c <stepperRel+0x1b6>)
 80176cc:	4413      	add	r3, r2
 80176ce:	2203      	movs	r2, #3
 80176d0:	759a      	strb	r2, [r3, #22]
			}
			else
				status.hub[hubIndex].stepper.state = ACCEL;

			stepper[hubIndex].accel_count = 0;
 80176d2:	2334      	movs	r3, #52	; 0x34
 80176d4:	4a18      	ldr	r2, [pc, #96]	; (8017738 <stepperRel+0x1b2>)
 80176d6:	fb03 2304 	mla	r3, r3, r4, r2
 80176da:	2200      	movs	r2, #0
 80176dc:	621a      	str	r2, [r3, #32]

			if (hubIndex == 0)
 80176de:	2c00      	cmp	r4, #0
 80176e0:	f47f af61 	bne.w	80175a6 <stepperRel+0x20>
			{
				TIM5->CCR1 += stepper[hubIndex].step_delay;
 80176e4:	4b1a      	ldr	r3, [pc, #104]	; (8017750 <stepperRel+0x1ca>)
 80176e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80176e8:	2034      	movs	r0, #52	; 0x34
 80176ea:	4913      	ldr	r1, [pc, #76]	; (8017738 <stepperRel+0x1b2>)
 80176ec:	fb00 1404 	mla	r4, r0, r4, r1
 80176f0:	6861      	ldr	r1, [r4, #4]
 80176f2:	440a      	add	r2, r1
 80176f4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM5->CCER |= TIM_CCER_CC1E;
 80176f6:	6a1a      	ldr	r2, [r3, #32]
 80176f8:	f042 0201 	orr.w	r2, r2, #1
 80176fc:	621a      	str	r2, [r3, #32]
				TIM5->DIER |= TIM_DIER_CC1IE;
 80176fe:	68da      	ldr	r2, [r3, #12]
 8017700:	f042 0202 	orr.w	r2, r2, #2
 8017704:	60da      	str	r2, [r3, #12]
			//    OCR1A = 10;
				// Set Timer/Counter to divide clock by 8
			//    TCCR1B |= ((0<<CS12)|(1<<CS11)|(0<<CS10));
		}
	}
}
 8017706:	e74e      	b.n	80175a6 <stepperRel+0x20>
				stepper[hubIndex].decel_val = -((long)stepper[hubIndex].max_s_lim * accel) / decel;
 8017708:	fb03 f606 	mul.w	r6, r3, r6
 801770c:	4276      	negs	r6, r6
 801770e:	fbb6 f7f7 	udiv	r7, r6, r7
 8017712:	2334      	movs	r3, #52	; 0x34
 8017714:	4a08      	ldr	r2, [pc, #32]	; (8017738 <stepperRel+0x1b2>)
 8017716:	fb03 2304 	mla	r3, r3, r4, r2
 801771a:	629f      	str	r7, [r3, #40]	; 0x28
 801771c:	e7b6      	b.n	801768c <stepperRel+0x106>
				status.hub[hubIndex].stepper.state = ACCEL;
 801771e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8017722:	009a      	lsls	r2, r3, #2
 8017724:	4b05      	ldr	r3, [pc, #20]	; (801773c <stepperRel+0x1b6>)
 8017726:	4413      	add	r3, r2
 8017728:	2201      	movs	r2, #1
 801772a:	759a      	strb	r2, [r3, #22]
 801772c:	e7d1      	b.n	80176d2 <stepperRel+0x14c>
 801772e:	bf00      	nop
 8017730:	00000000 	.word	0x00000000
 8017734:	40f15440 	.word	0x40f15440
 8017738:	200064cc 	.word	0x200064cc
 801773c:	20005d14 	.word	0x20005d14
 8017740:	01f75646 	.word	0x01f75646
 8017744:	25735f2f 	.word	0x25735f2f
 8017748:	40590000 	.word	0x40590000
 801774c:	51eb851f 	.word	0x51eb851f
 8017750:	40000c00 	.word	0x40000c00

08017754 <stepperDelay>:

void stepperDelay(uint8_t hubIndex)
{
 8017754:	b470      	push	{r4, r5, r6}
	switch(status.hub[hubIndex].stepper.state)
 8017756:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801775a:	009a      	lsls	r2, r3, #2
 801775c:	4b4c      	ldr	r3, [pc, #304]	; (8017890 <stepperDelay+0x13c>)
 801775e:	4413      	add	r3, r2
 8017760:	7d9b      	ldrb	r3, [r3, #22]
 8017762:	2b03      	cmp	r3, #3
 8017764:	d80a      	bhi.n	801777c <stepperDelay+0x28>
 8017766:	e8df f003 	tbb	[pc, r3]
 801776a:	1102      	.short	0x1102
 801776c:	5470      	.short	0x5470
	{
		case STOP:
			stepper[hubIndex].step_count = 0;
 801776e:	2334      	movs	r3, #52	; 0x34
 8017770:	4a48      	ldr	r2, [pc, #288]	; (8017894 <stepperDelay+0x140>)
 8017772:	fb03 2300 	mla	r3, r3, r0, r2
 8017776:	2200      	movs	r2, #0
 8017778:	61da      	str	r2, [r3, #28]
			stepper[hubIndex].rest = 0;
 801777a:	611a      	str	r2, [r3, #16]
			// Check if we at last step
			if(stepper[hubIndex].accel_count >= 0)
				status.hub[hubIndex].stepper.state = STOP;
			break;
	}
	stepper[hubIndex].step_delay = stepper[hubIndex].new_step_delay;
 801777c:	2234      	movs	r2, #52	; 0x34
 801777e:	4b45      	ldr	r3, [pc, #276]	; (8017894 <stepperDelay+0x140>)
 8017780:	fb02 3000 	mla	r0, r2, r0, r3
 8017784:	6883      	ldr	r3, [r0, #8]
 8017786:	6043      	str	r3, [r0, #4]
}
 8017788:	bc70      	pop	{r4, r5, r6}
 801778a:	4770      	bx	lr
			stepper[hubIndex].step_count++;
 801778c:	2334      	movs	r3, #52	; 0x34
 801778e:	4a41      	ldr	r2, [pc, #260]	; (8017894 <stepperDelay+0x140>)
 8017790:	fb03 2300 	mla	r3, r3, r0, r2
 8017794:	69d9      	ldr	r1, [r3, #28]
 8017796:	3101      	adds	r1, #1
 8017798:	61d9      	str	r1, [r3, #28]
			stepper[hubIndex].accel_count++;
 801779a:	6a1a      	ldr	r2, [r3, #32]
 801779c:	3201      	adds	r2, #1
 801779e:	621a      	str	r2, [r3, #32]
			stepper[hubIndex].new_step_delay = stepper[hubIndex].step_delay - (((2 * (long)stepper[hubIndex].step_delay) + stepper[hubIndex].rest) / (4 * stepper[hubIndex].accel_count + 1));
 80177a0:	685e      	ldr	r6, [r3, #4]
 80177a2:	691d      	ldr	r5, [r3, #16]
 80177a4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80177a8:	0092      	lsls	r2, r2, #2
 80177aa:	3201      	adds	r2, #1
 80177ac:	fbb5 f4f2 	udiv	r4, r5, r2
 80177b0:	1b36      	subs	r6, r6, r4
 80177b2:	609e      	str	r6, [r3, #8]
			stepper[hubIndex].rest = ((2 * (long)stepper[hubIndex].step_delay) + stepper[hubIndex].rest) % (4 * stepper[hubIndex].accel_count + 1);
 80177b4:	fb02 5214 	mls	r2, r2, r4, r5
 80177b8:	611a      	str	r2, [r3, #16]
			if(stepper[hubIndex].step_count >= stepper[hubIndex].decel_start)
 80177ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177bc:	4299      	cmp	r1, r3
 80177be:	da1a      	bge.n	80177f6 <stepperDelay+0xa2>
				if(stepper[hubIndex].new_step_delay <= stepper[hubIndex].min_delay)
 80177c0:	4a34      	ldr	r2, [pc, #208]	; (8017894 <stepperDelay+0x140>)
 80177c2:	2334      	movs	r3, #52	; 0x34
 80177c4:	fb03 f300 	mul.w	r3, r3, r0
 80177c8:	18d1      	adds	r1, r2, r3
 80177ca:	6889      	ldr	r1, [r1, #8]
 80177cc:	58d3      	ldr	r3, [r2, r3]
 80177ce:	4299      	cmp	r1, r3
 80177d0:	d8d4      	bhi.n	801777c <stepperDelay+0x28>
					stepper[hubIndex].last_accel_delay = stepper[hubIndex].new_step_delay;
 80177d2:	4614      	mov	r4, r2
 80177d4:	2334      	movs	r3, #52	; 0x34
 80177d6:	fb03 f300 	mul.w	r3, r3, r0
 80177da:	441a      	add	r2, r3
 80177dc:	60d1      	str	r1, [r2, #12]
					stepper[hubIndex].new_step_delay = stepper[hubIndex].min_delay;
 80177de:	58e3      	ldr	r3, [r4, r3]
 80177e0:	6093      	str	r3, [r2, #8]
					stepper[hubIndex].rest = 0;
 80177e2:	2300      	movs	r3, #0
 80177e4:	6113      	str	r3, [r2, #16]
					status.hub[hubIndex].stepper.state = RUN;
 80177e6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80177ea:	009a      	lsls	r2, r3, #2
 80177ec:	4b28      	ldr	r3, [pc, #160]	; (8017890 <stepperDelay+0x13c>)
 80177ee:	4413      	add	r3, r2
 80177f0:	2203      	movs	r2, #3
 80177f2:	759a      	strb	r2, [r3, #22]
 80177f4:	e7c2      	b.n	801777c <stepperDelay+0x28>
				stepper[hubIndex].accel_count = stepper[hubIndex].decel_val;
 80177f6:	2334      	movs	r3, #52	; 0x34
 80177f8:	4a26      	ldr	r2, [pc, #152]	; (8017894 <stepperDelay+0x140>)
 80177fa:	fb03 2300 	mla	r3, r3, r0, r2
 80177fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017800:	621a      	str	r2, [r3, #32]
				status.hub[hubIndex].stepper.state = DECEL;
 8017802:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017806:	009a      	lsls	r2, r3, #2
 8017808:	4b21      	ldr	r3, [pc, #132]	; (8017890 <stepperDelay+0x13c>)
 801780a:	4413      	add	r3, r2
 801780c:	2202      	movs	r2, #2
 801780e:	759a      	strb	r2, [r3, #22]
 8017810:	e7b4      	b.n	801777c <stepperDelay+0x28>
			stepper[hubIndex].step_count++;
 8017812:	4c20      	ldr	r4, [pc, #128]	; (8017894 <stepperDelay+0x140>)
 8017814:	2134      	movs	r1, #52	; 0x34
 8017816:	fb01 f100 	mul.w	r1, r1, r0
 801781a:	1862      	adds	r2, r4, r1
 801781c:	69d3      	ldr	r3, [r2, #28]
 801781e:	3301      	adds	r3, #1
 8017820:	61d3      	str	r3, [r2, #28]
			stepper[hubIndex].new_step_delay = stepper[hubIndex].min_delay;
 8017822:	5861      	ldr	r1, [r4, r1]
 8017824:	6091      	str	r1, [r2, #8]
			if(stepper[hubIndex].step_count >= stepper[hubIndex].decel_start)
 8017826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017828:	4293      	cmp	r3, r2
 801782a:	dba7      	blt.n	801777c <stepperDelay+0x28>
				stepper[hubIndex].accel_count = stepper[hubIndex].decel_val;
 801782c:	2334      	movs	r3, #52	; 0x34
 801782e:	fb03 4300 	mla	r3, r3, r0, r4
 8017832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017834:	621a      	str	r2, [r3, #32]
				stepper[hubIndex].new_step_delay = stepper[hubIndex].last_accel_delay;
 8017836:	68da      	ldr	r2, [r3, #12]
 8017838:	609a      	str	r2, [r3, #8]
				status.hub[hubIndex].stepper.state = DECEL;
 801783a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801783e:	009a      	lsls	r2, r3, #2
 8017840:	4b13      	ldr	r3, [pc, #76]	; (8017890 <stepperDelay+0x13c>)
 8017842:	4413      	add	r3, r2
 8017844:	2202      	movs	r2, #2
 8017846:	759a      	strb	r2, [r3, #22]
 8017848:	e798      	b.n	801777c <stepperDelay+0x28>
			stepper[hubIndex].step_count++;
 801784a:	2334      	movs	r3, #52	; 0x34
 801784c:	4a11      	ldr	r2, [pc, #68]	; (8017894 <stepperDelay+0x140>)
 801784e:	fb03 2300 	mla	r3, r3, r0, r2
 8017852:	69da      	ldr	r2, [r3, #28]
 8017854:	3201      	adds	r2, #1
 8017856:	61da      	str	r2, [r3, #28]
			stepper[hubIndex].accel_count++;
 8017858:	6a1a      	ldr	r2, [r3, #32]
 801785a:	3201      	adds	r2, #1
 801785c:	621a      	str	r2, [r3, #32]
			stepper[hubIndex].new_step_delay = stepper[hubIndex].step_delay - (((2 * (long)stepper[hubIndex].step_delay) + stepper[hubIndex].rest) / (4 * stepper[hubIndex].accel_count + 1));
 801785e:	685e      	ldr	r6, [r3, #4]
 8017860:	6919      	ldr	r1, [r3, #16]
 8017862:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8017866:	0091      	lsls	r1, r2, #2
 8017868:	1c4c      	adds	r4, r1, #1
 801786a:	fbb5 f1f4 	udiv	r1, r5, r4
 801786e:	1a76      	subs	r6, r6, r1
 8017870:	609e      	str	r6, [r3, #8]
			stepper[hubIndex].rest = ((2 * (long)stepper[hubIndex].step_delay) + stepper[hubIndex].rest) % (4 * stepper[hubIndex].accel_count + 1);
 8017872:	fb04 5111 	mls	r1, r4, r1, r5
 8017876:	6119      	str	r1, [r3, #16]
			if(stepper[hubIndex].accel_count >= 0)
 8017878:	2a00      	cmp	r2, #0
 801787a:	f6ff af7f 	blt.w	801777c <stepperDelay+0x28>
				status.hub[hubIndex].stepper.state = STOP;
 801787e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017882:	009a      	lsls	r2, r3, #2
 8017884:	4b02      	ldr	r3, [pc, #8]	; (8017890 <stepperDelay+0x13c>)
 8017886:	4413      	add	r3, r2
 8017888:	2200      	movs	r2, #0
 801788a:	759a      	strb	r2, [r3, #22]
 801788c:	e776      	b.n	801777c <stepperDelay+0x28>
 801788e:	bf00      	nop
 8017890:	20005d14 	.word	0x20005d14
 8017894:	200064cc 	.word	0x200064cc

08017898 <TIM5_IRQHandler>:
{
 8017898:	b508      	push	{r3, lr}
	if (TIM5->SR & TIM_SR_CC1IF)
 801789a:	4b0f      	ldr	r3, [pc, #60]	; (80178d8 <TIM5_IRQHandler+0x40>)
 801789c:	691b      	ldr	r3, [r3, #16]
 801789e:	f013 0f02 	tst.w	r3, #2
 80178a2:	d018      	beq.n	80178d6 <TIM5_IRQHandler+0x3e>
		if (status.hub[0].stepper.state == STOP)
 80178a4:	4b0d      	ldr	r3, [pc, #52]	; (80178dc <TIM5_IRQHandler+0x44>)
 80178a6:	7d9b      	ldrb	r3, [r3, #22]
 80178a8:	b963      	cbnz	r3, 80178c4 <TIM5_IRQHandler+0x2c>
			TIM5->CCER &= ~TIM_CCER_CC1E;
 80178aa:	4b0b      	ldr	r3, [pc, #44]	; (80178d8 <TIM5_IRQHandler+0x40>)
 80178ac:	6a1a      	ldr	r2, [r3, #32]
 80178ae:	f022 0201 	bic.w	r2, r2, #1
 80178b2:	621a      	str	r2, [r3, #32]
			TIM5->DIER &= ~TIM_DIER_CC1IE;
 80178b4:	68da      	ldr	r2, [r3, #12]
 80178b6:	f022 0202 	bic.w	r2, r2, #2
 80178ba:	60da      	str	r2, [r3, #12]
			TIM5->SR &= ~TIM_SR_CC1IF;
 80178bc:	691a      	ldr	r2, [r3, #16]
 80178be:	f022 0202 	bic.w	r2, r2, #2
 80178c2:	611a      	str	r2, [r3, #16]
		stepperDelay(0);	// compute new delay between steps
 80178c4:	2000      	movs	r0, #0
 80178c6:	f7ff ff45 	bl	8017754 <stepperDelay>
		TIM5->CCR1 += stepper[0].step_delay;
 80178ca:	4a03      	ldr	r2, [pc, #12]	; (80178d8 <TIM5_IRQHandler+0x40>)
 80178cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80178ce:	4904      	ldr	r1, [pc, #16]	; (80178e0 <TIM5_IRQHandler+0x48>)
 80178d0:	6849      	ldr	r1, [r1, #4]
 80178d2:	440b      	add	r3, r1
 80178d4:	6353      	str	r3, [r2, #52]	; 0x34
 80178d6:	bd08      	pop	{r3, pc}
 80178d8:	40000c00 	.word	0x40000c00
 80178dc:	20005d14 	.word	0x20005d14
 80178e0:	200064cc 	.word	0x200064cc

080178e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80178e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80178e6:	2200      	movs	r2, #0
 80178e8:	490f      	ldr	r1, [pc, #60]	; (8017928 <MX_USB_DEVICE_Init+0x44>)
 80178ea:	4810      	ldr	r0, [pc, #64]	; (801792c <MX_USB_DEVICE_Init+0x48>)
 80178ec:	f7f8 fc1e 	bl	801012c <USBD_Init>
 80178f0:	b970      	cbnz	r0, 8017910 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80178f2:	490f      	ldr	r1, [pc, #60]	; (8017930 <MX_USB_DEVICE_Init+0x4c>)
 80178f4:	480d      	ldr	r0, [pc, #52]	; (801792c <MX_USB_DEVICE_Init+0x48>)
 80178f6:	f7f8 fc42 	bl	801017e <USBD_RegisterClass>
 80178fa:	b960      	cbnz	r0, 8017916 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80178fc:	490d      	ldr	r1, [pc, #52]	; (8017934 <MX_USB_DEVICE_Init+0x50>)
 80178fe:	480b      	ldr	r0, [pc, #44]	; (801792c <MX_USB_DEVICE_Init+0x48>)
 8017900:	f7f8 fbcc 	bl	801009c <USBD_CDC_RegisterInterface>
 8017904:	b950      	cbnz	r0, 801791c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017906:	4809      	ldr	r0, [pc, #36]	; (801792c <MX_USB_DEVICE_Init+0x48>)
 8017908:	f7f8 fc40 	bl	801018c <USBD_Start>
 801790c:	b948      	cbnz	r0, 8017922 <MX_USB_DEVICE_Init+0x3e>
 801790e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8017910:	f7e9 f922 	bl	8000b58 <Error_Handler>
 8017914:	e7ed      	b.n	80178f2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8017916:	f7e9 f91f 	bl	8000b58 <Error_Handler>
 801791a:	e7ef      	b.n	80178fc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801791c:	f7e9 f91c 	bl	8000b58 <Error_Handler>
 8017920:	e7f1      	b.n	8017906 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 8017922:	f7e9 f919 	bl	8000b58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017926:	e7f2      	b.n	801790e <MX_USB_DEVICE_Init+0x2a>
 8017928:	2000016c 	.word	0x2000016c
 801792c:	2000659c 	.word	0x2000659c
 8017930:	200000ec 	.word	0x200000ec
 8017934:	20000128 	.word	0x20000128

08017938 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8017938:	2000      	movs	r0, #0
 801793a:	4770      	bx	lr

0801793c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801793c:	2000      	movs	r0, #0
 801793e:	4770      	bx	lr

08017940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017940:	b538      	push	{r3, r4, r5, lr}
 8017942:	4604      	mov	r4, r0
 8017944:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
uint32_t len;

	while(USBD_CDC_ReceivePacket(&hUsbDeviceFS) != USBD_OK);
 8017946:	4812      	ldr	r0, [pc, #72]	; (8017990 <CDC_Receive_FS+0x50>)
 8017948:	f7f8 fbd7 	bl	80100fa <USBD_CDC_ReceivePacket>
 801794c:	2800      	cmp	r0, #0
 801794e:	d1fa      	bne.n	8017946 <CDC_Receive_FS+0x6>

	if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 8017950:	b1cc      	cbz	r4, 8017986 <CDC_Receive_FS+0x46>
 8017952:	b1d5      	cbz	r5, 801798a <CDC_Receive_FS+0x4a>
 8017954:	682b      	ldr	r3, [r5, #0]
 8017956:	b943      	cbnz	r3, 801796a <CDC_Receive_FS+0x2a>
	{
	   return USBD_FAIL;
 8017958:	2002      	movs	r0, #2
 801795a:	bd38      	pop	{r3, r4, r5, pc}
    while (len--)
       if (FIFO_INCR(FIFO.head) == FIFO.tail)
             return USBD_FAIL;  // overrun
		else
		{
			FIFO.data[FIFO.head] = *Buf++;
 801795c:	7825      	ldrb	r5, [r4, #0]
 801795e:	490d      	ldr	r1, [pc, #52]	; (8017994 <CDC_Receive_FS+0x54>)
 8017960:	440a      	add	r2, r1
 8017962:	7215      	strb	r5, [r2, #8]
			FIFO.head = FIFO_INCR(FIFO.head);
 8017964:	600b      	str	r3, [r1, #0]
    while (len--)
 8017966:	4603      	mov	r3, r0
			FIFO.data[FIFO.head] = *Buf++;
 8017968:	3401      	adds	r4, #1
    while (len--)
 801796a:	1e58      	subs	r0, r3, #1
 801796c:	b14b      	cbz	r3, 8017982 <CDC_Receive_FS+0x42>
       if (FIFO_INCR(FIFO.head) == FIFO.tail)
 801796e:	4909      	ldr	r1, [pc, #36]	; (8017994 <CDC_Receive_FS+0x54>)
 8017970:	680a      	ldr	r2, [r1, #0]
 8017972:	1c53      	adds	r3, r2, #1
 8017974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017978:	6849      	ldr	r1, [r1, #4]
 801797a:	428b      	cmp	r3, r1
 801797c:	d1ee      	bne.n	801795c <CDC_Receive_FS+0x1c>
             return USBD_FAIL;  // overrun
 801797e:	2002      	movs	r0, #2
		}

    return (USBD_OK);

  /* USER CODE END 6 */
}
 8017980:	bd38      	pop	{r3, r4, r5, pc}
    return (USBD_OK);
 8017982:	2000      	movs	r0, #0
 8017984:	bd38      	pop	{r3, r4, r5, pc}
	   return USBD_FAIL;
 8017986:	2002      	movs	r0, #2
 8017988:	bd38      	pop	{r3, r4, r5, pc}
 801798a:	2002      	movs	r0, #2
 801798c:	bd38      	pop	{r3, r4, r5, pc}
 801798e:	bf00      	nop
 8017990:	2000659c 	.word	0x2000659c
 8017994:	20006328 	.word	0x20006328

08017998 <CDC_Init_FS>:
{
 8017998:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801799a:	4c06      	ldr	r4, [pc, #24]	; (80179b4 <CDC_Init_FS+0x1c>)
 801799c:	2200      	movs	r2, #0
 801799e:	4906      	ldr	r1, [pc, #24]	; (80179b8 <CDC_Init_FS+0x20>)
 80179a0:	4620      	mov	r0, r4
 80179a2:	f7f8 fb82 	bl	80100aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80179a6:	4905      	ldr	r1, [pc, #20]	; (80179bc <CDC_Init_FS+0x24>)
 80179a8:	4620      	mov	r0, r4
 80179aa:	f7f8 fb86 	bl	80100ba <USBD_CDC_SetRxBuffer>
}
 80179ae:	2000      	movs	r0, #0
 80179b0:	bd10      	pop	{r4, pc}
 80179b2:	bf00      	nop
 80179b4:	2000659c 	.word	0x2000659c
 80179b8:	20006938 	.word	0x20006938
 80179bc:	20006838 	.word	0x20006838

080179c0 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80179c0:	4b09      	ldr	r3, [pc, #36]	; (80179e8 <CDC_Transmit_FS+0x28>)
 80179c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  if (hcdc->TxState != 0){
 80179c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80179ca:	b10b      	cbz	r3, 80179d0 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80179cc:	2001      	movs	r0, #1
 80179ce:	4770      	bx	lr
{
 80179d0:	b510      	push	{r4, lr}
 80179d2:	460a      	mov	r2, r1
 80179d4:	4601      	mov	r1, r0
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80179d6:	4c04      	ldr	r4, [pc, #16]	; (80179e8 <CDC_Transmit_FS+0x28>)
 80179d8:	4620      	mov	r0, r4
 80179da:	f7f8 fb66 	bl	80100aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80179de:	4620      	mov	r0, r4
 80179e0:	f7f8 fb71 	bl	80100c6 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 80179e4:	bd10      	pop	{r4, pc}
 80179e6:	bf00      	nop
 80179e8:	2000659c 	.word	0x2000659c

080179ec <packetReceive>:
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void packetReceive()
{
 80179ec:	b510      	push	{r4, lr}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80179ee:	4c04      	ldr	r4, [pc, #16]	; (8017a00 <packetReceive+0x14>)
 80179f0:	4904      	ldr	r1, [pc, #16]	; (8017a04 <packetReceive+0x18>)
 80179f2:	4620      	mov	r0, r4
 80179f4:	f7f8 fb61 	bl	80100ba <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80179f8:	4620      	mov	r0, r4
 80179fa:	f7f8 fb7e 	bl	80100fa <USBD_CDC_ReceivePacket>
 80179fe:	bd10      	pop	{r4, pc}
 8017a00:	2000659c 	.word	0x2000659c
 8017a04:	20006838 	.word	0x20006838

08017a08 <CDC_Transmit_Busy>:
}

uint8_t CDC_Transmit_Busy(void)
{
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017a08:	4b03      	ldr	r3, [pc, #12]	; (8017a18 <CDC_Transmit_Busy+0x10>)
 8017a0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
	return hcdc->TxState;
 8017a0e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
}
 8017a12:	b2c0      	uxtb	r0, r0
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	2000659c 	.word	0x2000659c

08017a1c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017a1c:	2312      	movs	r3, #18
 8017a1e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8017a20:	4800      	ldr	r0, [pc, #0]	; (8017a24 <USBD_FS_DeviceDescriptor+0x8>)
 8017a22:	4770      	bx	lr
 8017a24:	20000138 	.word	0x20000138

08017a28 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017a28:	2304      	movs	r3, #4
 8017a2a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8017a2c:	4800      	ldr	r0, [pc, #0]	; (8017a30 <USBD_FS_LangIDStrDescriptor+0x8>)
 8017a2e:	4770      	bx	lr
 8017a30:	2000014c 	.word	0x2000014c

08017a34 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8017a34:	2300      	movs	r3, #0
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d216      	bcs.n	8017a68 <IntToUnicode+0x34>
{
 8017a3a:	b430      	push	{r4, r5}
 8017a3c:	e00b      	b.n	8017a56 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017a3e:	3437      	adds	r4, #55	; 0x37
 8017a40:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8017a44:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8017a46:	005c      	lsls	r4, r3, #1
 8017a48:	3401      	adds	r4, #1
 8017a4a:	2500      	movs	r5, #0
 8017a4c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8017a4e:	3301      	adds	r3, #1
 8017a50:	b2db      	uxtb	r3, r3
 8017a52:	4293      	cmp	r3, r2
 8017a54:	d206      	bcs.n	8017a64 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8017a56:	0f04      	lsrs	r4, r0, #28
 8017a58:	2c09      	cmp	r4, #9
 8017a5a:	d8f0      	bhi.n	8017a3e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8017a5c:	3430      	adds	r4, #48	; 0x30
 8017a5e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8017a62:	e7ef      	b.n	8017a44 <IntToUnicode+0x10>
  }
}
 8017a64:	bc30      	pop	{r4, r5}
 8017a66:	4770      	bx	lr
 8017a68:	4770      	bx	lr

08017a6a <Get_SerialNum>:
{
 8017a6a:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017a6c:	4b0a      	ldr	r3, [pc, #40]	; (8017a98 <Get_SerialNum+0x2e>)
 8017a6e:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017a70:	3304      	adds	r3, #4
 8017a72:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017a74:	3304      	adds	r3, #4
 8017a76:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8017a78:	18c0      	adds	r0, r0, r3
 8017a7a:	d100      	bne.n	8017a7e <Get_SerialNum+0x14>
 8017a7c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017a7e:	4d07      	ldr	r5, [pc, #28]	; (8017a9c <Get_SerialNum+0x32>)
 8017a80:	2208      	movs	r2, #8
 8017a82:	f105 011a 	add.w	r1, r5, #26
 8017a86:	f7ff ffd5 	bl	8017a34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017a8a:	2204      	movs	r2, #4
 8017a8c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8017a90:	4620      	mov	r0, r4
 8017a92:	f7ff ffcf 	bl	8017a34 <IntToUnicode>
}
 8017a96:	e7f1      	b.n	8017a7c <Get_SerialNum+0x12>
 8017a98:	1fff7a10 	.word	0x1fff7a10
 8017a9c:	20000138 	.word	0x20000138

08017aa0 <USBD_FS_SerialStrDescriptor>:
{
 8017aa0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8017aa2:	231a      	movs	r3, #26
 8017aa4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8017aa6:	f7ff ffe0 	bl	8017a6a <Get_SerialNum>
}
 8017aaa:	4801      	ldr	r0, [pc, #4]	; (8017ab0 <USBD_FS_SerialStrDescriptor+0x10>)
 8017aac:	bd08      	pop	{r3, pc}
 8017aae:	bf00      	nop
 8017ab0:	20000150 	.word	0x20000150

08017ab4 <USBD_FS_ProductStrDescriptor>:
{
 8017ab4:	b508      	push	{r3, lr}
 8017ab6:	460a      	mov	r2, r1
  if(speed == 0)
 8017ab8:	b128      	cbz	r0, 8017ac6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017aba:	4905      	ldr	r1, [pc, #20]	; (8017ad0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8017abc:	4805      	ldr	r0, [pc, #20]	; (8017ad4 <USBD_FS_ProductStrDescriptor+0x20>)
 8017abe:	f7f8 ffcd 	bl	8010a5c <USBD_GetString>
}
 8017ac2:	4803      	ldr	r0, [pc, #12]	; (8017ad0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8017ac4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017ac6:	4902      	ldr	r1, [pc, #8]	; (8017ad0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8017ac8:	4802      	ldr	r0, [pc, #8]	; (8017ad4 <USBD_FS_ProductStrDescriptor+0x20>)
 8017aca:	f7f8 ffc7 	bl	8010a5c <USBD_GetString>
 8017ace:	e7f8      	b.n	8017ac2 <USBD_FS_ProductStrDescriptor+0xe>
 8017ad0:	20006a38 	.word	0x20006a38
 8017ad4:	0801cf08 	.word	0x0801cf08

08017ad8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8017ad8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ada:	4c04      	ldr	r4, [pc, #16]	; (8017aec <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8017adc:	460a      	mov	r2, r1
 8017ade:	4621      	mov	r1, r4
 8017ae0:	4803      	ldr	r0, [pc, #12]	; (8017af0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8017ae2:	f7f8 ffbb 	bl	8010a5c <USBD_GetString>
}
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	bd10      	pop	{r4, pc}
 8017aea:	bf00      	nop
 8017aec:	20006a38 	.word	0x20006a38
 8017af0:	0801cf20 	.word	0x0801cf20

08017af4 <USBD_FS_ConfigStrDescriptor>:
{
 8017af4:	b508      	push	{r3, lr}
 8017af6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8017af8:	b128      	cbz	r0, 8017b06 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017afa:	4905      	ldr	r1, [pc, #20]	; (8017b10 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8017afc:	4805      	ldr	r0, [pc, #20]	; (8017b14 <USBD_FS_ConfigStrDescriptor+0x20>)
 8017afe:	f7f8 ffad 	bl	8010a5c <USBD_GetString>
}
 8017b02:	4803      	ldr	r0, [pc, #12]	; (8017b10 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8017b04:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b06:	4902      	ldr	r1, [pc, #8]	; (8017b10 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8017b08:	4802      	ldr	r0, [pc, #8]	; (8017b14 <USBD_FS_ConfigStrDescriptor+0x20>)
 8017b0a:	f7f8 ffa7 	bl	8010a5c <USBD_GetString>
 8017b0e:	e7f8      	b.n	8017b02 <USBD_FS_ConfigStrDescriptor+0xe>
 8017b10:	20006a38 	.word	0x20006a38
 8017b14:	0801cf34 	.word	0x0801cf34

08017b18 <USBD_FS_InterfaceStrDescriptor>:
{
 8017b18:	b508      	push	{r3, lr}
 8017b1a:	460a      	mov	r2, r1
  if(speed == 0)
 8017b1c:	b128      	cbz	r0, 8017b2a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b1e:	4905      	ldr	r1, [pc, #20]	; (8017b34 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8017b20:	4805      	ldr	r0, [pc, #20]	; (8017b38 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8017b22:	f7f8 ff9b 	bl	8010a5c <USBD_GetString>
}
 8017b26:	4803      	ldr	r0, [pc, #12]	; (8017b34 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8017b28:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b2a:	4902      	ldr	r1, [pc, #8]	; (8017b34 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8017b2c:	4802      	ldr	r0, [pc, #8]	; (8017b38 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8017b2e:	f7f8 ff95 	bl	8010a5c <USBD_GetString>
 8017b32:	e7f8      	b.n	8017b26 <USBD_FS_InterfaceStrDescriptor+0xe>
 8017b34:	20006a38 	.word	0x20006a38
 8017b38:	0801cf40 	.word	0x0801cf40

08017b3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017b3c:	b530      	push	{r4, r5, lr}
 8017b3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b40:	2300      	movs	r3, #0
 8017b42:	9303      	str	r3, [sp, #12]
 8017b44:	9304      	str	r3, [sp, #16]
 8017b46:	9305      	str	r3, [sp, #20]
 8017b48:	9306      	str	r3, [sp, #24]
 8017b4a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017b4c:	6803      	ldr	r3, [r0, #0]
 8017b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017b52:	d001      	beq.n	8017b58 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017b54:	b009      	add	sp, #36	; 0x24
 8017b56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b58:	2500      	movs	r5, #0
 8017b5a:	9501      	str	r5, [sp, #4]
 8017b5c:	4c16      	ldr	r4, [pc, #88]	; (8017bb8 <HAL_PCD_MspInit+0x7c>)
 8017b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b60:	f043 0301 	orr.w	r3, r3, #1
 8017b64:	6323      	str	r3, [r4, #48]	; 0x30
 8017b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b68:	f003 0301 	and.w	r3, r3, #1
 8017b6c:	9301      	str	r3, [sp, #4]
 8017b6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017b70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017b74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b76:	2302      	movs	r3, #2
 8017b78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b7a:	2303      	movs	r3, #3
 8017b7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017b7e:	230a      	movs	r3, #10
 8017b80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017b82:	a903      	add	r1, sp, #12
 8017b84:	480d      	ldr	r0, [pc, #52]	; (8017bbc <HAL_PCD_MspInit+0x80>)
 8017b86:	f7ed ffd9 	bl	8005b3c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b90:	6363      	str	r3, [r4, #52]	; 0x34
 8017b92:	9502      	str	r5, [sp, #8]
 8017b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017b9a:	6463      	str	r3, [r4, #68]	; 0x44
 8017b9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ba2:	9302      	str	r3, [sp, #8]
 8017ba4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017ba6:	462a      	mov	r2, r5
 8017ba8:	2105      	movs	r1, #5
 8017baa:	2043      	movs	r0, #67	; 0x43
 8017bac:	f7eb fbec 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017bb0:	2043      	movs	r0, #67	; 0x43
 8017bb2:	f7eb fc1b 	bl	80033ec <HAL_NVIC_EnableIRQ>
}
 8017bb6:	e7cd      	b.n	8017b54 <HAL_PCD_MspInit+0x18>
 8017bb8:	40023800 	.word	0x40023800
 8017bbc:	40020000 	.word	0x40020000

08017bc0 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8017bc0:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8017bc2:	6803      	ldr	r3, [r0, #0]
 8017bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017bc8:	d000      	beq.n	8017bcc <HAL_PCD_MspDeInit+0xc>
 8017bca:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8017bcc:	4a06      	ldr	r2, [pc, #24]	; (8017be8 <HAL_PCD_MspDeInit+0x28>)
 8017bce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8017bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017bd4:	6353      	str	r3, [r2, #52]	; 0x34
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8017bd6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8017bda:	4804      	ldr	r0, [pc, #16]	; (8017bec <HAL_PCD_MspDeInit+0x2c>)
 8017bdc:	f7ee f89c 	bl	8005d18 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8017be0:	2043      	movs	r0, #67	; 0x43
 8017be2:	f7eb fc11 	bl	8003408 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8017be6:	e7f0      	b.n	8017bca <HAL_PCD_MspDeInit+0xa>
 8017be8:	40023800 	.word	0x40023800
 8017bec:	40020000 	.word	0x40020000

08017bf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bf0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017bf2:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8017bf6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bfa:	f7f8 faee 	bl	80101da <USBD_LL_SetupStage>
 8017bfe:	bd08      	pop	{r3, pc}

08017c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c00:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017c02:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8017c06:	0093      	lsls	r3, r2, #2
 8017c08:	4403      	add	r3, r0
 8017c0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017c0e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017c12:	f7f8 fb0f 	bl	8010234 <USBD_LL_DataOutStage>
 8017c16:	bd08      	pop	{r3, pc}

08017c18 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c18:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c1a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8017c1e:	0093      	lsls	r3, r2, #2
 8017c20:	4403      	add	r3, r0
 8017c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017c24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017c28:	f7f8 fb4e 	bl	80102c8 <USBD_LL_DataInStage>
 8017c2c:	bd08      	pop	{r3, pc}

08017c2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c2e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017c30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017c34:	f7f8 fbec 	bl	8010410 <USBD_LL_SOF>
 8017c38:	bd08      	pop	{r3, pc}

08017c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8017c3a:	b510      	push	{r4, lr}
 8017c3c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017c3e:	68c3      	ldr	r3, [r0, #12]
 8017c40:	b12b      	cbz	r3, 8017c4e <HAL_PCD_ResetCallback+0x14>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017c42:	2b02      	cmp	r3, #2
 8017c44:	d00d      	beq.n	8017c62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8017c46:	f7e8 ff87 	bl	8000b58 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017c4a:	2101      	movs	r1, #1
 8017c4c:	e000      	b.n	8017c50 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 8017c4e:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017c50:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8017c54:	f7f8 fbca 	bl	80103ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017c58:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8017c5c:	f7f8 fb9e 	bl	801039c <USBD_LL_Reset>
 8017c60:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 8017c62:	2101      	movs	r1, #1
 8017c64:	e7f4      	b.n	8017c50 <HAL_PCD_ResetCallback+0x16>

08017c66 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c66:	b510      	push	{r4, lr}
 8017c68:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017c6a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017c6e:	f7f8 fbc0 	bl	80103f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c72:	6822      	ldr	r2, [r4, #0]
 8017c74:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8017c78:	f043 0301 	orr.w	r3, r3, #1
 8017c7c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017c80:	6a23      	ldr	r3, [r4, #32]
 8017c82:	b123      	cbz	r3, 8017c8e <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c84:	4a02      	ldr	r2, [pc, #8]	; (8017c90 <HAL_PCD_SuspendCallback+0x2a>)
 8017c86:	6913      	ldr	r3, [r2, #16]
 8017c88:	f043 0306 	orr.w	r3, r3, #6
 8017c8c:	6113      	str	r3, [r2, #16]
 8017c8e:	bd10      	pop	{r4, pc}
 8017c90:	e000ed00 	.word	0xe000ed00

08017c94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017c96:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017c9a:	f7f8 fbb3 	bl	8010404 <USBD_LL_Resume>
 8017c9e:	bd08      	pop	{r3, pc}

08017ca0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ca0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ca2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017ca6:	f7f8 fbc3 	bl	8010430 <USBD_LL_IsoOUTIncomplete>
 8017caa:	bd08      	pop	{r3, pc}

08017cac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cac:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017cae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017cb2:	f7f8 fbbb 	bl	801042c <USBD_LL_IsoINIncomplete>
 8017cb6:	bd08      	pop	{r3, pc}

08017cb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cb8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cba:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017cbe:	f7f8 fbb9 	bl	8010434 <USBD_LL_DevConnected>
 8017cc2:	bd08      	pop	{r3, pc}

08017cc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cc4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cc6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017cca:	f7f8 fbb5 	bl	8010438 <USBD_LL_DevDisconnected>
 8017cce:	bd08      	pop	{r3, pc}

08017cd0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017cd0:	7803      	ldrb	r3, [r0, #0]
 8017cd2:	b10b      	cbz	r3, 8017cd8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8017cd4:	2000      	movs	r0, #0
 8017cd6:	4770      	bx	lr
{
 8017cd8:	b510      	push	{r4, lr}
 8017cda:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8017cdc:	4815      	ldr	r0, [pc, #84]	; (8017d34 <USBD_LL_Init+0x64>)
 8017cde:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017ce2:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017cea:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017cec:	2304      	movs	r3, #4
 8017cee:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017cf0:	2202      	movs	r2, #2
 8017cf2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017cf8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017cfa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017cfc:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017cfe:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017d00:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017d02:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017d04:	f7f2 f85e 	bl	8009dc4 <HAL_PCD_Init>
 8017d08:	b980      	cbnz	r0, 8017d2c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017d0a:	4c0a      	ldr	r4, [pc, #40]	; (8017d34 <USBD_LL_Init+0x64>)
 8017d0c:	2180      	movs	r1, #128	; 0x80
 8017d0e:	4620      	mov	r0, r4
 8017d10:	f7f2 fe2c 	bl	800a96c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017d14:	2240      	movs	r2, #64	; 0x40
 8017d16:	2100      	movs	r1, #0
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f7f2 fe03 	bl	800a924 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017d1e:	2280      	movs	r2, #128	; 0x80
 8017d20:	2101      	movs	r1, #1
 8017d22:	4620      	mov	r0, r4
 8017d24:	f7f2 fdfe 	bl	800a924 <HAL_PCDEx_SetTxFiFo>
}
 8017d28:	2000      	movs	r0, #0
 8017d2a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8017d2c:	f7e8 ff14 	bl	8000b58 <Error_Handler>
 8017d30:	e7eb      	b.n	8017d0a <USBD_LL_Init+0x3a>
 8017d32:	bf00      	nop
 8017d34:	20006c38 	.word	0x20006c38

08017d38 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017d38:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8017d3c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8017d40:	d108      	bne.n	8017d54 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8017d42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017d46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8017d4a:	008a      	lsls	r2, r1, #2
 8017d4c:	4413      	add	r3, r2
 8017d4e:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8017d52:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8017d54:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017d58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8017d5c:	008a      	lsls	r2, r1, #2
 8017d5e:	4413      	add	r3, r2
 8017d60:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8017d64:	4770      	bx	lr

08017d66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d66:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017d68:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017d6c:	f7f2 fd06 	bl	800a77c <HAL_PCD_EP_GetRxCount>
}
 8017d70:	bd08      	pop	{r3, pc}

08017d72 <USBD_LL_Delay>:
  * @brief  Delays routine for the USB Device Library.
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
 8017d72:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8017d74:	f7e9 fb6c 	bl	8001450 <HAL_Delay>
 8017d78:	bd08      	pop	{r3, pc}

08017d7a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8017d7a:	b118      	cbz	r0, 8017d84 <USBD_Get_USB_Status+0xa>
 8017d7c:	2802      	cmp	r0, #2
 8017d7e:	d003      	beq.n	8017d88 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017d80:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8017d82:	4770      	bx	lr
      usb_status = USBD_OK;
 8017d84:	2000      	movs	r0, #0
 8017d86:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8017d88:	2001      	movs	r0, #1
    break;
 8017d8a:	4770      	bx	lr

08017d8c <USBD_LL_DeInit>:
{
 8017d8c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8017d8e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017d92:	f7f2 f8ea 	bl	8009f6a <HAL_PCD_DeInit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d96:	f7ff fff0 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017d9a:	bd08      	pop	{r3, pc}

08017d9c <USBD_LL_Start>:
{
 8017d9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8017d9e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017da2:	f7f2 f8a1 	bl	8009ee8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8017da6:	f7ff ffe8 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017daa:	bd08      	pop	{r3, pc}

08017dac <USBD_LL_Stop>:
{
 8017dac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8017dae:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017db2:	f7f2 f8ba 	bl	8009f2a <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017db6:	f7ff ffe0 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017dba:	bd08      	pop	{r3, pc}

08017dbc <USBD_LL_OpenEP>:
{
 8017dbc:	b510      	push	{r4, lr}
 8017dbe:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	4622      	mov	r2, r4
 8017dc4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017dc8:	f7f2 fc32 	bl	800a630 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dcc:	f7ff ffd5 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017dd0:	bd10      	pop	{r4, pc}

08017dd2 <USBD_LL_CloseEP>:
{
 8017dd2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017dd4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017dd8:	f7f2 fc6b 	bl	800a6b2 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8017ddc:	f7ff ffcd 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017de0:	bd08      	pop	{r3, pc}

08017de2 <USBD_LL_FlushEP>:
{
 8017de2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017de4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017de8:	f7f2 fd73 	bl	800a8d2 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017dec:	f7ff ffc5 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017df0:	bd08      	pop	{r3, pc}

08017df2 <USBD_LL_StallEP>:
{
 8017df2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017df4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017df8:	f7f2 fcf3 	bl	800a7e2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dfc:	f7ff ffbd 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017e00:	bd08      	pop	{r3, pc}

08017e02 <USBD_LL_ClearStallEP>:
{
 8017e02:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017e04:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017e08:	f7f2 fd2c 	bl	800a864 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8017e0c:	f7ff ffb5 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017e10:	bd08      	pop	{r3, pc}

08017e12 <USBD_LL_SetUSBAddress>:
{
 8017e12:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017e14:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017e18:	f7f2 fbf6 	bl	800a608 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e1c:	f7ff ffad 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017e20:	bd08      	pop	{r3, pc}

08017e22 <USBD_LL_Transmit>:
{
 8017e22:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017e24:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017e28:	f7f2 fcb1 	bl	800a78e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017e2c:	f7ff ffa5 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017e30:	bd08      	pop	{r3, pc}

08017e32 <USBD_LL_PrepareReceive>:
{
 8017e32:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017e34:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8017e38:	f7f2 fc72 	bl	800a720 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017e3c:	f7ff ff9d 	bl	8017d7a <USBD_Get_USB_Status>
}
 8017e40:	bd08      	pop	{r3, pc}
 8017e42:	bf00      	nop
 8017e44:	0801d21c 	.word	0x0801d21c
 8017e48:	20000000 	.word	0x20000000
 8017e4c:	200007fc 	.word	0x200007fc
 8017e50:	200007fc 	.word	0x200007fc
 8017e54:	20007050 	.word	0x20007050

08017e58 <strlen>:
 8017e58:	4603      	mov	r3, r0
 8017e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e5e:	2a00      	cmp	r2, #0
 8017e60:	d1fb      	bne.n	8017e5a <strlen+0x2>
 8017e62:	1a18      	subs	r0, r3, r0
 8017e64:	3801      	subs	r0, #1
 8017e66:	4770      	bx	lr
	...

08017e70 <memchr>:
 8017e70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8017e74:	2a10      	cmp	r2, #16
 8017e76:	db2b      	blt.n	8017ed0 <memchr+0x60>
 8017e78:	f010 0f07 	tst.w	r0, #7
 8017e7c:	d008      	beq.n	8017e90 <memchr+0x20>
 8017e7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017e82:	3a01      	subs	r2, #1
 8017e84:	428b      	cmp	r3, r1
 8017e86:	d02d      	beq.n	8017ee4 <memchr+0x74>
 8017e88:	f010 0f07 	tst.w	r0, #7
 8017e8c:	b342      	cbz	r2, 8017ee0 <memchr+0x70>
 8017e8e:	d1f6      	bne.n	8017e7e <memchr+0xe>
 8017e90:	b4f0      	push	{r4, r5, r6, r7}
 8017e92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8017e96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8017e9a:	f022 0407 	bic.w	r4, r2, #7
 8017e9e:	f07f 0700 	mvns.w	r7, #0
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8017ea8:	3c08      	subs	r4, #8
 8017eaa:	ea85 0501 	eor.w	r5, r5, r1
 8017eae:	ea86 0601 	eor.w	r6, r6, r1
 8017eb2:	fa85 f547 	uadd8	r5, r5, r7
 8017eb6:	faa3 f587 	sel	r5, r3, r7
 8017eba:	fa86 f647 	uadd8	r6, r6, r7
 8017ebe:	faa5 f687 	sel	r6, r5, r7
 8017ec2:	b98e      	cbnz	r6, 8017ee8 <memchr+0x78>
 8017ec4:	d1ee      	bne.n	8017ea4 <memchr+0x34>
 8017ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8017ec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8017ecc:	f002 0207 	and.w	r2, r2, #7
 8017ed0:	b132      	cbz	r2, 8017ee0 <memchr+0x70>
 8017ed2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017ed6:	3a01      	subs	r2, #1
 8017ed8:	ea83 0301 	eor.w	r3, r3, r1
 8017edc:	b113      	cbz	r3, 8017ee4 <memchr+0x74>
 8017ede:	d1f8      	bne.n	8017ed2 <memchr+0x62>
 8017ee0:	2000      	movs	r0, #0
 8017ee2:	4770      	bx	lr
 8017ee4:	3801      	subs	r0, #1
 8017ee6:	4770      	bx	lr
 8017ee8:	2d00      	cmp	r5, #0
 8017eea:	bf06      	itte	eq
 8017eec:	4635      	moveq	r5, r6
 8017eee:	3803      	subeq	r0, #3
 8017ef0:	3807      	subne	r0, #7
 8017ef2:	f015 0f01 	tst.w	r5, #1
 8017ef6:	d107      	bne.n	8017f08 <memchr+0x98>
 8017ef8:	3001      	adds	r0, #1
 8017efa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8017efe:	bf02      	ittt	eq
 8017f00:	3001      	addeq	r0, #1
 8017f02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8017f06:	3001      	addeq	r0, #1
 8017f08:	bcf0      	pop	{r4, r5, r6, r7}
 8017f0a:	3801      	subs	r0, #1
 8017f0c:	4770      	bx	lr
 8017f0e:	bf00      	nop

08017f10 <strcmp>:
 8017f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f18:	2a01      	cmp	r2, #1
 8017f1a:	bf28      	it	cs
 8017f1c:	429a      	cmpcs	r2, r3
 8017f1e:	d0f7      	beq.n	8017f10 <strcmp>
 8017f20:	1ad0      	subs	r0, r2, r3
 8017f22:	4770      	bx	lr

08017f24 <__aeabi_drsub>:
 8017f24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8017f28:	e002      	b.n	8017f30 <__adddf3>
 8017f2a:	bf00      	nop

08017f2c <__aeabi_dsub>:
 8017f2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08017f30 <__adddf3>:
 8017f30:	b530      	push	{r4, r5, lr}
 8017f32:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8017f36:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8017f3a:	ea94 0f05 	teq	r4, r5
 8017f3e:	bf08      	it	eq
 8017f40:	ea90 0f02 	teqeq	r0, r2
 8017f44:	bf1f      	itttt	ne
 8017f46:	ea54 0c00 	orrsne.w	ip, r4, r0
 8017f4a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8017f4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8017f52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8017f56:	f000 80e2 	beq.w	801811e <__adddf3+0x1ee>
 8017f5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8017f5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8017f62:	bfb8      	it	lt
 8017f64:	426d      	neglt	r5, r5
 8017f66:	dd0c      	ble.n	8017f82 <__adddf3+0x52>
 8017f68:	442c      	add	r4, r5
 8017f6a:	ea80 0202 	eor.w	r2, r0, r2
 8017f6e:	ea81 0303 	eor.w	r3, r1, r3
 8017f72:	ea82 0000 	eor.w	r0, r2, r0
 8017f76:	ea83 0101 	eor.w	r1, r3, r1
 8017f7a:	ea80 0202 	eor.w	r2, r0, r2
 8017f7e:	ea81 0303 	eor.w	r3, r1, r3
 8017f82:	2d36      	cmp	r5, #54	; 0x36
 8017f84:	bf88      	it	hi
 8017f86:	bd30      	pophi	{r4, r5, pc}
 8017f88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8017f8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8017f90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8017f94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8017f98:	d002      	beq.n	8017fa0 <__adddf3+0x70>
 8017f9a:	4240      	negs	r0, r0
 8017f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8017fa0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8017fa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8017fa8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8017fac:	d002      	beq.n	8017fb4 <__adddf3+0x84>
 8017fae:	4252      	negs	r2, r2
 8017fb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8017fb4:	ea94 0f05 	teq	r4, r5
 8017fb8:	f000 80a7 	beq.w	801810a <__adddf3+0x1da>
 8017fbc:	f1a4 0401 	sub.w	r4, r4, #1
 8017fc0:	f1d5 0e20 	rsbs	lr, r5, #32
 8017fc4:	db0d      	blt.n	8017fe2 <__adddf3+0xb2>
 8017fc6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8017fca:	fa22 f205 	lsr.w	r2, r2, r5
 8017fce:	1880      	adds	r0, r0, r2
 8017fd0:	f141 0100 	adc.w	r1, r1, #0
 8017fd4:	fa03 f20e 	lsl.w	r2, r3, lr
 8017fd8:	1880      	adds	r0, r0, r2
 8017fda:	fa43 f305 	asr.w	r3, r3, r5
 8017fde:	4159      	adcs	r1, r3
 8017fe0:	e00e      	b.n	8018000 <__adddf3+0xd0>
 8017fe2:	f1a5 0520 	sub.w	r5, r5, #32
 8017fe6:	f10e 0e20 	add.w	lr, lr, #32
 8017fea:	2a01      	cmp	r2, #1
 8017fec:	fa03 fc0e 	lsl.w	ip, r3, lr
 8017ff0:	bf28      	it	cs
 8017ff2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8017ff6:	fa43 f305 	asr.w	r3, r3, r5
 8017ffa:	18c0      	adds	r0, r0, r3
 8017ffc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018004:	d507      	bpl.n	8018016 <__adddf3+0xe6>
 8018006:	f04f 0e00 	mov.w	lr, #0
 801800a:	f1dc 0c00 	rsbs	ip, ip, #0
 801800e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018012:	eb6e 0101 	sbc.w	r1, lr, r1
 8018016:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801801a:	d31b      	bcc.n	8018054 <__adddf3+0x124>
 801801c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018020:	d30c      	bcc.n	801803c <__adddf3+0x10c>
 8018022:	0849      	lsrs	r1, r1, #1
 8018024:	ea5f 0030 	movs.w	r0, r0, rrx
 8018028:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801802c:	f104 0401 	add.w	r4, r4, #1
 8018030:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018034:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018038:	f080 809a 	bcs.w	8018170 <__adddf3+0x240>
 801803c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018040:	bf08      	it	eq
 8018042:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018046:	f150 0000 	adcs.w	r0, r0, #0
 801804a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801804e:	ea41 0105 	orr.w	r1, r1, r5
 8018052:	bd30      	pop	{r4, r5, pc}
 8018054:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018058:	4140      	adcs	r0, r0
 801805a:	eb41 0101 	adc.w	r1, r1, r1
 801805e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018062:	f1a4 0401 	sub.w	r4, r4, #1
 8018066:	d1e9      	bne.n	801803c <__adddf3+0x10c>
 8018068:	f091 0f00 	teq	r1, #0
 801806c:	bf04      	itt	eq
 801806e:	4601      	moveq	r1, r0
 8018070:	2000      	moveq	r0, #0
 8018072:	fab1 f381 	clz	r3, r1
 8018076:	bf08      	it	eq
 8018078:	3320      	addeq	r3, #32
 801807a:	f1a3 030b 	sub.w	r3, r3, #11
 801807e:	f1b3 0220 	subs.w	r2, r3, #32
 8018082:	da0c      	bge.n	801809e <__adddf3+0x16e>
 8018084:	320c      	adds	r2, #12
 8018086:	dd08      	ble.n	801809a <__adddf3+0x16a>
 8018088:	f102 0c14 	add.w	ip, r2, #20
 801808c:	f1c2 020c 	rsb	r2, r2, #12
 8018090:	fa01 f00c 	lsl.w	r0, r1, ip
 8018094:	fa21 f102 	lsr.w	r1, r1, r2
 8018098:	e00c      	b.n	80180b4 <__adddf3+0x184>
 801809a:	f102 0214 	add.w	r2, r2, #20
 801809e:	bfd8      	it	le
 80180a0:	f1c2 0c20 	rsble	ip, r2, #32
 80180a4:	fa01 f102 	lsl.w	r1, r1, r2
 80180a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80180ac:	bfdc      	itt	le
 80180ae:	ea41 010c 	orrle.w	r1, r1, ip
 80180b2:	4090      	lslle	r0, r2
 80180b4:	1ae4      	subs	r4, r4, r3
 80180b6:	bfa2      	ittt	ge
 80180b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80180bc:	4329      	orrge	r1, r5
 80180be:	bd30      	popge	{r4, r5, pc}
 80180c0:	ea6f 0404 	mvn.w	r4, r4
 80180c4:	3c1f      	subs	r4, #31
 80180c6:	da1c      	bge.n	8018102 <__adddf3+0x1d2>
 80180c8:	340c      	adds	r4, #12
 80180ca:	dc0e      	bgt.n	80180ea <__adddf3+0x1ba>
 80180cc:	f104 0414 	add.w	r4, r4, #20
 80180d0:	f1c4 0220 	rsb	r2, r4, #32
 80180d4:	fa20 f004 	lsr.w	r0, r0, r4
 80180d8:	fa01 f302 	lsl.w	r3, r1, r2
 80180dc:	ea40 0003 	orr.w	r0, r0, r3
 80180e0:	fa21 f304 	lsr.w	r3, r1, r4
 80180e4:	ea45 0103 	orr.w	r1, r5, r3
 80180e8:	bd30      	pop	{r4, r5, pc}
 80180ea:	f1c4 040c 	rsb	r4, r4, #12
 80180ee:	f1c4 0220 	rsb	r2, r4, #32
 80180f2:	fa20 f002 	lsr.w	r0, r0, r2
 80180f6:	fa01 f304 	lsl.w	r3, r1, r4
 80180fa:	ea40 0003 	orr.w	r0, r0, r3
 80180fe:	4629      	mov	r1, r5
 8018100:	bd30      	pop	{r4, r5, pc}
 8018102:	fa21 f004 	lsr.w	r0, r1, r4
 8018106:	4629      	mov	r1, r5
 8018108:	bd30      	pop	{r4, r5, pc}
 801810a:	f094 0f00 	teq	r4, #0
 801810e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018112:	bf06      	itte	eq
 8018114:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018118:	3401      	addeq	r4, #1
 801811a:	3d01      	subne	r5, #1
 801811c:	e74e      	b.n	8017fbc <__adddf3+0x8c>
 801811e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018122:	bf18      	it	ne
 8018124:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018128:	d029      	beq.n	801817e <__adddf3+0x24e>
 801812a:	ea94 0f05 	teq	r4, r5
 801812e:	bf08      	it	eq
 8018130:	ea90 0f02 	teqeq	r0, r2
 8018134:	d005      	beq.n	8018142 <__adddf3+0x212>
 8018136:	ea54 0c00 	orrs.w	ip, r4, r0
 801813a:	bf04      	itt	eq
 801813c:	4619      	moveq	r1, r3
 801813e:	4610      	moveq	r0, r2
 8018140:	bd30      	pop	{r4, r5, pc}
 8018142:	ea91 0f03 	teq	r1, r3
 8018146:	bf1e      	ittt	ne
 8018148:	2100      	movne	r1, #0
 801814a:	2000      	movne	r0, #0
 801814c:	bd30      	popne	{r4, r5, pc}
 801814e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018152:	d105      	bne.n	8018160 <__adddf3+0x230>
 8018154:	0040      	lsls	r0, r0, #1
 8018156:	4149      	adcs	r1, r1
 8018158:	bf28      	it	cs
 801815a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801815e:	bd30      	pop	{r4, r5, pc}
 8018160:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018164:	bf3c      	itt	cc
 8018166:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801816a:	bd30      	popcc	{r4, r5, pc}
 801816c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018170:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018178:	f04f 0000 	mov.w	r0, #0
 801817c:	bd30      	pop	{r4, r5, pc}
 801817e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018182:	bf1a      	itte	ne
 8018184:	4619      	movne	r1, r3
 8018186:	4610      	movne	r0, r2
 8018188:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801818c:	bf1c      	itt	ne
 801818e:	460b      	movne	r3, r1
 8018190:	4602      	movne	r2, r0
 8018192:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018196:	bf06      	itte	eq
 8018198:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801819c:	ea91 0f03 	teqeq	r1, r3
 80181a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80181a4:	bd30      	pop	{r4, r5, pc}
 80181a6:	bf00      	nop

080181a8 <__aeabi_ui2d>:
 80181a8:	f090 0f00 	teq	r0, #0
 80181ac:	bf04      	itt	eq
 80181ae:	2100      	moveq	r1, #0
 80181b0:	4770      	bxeq	lr
 80181b2:	b530      	push	{r4, r5, lr}
 80181b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80181b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80181bc:	f04f 0500 	mov.w	r5, #0
 80181c0:	f04f 0100 	mov.w	r1, #0
 80181c4:	e750      	b.n	8018068 <__adddf3+0x138>
 80181c6:	bf00      	nop

080181c8 <__aeabi_i2d>:
 80181c8:	f090 0f00 	teq	r0, #0
 80181cc:	bf04      	itt	eq
 80181ce:	2100      	moveq	r1, #0
 80181d0:	4770      	bxeq	lr
 80181d2:	b530      	push	{r4, r5, lr}
 80181d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80181d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80181dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80181e0:	bf48      	it	mi
 80181e2:	4240      	negmi	r0, r0
 80181e4:	f04f 0100 	mov.w	r1, #0
 80181e8:	e73e      	b.n	8018068 <__adddf3+0x138>
 80181ea:	bf00      	nop

080181ec <__aeabi_f2d>:
 80181ec:	0042      	lsls	r2, r0, #1
 80181ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80181f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80181f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80181fa:	bf1f      	itttt	ne
 80181fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018200:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018204:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018208:	4770      	bxne	lr
 801820a:	f092 0f00 	teq	r2, #0
 801820e:	bf14      	ite	ne
 8018210:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018214:	4770      	bxeq	lr
 8018216:	b530      	push	{r4, r5, lr}
 8018218:	f44f 7460 	mov.w	r4, #896	; 0x380
 801821c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018224:	e720      	b.n	8018068 <__adddf3+0x138>
 8018226:	bf00      	nop

08018228 <__aeabi_ul2d>:
 8018228:	ea50 0201 	orrs.w	r2, r0, r1
 801822c:	bf08      	it	eq
 801822e:	4770      	bxeq	lr
 8018230:	b530      	push	{r4, r5, lr}
 8018232:	f04f 0500 	mov.w	r5, #0
 8018236:	e00a      	b.n	801824e <__aeabi_l2d+0x16>

08018238 <__aeabi_l2d>:
 8018238:	ea50 0201 	orrs.w	r2, r0, r1
 801823c:	bf08      	it	eq
 801823e:	4770      	bxeq	lr
 8018240:	b530      	push	{r4, r5, lr}
 8018242:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018246:	d502      	bpl.n	801824e <__aeabi_l2d+0x16>
 8018248:	4240      	negs	r0, r0
 801824a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801824e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018252:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018256:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801825a:	f43f aedc 	beq.w	8018016 <__adddf3+0xe6>
 801825e:	f04f 0203 	mov.w	r2, #3
 8018262:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018266:	bf18      	it	ne
 8018268:	3203      	addne	r2, #3
 801826a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801826e:	bf18      	it	ne
 8018270:	3203      	addne	r2, #3
 8018272:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018276:	f1c2 0320 	rsb	r3, r2, #32
 801827a:	fa00 fc03 	lsl.w	ip, r0, r3
 801827e:	fa20 f002 	lsr.w	r0, r0, r2
 8018282:	fa01 fe03 	lsl.w	lr, r1, r3
 8018286:	ea40 000e 	orr.w	r0, r0, lr
 801828a:	fa21 f102 	lsr.w	r1, r1, r2
 801828e:	4414      	add	r4, r2
 8018290:	e6c1      	b.n	8018016 <__adddf3+0xe6>
 8018292:	bf00      	nop

08018294 <__aeabi_dmul>:
 8018294:	b570      	push	{r4, r5, r6, lr}
 8018296:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801829a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801829e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80182a2:	bf1d      	ittte	ne
 80182a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80182a8:	ea94 0f0c 	teqne	r4, ip
 80182ac:	ea95 0f0c 	teqne	r5, ip
 80182b0:	f000 f8de 	bleq	8018470 <__aeabi_dmul+0x1dc>
 80182b4:	442c      	add	r4, r5
 80182b6:	ea81 0603 	eor.w	r6, r1, r3
 80182ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80182be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80182c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80182c6:	bf18      	it	ne
 80182c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80182cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80182d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80182d4:	d038      	beq.n	8018348 <__aeabi_dmul+0xb4>
 80182d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80182da:	f04f 0500 	mov.w	r5, #0
 80182de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80182e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80182e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80182ea:	f04f 0600 	mov.w	r6, #0
 80182ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80182f2:	f09c 0f00 	teq	ip, #0
 80182f6:	bf18      	it	ne
 80182f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80182fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018300:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018304:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018308:	d204      	bcs.n	8018314 <__aeabi_dmul+0x80>
 801830a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801830e:	416d      	adcs	r5, r5
 8018310:	eb46 0606 	adc.w	r6, r6, r6
 8018314:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018318:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 801831c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018320:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018324:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018328:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801832c:	bf88      	it	hi
 801832e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018332:	d81e      	bhi.n	8018372 <__aeabi_dmul+0xde>
 8018334:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018338:	bf08      	it	eq
 801833a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801833e:	f150 0000 	adcs.w	r0, r0, #0
 8018342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018346:	bd70      	pop	{r4, r5, r6, pc}
 8018348:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 801834c:	ea46 0101 	orr.w	r1, r6, r1
 8018350:	ea40 0002 	orr.w	r0, r0, r2
 8018354:	ea81 0103 	eor.w	r1, r1, r3
 8018358:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 801835c:	bfc2      	ittt	gt
 801835e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018362:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018366:	bd70      	popgt	{r4, r5, r6, pc}
 8018368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801836c:	f04f 0e00 	mov.w	lr, #0
 8018370:	3c01      	subs	r4, #1
 8018372:	f300 80ab 	bgt.w	80184cc <__aeabi_dmul+0x238>
 8018376:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801837a:	bfde      	ittt	le
 801837c:	2000      	movle	r0, #0
 801837e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018382:	bd70      	pople	{r4, r5, r6, pc}
 8018384:	f1c4 0400 	rsb	r4, r4, #0
 8018388:	3c20      	subs	r4, #32
 801838a:	da35      	bge.n	80183f8 <__aeabi_dmul+0x164>
 801838c:	340c      	adds	r4, #12
 801838e:	dc1b      	bgt.n	80183c8 <__aeabi_dmul+0x134>
 8018390:	f104 0414 	add.w	r4, r4, #20
 8018394:	f1c4 0520 	rsb	r5, r4, #32
 8018398:	fa00 f305 	lsl.w	r3, r0, r5
 801839c:	fa20 f004 	lsr.w	r0, r0, r4
 80183a0:	fa01 f205 	lsl.w	r2, r1, r5
 80183a4:	ea40 0002 	orr.w	r0, r0, r2
 80183a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80183ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80183b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80183b4:	fa21 f604 	lsr.w	r6, r1, r4
 80183b8:	eb42 0106 	adc.w	r1, r2, r6
 80183bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80183c0:	bf08      	it	eq
 80183c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
 80183c8:	f1c4 040c 	rsb	r4, r4, #12
 80183cc:	f1c4 0520 	rsb	r5, r4, #32
 80183d0:	fa00 f304 	lsl.w	r3, r0, r4
 80183d4:	fa20 f005 	lsr.w	r0, r0, r5
 80183d8:	fa01 f204 	lsl.w	r2, r1, r4
 80183dc:	ea40 0002 	orr.w	r0, r0, r2
 80183e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80183e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80183e8:	f141 0100 	adc.w	r1, r1, #0
 80183ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80183f0:	bf08      	it	eq
 80183f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80183f6:	bd70      	pop	{r4, r5, r6, pc}
 80183f8:	f1c4 0520 	rsb	r5, r4, #32
 80183fc:	fa00 f205 	lsl.w	r2, r0, r5
 8018400:	ea4e 0e02 	orr.w	lr, lr, r2
 8018404:	fa20 f304 	lsr.w	r3, r0, r4
 8018408:	fa01 f205 	lsl.w	r2, r1, r5
 801840c:	ea43 0302 	orr.w	r3, r3, r2
 8018410:	fa21 f004 	lsr.w	r0, r1, r4
 8018414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018418:	fa21 f204 	lsr.w	r2, r1, r4
 801841c:	ea20 0002 	bic.w	r0, r0, r2
 8018420:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018424:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018428:	bf08      	it	eq
 801842a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801842e:	bd70      	pop	{r4, r5, r6, pc}
 8018430:	f094 0f00 	teq	r4, #0
 8018434:	d10f      	bne.n	8018456 <__aeabi_dmul+0x1c2>
 8018436:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801843a:	0040      	lsls	r0, r0, #1
 801843c:	eb41 0101 	adc.w	r1, r1, r1
 8018440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018444:	bf08      	it	eq
 8018446:	3c01      	subeq	r4, #1
 8018448:	d0f7      	beq.n	801843a <__aeabi_dmul+0x1a6>
 801844a:	ea41 0106 	orr.w	r1, r1, r6
 801844e:	f095 0f00 	teq	r5, #0
 8018452:	bf18      	it	ne
 8018454:	4770      	bxne	lr
 8018456:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801845a:	0052      	lsls	r2, r2, #1
 801845c:	eb43 0303 	adc.w	r3, r3, r3
 8018460:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8018464:	bf08      	it	eq
 8018466:	3d01      	subeq	r5, #1
 8018468:	d0f7      	beq.n	801845a <__aeabi_dmul+0x1c6>
 801846a:	ea43 0306 	orr.w	r3, r3, r6
 801846e:	4770      	bx	lr
 8018470:	ea94 0f0c 	teq	r4, ip
 8018474:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018478:	bf18      	it	ne
 801847a:	ea95 0f0c 	teqne	r5, ip
 801847e:	d00c      	beq.n	801849a <__aeabi_dmul+0x206>
 8018480:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018484:	bf18      	it	ne
 8018486:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801848a:	d1d1      	bne.n	8018430 <__aeabi_dmul+0x19c>
 801848c:	ea81 0103 	eor.w	r1, r1, r3
 8018490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018494:	f04f 0000 	mov.w	r0, #0
 8018498:	bd70      	pop	{r4, r5, r6, pc}
 801849a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801849e:	bf06      	itte	eq
 80184a0:	4610      	moveq	r0, r2
 80184a2:	4619      	moveq	r1, r3
 80184a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80184a8:	d019      	beq.n	80184de <__aeabi_dmul+0x24a>
 80184aa:	ea94 0f0c 	teq	r4, ip
 80184ae:	d102      	bne.n	80184b6 <__aeabi_dmul+0x222>
 80184b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80184b4:	d113      	bne.n	80184de <__aeabi_dmul+0x24a>
 80184b6:	ea95 0f0c 	teq	r5, ip
 80184ba:	d105      	bne.n	80184c8 <__aeabi_dmul+0x234>
 80184bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80184c0:	bf1c      	itt	ne
 80184c2:	4610      	movne	r0, r2
 80184c4:	4619      	movne	r1, r3
 80184c6:	d10a      	bne.n	80184de <__aeabi_dmul+0x24a>
 80184c8:	ea81 0103 	eor.w	r1, r1, r3
 80184cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80184d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80184d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80184d8:	f04f 0000 	mov.w	r0, #0
 80184dc:	bd70      	pop	{r4, r5, r6, pc}
 80184de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80184e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80184e6:	bd70      	pop	{r4, r5, r6, pc}

080184e8 <__aeabi_ddiv>:
 80184e8:	b570      	push	{r4, r5, r6, lr}
 80184ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80184ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80184f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80184f6:	bf1d      	ittte	ne
 80184f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80184fc:	ea94 0f0c 	teqne	r4, ip
 8018500:	ea95 0f0c 	teqne	r5, ip
 8018504:	f000 f8a7 	bleq	8018656 <__aeabi_ddiv+0x16e>
 8018508:	eba4 0405 	sub.w	r4, r4, r5
 801850c:	ea81 0e03 	eor.w	lr, r1, r3
 8018510:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018514:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018518:	f000 8088 	beq.w	801862c <__aeabi_ddiv+0x144>
 801851c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018520:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8018524:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8018528:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801852c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8018530:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8018534:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8018538:	ea4f 2600 	mov.w	r6, r0, lsl #8
 801853c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8018540:	429d      	cmp	r5, r3
 8018542:	bf08      	it	eq
 8018544:	4296      	cmpeq	r6, r2
 8018546:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801854a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801854e:	d202      	bcs.n	8018556 <__aeabi_ddiv+0x6e>
 8018550:	085b      	lsrs	r3, r3, #1
 8018552:	ea4f 0232 	mov.w	r2, r2, rrx
 8018556:	1ab6      	subs	r6, r6, r2
 8018558:	eb65 0503 	sbc.w	r5, r5, r3
 801855c:	085b      	lsrs	r3, r3, #1
 801855e:	ea4f 0232 	mov.w	r2, r2, rrx
 8018562:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8018566:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801856a:	ebb6 0e02 	subs.w	lr, r6, r2
 801856e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018572:	bf22      	ittt	cs
 8018574:	1ab6      	subcs	r6, r6, r2
 8018576:	4675      	movcs	r5, lr
 8018578:	ea40 000c 	orrcs.w	r0, r0, ip
 801857c:	085b      	lsrs	r3, r3, #1
 801857e:	ea4f 0232 	mov.w	r2, r2, rrx
 8018582:	ebb6 0e02 	subs.w	lr, r6, r2
 8018586:	eb75 0e03 	sbcs.w	lr, r5, r3
 801858a:	bf22      	ittt	cs
 801858c:	1ab6      	subcs	r6, r6, r2
 801858e:	4675      	movcs	r5, lr
 8018590:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018594:	085b      	lsrs	r3, r3, #1
 8018596:	ea4f 0232 	mov.w	r2, r2, rrx
 801859a:	ebb6 0e02 	subs.w	lr, r6, r2
 801859e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80185a2:	bf22      	ittt	cs
 80185a4:	1ab6      	subcs	r6, r6, r2
 80185a6:	4675      	movcs	r5, lr
 80185a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80185ac:	085b      	lsrs	r3, r3, #1
 80185ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80185b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80185b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80185ba:	bf22      	ittt	cs
 80185bc:	1ab6      	subcs	r6, r6, r2
 80185be:	4675      	movcs	r5, lr
 80185c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80185c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80185c8:	d018      	beq.n	80185fc <__aeabi_ddiv+0x114>
 80185ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80185ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80185d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80185d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80185da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80185de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80185e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80185e6:	d1c0      	bne.n	801856a <__aeabi_ddiv+0x82>
 80185e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80185ec:	d10b      	bne.n	8018606 <__aeabi_ddiv+0x11e>
 80185ee:	ea41 0100 	orr.w	r1, r1, r0
 80185f2:	f04f 0000 	mov.w	r0, #0
 80185f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80185fa:	e7b6      	b.n	801856a <__aeabi_ddiv+0x82>
 80185fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018600:	bf04      	itt	eq
 8018602:	4301      	orreq	r1, r0
 8018604:	2000      	moveq	r0, #0
 8018606:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801860a:	bf88      	it	hi
 801860c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018610:	f63f aeaf 	bhi.w	8018372 <__aeabi_dmul+0xde>
 8018614:	ebb5 0c03 	subs.w	ip, r5, r3
 8018618:	bf04      	itt	eq
 801861a:	ebb6 0c02 	subseq.w	ip, r6, r2
 801861e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018622:	f150 0000 	adcs.w	r0, r0, #0
 8018626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801862a:	bd70      	pop	{r4, r5, r6, pc}
 801862c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8018630:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8018634:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8018638:	bfc2      	ittt	gt
 801863a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801863e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018642:	bd70      	popgt	{r4, r5, r6, pc}
 8018644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018648:	f04f 0e00 	mov.w	lr, #0
 801864c:	3c01      	subs	r4, #1
 801864e:	e690      	b.n	8018372 <__aeabi_dmul+0xde>
 8018650:	ea45 0e06 	orr.w	lr, r5, r6
 8018654:	e68d      	b.n	8018372 <__aeabi_dmul+0xde>
 8018656:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801865a:	ea94 0f0c 	teq	r4, ip
 801865e:	bf08      	it	eq
 8018660:	ea95 0f0c 	teqeq	r5, ip
 8018664:	f43f af3b 	beq.w	80184de <__aeabi_dmul+0x24a>
 8018668:	ea94 0f0c 	teq	r4, ip
 801866c:	d10a      	bne.n	8018684 <__aeabi_ddiv+0x19c>
 801866e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018672:	f47f af34 	bne.w	80184de <__aeabi_dmul+0x24a>
 8018676:	ea95 0f0c 	teq	r5, ip
 801867a:	f47f af25 	bne.w	80184c8 <__aeabi_dmul+0x234>
 801867e:	4610      	mov	r0, r2
 8018680:	4619      	mov	r1, r3
 8018682:	e72c      	b.n	80184de <__aeabi_dmul+0x24a>
 8018684:	ea95 0f0c 	teq	r5, ip
 8018688:	d106      	bne.n	8018698 <__aeabi_ddiv+0x1b0>
 801868a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801868e:	f43f aefd 	beq.w	801848c <__aeabi_dmul+0x1f8>
 8018692:	4610      	mov	r0, r2
 8018694:	4619      	mov	r1, r3
 8018696:	e722      	b.n	80184de <__aeabi_dmul+0x24a>
 8018698:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801869c:	bf18      	it	ne
 801869e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80186a2:	f47f aec5 	bne.w	8018430 <__aeabi_dmul+0x19c>
 80186a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80186aa:	f47f af0d 	bne.w	80184c8 <__aeabi_dmul+0x234>
 80186ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80186b2:	f47f aeeb 	bne.w	801848c <__aeabi_dmul+0x1f8>
 80186b6:	e712      	b.n	80184de <__aeabi_dmul+0x24a>

080186b8 <__gedf2>:
 80186b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80186bc:	e006      	b.n	80186cc <__cmpdf2+0x4>
 80186be:	bf00      	nop

080186c0 <__ledf2>:
 80186c0:	f04f 0c01 	mov.w	ip, #1
 80186c4:	e002      	b.n	80186cc <__cmpdf2+0x4>
 80186c6:	bf00      	nop

080186c8 <__cmpdf2>:
 80186c8:	f04f 0c01 	mov.w	ip, #1
 80186cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80186d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80186d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80186d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80186dc:	bf18      	it	ne
 80186de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80186e2:	d01b      	beq.n	801871c <__cmpdf2+0x54>
 80186e4:	b001      	add	sp, #4
 80186e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80186ea:	bf0c      	ite	eq
 80186ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80186f0:	ea91 0f03 	teqne	r1, r3
 80186f4:	bf02      	ittt	eq
 80186f6:	ea90 0f02 	teqeq	r0, r2
 80186fa:	2000      	moveq	r0, #0
 80186fc:	4770      	bxeq	lr
 80186fe:	f110 0f00 	cmn.w	r0, #0
 8018702:	ea91 0f03 	teq	r1, r3
 8018706:	bf58      	it	pl
 8018708:	4299      	cmppl	r1, r3
 801870a:	bf08      	it	eq
 801870c:	4290      	cmpeq	r0, r2
 801870e:	bf2c      	ite	cs
 8018710:	17d8      	asrcs	r0, r3, #31
 8018712:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8018716:	f040 0001 	orr.w	r0, r0, #1
 801871a:	4770      	bx	lr
 801871c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018724:	d102      	bne.n	801872c <__cmpdf2+0x64>
 8018726:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801872a:	d107      	bne.n	801873c <__cmpdf2+0x74>
 801872c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018734:	d1d6      	bne.n	80186e4 <__cmpdf2+0x1c>
 8018736:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801873a:	d0d3      	beq.n	80186e4 <__cmpdf2+0x1c>
 801873c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop

08018744 <__aeabi_cdrcmple>:
 8018744:	4684      	mov	ip, r0
 8018746:	4610      	mov	r0, r2
 8018748:	4662      	mov	r2, ip
 801874a:	468c      	mov	ip, r1
 801874c:	4619      	mov	r1, r3
 801874e:	4663      	mov	r3, ip
 8018750:	e000      	b.n	8018754 <__aeabi_cdcmpeq>
 8018752:	bf00      	nop

08018754 <__aeabi_cdcmpeq>:
 8018754:	b501      	push	{r0, lr}
 8018756:	f7ff ffb7 	bl	80186c8 <__cmpdf2>
 801875a:	2800      	cmp	r0, #0
 801875c:	bf48      	it	mi
 801875e:	f110 0f00 	cmnmi.w	r0, #0
 8018762:	bd01      	pop	{r0, pc}

08018764 <__aeabi_dcmpeq>:
 8018764:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018768:	f7ff fff4 	bl	8018754 <__aeabi_cdcmpeq>
 801876c:	bf0c      	ite	eq
 801876e:	2001      	moveq	r0, #1
 8018770:	2000      	movne	r0, #0
 8018772:	f85d fb08 	ldr.w	pc, [sp], #8
 8018776:	bf00      	nop

08018778 <__aeabi_dcmplt>:
 8018778:	f84d ed08 	str.w	lr, [sp, #-8]!
 801877c:	f7ff ffea 	bl	8018754 <__aeabi_cdcmpeq>
 8018780:	bf34      	ite	cc
 8018782:	2001      	movcc	r0, #1
 8018784:	2000      	movcs	r0, #0
 8018786:	f85d fb08 	ldr.w	pc, [sp], #8
 801878a:	bf00      	nop

0801878c <__aeabi_dcmple>:
 801878c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018790:	f7ff ffe0 	bl	8018754 <__aeabi_cdcmpeq>
 8018794:	bf94      	ite	ls
 8018796:	2001      	movls	r0, #1
 8018798:	2000      	movhi	r0, #0
 801879a:	f85d fb08 	ldr.w	pc, [sp], #8
 801879e:	bf00      	nop

080187a0 <__aeabi_dcmpge>:
 80187a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80187a4:	f7ff ffce 	bl	8018744 <__aeabi_cdrcmple>
 80187a8:	bf94      	ite	ls
 80187aa:	2001      	movls	r0, #1
 80187ac:	2000      	movhi	r0, #0
 80187ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80187b2:	bf00      	nop

080187b4 <__aeabi_dcmpgt>:
 80187b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80187b8:	f7ff ffc4 	bl	8018744 <__aeabi_cdrcmple>
 80187bc:	bf34      	ite	cc
 80187be:	2001      	movcc	r0, #1
 80187c0:	2000      	movcs	r0, #0
 80187c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80187c6:	bf00      	nop

080187c8 <__aeabi_dcmpun>:
 80187c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80187cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80187d0:	d102      	bne.n	80187d8 <__aeabi_dcmpun+0x10>
 80187d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80187d6:	d10a      	bne.n	80187ee <__aeabi_dcmpun+0x26>
 80187d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80187dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80187e0:	d102      	bne.n	80187e8 <__aeabi_dcmpun+0x20>
 80187e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80187e6:	d102      	bne.n	80187ee <__aeabi_dcmpun+0x26>
 80187e8:	f04f 0000 	mov.w	r0, #0
 80187ec:	4770      	bx	lr
 80187ee:	f04f 0001 	mov.w	r0, #1
 80187f2:	4770      	bx	lr

080187f4 <__aeabi_d2iz>:
 80187f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80187f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80187fc:	d215      	bcs.n	801882a <__aeabi_d2iz+0x36>
 80187fe:	d511      	bpl.n	8018824 <__aeabi_d2iz+0x30>
 8018800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018808:	d912      	bls.n	8018830 <__aeabi_d2iz+0x3c>
 801880a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801880e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801881a:	fa23 f002 	lsr.w	r0, r3, r2
 801881e:	bf18      	it	ne
 8018820:	4240      	negne	r0, r0
 8018822:	4770      	bx	lr
 8018824:	f04f 0000 	mov.w	r0, #0
 8018828:	4770      	bx	lr
 801882a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801882e:	d105      	bne.n	801883c <__aeabi_d2iz+0x48>
 8018830:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8018834:	bf08      	it	eq
 8018836:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801883a:	4770      	bx	lr
 801883c:	f04f 0000 	mov.w	r0, #0
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop

08018844 <__aeabi_ldivmod>:
 8018844:	b97b      	cbnz	r3, 8018866 <__aeabi_ldivmod+0x22>
 8018846:	b972      	cbnz	r2, 8018866 <__aeabi_ldivmod+0x22>
 8018848:	2900      	cmp	r1, #0
 801884a:	bfbe      	ittt	lt
 801884c:	2000      	movlt	r0, #0
 801884e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8018852:	e006      	blt.n	8018862 <__aeabi_ldivmod+0x1e>
 8018854:	bf08      	it	eq
 8018856:	2800      	cmpeq	r0, #0
 8018858:	bf1c      	itt	ne
 801885a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 801885e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8018862:	f000 b9c5 	b.w	8018bf0 <__aeabi_idiv0>
 8018866:	f1ad 0c08 	sub.w	ip, sp, #8
 801886a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801886e:	2900      	cmp	r1, #0
 8018870:	db09      	blt.n	8018886 <__aeabi_ldivmod+0x42>
 8018872:	2b00      	cmp	r3, #0
 8018874:	db1a      	blt.n	80188ac <__aeabi_ldivmod+0x68>
 8018876:	f000 f84d 	bl	8018914 <__udivmoddi4>
 801887a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801887e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018882:	b004      	add	sp, #16
 8018884:	4770      	bx	lr
 8018886:	4240      	negs	r0, r0
 8018888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801888c:	2b00      	cmp	r3, #0
 801888e:	db1b      	blt.n	80188c8 <__aeabi_ldivmod+0x84>
 8018890:	f000 f840 	bl	8018914 <__udivmoddi4>
 8018894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801889c:	b004      	add	sp, #16
 801889e:	4240      	negs	r0, r0
 80188a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80188a4:	4252      	negs	r2, r2
 80188a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80188aa:	4770      	bx	lr
 80188ac:	4252      	negs	r2, r2
 80188ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80188b2:	f000 f82f 	bl	8018914 <__udivmoddi4>
 80188b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80188ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80188be:	b004      	add	sp, #16
 80188c0:	4240      	negs	r0, r0
 80188c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80188c6:	4770      	bx	lr
 80188c8:	4252      	negs	r2, r2
 80188ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80188ce:	f000 f821 	bl	8018914 <__udivmoddi4>
 80188d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80188d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80188da:	b004      	add	sp, #16
 80188dc:	4252      	negs	r2, r2
 80188de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80188e2:	4770      	bx	lr

080188e4 <__aeabi_uldivmod>:
 80188e4:	b953      	cbnz	r3, 80188fc <__aeabi_uldivmod+0x18>
 80188e6:	b94a      	cbnz	r2, 80188fc <__aeabi_uldivmod+0x18>
 80188e8:	2900      	cmp	r1, #0
 80188ea:	bf08      	it	eq
 80188ec:	2800      	cmpeq	r0, #0
 80188ee:	bf1c      	itt	ne
 80188f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80188f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80188f8:	f000 b97a 	b.w	8018bf0 <__aeabi_idiv0>
 80188fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8018900:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8018904:	f000 f806 	bl	8018914 <__udivmoddi4>
 8018908:	f8dd e004 	ldr.w	lr, [sp, #4]
 801890c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018910:	b004      	add	sp, #16
 8018912:	4770      	bx	lr

08018914 <__udivmoddi4>:
 8018914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018918:	468c      	mov	ip, r1
 801891a:	460d      	mov	r5, r1
 801891c:	4604      	mov	r4, r0
 801891e:	9e08      	ldr	r6, [sp, #32]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d151      	bne.n	80189c8 <__udivmoddi4+0xb4>
 8018924:	428a      	cmp	r2, r1
 8018926:	4617      	mov	r7, r2
 8018928:	d96d      	bls.n	8018a06 <__udivmoddi4+0xf2>
 801892a:	fab2 fe82 	clz	lr, r2
 801892e:	f1be 0f00 	cmp.w	lr, #0
 8018932:	d00b      	beq.n	801894c <__udivmoddi4+0x38>
 8018934:	f1ce 0c20 	rsb	ip, lr, #32
 8018938:	fa01 f50e 	lsl.w	r5, r1, lr
 801893c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018940:	fa02 f70e 	lsl.w	r7, r2, lr
 8018944:	ea4c 0c05 	orr.w	ip, ip, r5
 8018948:	fa00 f40e 	lsl.w	r4, r0, lr
 801894c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8018950:	0c25      	lsrs	r5, r4, #16
 8018952:	fbbc f8fa 	udiv	r8, ip, sl
 8018956:	fa1f f987 	uxth.w	r9, r7
 801895a:	fb0a cc18 	mls	ip, sl, r8, ip
 801895e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8018962:	fb08 f309 	mul.w	r3, r8, r9
 8018966:	42ab      	cmp	r3, r5
 8018968:	d90a      	bls.n	8018980 <__udivmoddi4+0x6c>
 801896a:	19ed      	adds	r5, r5, r7
 801896c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8018970:	f080 8123 	bcs.w	8018bba <__udivmoddi4+0x2a6>
 8018974:	42ab      	cmp	r3, r5
 8018976:	f240 8120 	bls.w	8018bba <__udivmoddi4+0x2a6>
 801897a:	f1a8 0802 	sub.w	r8, r8, #2
 801897e:	443d      	add	r5, r7
 8018980:	1aed      	subs	r5, r5, r3
 8018982:	b2a4      	uxth	r4, r4
 8018984:	fbb5 f0fa 	udiv	r0, r5, sl
 8018988:	fb0a 5510 	mls	r5, sl, r0, r5
 801898c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8018990:	fb00 f909 	mul.w	r9, r0, r9
 8018994:	45a1      	cmp	r9, r4
 8018996:	d909      	bls.n	80189ac <__udivmoddi4+0x98>
 8018998:	19e4      	adds	r4, r4, r7
 801899a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801899e:	f080 810a 	bcs.w	8018bb6 <__udivmoddi4+0x2a2>
 80189a2:	45a1      	cmp	r9, r4
 80189a4:	f240 8107 	bls.w	8018bb6 <__udivmoddi4+0x2a2>
 80189a8:	3802      	subs	r0, #2
 80189aa:	443c      	add	r4, r7
 80189ac:	eba4 0409 	sub.w	r4, r4, r9
 80189b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80189b4:	2100      	movs	r1, #0
 80189b6:	2e00      	cmp	r6, #0
 80189b8:	d061      	beq.n	8018a7e <__udivmoddi4+0x16a>
 80189ba:	fa24 f40e 	lsr.w	r4, r4, lr
 80189be:	2300      	movs	r3, #0
 80189c0:	6034      	str	r4, [r6, #0]
 80189c2:	6073      	str	r3, [r6, #4]
 80189c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189c8:	428b      	cmp	r3, r1
 80189ca:	d907      	bls.n	80189dc <__udivmoddi4+0xc8>
 80189cc:	2e00      	cmp	r6, #0
 80189ce:	d054      	beq.n	8018a7a <__udivmoddi4+0x166>
 80189d0:	2100      	movs	r1, #0
 80189d2:	e886 0021 	stmia.w	r6, {r0, r5}
 80189d6:	4608      	mov	r0, r1
 80189d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189dc:	fab3 f183 	clz	r1, r3
 80189e0:	2900      	cmp	r1, #0
 80189e2:	f040 808e 	bne.w	8018b02 <__udivmoddi4+0x1ee>
 80189e6:	42ab      	cmp	r3, r5
 80189e8:	d302      	bcc.n	80189f0 <__udivmoddi4+0xdc>
 80189ea:	4282      	cmp	r2, r0
 80189ec:	f200 80fa 	bhi.w	8018be4 <__udivmoddi4+0x2d0>
 80189f0:	1a84      	subs	r4, r0, r2
 80189f2:	eb65 0503 	sbc.w	r5, r5, r3
 80189f6:	2001      	movs	r0, #1
 80189f8:	46ac      	mov	ip, r5
 80189fa:	2e00      	cmp	r6, #0
 80189fc:	d03f      	beq.n	8018a7e <__udivmoddi4+0x16a>
 80189fe:	e886 1010 	stmia.w	r6, {r4, ip}
 8018a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a06:	b912      	cbnz	r2, 8018a0e <__udivmoddi4+0xfa>
 8018a08:	2701      	movs	r7, #1
 8018a0a:	fbb7 f7f2 	udiv	r7, r7, r2
 8018a0e:	fab7 fe87 	clz	lr, r7
 8018a12:	f1be 0f00 	cmp.w	lr, #0
 8018a16:	d134      	bne.n	8018a82 <__udivmoddi4+0x16e>
 8018a18:	1beb      	subs	r3, r5, r7
 8018a1a:	0c3a      	lsrs	r2, r7, #16
 8018a1c:	fa1f fc87 	uxth.w	ip, r7
 8018a20:	2101      	movs	r1, #1
 8018a22:	fbb3 f8f2 	udiv	r8, r3, r2
 8018a26:	0c25      	lsrs	r5, r4, #16
 8018a28:	fb02 3318 	mls	r3, r2, r8, r3
 8018a2c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8018a30:	fb0c f308 	mul.w	r3, ip, r8
 8018a34:	42ab      	cmp	r3, r5
 8018a36:	d907      	bls.n	8018a48 <__udivmoddi4+0x134>
 8018a38:	19ed      	adds	r5, r5, r7
 8018a3a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8018a3e:	d202      	bcs.n	8018a46 <__udivmoddi4+0x132>
 8018a40:	42ab      	cmp	r3, r5
 8018a42:	f200 80d1 	bhi.w	8018be8 <__udivmoddi4+0x2d4>
 8018a46:	4680      	mov	r8, r0
 8018a48:	1aed      	subs	r5, r5, r3
 8018a4a:	b2a3      	uxth	r3, r4
 8018a4c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018a50:	fb02 5510 	mls	r5, r2, r0, r5
 8018a54:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8018a58:	fb0c fc00 	mul.w	ip, ip, r0
 8018a5c:	45a4      	cmp	ip, r4
 8018a5e:	d907      	bls.n	8018a70 <__udivmoddi4+0x15c>
 8018a60:	19e4      	adds	r4, r4, r7
 8018a62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018a66:	d202      	bcs.n	8018a6e <__udivmoddi4+0x15a>
 8018a68:	45a4      	cmp	ip, r4
 8018a6a:	f200 80b8 	bhi.w	8018bde <__udivmoddi4+0x2ca>
 8018a6e:	4618      	mov	r0, r3
 8018a70:	eba4 040c 	sub.w	r4, r4, ip
 8018a74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8018a78:	e79d      	b.n	80189b6 <__udivmoddi4+0xa2>
 8018a7a:	4631      	mov	r1, r6
 8018a7c:	4630      	mov	r0, r6
 8018a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a82:	f1ce 0420 	rsb	r4, lr, #32
 8018a86:	fa05 f30e 	lsl.w	r3, r5, lr
 8018a8a:	fa07 f70e 	lsl.w	r7, r7, lr
 8018a8e:	fa20 f804 	lsr.w	r8, r0, r4
 8018a92:	0c3a      	lsrs	r2, r7, #16
 8018a94:	fa25 f404 	lsr.w	r4, r5, r4
 8018a98:	ea48 0803 	orr.w	r8, r8, r3
 8018a9c:	fbb4 f1f2 	udiv	r1, r4, r2
 8018aa0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8018aa4:	fb02 4411 	mls	r4, r2, r1, r4
 8018aa8:	fa1f fc87 	uxth.w	ip, r7
 8018aac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8018ab0:	fb01 f30c 	mul.w	r3, r1, ip
 8018ab4:	42ab      	cmp	r3, r5
 8018ab6:	fa00 f40e 	lsl.w	r4, r0, lr
 8018aba:	d909      	bls.n	8018ad0 <__udivmoddi4+0x1bc>
 8018abc:	19ed      	adds	r5, r5, r7
 8018abe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8018ac2:	f080 808a 	bcs.w	8018bda <__udivmoddi4+0x2c6>
 8018ac6:	42ab      	cmp	r3, r5
 8018ac8:	f240 8087 	bls.w	8018bda <__udivmoddi4+0x2c6>
 8018acc:	3902      	subs	r1, #2
 8018ace:	443d      	add	r5, r7
 8018ad0:	1aeb      	subs	r3, r5, r3
 8018ad2:	fa1f f588 	uxth.w	r5, r8
 8018ad6:	fbb3 f0f2 	udiv	r0, r3, r2
 8018ada:	fb02 3310 	mls	r3, r2, r0, r3
 8018ade:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8018ae2:	fb00 f30c 	mul.w	r3, r0, ip
 8018ae6:	42ab      	cmp	r3, r5
 8018ae8:	d907      	bls.n	8018afa <__udivmoddi4+0x1e6>
 8018aea:	19ed      	adds	r5, r5, r7
 8018aec:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8018af0:	d26f      	bcs.n	8018bd2 <__udivmoddi4+0x2be>
 8018af2:	42ab      	cmp	r3, r5
 8018af4:	d96d      	bls.n	8018bd2 <__udivmoddi4+0x2be>
 8018af6:	3802      	subs	r0, #2
 8018af8:	443d      	add	r5, r7
 8018afa:	1aeb      	subs	r3, r5, r3
 8018afc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8018b00:	e78f      	b.n	8018a22 <__udivmoddi4+0x10e>
 8018b02:	f1c1 0720 	rsb	r7, r1, #32
 8018b06:	fa22 f807 	lsr.w	r8, r2, r7
 8018b0a:	408b      	lsls	r3, r1
 8018b0c:	fa05 f401 	lsl.w	r4, r5, r1
 8018b10:	ea48 0303 	orr.w	r3, r8, r3
 8018b14:	fa20 fe07 	lsr.w	lr, r0, r7
 8018b18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8018b1c:	40fd      	lsrs	r5, r7
 8018b1e:	ea4e 0e04 	orr.w	lr, lr, r4
 8018b22:	fbb5 f9fc 	udiv	r9, r5, ip
 8018b26:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8018b2a:	fb0c 5519 	mls	r5, ip, r9, r5
 8018b2e:	fa1f f883 	uxth.w	r8, r3
 8018b32:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8018b36:	fb09 f408 	mul.w	r4, r9, r8
 8018b3a:	42ac      	cmp	r4, r5
 8018b3c:	fa02 f201 	lsl.w	r2, r2, r1
 8018b40:	fa00 fa01 	lsl.w	sl, r0, r1
 8018b44:	d908      	bls.n	8018b58 <__udivmoddi4+0x244>
 8018b46:	18ed      	adds	r5, r5, r3
 8018b48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8018b4c:	d243      	bcs.n	8018bd6 <__udivmoddi4+0x2c2>
 8018b4e:	42ac      	cmp	r4, r5
 8018b50:	d941      	bls.n	8018bd6 <__udivmoddi4+0x2c2>
 8018b52:	f1a9 0902 	sub.w	r9, r9, #2
 8018b56:	441d      	add	r5, r3
 8018b58:	1b2d      	subs	r5, r5, r4
 8018b5a:	fa1f fe8e 	uxth.w	lr, lr
 8018b5e:	fbb5 f0fc 	udiv	r0, r5, ip
 8018b62:	fb0c 5510 	mls	r5, ip, r0, r5
 8018b66:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8018b6a:	fb00 f808 	mul.w	r8, r0, r8
 8018b6e:	45a0      	cmp	r8, r4
 8018b70:	d907      	bls.n	8018b82 <__udivmoddi4+0x26e>
 8018b72:	18e4      	adds	r4, r4, r3
 8018b74:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8018b78:	d229      	bcs.n	8018bce <__udivmoddi4+0x2ba>
 8018b7a:	45a0      	cmp	r8, r4
 8018b7c:	d927      	bls.n	8018bce <__udivmoddi4+0x2ba>
 8018b7e:	3802      	subs	r0, #2
 8018b80:	441c      	add	r4, r3
 8018b82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8018b86:	eba4 0408 	sub.w	r4, r4, r8
 8018b8a:	fba0 8902 	umull	r8, r9, r0, r2
 8018b8e:	454c      	cmp	r4, r9
 8018b90:	46c6      	mov	lr, r8
 8018b92:	464d      	mov	r5, r9
 8018b94:	d315      	bcc.n	8018bc2 <__udivmoddi4+0x2ae>
 8018b96:	d012      	beq.n	8018bbe <__udivmoddi4+0x2aa>
 8018b98:	b156      	cbz	r6, 8018bb0 <__udivmoddi4+0x29c>
 8018b9a:	ebba 030e 	subs.w	r3, sl, lr
 8018b9e:	eb64 0405 	sbc.w	r4, r4, r5
 8018ba2:	fa04 f707 	lsl.w	r7, r4, r7
 8018ba6:	40cb      	lsrs	r3, r1
 8018ba8:	431f      	orrs	r7, r3
 8018baa:	40cc      	lsrs	r4, r1
 8018bac:	6037      	str	r7, [r6, #0]
 8018bae:	6074      	str	r4, [r6, #4]
 8018bb0:	2100      	movs	r1, #0
 8018bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	e6f8      	b.n	80189ac <__udivmoddi4+0x98>
 8018bba:	4690      	mov	r8, r2
 8018bbc:	e6e0      	b.n	8018980 <__udivmoddi4+0x6c>
 8018bbe:	45c2      	cmp	sl, r8
 8018bc0:	d2ea      	bcs.n	8018b98 <__udivmoddi4+0x284>
 8018bc2:	ebb8 0e02 	subs.w	lr, r8, r2
 8018bc6:	eb69 0503 	sbc.w	r5, r9, r3
 8018bca:	3801      	subs	r0, #1
 8018bcc:	e7e4      	b.n	8018b98 <__udivmoddi4+0x284>
 8018bce:	4628      	mov	r0, r5
 8018bd0:	e7d7      	b.n	8018b82 <__udivmoddi4+0x26e>
 8018bd2:	4640      	mov	r0, r8
 8018bd4:	e791      	b.n	8018afa <__udivmoddi4+0x1e6>
 8018bd6:	4681      	mov	r9, r0
 8018bd8:	e7be      	b.n	8018b58 <__udivmoddi4+0x244>
 8018bda:	4601      	mov	r1, r0
 8018bdc:	e778      	b.n	8018ad0 <__udivmoddi4+0x1bc>
 8018bde:	3802      	subs	r0, #2
 8018be0:	443c      	add	r4, r7
 8018be2:	e745      	b.n	8018a70 <__udivmoddi4+0x15c>
 8018be4:	4608      	mov	r0, r1
 8018be6:	e708      	b.n	80189fa <__udivmoddi4+0xe6>
 8018be8:	f1a8 0802 	sub.w	r8, r8, #2
 8018bec:	443d      	add	r5, r7
 8018bee:	e72b      	b.n	8018a48 <__udivmoddi4+0x134>

08018bf0 <__aeabi_idiv0>:
 8018bf0:	4770      	bx	lr
 8018bf2:	bf00      	nop

08018bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8018bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018c2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018bf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018bfa:	e003      	b.n	8018c04 <LoopCopyDataInit>

08018bfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018bfc:	4b0c      	ldr	r3, [pc, #48]	; (8018c30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8018bfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018c00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018c02:	3104      	adds	r1, #4

08018c04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018c04:	480b      	ldr	r0, [pc, #44]	; (8018c34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8018c06:	4b0c      	ldr	r3, [pc, #48]	; (8018c38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8018c08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018c0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018c0c:	d3f6      	bcc.n	8018bfc <CopyDataInit>
  ldr  r2, =_sbss
 8018c0e:	4a0b      	ldr	r2, [pc, #44]	; (8018c3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8018c10:	e002      	b.n	8018c18 <LoopFillZerobss>

08018c12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8018c12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8018c14:	f842 3b04 	str.w	r3, [r2], #4

08018c18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018c18:	4b09      	ldr	r3, [pc, #36]	; (8018c40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8018c1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018c1c:	d3f9      	bcc.n	8018c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018c1e:	f7e8 f8c1 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018c22:	f000 f817 	bl	8018c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018c26:	f7e7 ff27 	bl	8000a78 <main>
  bx  lr    
 8018c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8018c2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8018c30:	0801d21c 	.word	0x0801d21c
  ldr  r0, =_sdata
 8018c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8018c38:	200007fc 	.word	0x200007fc
  ldr  r2, =_sbss
 8018c3c:	200007fc 	.word	0x200007fc
  ldr  r3, = _ebss
 8018c40:	20007050 	.word	0x20007050

08018c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018c44:	e7fe      	b.n	8018c44 <ADC_IRQHandler>
	...

08018c48 <__errno>:
 8018c48:	4b01      	ldr	r3, [pc, #4]	; (8018c50 <__errno+0x8>)
 8018c4a:	6818      	ldr	r0, [r3, #0]
 8018c4c:	4770      	bx	lr
 8018c4e:	bf00      	nop
 8018c50:	20000188 	.word	0x20000188

08018c54 <__libc_init_array>:
 8018c54:	b570      	push	{r4, r5, r6, lr}
 8018c56:	4e0d      	ldr	r6, [pc, #52]	; (8018c8c <__libc_init_array+0x38>)
 8018c58:	4c0d      	ldr	r4, [pc, #52]	; (8018c90 <__libc_init_array+0x3c>)
 8018c5a:	1ba4      	subs	r4, r4, r6
 8018c5c:	10a4      	asrs	r4, r4, #2
 8018c5e:	2500      	movs	r5, #0
 8018c60:	42a5      	cmp	r5, r4
 8018c62:	d109      	bne.n	8018c78 <__libc_init_array+0x24>
 8018c64:	4e0b      	ldr	r6, [pc, #44]	; (8018c94 <__libc_init_array+0x40>)
 8018c66:	4c0c      	ldr	r4, [pc, #48]	; (8018c98 <__libc_init_array+0x44>)
 8018c68:	f003 fe5a 	bl	801c920 <_init>
 8018c6c:	1ba4      	subs	r4, r4, r6
 8018c6e:	10a4      	asrs	r4, r4, #2
 8018c70:	2500      	movs	r5, #0
 8018c72:	42a5      	cmp	r5, r4
 8018c74:	d105      	bne.n	8018c82 <__libc_init_array+0x2e>
 8018c76:	bd70      	pop	{r4, r5, r6, pc}
 8018c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c7c:	4798      	blx	r3
 8018c7e:	3501      	adds	r5, #1
 8018c80:	e7ee      	b.n	8018c60 <__libc_init_array+0xc>
 8018c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c86:	4798      	blx	r3
 8018c88:	3501      	adds	r5, #1
 8018c8a:	e7f2      	b.n	8018c72 <__libc_init_array+0x1e>
 8018c8c:	0801d214 	.word	0x0801d214
 8018c90:	0801d214 	.word	0x0801d214
 8018c94:	0801d214 	.word	0x0801d214
 8018c98:	0801d218 	.word	0x0801d218

08018c9c <malloc>:
 8018c9c:	4b02      	ldr	r3, [pc, #8]	; (8018ca8 <malloc+0xc>)
 8018c9e:	4601      	mov	r1, r0
 8018ca0:	6818      	ldr	r0, [r3, #0]
 8018ca2:	f000 b80b 	b.w	8018cbc <_malloc_r>
 8018ca6:	bf00      	nop
 8018ca8:	20000188 	.word	0x20000188

08018cac <free>:
 8018cac:	4b02      	ldr	r3, [pc, #8]	; (8018cb8 <free+0xc>)
 8018cae:	4601      	mov	r1, r0
 8018cb0:	6818      	ldr	r0, [r3, #0]
 8018cb2:	f002 b911 	b.w	801aed8 <_free_r>
 8018cb6:	bf00      	nop
 8018cb8:	20000188 	.word	0x20000188

08018cbc <_malloc_r>:
 8018cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	f101 040b 	add.w	r4, r1, #11
 8018cc4:	2c16      	cmp	r4, #22
 8018cc6:	4681      	mov	r9, r0
 8018cc8:	d907      	bls.n	8018cda <_malloc_r+0x1e>
 8018cca:	f034 0407 	bics.w	r4, r4, #7
 8018cce:	d505      	bpl.n	8018cdc <_malloc_r+0x20>
 8018cd0:	230c      	movs	r3, #12
 8018cd2:	f8c9 3000 	str.w	r3, [r9]
 8018cd6:	2600      	movs	r6, #0
 8018cd8:	e131      	b.n	8018f3e <_malloc_r+0x282>
 8018cda:	2410      	movs	r4, #16
 8018cdc:	428c      	cmp	r4, r1
 8018cde:	d3f7      	bcc.n	8018cd0 <_malloc_r+0x14>
 8018ce0:	4648      	mov	r0, r9
 8018ce2:	f000 fa0d 	bl	8019100 <__malloc_lock>
 8018ce6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8018cea:	4d9c      	ldr	r5, [pc, #624]	; (8018f5c <_malloc_r+0x2a0>)
 8018cec:	d236      	bcs.n	8018d5c <_malloc_r+0xa0>
 8018cee:	f104 0208 	add.w	r2, r4, #8
 8018cf2:	442a      	add	r2, r5
 8018cf4:	f1a2 0108 	sub.w	r1, r2, #8
 8018cf8:	6856      	ldr	r6, [r2, #4]
 8018cfa:	428e      	cmp	r6, r1
 8018cfc:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8018d00:	d102      	bne.n	8018d08 <_malloc_r+0x4c>
 8018d02:	68d6      	ldr	r6, [r2, #12]
 8018d04:	42b2      	cmp	r2, r6
 8018d06:	d010      	beq.n	8018d2a <_malloc_r+0x6e>
 8018d08:	6873      	ldr	r3, [r6, #4]
 8018d0a:	68f2      	ldr	r2, [r6, #12]
 8018d0c:	68b1      	ldr	r1, [r6, #8]
 8018d0e:	f023 0303 	bic.w	r3, r3, #3
 8018d12:	60ca      	str	r2, [r1, #12]
 8018d14:	4433      	add	r3, r6
 8018d16:	6091      	str	r1, [r2, #8]
 8018d18:	685a      	ldr	r2, [r3, #4]
 8018d1a:	f042 0201 	orr.w	r2, r2, #1
 8018d1e:	605a      	str	r2, [r3, #4]
 8018d20:	4648      	mov	r0, r9
 8018d22:	f000 f9f3 	bl	801910c <__malloc_unlock>
 8018d26:	3608      	adds	r6, #8
 8018d28:	e109      	b.n	8018f3e <_malloc_r+0x282>
 8018d2a:	3302      	adds	r3, #2
 8018d2c:	4a8c      	ldr	r2, [pc, #560]	; (8018f60 <_malloc_r+0x2a4>)
 8018d2e:	692e      	ldr	r6, [r5, #16]
 8018d30:	4296      	cmp	r6, r2
 8018d32:	4611      	mov	r1, r2
 8018d34:	d06d      	beq.n	8018e12 <_malloc_r+0x156>
 8018d36:	6870      	ldr	r0, [r6, #4]
 8018d38:	f020 0003 	bic.w	r0, r0, #3
 8018d3c:	1b07      	subs	r7, r0, r4
 8018d3e:	2f0f      	cmp	r7, #15
 8018d40:	dd47      	ble.n	8018dd2 <_malloc_r+0x116>
 8018d42:	1933      	adds	r3, r6, r4
 8018d44:	f044 0401 	orr.w	r4, r4, #1
 8018d48:	6074      	str	r4, [r6, #4]
 8018d4a:	616b      	str	r3, [r5, #20]
 8018d4c:	612b      	str	r3, [r5, #16]
 8018d4e:	60da      	str	r2, [r3, #12]
 8018d50:	609a      	str	r2, [r3, #8]
 8018d52:	f047 0201 	orr.w	r2, r7, #1
 8018d56:	605a      	str	r2, [r3, #4]
 8018d58:	5037      	str	r7, [r6, r0]
 8018d5a:	e7e1      	b.n	8018d20 <_malloc_r+0x64>
 8018d5c:	0a63      	lsrs	r3, r4, #9
 8018d5e:	d02a      	beq.n	8018db6 <_malloc_r+0xfa>
 8018d60:	2b04      	cmp	r3, #4
 8018d62:	d812      	bhi.n	8018d8a <_malloc_r+0xce>
 8018d64:	09a3      	lsrs	r3, r4, #6
 8018d66:	3338      	adds	r3, #56	; 0x38
 8018d68:	1c5a      	adds	r2, r3, #1
 8018d6a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8018d6e:	f1a2 0008 	sub.w	r0, r2, #8
 8018d72:	6856      	ldr	r6, [r2, #4]
 8018d74:	4286      	cmp	r6, r0
 8018d76:	d006      	beq.n	8018d86 <_malloc_r+0xca>
 8018d78:	6872      	ldr	r2, [r6, #4]
 8018d7a:	f022 0203 	bic.w	r2, r2, #3
 8018d7e:	1b11      	subs	r1, r2, r4
 8018d80:	290f      	cmp	r1, #15
 8018d82:	dd1c      	ble.n	8018dbe <_malloc_r+0x102>
 8018d84:	3b01      	subs	r3, #1
 8018d86:	3301      	adds	r3, #1
 8018d88:	e7d0      	b.n	8018d2c <_malloc_r+0x70>
 8018d8a:	2b14      	cmp	r3, #20
 8018d8c:	d801      	bhi.n	8018d92 <_malloc_r+0xd6>
 8018d8e:	335b      	adds	r3, #91	; 0x5b
 8018d90:	e7ea      	b.n	8018d68 <_malloc_r+0xac>
 8018d92:	2b54      	cmp	r3, #84	; 0x54
 8018d94:	d802      	bhi.n	8018d9c <_malloc_r+0xe0>
 8018d96:	0b23      	lsrs	r3, r4, #12
 8018d98:	336e      	adds	r3, #110	; 0x6e
 8018d9a:	e7e5      	b.n	8018d68 <_malloc_r+0xac>
 8018d9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8018da0:	d802      	bhi.n	8018da8 <_malloc_r+0xec>
 8018da2:	0be3      	lsrs	r3, r4, #15
 8018da4:	3377      	adds	r3, #119	; 0x77
 8018da6:	e7df      	b.n	8018d68 <_malloc_r+0xac>
 8018da8:	f240 5254 	movw	r2, #1364	; 0x554
 8018dac:	4293      	cmp	r3, r2
 8018dae:	d804      	bhi.n	8018dba <_malloc_r+0xfe>
 8018db0:	0ca3      	lsrs	r3, r4, #18
 8018db2:	337c      	adds	r3, #124	; 0x7c
 8018db4:	e7d8      	b.n	8018d68 <_malloc_r+0xac>
 8018db6:	233f      	movs	r3, #63	; 0x3f
 8018db8:	e7d6      	b.n	8018d68 <_malloc_r+0xac>
 8018dba:	237e      	movs	r3, #126	; 0x7e
 8018dbc:	e7d4      	b.n	8018d68 <_malloc_r+0xac>
 8018dbe:	2900      	cmp	r1, #0
 8018dc0:	68f1      	ldr	r1, [r6, #12]
 8018dc2:	db04      	blt.n	8018dce <_malloc_r+0x112>
 8018dc4:	68b3      	ldr	r3, [r6, #8]
 8018dc6:	60d9      	str	r1, [r3, #12]
 8018dc8:	608b      	str	r3, [r1, #8]
 8018dca:	18b3      	adds	r3, r6, r2
 8018dcc:	e7a4      	b.n	8018d18 <_malloc_r+0x5c>
 8018dce:	460e      	mov	r6, r1
 8018dd0:	e7d0      	b.n	8018d74 <_malloc_r+0xb8>
 8018dd2:	2f00      	cmp	r7, #0
 8018dd4:	616a      	str	r2, [r5, #20]
 8018dd6:	612a      	str	r2, [r5, #16]
 8018dd8:	db05      	blt.n	8018de6 <_malloc_r+0x12a>
 8018dda:	4430      	add	r0, r6
 8018ddc:	6843      	ldr	r3, [r0, #4]
 8018dde:	f043 0301 	orr.w	r3, r3, #1
 8018de2:	6043      	str	r3, [r0, #4]
 8018de4:	e79c      	b.n	8018d20 <_malloc_r+0x64>
 8018de6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8018dea:	d244      	bcs.n	8018e76 <_malloc_r+0x1ba>
 8018dec:	08c0      	lsrs	r0, r0, #3
 8018dee:	1087      	asrs	r7, r0, #2
 8018df0:	2201      	movs	r2, #1
 8018df2:	fa02 f707 	lsl.w	r7, r2, r7
 8018df6:	686a      	ldr	r2, [r5, #4]
 8018df8:	3001      	adds	r0, #1
 8018dfa:	433a      	orrs	r2, r7
 8018dfc:	606a      	str	r2, [r5, #4]
 8018dfe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8018e02:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8018e06:	60b7      	str	r7, [r6, #8]
 8018e08:	3a08      	subs	r2, #8
 8018e0a:	60f2      	str	r2, [r6, #12]
 8018e0c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8018e10:	60fe      	str	r6, [r7, #12]
 8018e12:	2001      	movs	r0, #1
 8018e14:	109a      	asrs	r2, r3, #2
 8018e16:	fa00 f202 	lsl.w	r2, r0, r2
 8018e1a:	6868      	ldr	r0, [r5, #4]
 8018e1c:	4282      	cmp	r2, r0
 8018e1e:	f200 80a1 	bhi.w	8018f64 <_malloc_r+0x2a8>
 8018e22:	4202      	tst	r2, r0
 8018e24:	d106      	bne.n	8018e34 <_malloc_r+0x178>
 8018e26:	f023 0303 	bic.w	r3, r3, #3
 8018e2a:	0052      	lsls	r2, r2, #1
 8018e2c:	4202      	tst	r2, r0
 8018e2e:	f103 0304 	add.w	r3, r3, #4
 8018e32:	d0fa      	beq.n	8018e2a <_malloc_r+0x16e>
 8018e34:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8018e38:	46e0      	mov	r8, ip
 8018e3a:	469e      	mov	lr, r3
 8018e3c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8018e40:	4546      	cmp	r6, r8
 8018e42:	d153      	bne.n	8018eec <_malloc_r+0x230>
 8018e44:	f10e 0e01 	add.w	lr, lr, #1
 8018e48:	f01e 0f03 	tst.w	lr, #3
 8018e4c:	f108 0808 	add.w	r8, r8, #8
 8018e50:	d1f4      	bne.n	8018e3c <_malloc_r+0x180>
 8018e52:	0798      	lsls	r0, r3, #30
 8018e54:	d179      	bne.n	8018f4a <_malloc_r+0x28e>
 8018e56:	686b      	ldr	r3, [r5, #4]
 8018e58:	ea23 0302 	bic.w	r3, r3, r2
 8018e5c:	606b      	str	r3, [r5, #4]
 8018e5e:	6868      	ldr	r0, [r5, #4]
 8018e60:	0052      	lsls	r2, r2, #1
 8018e62:	4282      	cmp	r2, r0
 8018e64:	d87e      	bhi.n	8018f64 <_malloc_r+0x2a8>
 8018e66:	2a00      	cmp	r2, #0
 8018e68:	d07c      	beq.n	8018f64 <_malloc_r+0x2a8>
 8018e6a:	4673      	mov	r3, lr
 8018e6c:	4202      	tst	r2, r0
 8018e6e:	d1e1      	bne.n	8018e34 <_malloc_r+0x178>
 8018e70:	3304      	adds	r3, #4
 8018e72:	0052      	lsls	r2, r2, #1
 8018e74:	e7fa      	b.n	8018e6c <_malloc_r+0x1b0>
 8018e76:	0a42      	lsrs	r2, r0, #9
 8018e78:	2a04      	cmp	r2, #4
 8018e7a:	d815      	bhi.n	8018ea8 <_malloc_r+0x1ec>
 8018e7c:	0982      	lsrs	r2, r0, #6
 8018e7e:	3238      	adds	r2, #56	; 0x38
 8018e80:	1c57      	adds	r7, r2, #1
 8018e82:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8018e86:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8018e8a:	45be      	cmp	lr, r7
 8018e8c:	d126      	bne.n	8018edc <_malloc_r+0x220>
 8018e8e:	2001      	movs	r0, #1
 8018e90:	1092      	asrs	r2, r2, #2
 8018e92:	fa00 f202 	lsl.w	r2, r0, r2
 8018e96:	6868      	ldr	r0, [r5, #4]
 8018e98:	4310      	orrs	r0, r2
 8018e9a:	6068      	str	r0, [r5, #4]
 8018e9c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8018ea0:	60b7      	str	r7, [r6, #8]
 8018ea2:	f8ce 6008 	str.w	r6, [lr, #8]
 8018ea6:	e7b3      	b.n	8018e10 <_malloc_r+0x154>
 8018ea8:	2a14      	cmp	r2, #20
 8018eaa:	d801      	bhi.n	8018eb0 <_malloc_r+0x1f4>
 8018eac:	325b      	adds	r2, #91	; 0x5b
 8018eae:	e7e7      	b.n	8018e80 <_malloc_r+0x1c4>
 8018eb0:	2a54      	cmp	r2, #84	; 0x54
 8018eb2:	d802      	bhi.n	8018eba <_malloc_r+0x1fe>
 8018eb4:	0b02      	lsrs	r2, r0, #12
 8018eb6:	326e      	adds	r2, #110	; 0x6e
 8018eb8:	e7e2      	b.n	8018e80 <_malloc_r+0x1c4>
 8018eba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018ebe:	d802      	bhi.n	8018ec6 <_malloc_r+0x20a>
 8018ec0:	0bc2      	lsrs	r2, r0, #15
 8018ec2:	3277      	adds	r2, #119	; 0x77
 8018ec4:	e7dc      	b.n	8018e80 <_malloc_r+0x1c4>
 8018ec6:	f240 5754 	movw	r7, #1364	; 0x554
 8018eca:	42ba      	cmp	r2, r7
 8018ecc:	bf9a      	itte	ls
 8018ece:	0c82      	lsrls	r2, r0, #18
 8018ed0:	327c      	addls	r2, #124	; 0x7c
 8018ed2:	227e      	movhi	r2, #126	; 0x7e
 8018ed4:	e7d4      	b.n	8018e80 <_malloc_r+0x1c4>
 8018ed6:	68bf      	ldr	r7, [r7, #8]
 8018ed8:	45be      	cmp	lr, r7
 8018eda:	d004      	beq.n	8018ee6 <_malloc_r+0x22a>
 8018edc:	687a      	ldr	r2, [r7, #4]
 8018ede:	f022 0203 	bic.w	r2, r2, #3
 8018ee2:	4290      	cmp	r0, r2
 8018ee4:	d3f7      	bcc.n	8018ed6 <_malloc_r+0x21a>
 8018ee6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8018eea:	e7d7      	b.n	8018e9c <_malloc_r+0x1e0>
 8018eec:	6870      	ldr	r0, [r6, #4]
 8018eee:	68f7      	ldr	r7, [r6, #12]
 8018ef0:	f020 0003 	bic.w	r0, r0, #3
 8018ef4:	eba0 0a04 	sub.w	sl, r0, r4
 8018ef8:	f1ba 0f0f 	cmp.w	sl, #15
 8018efc:	dd10      	ble.n	8018f20 <_malloc_r+0x264>
 8018efe:	68b2      	ldr	r2, [r6, #8]
 8018f00:	1933      	adds	r3, r6, r4
 8018f02:	f044 0401 	orr.w	r4, r4, #1
 8018f06:	6074      	str	r4, [r6, #4]
 8018f08:	60d7      	str	r7, [r2, #12]
 8018f0a:	60ba      	str	r2, [r7, #8]
 8018f0c:	f04a 0201 	orr.w	r2, sl, #1
 8018f10:	616b      	str	r3, [r5, #20]
 8018f12:	612b      	str	r3, [r5, #16]
 8018f14:	60d9      	str	r1, [r3, #12]
 8018f16:	6099      	str	r1, [r3, #8]
 8018f18:	605a      	str	r2, [r3, #4]
 8018f1a:	f846 a000 	str.w	sl, [r6, r0]
 8018f1e:	e6ff      	b.n	8018d20 <_malloc_r+0x64>
 8018f20:	f1ba 0f00 	cmp.w	sl, #0
 8018f24:	db0f      	blt.n	8018f46 <_malloc_r+0x28a>
 8018f26:	4430      	add	r0, r6
 8018f28:	6843      	ldr	r3, [r0, #4]
 8018f2a:	f043 0301 	orr.w	r3, r3, #1
 8018f2e:	6043      	str	r3, [r0, #4]
 8018f30:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8018f34:	4648      	mov	r0, r9
 8018f36:	60df      	str	r7, [r3, #12]
 8018f38:	60bb      	str	r3, [r7, #8]
 8018f3a:	f000 f8e7 	bl	801910c <__malloc_unlock>
 8018f3e:	4630      	mov	r0, r6
 8018f40:	b003      	add	sp, #12
 8018f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f46:	463e      	mov	r6, r7
 8018f48:	e77a      	b.n	8018e40 <_malloc_r+0x184>
 8018f4a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8018f4e:	4584      	cmp	ip, r0
 8018f50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018f54:	f43f af7d 	beq.w	8018e52 <_malloc_r+0x196>
 8018f58:	e781      	b.n	8018e5e <_malloc_r+0x1a2>
 8018f5a:	bf00      	nop
 8018f5c:	2000027c 	.word	0x2000027c
 8018f60:	20000284 	.word	0x20000284
 8018f64:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8018f68:	f8db 6004 	ldr.w	r6, [fp, #4]
 8018f6c:	f026 0603 	bic.w	r6, r6, #3
 8018f70:	42b4      	cmp	r4, r6
 8018f72:	d803      	bhi.n	8018f7c <_malloc_r+0x2c0>
 8018f74:	1b33      	subs	r3, r6, r4
 8018f76:	2b0f      	cmp	r3, #15
 8018f78:	f300 8096 	bgt.w	80190a8 <_malloc_r+0x3ec>
 8018f7c:	4a4f      	ldr	r2, [pc, #316]	; (80190bc <_malloc_r+0x400>)
 8018f7e:	6817      	ldr	r7, [r2, #0]
 8018f80:	4a4f      	ldr	r2, [pc, #316]	; (80190c0 <_malloc_r+0x404>)
 8018f82:	6811      	ldr	r1, [r2, #0]
 8018f84:	3710      	adds	r7, #16
 8018f86:	3101      	adds	r1, #1
 8018f88:	eb0b 0306 	add.w	r3, fp, r6
 8018f8c:	4427      	add	r7, r4
 8018f8e:	d005      	beq.n	8018f9c <_malloc_r+0x2e0>
 8018f90:	494c      	ldr	r1, [pc, #304]	; (80190c4 <_malloc_r+0x408>)
 8018f92:	3901      	subs	r1, #1
 8018f94:	440f      	add	r7, r1
 8018f96:	3101      	adds	r1, #1
 8018f98:	4249      	negs	r1, r1
 8018f9a:	400f      	ands	r7, r1
 8018f9c:	4639      	mov	r1, r7
 8018f9e:	4648      	mov	r0, r9
 8018fa0:	9201      	str	r2, [sp, #4]
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	f000 f8b8 	bl	8019118 <_sbrk_r>
 8018fa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8018fac:	4680      	mov	r8, r0
 8018fae:	d056      	beq.n	801905e <_malloc_r+0x3a2>
 8018fb0:	9b00      	ldr	r3, [sp, #0]
 8018fb2:	9a01      	ldr	r2, [sp, #4]
 8018fb4:	4283      	cmp	r3, r0
 8018fb6:	d901      	bls.n	8018fbc <_malloc_r+0x300>
 8018fb8:	45ab      	cmp	fp, r5
 8018fba:	d150      	bne.n	801905e <_malloc_r+0x3a2>
 8018fbc:	4842      	ldr	r0, [pc, #264]	; (80190c8 <_malloc_r+0x40c>)
 8018fbe:	6801      	ldr	r1, [r0, #0]
 8018fc0:	4543      	cmp	r3, r8
 8018fc2:	eb07 0e01 	add.w	lr, r7, r1
 8018fc6:	f8c0 e000 	str.w	lr, [r0]
 8018fca:	4940      	ldr	r1, [pc, #256]	; (80190cc <_malloc_r+0x410>)
 8018fcc:	4682      	mov	sl, r0
 8018fce:	d113      	bne.n	8018ff8 <_malloc_r+0x33c>
 8018fd0:	420b      	tst	r3, r1
 8018fd2:	d111      	bne.n	8018ff8 <_malloc_r+0x33c>
 8018fd4:	68ab      	ldr	r3, [r5, #8]
 8018fd6:	443e      	add	r6, r7
 8018fd8:	f046 0601 	orr.w	r6, r6, #1
 8018fdc:	605e      	str	r6, [r3, #4]
 8018fde:	4a3c      	ldr	r2, [pc, #240]	; (80190d0 <_malloc_r+0x414>)
 8018fe0:	f8da 3000 	ldr.w	r3, [sl]
 8018fe4:	6811      	ldr	r1, [r2, #0]
 8018fe6:	428b      	cmp	r3, r1
 8018fe8:	bf88      	it	hi
 8018fea:	6013      	strhi	r3, [r2, #0]
 8018fec:	4a39      	ldr	r2, [pc, #228]	; (80190d4 <_malloc_r+0x418>)
 8018fee:	6811      	ldr	r1, [r2, #0]
 8018ff0:	428b      	cmp	r3, r1
 8018ff2:	bf88      	it	hi
 8018ff4:	6013      	strhi	r3, [r2, #0]
 8018ff6:	e032      	b.n	801905e <_malloc_r+0x3a2>
 8018ff8:	6810      	ldr	r0, [r2, #0]
 8018ffa:	3001      	adds	r0, #1
 8018ffc:	bf1b      	ittet	ne
 8018ffe:	eba8 0303 	subne.w	r3, r8, r3
 8019002:	4473      	addne	r3, lr
 8019004:	f8c2 8000 	streq.w	r8, [r2]
 8019008:	f8ca 3000 	strne.w	r3, [sl]
 801900c:	f018 0007 	ands.w	r0, r8, #7
 8019010:	bf1c      	itt	ne
 8019012:	f1c0 0008 	rsbne	r0, r0, #8
 8019016:	4480      	addne	r8, r0
 8019018:	4b2a      	ldr	r3, [pc, #168]	; (80190c4 <_malloc_r+0x408>)
 801901a:	4447      	add	r7, r8
 801901c:	4418      	add	r0, r3
 801901e:	400f      	ands	r7, r1
 8019020:	1bc7      	subs	r7, r0, r7
 8019022:	4639      	mov	r1, r7
 8019024:	4648      	mov	r0, r9
 8019026:	f000 f877 	bl	8019118 <_sbrk_r>
 801902a:	1c43      	adds	r3, r0, #1
 801902c:	bf08      	it	eq
 801902e:	4640      	moveq	r0, r8
 8019030:	f8da 3000 	ldr.w	r3, [sl]
 8019034:	f8c5 8008 	str.w	r8, [r5, #8]
 8019038:	bf08      	it	eq
 801903a:	2700      	moveq	r7, #0
 801903c:	eba0 0008 	sub.w	r0, r0, r8
 8019040:	443b      	add	r3, r7
 8019042:	4407      	add	r7, r0
 8019044:	f047 0701 	orr.w	r7, r7, #1
 8019048:	45ab      	cmp	fp, r5
 801904a:	f8ca 3000 	str.w	r3, [sl]
 801904e:	f8c8 7004 	str.w	r7, [r8, #4]
 8019052:	d0c4      	beq.n	8018fde <_malloc_r+0x322>
 8019054:	2e0f      	cmp	r6, #15
 8019056:	d810      	bhi.n	801907a <_malloc_r+0x3be>
 8019058:	2301      	movs	r3, #1
 801905a:	f8c8 3004 	str.w	r3, [r8, #4]
 801905e:	68ab      	ldr	r3, [r5, #8]
 8019060:	685a      	ldr	r2, [r3, #4]
 8019062:	f022 0203 	bic.w	r2, r2, #3
 8019066:	4294      	cmp	r4, r2
 8019068:	eba2 0304 	sub.w	r3, r2, r4
 801906c:	d801      	bhi.n	8019072 <_malloc_r+0x3b6>
 801906e:	2b0f      	cmp	r3, #15
 8019070:	dc1a      	bgt.n	80190a8 <_malloc_r+0x3ec>
 8019072:	4648      	mov	r0, r9
 8019074:	f000 f84a 	bl	801910c <__malloc_unlock>
 8019078:	e62d      	b.n	8018cd6 <_malloc_r+0x1a>
 801907a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801907e:	3e0c      	subs	r6, #12
 8019080:	f026 0607 	bic.w	r6, r6, #7
 8019084:	f003 0301 	and.w	r3, r3, #1
 8019088:	4333      	orrs	r3, r6
 801908a:	f8cb 3004 	str.w	r3, [fp, #4]
 801908e:	eb0b 0306 	add.w	r3, fp, r6
 8019092:	2205      	movs	r2, #5
 8019094:	2e0f      	cmp	r6, #15
 8019096:	605a      	str	r2, [r3, #4]
 8019098:	609a      	str	r2, [r3, #8]
 801909a:	d9a0      	bls.n	8018fde <_malloc_r+0x322>
 801909c:	f10b 0108 	add.w	r1, fp, #8
 80190a0:	4648      	mov	r0, r9
 80190a2:	f001 ff19 	bl	801aed8 <_free_r>
 80190a6:	e79a      	b.n	8018fde <_malloc_r+0x322>
 80190a8:	68ae      	ldr	r6, [r5, #8]
 80190aa:	f044 0201 	orr.w	r2, r4, #1
 80190ae:	4434      	add	r4, r6
 80190b0:	f043 0301 	orr.w	r3, r3, #1
 80190b4:	6072      	str	r2, [r6, #4]
 80190b6:	60ac      	str	r4, [r5, #8]
 80190b8:	6063      	str	r3, [r4, #4]
 80190ba:	e631      	b.n	8018d20 <_malloc_r+0x64>
 80190bc:	20005b70 	.word	0x20005b70
 80190c0:	20000684 	.word	0x20000684
 80190c4:	00000080 	.word	0x00000080
 80190c8:	20005b40 	.word	0x20005b40
 80190cc:	0000007f 	.word	0x0000007f
 80190d0:	20005b68 	.word	0x20005b68
 80190d4:	20005b6c 	.word	0x20005b6c

080190d8 <memcpy>:
 80190d8:	b510      	push	{r4, lr}
 80190da:	1e43      	subs	r3, r0, #1
 80190dc:	440a      	add	r2, r1
 80190de:	4291      	cmp	r1, r2
 80190e0:	d100      	bne.n	80190e4 <memcpy+0xc>
 80190e2:	bd10      	pop	{r4, pc}
 80190e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190ec:	e7f7      	b.n	80190de <memcpy+0x6>

080190ee <memset>:
 80190ee:	4402      	add	r2, r0
 80190f0:	4603      	mov	r3, r0
 80190f2:	4293      	cmp	r3, r2
 80190f4:	d100      	bne.n	80190f8 <memset+0xa>
 80190f6:	4770      	bx	lr
 80190f8:	f803 1b01 	strb.w	r1, [r3], #1
 80190fc:	e7f9      	b.n	80190f2 <memset+0x4>
	...

08019100 <__malloc_lock>:
 8019100:	4801      	ldr	r0, [pc, #4]	; (8019108 <__malloc_lock+0x8>)
 8019102:	f001 bfc8 	b.w	801b096 <__retarget_lock_acquire_recursive>
 8019106:	bf00      	nop
 8019108:	20007044 	.word	0x20007044

0801910c <__malloc_unlock>:
 801910c:	4801      	ldr	r0, [pc, #4]	; (8019114 <__malloc_unlock+0x8>)
 801910e:	f001 bfc8 	b.w	801b0a2 <__retarget_lock_release_recursive>
 8019112:	bf00      	nop
 8019114:	20007044 	.word	0x20007044

08019118 <_sbrk_r>:
 8019118:	b538      	push	{r3, r4, r5, lr}
 801911a:	4c06      	ldr	r4, [pc, #24]	; (8019134 <_sbrk_r+0x1c>)
 801911c:	2300      	movs	r3, #0
 801911e:	4605      	mov	r5, r0
 8019120:	4608      	mov	r0, r1
 8019122:	6023      	str	r3, [r4, #0]
 8019124:	f7e7 fdde 	bl	8000ce4 <_sbrk>
 8019128:	1c43      	adds	r3, r0, #1
 801912a:	d102      	bne.n	8019132 <_sbrk_r+0x1a>
 801912c:	6823      	ldr	r3, [r4, #0]
 801912e:	b103      	cbz	r3, 8019132 <_sbrk_r+0x1a>
 8019130:	602b      	str	r3, [r5, #0]
 8019132:	bd38      	pop	{r3, r4, r5, pc}
 8019134:	2000704c 	.word	0x2000704c

08019138 <_sprintf_r>:
 8019138:	b40c      	push	{r2, r3}
 801913a:	b510      	push	{r4, lr}
 801913c:	b09c      	sub	sp, #112	; 0x70
 801913e:	ab1e      	add	r3, sp, #120	; 0x78
 8019140:	9102      	str	r1, [sp, #8]
 8019142:	9106      	str	r1, [sp, #24]
 8019144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019148:	9104      	str	r1, [sp, #16]
 801914a:	9107      	str	r1, [sp, #28]
 801914c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019150:	f853 2b04 	ldr.w	r2, [r3], #4
 8019154:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019158:	f44f 7402 	mov.w	r4, #520	; 0x208
 801915c:	a902      	add	r1, sp, #8
 801915e:	9301      	str	r3, [sp, #4]
 8019160:	f8ad 4014 	strh.w	r4, [sp, #20]
 8019164:	f000 f834 	bl	80191d0 <_svfprintf_r>
 8019168:	9b02      	ldr	r3, [sp, #8]
 801916a:	2200      	movs	r2, #0
 801916c:	701a      	strb	r2, [r3, #0]
 801916e:	b01c      	add	sp, #112	; 0x70
 8019170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019174:	b002      	add	sp, #8
 8019176:	4770      	bx	lr

08019178 <sprintf>:
 8019178:	b40e      	push	{r1, r2, r3}
 801917a:	b500      	push	{lr}
 801917c:	b09c      	sub	sp, #112	; 0x70
 801917e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019182:	ab1d      	add	r3, sp, #116	; 0x74
 8019184:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019188:	9002      	str	r0, [sp, #8]
 801918a:	9006      	str	r0, [sp, #24]
 801918c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019190:	480a      	ldr	r0, [pc, #40]	; (80191bc <sprintf+0x44>)
 8019192:	9104      	str	r1, [sp, #16]
 8019194:	9107      	str	r1, [sp, #28]
 8019196:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801919a:	f853 2b04 	ldr.w	r2, [r3], #4
 801919e:	f8ad 1016 	strh.w	r1, [sp, #22]
 80191a2:	6800      	ldr	r0, [r0, #0]
 80191a4:	9301      	str	r3, [sp, #4]
 80191a6:	a902      	add	r1, sp, #8
 80191a8:	f000 f812 	bl	80191d0 <_svfprintf_r>
 80191ac:	9b02      	ldr	r3, [sp, #8]
 80191ae:	2200      	movs	r2, #0
 80191b0:	701a      	strb	r2, [r3, #0]
 80191b2:	b01c      	add	sp, #112	; 0x70
 80191b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80191b8:	b003      	add	sp, #12
 80191ba:	4770      	bx	lr
 80191bc:	20000188 	.word	0x20000188

080191c0 <strcpy>:
 80191c0:	4603      	mov	r3, r0
 80191c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80191c6:	f803 2b01 	strb.w	r2, [r3], #1
 80191ca:	2a00      	cmp	r2, #0
 80191cc:	d1f9      	bne.n	80191c2 <strcpy+0x2>
 80191ce:	4770      	bx	lr

080191d0 <_svfprintf_r>:
 80191d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d4:	b0bd      	sub	sp, #244	; 0xf4
 80191d6:	468a      	mov	sl, r1
 80191d8:	4615      	mov	r5, r2
 80191da:	461f      	mov	r7, r3
 80191dc:	4683      	mov	fp, r0
 80191de:	f001 ff39 	bl	801b054 <_localeconv_r>
 80191e2:	6803      	ldr	r3, [r0, #0]
 80191e4:	930d      	str	r3, [sp, #52]	; 0x34
 80191e6:	4618      	mov	r0, r3
 80191e8:	f7fe fe36 	bl	8017e58 <strlen>
 80191ec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80191f0:	9008      	str	r0, [sp, #32]
 80191f2:	061b      	lsls	r3, r3, #24
 80191f4:	d518      	bpl.n	8019228 <_svfprintf_r+0x58>
 80191f6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80191fa:	b9ab      	cbnz	r3, 8019228 <_svfprintf_r+0x58>
 80191fc:	2140      	movs	r1, #64	; 0x40
 80191fe:	4658      	mov	r0, fp
 8019200:	f7ff fd5c 	bl	8018cbc <_malloc_r>
 8019204:	f8ca 0000 	str.w	r0, [sl]
 8019208:	f8ca 0010 	str.w	r0, [sl, #16]
 801920c:	b948      	cbnz	r0, 8019222 <_svfprintf_r+0x52>
 801920e:	230c      	movs	r3, #12
 8019210:	f8cb 3000 	str.w	r3, [fp]
 8019214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019218:	9309      	str	r3, [sp, #36]	; 0x24
 801921a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801921c:	b03d      	add	sp, #244	; 0xf4
 801921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019222:	2340      	movs	r3, #64	; 0x40
 8019224:	f8ca 3014 	str.w	r3, [sl, #20]
 8019228:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8019490 <_svfprintf_r+0x2c0>
 801922c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019230:	2300      	movs	r3, #0
 8019232:	ac2c      	add	r4, sp, #176	; 0xb0
 8019234:	941f      	str	r4, [sp, #124]	; 0x7c
 8019236:	9321      	str	r3, [sp, #132]	; 0x84
 8019238:	9320      	str	r3, [sp, #128]	; 0x80
 801923a:	9505      	str	r5, [sp, #20]
 801923c:	9303      	str	r3, [sp, #12]
 801923e:	9311      	str	r3, [sp, #68]	; 0x44
 8019240:	9310      	str	r3, [sp, #64]	; 0x40
 8019242:	9309      	str	r3, [sp, #36]	; 0x24
 8019244:	9d05      	ldr	r5, [sp, #20]
 8019246:	462b      	mov	r3, r5
 8019248:	f813 2b01 	ldrb.w	r2, [r3], #1
 801924c:	b112      	cbz	r2, 8019254 <_svfprintf_r+0x84>
 801924e:	2a25      	cmp	r2, #37	; 0x25
 8019250:	f040 8083 	bne.w	801935a <_svfprintf_r+0x18a>
 8019254:	9b05      	ldr	r3, [sp, #20]
 8019256:	1aee      	subs	r6, r5, r3
 8019258:	d00d      	beq.n	8019276 <_svfprintf_r+0xa6>
 801925a:	e884 0048 	stmia.w	r4, {r3, r6}
 801925e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019260:	4433      	add	r3, r6
 8019262:	9321      	str	r3, [sp, #132]	; 0x84
 8019264:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019266:	3301      	adds	r3, #1
 8019268:	2b07      	cmp	r3, #7
 801926a:	9320      	str	r3, [sp, #128]	; 0x80
 801926c:	dc77      	bgt.n	801935e <_svfprintf_r+0x18e>
 801926e:	3408      	adds	r4, #8
 8019270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019272:	4433      	add	r3, r6
 8019274:	9309      	str	r3, [sp, #36]	; 0x24
 8019276:	782b      	ldrb	r3, [r5, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	f000 8729 	beq.w	801a0d0 <_svfprintf_r+0xf00>
 801927e:	2300      	movs	r3, #0
 8019280:	1c69      	adds	r1, r5, #1
 8019282:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019286:	461a      	mov	r2, r3
 8019288:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801928c:	930a      	str	r3, [sp, #40]	; 0x28
 801928e:	461d      	mov	r5, r3
 8019290:	200a      	movs	r0, #10
 8019292:	1c4e      	adds	r6, r1, #1
 8019294:	7809      	ldrb	r1, [r1, #0]
 8019296:	9605      	str	r6, [sp, #20]
 8019298:	9102      	str	r1, [sp, #8]
 801929a:	9902      	ldr	r1, [sp, #8]
 801929c:	3920      	subs	r1, #32
 801929e:	2958      	cmp	r1, #88	; 0x58
 80192a0:	f200 8418 	bhi.w	8019ad4 <_svfprintf_r+0x904>
 80192a4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80192a8:	041600a6 	.word	0x041600a6
 80192ac:	00ab0416 	.word	0x00ab0416
 80192b0:	04160416 	.word	0x04160416
 80192b4:	04160416 	.word	0x04160416
 80192b8:	04160416 	.word	0x04160416
 80192bc:	006500ae 	.word	0x006500ae
 80192c0:	00b70416 	.word	0x00b70416
 80192c4:	041600ba 	.word	0x041600ba
 80192c8:	00da00d7 	.word	0x00da00d7
 80192cc:	00da00da 	.word	0x00da00da
 80192d0:	00da00da 	.word	0x00da00da
 80192d4:	00da00da 	.word	0x00da00da
 80192d8:	00da00da 	.word	0x00da00da
 80192dc:	04160416 	.word	0x04160416
 80192e0:	04160416 	.word	0x04160416
 80192e4:	04160416 	.word	0x04160416
 80192e8:	04160416 	.word	0x04160416
 80192ec:	04160416 	.word	0x04160416
 80192f0:	012b0115 	.word	0x012b0115
 80192f4:	012b0416 	.word	0x012b0416
 80192f8:	04160416 	.word	0x04160416
 80192fc:	04160416 	.word	0x04160416
 8019300:	041600ed 	.word	0x041600ed
 8019304:	03400416 	.word	0x03400416
 8019308:	04160416 	.word	0x04160416
 801930c:	04160416 	.word	0x04160416
 8019310:	03a80416 	.word	0x03a80416
 8019314:	04160416 	.word	0x04160416
 8019318:	04160086 	.word	0x04160086
 801931c:	04160416 	.word	0x04160416
 8019320:	04160416 	.word	0x04160416
 8019324:	04160416 	.word	0x04160416
 8019328:	04160416 	.word	0x04160416
 801932c:	01070416 	.word	0x01070416
 8019330:	012b006b 	.word	0x012b006b
 8019334:	012b012b 	.word	0x012b012b
 8019338:	006b00f0 	.word	0x006b00f0
 801933c:	04160416 	.word	0x04160416
 8019340:	041600fa 	.word	0x041600fa
 8019344:	03420322 	.word	0x03420322
 8019348:	01010376 	.word	0x01010376
 801934c:	03870416 	.word	0x03870416
 8019350:	03aa0416 	.word	0x03aa0416
 8019354:	04160416 	.word	0x04160416
 8019358:	03c2      	.short	0x03c2
 801935a:	461d      	mov	r5, r3
 801935c:	e773      	b.n	8019246 <_svfprintf_r+0x76>
 801935e:	aa1f      	add	r2, sp, #124	; 0x7c
 8019360:	4651      	mov	r1, sl
 8019362:	4658      	mov	r0, fp
 8019364:	f002 fb1c 	bl	801b9a0 <__ssprint_r>
 8019368:	2800      	cmp	r0, #0
 801936a:	f040 8692 	bne.w	801a092 <_svfprintf_r+0xec2>
 801936e:	ac2c      	add	r4, sp, #176	; 0xb0
 8019370:	e77e      	b.n	8019270 <_svfprintf_r+0xa0>
 8019372:	2301      	movs	r3, #1
 8019374:	222b      	movs	r2, #43	; 0x2b
 8019376:	9905      	ldr	r1, [sp, #20]
 8019378:	e78b      	b.n	8019292 <_svfprintf_r+0xc2>
 801937a:	460f      	mov	r7, r1
 801937c:	e7fb      	b.n	8019376 <_svfprintf_r+0x1a6>
 801937e:	b10b      	cbz	r3, 8019384 <_svfprintf_r+0x1b4>
 8019380:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019384:	06ae      	lsls	r6, r5, #26
 8019386:	f140 80aa 	bpl.w	80194de <_svfprintf_r+0x30e>
 801938a:	3707      	adds	r7, #7
 801938c:	f027 0707 	bic.w	r7, r7, #7
 8019390:	f107 0308 	add.w	r3, r7, #8
 8019394:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019398:	9304      	str	r3, [sp, #16]
 801939a:	2e00      	cmp	r6, #0
 801939c:	f177 0300 	sbcs.w	r3, r7, #0
 80193a0:	da06      	bge.n	80193b0 <_svfprintf_r+0x1e0>
 80193a2:	4276      	negs	r6, r6
 80193a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80193a8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80193ac:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80193b0:	2301      	movs	r3, #1
 80193b2:	e2ca      	b.n	801994a <_svfprintf_r+0x77a>
 80193b4:	b10b      	cbz	r3, 80193ba <_svfprintf_r+0x1ea>
 80193b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80193ba:	4b37      	ldr	r3, [pc, #220]	; (8019498 <_svfprintf_r+0x2c8>)
 80193bc:	9311      	str	r3, [sp, #68]	; 0x44
 80193be:	06ab      	lsls	r3, r5, #26
 80193c0:	f140 8339 	bpl.w	8019a36 <_svfprintf_r+0x866>
 80193c4:	3707      	adds	r7, #7
 80193c6:	f027 0707 	bic.w	r7, r7, #7
 80193ca:	f107 0308 	add.w	r3, r7, #8
 80193ce:	e9d7 6700 	ldrd	r6, r7, [r7]
 80193d2:	9304      	str	r3, [sp, #16]
 80193d4:	07e8      	lsls	r0, r5, #31
 80193d6:	d50b      	bpl.n	80193f0 <_svfprintf_r+0x220>
 80193d8:	ea56 0307 	orrs.w	r3, r6, r7
 80193dc:	d008      	beq.n	80193f0 <_svfprintf_r+0x220>
 80193de:	2330      	movs	r3, #48	; 0x30
 80193e0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80193e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80193e8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80193ec:	f045 0502 	orr.w	r5, r5, #2
 80193f0:	2302      	movs	r3, #2
 80193f2:	e2a7      	b.n	8019944 <_svfprintf_r+0x774>
 80193f4:	2a00      	cmp	r2, #0
 80193f6:	d1be      	bne.n	8019376 <_svfprintf_r+0x1a6>
 80193f8:	2301      	movs	r3, #1
 80193fa:	2220      	movs	r2, #32
 80193fc:	e7bb      	b.n	8019376 <_svfprintf_r+0x1a6>
 80193fe:	f045 0501 	orr.w	r5, r5, #1
 8019402:	e7b8      	b.n	8019376 <_svfprintf_r+0x1a6>
 8019404:	683e      	ldr	r6, [r7, #0]
 8019406:	960a      	str	r6, [sp, #40]	; 0x28
 8019408:	2e00      	cmp	r6, #0
 801940a:	f107 0104 	add.w	r1, r7, #4
 801940e:	dab4      	bge.n	801937a <_svfprintf_r+0x1aa>
 8019410:	4276      	negs	r6, r6
 8019412:	960a      	str	r6, [sp, #40]	; 0x28
 8019414:	460f      	mov	r7, r1
 8019416:	f045 0504 	orr.w	r5, r5, #4
 801941a:	e7ac      	b.n	8019376 <_svfprintf_r+0x1a6>
 801941c:	9905      	ldr	r1, [sp, #20]
 801941e:	1c4e      	adds	r6, r1, #1
 8019420:	7809      	ldrb	r1, [r1, #0]
 8019422:	9102      	str	r1, [sp, #8]
 8019424:	292a      	cmp	r1, #42	; 0x2a
 8019426:	d010      	beq.n	801944a <_svfprintf_r+0x27a>
 8019428:	f04f 0900 	mov.w	r9, #0
 801942c:	9605      	str	r6, [sp, #20]
 801942e:	9902      	ldr	r1, [sp, #8]
 8019430:	3930      	subs	r1, #48	; 0x30
 8019432:	2909      	cmp	r1, #9
 8019434:	f63f af31 	bhi.w	801929a <_svfprintf_r+0xca>
 8019438:	fb00 1909 	mla	r9, r0, r9, r1
 801943c:	9905      	ldr	r1, [sp, #20]
 801943e:	460e      	mov	r6, r1
 8019440:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019444:	9102      	str	r1, [sp, #8]
 8019446:	9605      	str	r6, [sp, #20]
 8019448:	e7f1      	b.n	801942e <_svfprintf_r+0x25e>
 801944a:	6839      	ldr	r1, [r7, #0]
 801944c:	9605      	str	r6, [sp, #20]
 801944e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8019452:	3704      	adds	r7, #4
 8019454:	e78f      	b.n	8019376 <_svfprintf_r+0x1a6>
 8019456:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801945a:	e78c      	b.n	8019376 <_svfprintf_r+0x1a6>
 801945c:	2100      	movs	r1, #0
 801945e:	910a      	str	r1, [sp, #40]	; 0x28
 8019460:	9902      	ldr	r1, [sp, #8]
 8019462:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019464:	3930      	subs	r1, #48	; 0x30
 8019466:	fb00 1106 	mla	r1, r0, r6, r1
 801946a:	910a      	str	r1, [sp, #40]	; 0x28
 801946c:	9905      	ldr	r1, [sp, #20]
 801946e:	460e      	mov	r6, r1
 8019470:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019474:	9102      	str	r1, [sp, #8]
 8019476:	9902      	ldr	r1, [sp, #8]
 8019478:	9605      	str	r6, [sp, #20]
 801947a:	3930      	subs	r1, #48	; 0x30
 801947c:	2909      	cmp	r1, #9
 801947e:	d9ef      	bls.n	8019460 <_svfprintf_r+0x290>
 8019480:	e70b      	b.n	801929a <_svfprintf_r+0xca>
 8019482:	f045 0508 	orr.w	r5, r5, #8
 8019486:	e776      	b.n	8019376 <_svfprintf_r+0x1a6>
 8019488:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 801948c:	e773      	b.n	8019376 <_svfprintf_r+0x1a6>
 801948e:	bf00      	nop
	...
 8019498:	0801cf64 	.word	0x0801cf64
 801949c:	9905      	ldr	r1, [sp, #20]
 801949e:	7809      	ldrb	r1, [r1, #0]
 80194a0:	296c      	cmp	r1, #108	; 0x6c
 80194a2:	d105      	bne.n	80194b0 <_svfprintf_r+0x2e0>
 80194a4:	9905      	ldr	r1, [sp, #20]
 80194a6:	3101      	adds	r1, #1
 80194a8:	9105      	str	r1, [sp, #20]
 80194aa:	f045 0520 	orr.w	r5, r5, #32
 80194ae:	e762      	b.n	8019376 <_svfprintf_r+0x1a6>
 80194b0:	f045 0510 	orr.w	r5, r5, #16
 80194b4:	e75f      	b.n	8019376 <_svfprintf_r+0x1a6>
 80194b6:	1d3b      	adds	r3, r7, #4
 80194b8:	9304      	str	r3, [sp, #16]
 80194ba:	2600      	movs	r6, #0
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80194c2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80194c6:	f04f 0901 	mov.w	r9, #1
 80194ca:	4637      	mov	r7, r6
 80194cc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80194d0:	e11b      	b.n	801970a <_svfprintf_r+0x53a>
 80194d2:	b10b      	cbz	r3, 80194d8 <_svfprintf_r+0x308>
 80194d4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80194d8:	f045 0510 	orr.w	r5, r5, #16
 80194dc:	e752      	b.n	8019384 <_svfprintf_r+0x1b4>
 80194de:	f015 0f10 	tst.w	r5, #16
 80194e2:	f107 0304 	add.w	r3, r7, #4
 80194e6:	d003      	beq.n	80194f0 <_svfprintf_r+0x320>
 80194e8:	683e      	ldr	r6, [r7, #0]
 80194ea:	9304      	str	r3, [sp, #16]
 80194ec:	17f7      	asrs	r7, r6, #31
 80194ee:	e754      	b.n	801939a <_svfprintf_r+0x1ca>
 80194f0:	683e      	ldr	r6, [r7, #0]
 80194f2:	9304      	str	r3, [sp, #16]
 80194f4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80194f8:	bf18      	it	ne
 80194fa:	b236      	sxthne	r6, r6
 80194fc:	e7f6      	b.n	80194ec <_svfprintf_r+0x31c>
 80194fe:	b10b      	cbz	r3, 8019504 <_svfprintf_r+0x334>
 8019500:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019504:	3707      	adds	r7, #7
 8019506:	f027 0707 	bic.w	r7, r7, #7
 801950a:	f107 0308 	add.w	r3, r7, #8
 801950e:	9304      	str	r3, [sp, #16]
 8019510:	ed97 7b00 	vldr	d7, [r7]
 8019514:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019518:	9b06      	ldr	r3, [sp, #24]
 801951a:	9312      	str	r3, [sp, #72]	; 0x48
 801951c:	9b07      	ldr	r3, [sp, #28]
 801951e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019522:	9313      	str	r3, [sp, #76]	; 0x4c
 8019524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019528:	4b4a      	ldr	r3, [pc, #296]	; (8019654 <_svfprintf_r+0x484>)
 801952a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801952e:	f7ff f94b 	bl	80187c8 <__aeabi_dcmpun>
 8019532:	2800      	cmp	r0, #0
 8019534:	f040 85d5 	bne.w	801a0e2 <_svfprintf_r+0xf12>
 8019538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801953c:	4b45      	ldr	r3, [pc, #276]	; (8019654 <_svfprintf_r+0x484>)
 801953e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019542:	f7ff f923 	bl	801878c <__aeabi_dcmple>
 8019546:	2800      	cmp	r0, #0
 8019548:	f040 85cb 	bne.w	801a0e2 <_svfprintf_r+0xf12>
 801954c:	2200      	movs	r2, #0
 801954e:	2300      	movs	r3, #0
 8019550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019554:	f7ff f910 	bl	8018778 <__aeabi_dcmplt>
 8019558:	b110      	cbz	r0, 8019560 <_svfprintf_r+0x390>
 801955a:	232d      	movs	r3, #45	; 0x2d
 801955c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019560:	4b3d      	ldr	r3, [pc, #244]	; (8019658 <_svfprintf_r+0x488>)
 8019562:	4a3e      	ldr	r2, [pc, #248]	; (801965c <_svfprintf_r+0x48c>)
 8019564:	9902      	ldr	r1, [sp, #8]
 8019566:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801956a:	2947      	cmp	r1, #71	; 0x47
 801956c:	bfcc      	ite	gt
 801956e:	4690      	movgt	r8, r2
 8019570:	4698      	movle	r8, r3
 8019572:	f04f 0903 	mov.w	r9, #3
 8019576:	2600      	movs	r6, #0
 8019578:	4637      	mov	r7, r6
 801957a:	e0c6      	b.n	801970a <_svfprintf_r+0x53a>
 801957c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8019580:	d022      	beq.n	80195c8 <_svfprintf_r+0x3f8>
 8019582:	9b02      	ldr	r3, [sp, #8]
 8019584:	f023 0320 	bic.w	r3, r3, #32
 8019588:	2b47      	cmp	r3, #71	; 0x47
 801958a:	d104      	bne.n	8019596 <_svfprintf_r+0x3c6>
 801958c:	f1b9 0f00 	cmp.w	r9, #0
 8019590:	bf08      	it	eq
 8019592:	f04f 0901 	moveq.w	r9, #1
 8019596:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801959a:	930c      	str	r3, [sp, #48]	; 0x30
 801959c:	9b07      	ldr	r3, [sp, #28]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	da15      	bge.n	80195ce <_svfprintf_r+0x3fe>
 80195a2:	9b06      	ldr	r3, [sp, #24]
 80195a4:	930e      	str	r3, [sp, #56]	; 0x38
 80195a6:	9b07      	ldr	r3, [sp, #28]
 80195a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80195ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80195ae:	232d      	movs	r3, #45	; 0x2d
 80195b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80195b2:	9b02      	ldr	r3, [sp, #8]
 80195b4:	f023 0720 	bic.w	r7, r3, #32
 80195b8:	2f46      	cmp	r7, #70	; 0x46
 80195ba:	d00e      	beq.n	80195da <_svfprintf_r+0x40a>
 80195bc:	2f45      	cmp	r7, #69	; 0x45
 80195be:	d146      	bne.n	801964e <_svfprintf_r+0x47e>
 80195c0:	f109 0601 	add.w	r6, r9, #1
 80195c4:	2102      	movs	r1, #2
 80195c6:	e00a      	b.n	80195de <_svfprintf_r+0x40e>
 80195c8:	f04f 0906 	mov.w	r9, #6
 80195cc:	e7e3      	b.n	8019596 <_svfprintf_r+0x3c6>
 80195ce:	ed9d 7b06 	vldr	d7, [sp, #24]
 80195d2:	2300      	movs	r3, #0
 80195d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80195d8:	e7ea      	b.n	80195b0 <_svfprintf_r+0x3e0>
 80195da:	464e      	mov	r6, r9
 80195dc:	2103      	movs	r1, #3
 80195de:	ab1d      	add	r3, sp, #116	; 0x74
 80195e0:	9301      	str	r3, [sp, #4]
 80195e2:	ab1a      	add	r3, sp, #104	; 0x68
 80195e4:	9300      	str	r3, [sp, #0]
 80195e6:	4632      	mov	r2, r6
 80195e8:	ab19      	add	r3, sp, #100	; 0x64
 80195ea:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80195ee:	4658      	mov	r0, fp
 80195f0:	f000 fe4e 	bl	801a290 <_dtoa_r>
 80195f4:	2f47      	cmp	r7, #71	; 0x47
 80195f6:	4680      	mov	r8, r0
 80195f8:	d102      	bne.n	8019600 <_svfprintf_r+0x430>
 80195fa:	07e8      	lsls	r0, r5, #31
 80195fc:	f140 857e 	bpl.w	801a0fc <_svfprintf_r+0xf2c>
 8019600:	eb08 0306 	add.w	r3, r8, r6
 8019604:	2f46      	cmp	r7, #70	; 0x46
 8019606:	9303      	str	r3, [sp, #12]
 8019608:	d111      	bne.n	801962e <_svfprintf_r+0x45e>
 801960a:	f898 3000 	ldrb.w	r3, [r8]
 801960e:	2b30      	cmp	r3, #48	; 0x30
 8019610:	d109      	bne.n	8019626 <_svfprintf_r+0x456>
 8019612:	2200      	movs	r2, #0
 8019614:	2300      	movs	r3, #0
 8019616:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801961a:	f7ff f8a3 	bl	8018764 <__aeabi_dcmpeq>
 801961e:	b910      	cbnz	r0, 8019626 <_svfprintf_r+0x456>
 8019620:	f1c6 0601 	rsb	r6, r6, #1
 8019624:	9619      	str	r6, [sp, #100]	; 0x64
 8019626:	9a03      	ldr	r2, [sp, #12]
 8019628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801962a:	441a      	add	r2, r3
 801962c:	9203      	str	r2, [sp, #12]
 801962e:	2200      	movs	r2, #0
 8019630:	2300      	movs	r3, #0
 8019632:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019636:	f7ff f895 	bl	8018764 <__aeabi_dcmpeq>
 801963a:	b988      	cbnz	r0, 8019660 <_svfprintf_r+0x490>
 801963c:	2230      	movs	r2, #48	; 0x30
 801963e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019640:	9903      	ldr	r1, [sp, #12]
 8019642:	4299      	cmp	r1, r3
 8019644:	d90e      	bls.n	8019664 <_svfprintf_r+0x494>
 8019646:	1c59      	adds	r1, r3, #1
 8019648:	911d      	str	r1, [sp, #116]	; 0x74
 801964a:	701a      	strb	r2, [r3, #0]
 801964c:	e7f7      	b.n	801963e <_svfprintf_r+0x46e>
 801964e:	464e      	mov	r6, r9
 8019650:	e7b8      	b.n	80195c4 <_svfprintf_r+0x3f4>
 8019652:	bf00      	nop
 8019654:	7fefffff 	.word	0x7fefffff
 8019658:	0801cf54 	.word	0x0801cf54
 801965c:	0801cf58 	.word	0x0801cf58
 8019660:	9b03      	ldr	r3, [sp, #12]
 8019662:	931d      	str	r3, [sp, #116]	; 0x74
 8019664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019666:	2f47      	cmp	r7, #71	; 0x47
 8019668:	eba3 0308 	sub.w	r3, r3, r8
 801966c:	9303      	str	r3, [sp, #12]
 801966e:	f040 80fa 	bne.w	8019866 <_svfprintf_r+0x696>
 8019672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019674:	1cd9      	adds	r1, r3, #3
 8019676:	db02      	blt.n	801967e <_svfprintf_r+0x4ae>
 8019678:	4599      	cmp	r9, r3
 801967a:	f280 8120 	bge.w	80198be <_svfprintf_r+0x6ee>
 801967e:	9b02      	ldr	r3, [sp, #8]
 8019680:	3b02      	subs	r3, #2
 8019682:	9302      	str	r3, [sp, #8]
 8019684:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019686:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801968a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801968e:	1e53      	subs	r3, r2, #1
 8019690:	2b00      	cmp	r3, #0
 8019692:	9319      	str	r3, [sp, #100]	; 0x64
 8019694:	bfb6      	itet	lt
 8019696:	f1c2 0301 	rsblt	r3, r2, #1
 801969a:	222b      	movge	r2, #43	; 0x2b
 801969c:	222d      	movlt	r2, #45	; 0x2d
 801969e:	2b09      	cmp	r3, #9
 80196a0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80196a4:	f340 80fb 	ble.w	801989e <_svfprintf_r+0x6ce>
 80196a8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80196ac:	260a      	movs	r6, #10
 80196ae:	fb93 f0f6 	sdiv	r0, r3, r6
 80196b2:	fb06 3310 	mls	r3, r6, r0, r3
 80196b6:	3330      	adds	r3, #48	; 0x30
 80196b8:	2809      	cmp	r0, #9
 80196ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80196be:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80196c2:	4603      	mov	r3, r0
 80196c4:	f300 80e4 	bgt.w	8019890 <_svfprintf_r+0x6c0>
 80196c8:	3330      	adds	r3, #48	; 0x30
 80196ca:	f801 3c01 	strb.w	r3, [r1, #-1]
 80196ce:	3a02      	subs	r2, #2
 80196d0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80196d4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80196d8:	4282      	cmp	r2, r0
 80196da:	4619      	mov	r1, r3
 80196dc:	f0c0 80da 	bcc.w	8019894 <_svfprintf_r+0x6c4>
 80196e0:	9a03      	ldr	r2, [sp, #12]
 80196e2:	ab1b      	add	r3, sp, #108	; 0x6c
 80196e4:	1acb      	subs	r3, r1, r3
 80196e6:	2a01      	cmp	r2, #1
 80196e8:	9310      	str	r3, [sp, #64]	; 0x40
 80196ea:	eb03 0902 	add.w	r9, r3, r2
 80196ee:	dc02      	bgt.n	80196f6 <_svfprintf_r+0x526>
 80196f0:	f015 0701 	ands.w	r7, r5, #1
 80196f4:	d002      	beq.n	80196fc <_svfprintf_r+0x52c>
 80196f6:	9b08      	ldr	r3, [sp, #32]
 80196f8:	2700      	movs	r7, #0
 80196fa:	4499      	add	r9, r3
 80196fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196fe:	b113      	cbz	r3, 8019706 <_svfprintf_r+0x536>
 8019700:	232d      	movs	r3, #45	; 0x2d
 8019702:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019708:	2600      	movs	r6, #0
 801970a:	454e      	cmp	r6, r9
 801970c:	4633      	mov	r3, r6
 801970e:	bfb8      	it	lt
 8019710:	464b      	movlt	r3, r9
 8019712:	930b      	str	r3, [sp, #44]	; 0x2c
 8019714:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8019718:	b113      	cbz	r3, 8019720 <_svfprintf_r+0x550>
 801971a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801971c:	3301      	adds	r3, #1
 801971e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019720:	f015 0302 	ands.w	r3, r5, #2
 8019724:	9314      	str	r3, [sp, #80]	; 0x50
 8019726:	bf1e      	ittt	ne
 8019728:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801972a:	3302      	addne	r3, #2
 801972c:	930b      	strne	r3, [sp, #44]	; 0x2c
 801972e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8019732:	9315      	str	r3, [sp, #84]	; 0x54
 8019734:	d118      	bne.n	8019768 <_svfprintf_r+0x598>
 8019736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801973a:	1a9b      	subs	r3, r3, r2
 801973c:	2b00      	cmp	r3, #0
 801973e:	930c      	str	r3, [sp, #48]	; 0x30
 8019740:	dd12      	ble.n	8019768 <_svfprintf_r+0x598>
 8019742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019744:	2b10      	cmp	r3, #16
 8019746:	4ba9      	ldr	r3, [pc, #676]	; (80199ec <_svfprintf_r+0x81c>)
 8019748:	6023      	str	r3, [r4, #0]
 801974a:	f300 81d5 	bgt.w	8019af8 <_svfprintf_r+0x928>
 801974e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019750:	6063      	str	r3, [r4, #4]
 8019752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019756:	4413      	add	r3, r2
 8019758:	9321      	str	r3, [sp, #132]	; 0x84
 801975a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801975c:	3301      	adds	r3, #1
 801975e:	2b07      	cmp	r3, #7
 8019760:	9320      	str	r3, [sp, #128]	; 0x80
 8019762:	f300 81e2 	bgt.w	8019b2a <_svfprintf_r+0x95a>
 8019766:	3408      	adds	r4, #8
 8019768:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801976c:	b173      	cbz	r3, 801978c <_svfprintf_r+0x5bc>
 801976e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8019772:	6023      	str	r3, [r4, #0]
 8019774:	2301      	movs	r3, #1
 8019776:	6063      	str	r3, [r4, #4]
 8019778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801977a:	3301      	adds	r3, #1
 801977c:	9321      	str	r3, [sp, #132]	; 0x84
 801977e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019780:	3301      	adds	r3, #1
 8019782:	2b07      	cmp	r3, #7
 8019784:	9320      	str	r3, [sp, #128]	; 0x80
 8019786:	f300 81da 	bgt.w	8019b3e <_svfprintf_r+0x96e>
 801978a:	3408      	adds	r4, #8
 801978c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801978e:	b16b      	cbz	r3, 80197ac <_svfprintf_r+0x5dc>
 8019790:	ab18      	add	r3, sp, #96	; 0x60
 8019792:	6023      	str	r3, [r4, #0]
 8019794:	2302      	movs	r3, #2
 8019796:	6063      	str	r3, [r4, #4]
 8019798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801979a:	3302      	adds	r3, #2
 801979c:	9321      	str	r3, [sp, #132]	; 0x84
 801979e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80197a0:	3301      	adds	r3, #1
 80197a2:	2b07      	cmp	r3, #7
 80197a4:	9320      	str	r3, [sp, #128]	; 0x80
 80197a6:	f300 81d4 	bgt.w	8019b52 <_svfprintf_r+0x982>
 80197aa:	3408      	adds	r4, #8
 80197ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80197ae:	2b80      	cmp	r3, #128	; 0x80
 80197b0:	d114      	bne.n	80197dc <_svfprintf_r+0x60c>
 80197b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80197b6:	1a9b      	subs	r3, r3, r2
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	dd0f      	ble.n	80197dc <_svfprintf_r+0x60c>
 80197bc:	4a8c      	ldr	r2, [pc, #560]	; (80199f0 <_svfprintf_r+0x820>)
 80197be:	6022      	str	r2, [r4, #0]
 80197c0:	2b10      	cmp	r3, #16
 80197c2:	f300 81d0 	bgt.w	8019b66 <_svfprintf_r+0x996>
 80197c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80197c8:	6063      	str	r3, [r4, #4]
 80197ca:	4413      	add	r3, r2
 80197cc:	9321      	str	r3, [sp, #132]	; 0x84
 80197ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80197d0:	3301      	adds	r3, #1
 80197d2:	2b07      	cmp	r3, #7
 80197d4:	9320      	str	r3, [sp, #128]	; 0x80
 80197d6:	f300 81df 	bgt.w	8019b98 <_svfprintf_r+0x9c8>
 80197da:	3408      	adds	r4, #8
 80197dc:	eba6 0609 	sub.w	r6, r6, r9
 80197e0:	2e00      	cmp	r6, #0
 80197e2:	dd0f      	ble.n	8019804 <_svfprintf_r+0x634>
 80197e4:	4b82      	ldr	r3, [pc, #520]	; (80199f0 <_svfprintf_r+0x820>)
 80197e6:	6023      	str	r3, [r4, #0]
 80197e8:	2e10      	cmp	r6, #16
 80197ea:	f300 81df 	bgt.w	8019bac <_svfprintf_r+0x9dc>
 80197ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80197f0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80197f2:	6066      	str	r6, [r4, #4]
 80197f4:	3301      	adds	r3, #1
 80197f6:	4406      	add	r6, r0
 80197f8:	2b07      	cmp	r3, #7
 80197fa:	9621      	str	r6, [sp, #132]	; 0x84
 80197fc:	9320      	str	r3, [sp, #128]	; 0x80
 80197fe:	f300 81ec 	bgt.w	8019bda <_svfprintf_r+0xa0a>
 8019802:	3408      	adds	r4, #8
 8019804:	05eb      	lsls	r3, r5, #23
 8019806:	f100 81f2 	bmi.w	8019bee <_svfprintf_r+0xa1e>
 801980a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801980c:	e884 0300 	stmia.w	r4, {r8, r9}
 8019810:	444b      	add	r3, r9
 8019812:	9321      	str	r3, [sp, #132]	; 0x84
 8019814:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019816:	3301      	adds	r3, #1
 8019818:	2b07      	cmp	r3, #7
 801981a:	9320      	str	r3, [sp, #128]	; 0x80
 801981c:	f340 8419 	ble.w	801a052 <_svfprintf_r+0xe82>
 8019820:	aa1f      	add	r2, sp, #124	; 0x7c
 8019822:	4651      	mov	r1, sl
 8019824:	4658      	mov	r0, fp
 8019826:	f002 f8bb 	bl	801b9a0 <__ssprint_r>
 801982a:	2800      	cmp	r0, #0
 801982c:	f040 8431 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019830:	ac2c      	add	r4, sp, #176	; 0xb0
 8019832:	076b      	lsls	r3, r5, #29
 8019834:	f100 8410 	bmi.w	801a058 <_svfprintf_r+0xe88>
 8019838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801983a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801983c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801983e:	428a      	cmp	r2, r1
 8019840:	bfac      	ite	ge
 8019842:	189b      	addge	r3, r3, r2
 8019844:	185b      	addlt	r3, r3, r1
 8019846:	9309      	str	r3, [sp, #36]	; 0x24
 8019848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801984a:	b13b      	cbz	r3, 801985c <_svfprintf_r+0x68c>
 801984c:	aa1f      	add	r2, sp, #124	; 0x7c
 801984e:	4651      	mov	r1, sl
 8019850:	4658      	mov	r0, fp
 8019852:	f002 f8a5 	bl	801b9a0 <__ssprint_r>
 8019856:	2800      	cmp	r0, #0
 8019858:	f040 841b 	bne.w	801a092 <_svfprintf_r+0xec2>
 801985c:	2300      	movs	r3, #0
 801985e:	9320      	str	r3, [sp, #128]	; 0x80
 8019860:	9f04      	ldr	r7, [sp, #16]
 8019862:	ac2c      	add	r4, sp, #176	; 0xb0
 8019864:	e4ee      	b.n	8019244 <_svfprintf_r+0x74>
 8019866:	9b02      	ldr	r3, [sp, #8]
 8019868:	2b65      	cmp	r3, #101	; 0x65
 801986a:	f77f af0b 	ble.w	8019684 <_svfprintf_r+0x4b4>
 801986e:	9b02      	ldr	r3, [sp, #8]
 8019870:	2b66      	cmp	r3, #102	; 0x66
 8019872:	d124      	bne.n	80198be <_svfprintf_r+0x6ee>
 8019874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019876:	2b00      	cmp	r3, #0
 8019878:	dd19      	ble.n	80198ae <_svfprintf_r+0x6de>
 801987a:	f1b9 0f00 	cmp.w	r9, #0
 801987e:	d101      	bne.n	8019884 <_svfprintf_r+0x6b4>
 8019880:	07ea      	lsls	r2, r5, #31
 8019882:	d502      	bpl.n	801988a <_svfprintf_r+0x6ba>
 8019884:	9a08      	ldr	r2, [sp, #32]
 8019886:	4413      	add	r3, r2
 8019888:	444b      	add	r3, r9
 801988a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801988c:	4699      	mov	r9, r3
 801988e:	e735      	b.n	80196fc <_svfprintf_r+0x52c>
 8019890:	460a      	mov	r2, r1
 8019892:	e70c      	b.n	80196ae <_svfprintf_r+0x4de>
 8019894:	f812 1b01 	ldrb.w	r1, [r2], #1
 8019898:	f803 1b01 	strb.w	r1, [r3], #1
 801989c:	e71c      	b.n	80196d8 <_svfprintf_r+0x508>
 801989e:	2230      	movs	r2, #48	; 0x30
 80198a0:	4413      	add	r3, r2
 80198a2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80198a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80198aa:	a91c      	add	r1, sp, #112	; 0x70
 80198ac:	e718      	b.n	80196e0 <_svfprintf_r+0x510>
 80198ae:	f1b9 0f00 	cmp.w	r9, #0
 80198b2:	d101      	bne.n	80198b8 <_svfprintf_r+0x6e8>
 80198b4:	07eb      	lsls	r3, r5, #31
 80198b6:	d515      	bpl.n	80198e4 <_svfprintf_r+0x714>
 80198b8:	9b08      	ldr	r3, [sp, #32]
 80198ba:	3301      	adds	r3, #1
 80198bc:	e7e4      	b.n	8019888 <_svfprintf_r+0x6b8>
 80198be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80198c0:	9b03      	ldr	r3, [sp, #12]
 80198c2:	429a      	cmp	r2, r3
 80198c4:	db06      	blt.n	80198d4 <_svfprintf_r+0x704>
 80198c6:	07ef      	lsls	r7, r5, #31
 80198c8:	d50e      	bpl.n	80198e8 <_svfprintf_r+0x718>
 80198ca:	9b08      	ldr	r3, [sp, #32]
 80198cc:	4413      	add	r3, r2
 80198ce:	2267      	movs	r2, #103	; 0x67
 80198d0:	9202      	str	r2, [sp, #8]
 80198d2:	e7da      	b.n	801988a <_svfprintf_r+0x6ba>
 80198d4:	9b03      	ldr	r3, [sp, #12]
 80198d6:	9908      	ldr	r1, [sp, #32]
 80198d8:	2a00      	cmp	r2, #0
 80198da:	440b      	add	r3, r1
 80198dc:	dcf7      	bgt.n	80198ce <_svfprintf_r+0x6fe>
 80198de:	f1c2 0201 	rsb	r2, r2, #1
 80198e2:	e7f3      	b.n	80198cc <_svfprintf_r+0x6fc>
 80198e4:	2301      	movs	r3, #1
 80198e6:	e7d0      	b.n	801988a <_svfprintf_r+0x6ba>
 80198e8:	4613      	mov	r3, r2
 80198ea:	e7f0      	b.n	80198ce <_svfprintf_r+0x6fe>
 80198ec:	b10b      	cbz	r3, 80198f2 <_svfprintf_r+0x722>
 80198ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80198f2:	f015 0f20 	tst.w	r5, #32
 80198f6:	f107 0304 	add.w	r3, r7, #4
 80198fa:	d008      	beq.n	801990e <_svfprintf_r+0x73e>
 80198fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80198fe:	683a      	ldr	r2, [r7, #0]
 8019900:	17ce      	asrs	r6, r1, #31
 8019902:	4608      	mov	r0, r1
 8019904:	4631      	mov	r1, r6
 8019906:	e9c2 0100 	strd	r0, r1, [r2]
 801990a:	461f      	mov	r7, r3
 801990c:	e49a      	b.n	8019244 <_svfprintf_r+0x74>
 801990e:	06ee      	lsls	r6, r5, #27
 8019910:	d503      	bpl.n	801991a <_svfprintf_r+0x74a>
 8019912:	683a      	ldr	r2, [r7, #0]
 8019914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019916:	6011      	str	r1, [r2, #0]
 8019918:	e7f7      	b.n	801990a <_svfprintf_r+0x73a>
 801991a:	0668      	lsls	r0, r5, #25
 801991c:	d5f9      	bpl.n	8019912 <_svfprintf_r+0x742>
 801991e:	683a      	ldr	r2, [r7, #0]
 8019920:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019924:	8011      	strh	r1, [r2, #0]
 8019926:	e7f0      	b.n	801990a <_svfprintf_r+0x73a>
 8019928:	f045 0510 	orr.w	r5, r5, #16
 801992c:	f015 0320 	ands.w	r3, r5, #32
 8019930:	d022      	beq.n	8019978 <_svfprintf_r+0x7a8>
 8019932:	3707      	adds	r7, #7
 8019934:	f027 0707 	bic.w	r7, r7, #7
 8019938:	f107 0308 	add.w	r3, r7, #8
 801993c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019940:	9304      	str	r3, [sp, #16]
 8019942:	2300      	movs	r3, #0
 8019944:	2200      	movs	r2, #0
 8019946:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801994a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801994e:	f000 83db 	beq.w	801a108 <_svfprintf_r+0xf38>
 8019952:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8019956:	920b      	str	r2, [sp, #44]	; 0x2c
 8019958:	ea56 0207 	orrs.w	r2, r6, r7
 801995c:	f040 83d9 	bne.w	801a112 <_svfprintf_r+0xf42>
 8019960:	f1b9 0f00 	cmp.w	r9, #0
 8019964:	f000 80aa 	beq.w	8019abc <_svfprintf_r+0x8ec>
 8019968:	2b01      	cmp	r3, #1
 801996a:	d076      	beq.n	8019a5a <_svfprintf_r+0x88a>
 801996c:	2b02      	cmp	r3, #2
 801996e:	f000 8091 	beq.w	8019a94 <_svfprintf_r+0x8c4>
 8019972:	2600      	movs	r6, #0
 8019974:	2700      	movs	r7, #0
 8019976:	e3d2      	b.n	801a11e <_svfprintf_r+0xf4e>
 8019978:	1d3a      	adds	r2, r7, #4
 801997a:	f015 0110 	ands.w	r1, r5, #16
 801997e:	9204      	str	r2, [sp, #16]
 8019980:	d002      	beq.n	8019988 <_svfprintf_r+0x7b8>
 8019982:	683e      	ldr	r6, [r7, #0]
 8019984:	2700      	movs	r7, #0
 8019986:	e7dd      	b.n	8019944 <_svfprintf_r+0x774>
 8019988:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 801998c:	d0f9      	beq.n	8019982 <_svfprintf_r+0x7b2>
 801998e:	883e      	ldrh	r6, [r7, #0]
 8019990:	2700      	movs	r7, #0
 8019992:	e7d6      	b.n	8019942 <_svfprintf_r+0x772>
 8019994:	1d3b      	adds	r3, r7, #4
 8019996:	9304      	str	r3, [sp, #16]
 8019998:	2330      	movs	r3, #48	; 0x30
 801999a:	2278      	movs	r2, #120	; 0x78
 801999c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80199a0:	4b14      	ldr	r3, [pc, #80]	; (80199f4 <_svfprintf_r+0x824>)
 80199a2:	683e      	ldr	r6, [r7, #0]
 80199a4:	9311      	str	r3, [sp, #68]	; 0x44
 80199a6:	2700      	movs	r7, #0
 80199a8:	f045 0502 	orr.w	r5, r5, #2
 80199ac:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80199b0:	2302      	movs	r3, #2
 80199b2:	9202      	str	r2, [sp, #8]
 80199b4:	e7c6      	b.n	8019944 <_svfprintf_r+0x774>
 80199b6:	1d3b      	adds	r3, r7, #4
 80199b8:	2600      	movs	r6, #0
 80199ba:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80199be:	9304      	str	r3, [sp, #16]
 80199c0:	f8d7 8000 	ldr.w	r8, [r7]
 80199c4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80199c8:	d00a      	beq.n	80199e0 <_svfprintf_r+0x810>
 80199ca:	464a      	mov	r2, r9
 80199cc:	4631      	mov	r1, r6
 80199ce:	4640      	mov	r0, r8
 80199d0:	f7fe fa4e 	bl	8017e70 <memchr>
 80199d4:	2800      	cmp	r0, #0
 80199d6:	f000 808d 	beq.w	8019af4 <_svfprintf_r+0x924>
 80199da:	eba0 0908 	sub.w	r9, r0, r8
 80199de:	e5cb      	b.n	8019578 <_svfprintf_r+0x3a8>
 80199e0:	4640      	mov	r0, r8
 80199e2:	f7fe fa39 	bl	8017e58 <strlen>
 80199e6:	4681      	mov	r9, r0
 80199e8:	e5c6      	b.n	8019578 <_svfprintf_r+0x3a8>
 80199ea:	bf00      	nop
 80199ec:	0801cf88 	.word	0x0801cf88
 80199f0:	0801cf98 	.word	0x0801cf98
 80199f4:	0801cf75 	.word	0x0801cf75
 80199f8:	f045 0510 	orr.w	r5, r5, #16
 80199fc:	06a9      	lsls	r1, r5, #26
 80199fe:	d509      	bpl.n	8019a14 <_svfprintf_r+0x844>
 8019a00:	3707      	adds	r7, #7
 8019a02:	f027 0707 	bic.w	r7, r7, #7
 8019a06:	f107 0308 	add.w	r3, r7, #8
 8019a0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019a0e:	9304      	str	r3, [sp, #16]
 8019a10:	2301      	movs	r3, #1
 8019a12:	e797      	b.n	8019944 <_svfprintf_r+0x774>
 8019a14:	1d3b      	adds	r3, r7, #4
 8019a16:	f015 0f10 	tst.w	r5, #16
 8019a1a:	9304      	str	r3, [sp, #16]
 8019a1c:	d001      	beq.n	8019a22 <_svfprintf_r+0x852>
 8019a1e:	683e      	ldr	r6, [r7, #0]
 8019a20:	e002      	b.n	8019a28 <_svfprintf_r+0x858>
 8019a22:	066a      	lsls	r2, r5, #25
 8019a24:	d5fb      	bpl.n	8019a1e <_svfprintf_r+0x84e>
 8019a26:	883e      	ldrh	r6, [r7, #0]
 8019a28:	2700      	movs	r7, #0
 8019a2a:	e7f1      	b.n	8019a10 <_svfprintf_r+0x840>
 8019a2c:	b10b      	cbz	r3, 8019a32 <_svfprintf_r+0x862>
 8019a2e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019a32:	4ba3      	ldr	r3, [pc, #652]	; (8019cc0 <_svfprintf_r+0xaf0>)
 8019a34:	e4c2      	b.n	80193bc <_svfprintf_r+0x1ec>
 8019a36:	1d3b      	adds	r3, r7, #4
 8019a38:	f015 0f10 	tst.w	r5, #16
 8019a3c:	9304      	str	r3, [sp, #16]
 8019a3e:	d001      	beq.n	8019a44 <_svfprintf_r+0x874>
 8019a40:	683e      	ldr	r6, [r7, #0]
 8019a42:	e002      	b.n	8019a4a <_svfprintf_r+0x87a>
 8019a44:	066e      	lsls	r6, r5, #25
 8019a46:	d5fb      	bpl.n	8019a40 <_svfprintf_r+0x870>
 8019a48:	883e      	ldrh	r6, [r7, #0]
 8019a4a:	2700      	movs	r7, #0
 8019a4c:	e4c2      	b.n	80193d4 <_svfprintf_r+0x204>
 8019a4e:	4643      	mov	r3, r8
 8019a50:	e366      	b.n	801a120 <_svfprintf_r+0xf50>
 8019a52:	2f00      	cmp	r7, #0
 8019a54:	bf08      	it	eq
 8019a56:	2e0a      	cmpeq	r6, #10
 8019a58:	d205      	bcs.n	8019a66 <_svfprintf_r+0x896>
 8019a5a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8019a5e:	3630      	adds	r6, #48	; 0x30
 8019a60:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8019a64:	e377      	b.n	801a156 <_svfprintf_r+0xf86>
 8019a66:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8019a6a:	4630      	mov	r0, r6
 8019a6c:	4639      	mov	r1, r7
 8019a6e:	220a      	movs	r2, #10
 8019a70:	2300      	movs	r3, #0
 8019a72:	f7fe ff37 	bl	80188e4 <__aeabi_uldivmod>
 8019a76:	3230      	adds	r2, #48	; 0x30
 8019a78:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	4630      	mov	r0, r6
 8019a80:	4639      	mov	r1, r7
 8019a82:	220a      	movs	r2, #10
 8019a84:	f7fe ff2e 	bl	80188e4 <__aeabi_uldivmod>
 8019a88:	4606      	mov	r6, r0
 8019a8a:	460f      	mov	r7, r1
 8019a8c:	ea56 0307 	orrs.w	r3, r6, r7
 8019a90:	d1eb      	bne.n	8019a6a <_svfprintf_r+0x89a>
 8019a92:	e360      	b.n	801a156 <_svfprintf_r+0xf86>
 8019a94:	2600      	movs	r6, #0
 8019a96:	2700      	movs	r7, #0
 8019a98:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8019a9c:	f006 030f 	and.w	r3, r6, #15
 8019aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019aa2:	5cd3      	ldrb	r3, [r2, r3]
 8019aa4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8019aa8:	0933      	lsrs	r3, r6, #4
 8019aaa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8019aae:	093a      	lsrs	r2, r7, #4
 8019ab0:	461e      	mov	r6, r3
 8019ab2:	4617      	mov	r7, r2
 8019ab4:	ea56 0307 	orrs.w	r3, r6, r7
 8019ab8:	d1f0      	bne.n	8019a9c <_svfprintf_r+0x8cc>
 8019aba:	e34c      	b.n	801a156 <_svfprintf_r+0xf86>
 8019abc:	b93b      	cbnz	r3, 8019ace <_svfprintf_r+0x8fe>
 8019abe:	07ea      	lsls	r2, r5, #31
 8019ac0:	d505      	bpl.n	8019ace <_svfprintf_r+0x8fe>
 8019ac2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8019ac6:	2330      	movs	r3, #48	; 0x30
 8019ac8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8019acc:	e343      	b.n	801a156 <_svfprintf_r+0xf86>
 8019ace:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8019ad2:	e340      	b.n	801a156 <_svfprintf_r+0xf86>
 8019ad4:	b10b      	cbz	r3, 8019ada <_svfprintf_r+0x90a>
 8019ad6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019ada:	9b02      	ldr	r3, [sp, #8]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	f000 82f7 	beq.w	801a0d0 <_svfprintf_r+0xf00>
 8019ae2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8019ae6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8019aea:	2600      	movs	r6, #0
 8019aec:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8019af0:	9704      	str	r7, [sp, #16]
 8019af2:	e4e8      	b.n	80194c6 <_svfprintf_r+0x2f6>
 8019af4:	4606      	mov	r6, r0
 8019af6:	e53f      	b.n	8019578 <_svfprintf_r+0x3a8>
 8019af8:	2310      	movs	r3, #16
 8019afa:	6063      	str	r3, [r4, #4]
 8019afc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019afe:	3310      	adds	r3, #16
 8019b00:	9321      	str	r3, [sp, #132]	; 0x84
 8019b02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019b04:	3301      	adds	r3, #1
 8019b06:	2b07      	cmp	r3, #7
 8019b08:	9320      	str	r3, [sp, #128]	; 0x80
 8019b0a:	dc04      	bgt.n	8019b16 <_svfprintf_r+0x946>
 8019b0c:	3408      	adds	r4, #8
 8019b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b10:	3b10      	subs	r3, #16
 8019b12:	930c      	str	r3, [sp, #48]	; 0x30
 8019b14:	e615      	b.n	8019742 <_svfprintf_r+0x572>
 8019b16:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b18:	4651      	mov	r1, sl
 8019b1a:	4658      	mov	r0, fp
 8019b1c:	f001 ff40 	bl	801b9a0 <__ssprint_r>
 8019b20:	2800      	cmp	r0, #0
 8019b22:	f040 82b6 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019b26:	ac2c      	add	r4, sp, #176	; 0xb0
 8019b28:	e7f1      	b.n	8019b0e <_svfprintf_r+0x93e>
 8019b2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b2c:	4651      	mov	r1, sl
 8019b2e:	4658      	mov	r0, fp
 8019b30:	f001 ff36 	bl	801b9a0 <__ssprint_r>
 8019b34:	2800      	cmp	r0, #0
 8019b36:	f040 82ac 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019b3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8019b3c:	e614      	b.n	8019768 <_svfprintf_r+0x598>
 8019b3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b40:	4651      	mov	r1, sl
 8019b42:	4658      	mov	r0, fp
 8019b44:	f001 ff2c 	bl	801b9a0 <__ssprint_r>
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	f040 82a2 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019b4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8019b50:	e61c      	b.n	801978c <_svfprintf_r+0x5bc>
 8019b52:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b54:	4651      	mov	r1, sl
 8019b56:	4658      	mov	r0, fp
 8019b58:	f001 ff22 	bl	801b9a0 <__ssprint_r>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	f040 8298 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019b62:	ac2c      	add	r4, sp, #176	; 0xb0
 8019b64:	e622      	b.n	80197ac <_svfprintf_r+0x5dc>
 8019b66:	2210      	movs	r2, #16
 8019b68:	6062      	str	r2, [r4, #4]
 8019b6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019b6c:	3210      	adds	r2, #16
 8019b6e:	9221      	str	r2, [sp, #132]	; 0x84
 8019b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019b72:	3201      	adds	r2, #1
 8019b74:	2a07      	cmp	r2, #7
 8019b76:	9220      	str	r2, [sp, #128]	; 0x80
 8019b78:	dc02      	bgt.n	8019b80 <_svfprintf_r+0x9b0>
 8019b7a:	3408      	adds	r4, #8
 8019b7c:	3b10      	subs	r3, #16
 8019b7e:	e61d      	b.n	80197bc <_svfprintf_r+0x5ec>
 8019b80:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b82:	4651      	mov	r1, sl
 8019b84:	4658      	mov	r0, fp
 8019b86:	930c      	str	r3, [sp, #48]	; 0x30
 8019b88:	f001 ff0a 	bl	801b9a0 <__ssprint_r>
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	f040 8280 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019b92:	ac2c      	add	r4, sp, #176	; 0xb0
 8019b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b96:	e7f1      	b.n	8019b7c <_svfprintf_r+0x9ac>
 8019b98:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b9a:	4651      	mov	r1, sl
 8019b9c:	4658      	mov	r0, fp
 8019b9e:	f001 feff 	bl	801b9a0 <__ssprint_r>
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	f040 8275 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019ba8:	ac2c      	add	r4, sp, #176	; 0xb0
 8019baa:	e617      	b.n	80197dc <_svfprintf_r+0x60c>
 8019bac:	2310      	movs	r3, #16
 8019bae:	6063      	str	r3, [r4, #4]
 8019bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019bb2:	3310      	adds	r3, #16
 8019bb4:	9321      	str	r3, [sp, #132]	; 0x84
 8019bb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019bb8:	3301      	adds	r3, #1
 8019bba:	2b07      	cmp	r3, #7
 8019bbc:	9320      	str	r3, [sp, #128]	; 0x80
 8019bbe:	dc02      	bgt.n	8019bc6 <_svfprintf_r+0x9f6>
 8019bc0:	3408      	adds	r4, #8
 8019bc2:	3e10      	subs	r6, #16
 8019bc4:	e60e      	b.n	80197e4 <_svfprintf_r+0x614>
 8019bc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8019bc8:	4651      	mov	r1, sl
 8019bca:	4658      	mov	r0, fp
 8019bcc:	f001 fee8 	bl	801b9a0 <__ssprint_r>
 8019bd0:	2800      	cmp	r0, #0
 8019bd2:	f040 825e 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019bd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8019bd8:	e7f3      	b.n	8019bc2 <_svfprintf_r+0x9f2>
 8019bda:	aa1f      	add	r2, sp, #124	; 0x7c
 8019bdc:	4651      	mov	r1, sl
 8019bde:	4658      	mov	r0, fp
 8019be0:	f001 fede 	bl	801b9a0 <__ssprint_r>
 8019be4:	2800      	cmp	r0, #0
 8019be6:	f040 8254 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019bea:	ac2c      	add	r4, sp, #176	; 0xb0
 8019bec:	e60a      	b.n	8019804 <_svfprintf_r+0x634>
 8019bee:	9b02      	ldr	r3, [sp, #8]
 8019bf0:	2b65      	cmp	r3, #101	; 0x65
 8019bf2:	f340 81a9 	ble.w	8019f48 <_svfprintf_r+0xd78>
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019bfe:	f7fe fdb1 	bl	8018764 <__aeabi_dcmpeq>
 8019c02:	2800      	cmp	r0, #0
 8019c04:	d062      	beq.n	8019ccc <_svfprintf_r+0xafc>
 8019c06:	4b2f      	ldr	r3, [pc, #188]	; (8019cc4 <_svfprintf_r+0xaf4>)
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	2301      	movs	r3, #1
 8019c0c:	6063      	str	r3, [r4, #4]
 8019c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c10:	3301      	adds	r3, #1
 8019c12:	9321      	str	r3, [sp, #132]	; 0x84
 8019c14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019c16:	3301      	adds	r3, #1
 8019c18:	2b07      	cmp	r3, #7
 8019c1a:	9320      	str	r3, [sp, #128]	; 0x80
 8019c1c:	dc25      	bgt.n	8019c6a <_svfprintf_r+0xa9a>
 8019c1e:	3408      	adds	r4, #8
 8019c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c22:	9a03      	ldr	r2, [sp, #12]
 8019c24:	4293      	cmp	r3, r2
 8019c26:	db02      	blt.n	8019c2e <_svfprintf_r+0xa5e>
 8019c28:	07ee      	lsls	r6, r5, #31
 8019c2a:	f57f ae02 	bpl.w	8019832 <_svfprintf_r+0x662>
 8019c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c30:	6023      	str	r3, [r4, #0]
 8019c32:	9b08      	ldr	r3, [sp, #32]
 8019c34:	6063      	str	r3, [r4, #4]
 8019c36:	9a08      	ldr	r2, [sp, #32]
 8019c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c3a:	4413      	add	r3, r2
 8019c3c:	9321      	str	r3, [sp, #132]	; 0x84
 8019c3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019c40:	3301      	adds	r3, #1
 8019c42:	2b07      	cmp	r3, #7
 8019c44:	9320      	str	r3, [sp, #128]	; 0x80
 8019c46:	dc1a      	bgt.n	8019c7e <_svfprintf_r+0xaae>
 8019c48:	3408      	adds	r4, #8
 8019c4a:	9b03      	ldr	r3, [sp, #12]
 8019c4c:	1e5e      	subs	r6, r3, #1
 8019c4e:	2e00      	cmp	r6, #0
 8019c50:	f77f adef 	ble.w	8019832 <_svfprintf_r+0x662>
 8019c54:	4f1c      	ldr	r7, [pc, #112]	; (8019cc8 <_svfprintf_r+0xaf8>)
 8019c56:	f04f 0810 	mov.w	r8, #16
 8019c5a:	2e10      	cmp	r6, #16
 8019c5c:	6027      	str	r7, [r4, #0]
 8019c5e:	dc18      	bgt.n	8019c92 <_svfprintf_r+0xac2>
 8019c60:	6066      	str	r6, [r4, #4]
 8019c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c64:	441e      	add	r6, r3
 8019c66:	9621      	str	r6, [sp, #132]	; 0x84
 8019c68:	e5d4      	b.n	8019814 <_svfprintf_r+0x644>
 8019c6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8019c6c:	4651      	mov	r1, sl
 8019c6e:	4658      	mov	r0, fp
 8019c70:	f001 fe96 	bl	801b9a0 <__ssprint_r>
 8019c74:	2800      	cmp	r0, #0
 8019c76:	f040 820c 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019c7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8019c7c:	e7d0      	b.n	8019c20 <_svfprintf_r+0xa50>
 8019c7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8019c80:	4651      	mov	r1, sl
 8019c82:	4658      	mov	r0, fp
 8019c84:	f001 fe8c 	bl	801b9a0 <__ssprint_r>
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	f040 8202 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019c8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8019c90:	e7db      	b.n	8019c4a <_svfprintf_r+0xa7a>
 8019c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c94:	f8c4 8004 	str.w	r8, [r4, #4]
 8019c98:	3310      	adds	r3, #16
 8019c9a:	9321      	str	r3, [sp, #132]	; 0x84
 8019c9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	2b07      	cmp	r3, #7
 8019ca2:	9320      	str	r3, [sp, #128]	; 0x80
 8019ca4:	dc02      	bgt.n	8019cac <_svfprintf_r+0xadc>
 8019ca6:	3408      	adds	r4, #8
 8019ca8:	3e10      	subs	r6, #16
 8019caa:	e7d6      	b.n	8019c5a <_svfprintf_r+0xa8a>
 8019cac:	aa1f      	add	r2, sp, #124	; 0x7c
 8019cae:	4651      	mov	r1, sl
 8019cb0:	4658      	mov	r0, fp
 8019cb2:	f001 fe75 	bl	801b9a0 <__ssprint_r>
 8019cb6:	2800      	cmp	r0, #0
 8019cb8:	f040 81eb 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019cbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8019cbe:	e7f3      	b.n	8019ca8 <_svfprintf_r+0xad8>
 8019cc0:	0801cf75 	.word	0x0801cf75
 8019cc4:	0801cf86 	.word	0x0801cf86
 8019cc8:	0801cf98 	.word	0x0801cf98
 8019ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	dc7a      	bgt.n	8019dc8 <_svfprintf_r+0xbf8>
 8019cd2:	4b9b      	ldr	r3, [pc, #620]	; (8019f40 <_svfprintf_r+0xd70>)
 8019cd4:	6023      	str	r3, [r4, #0]
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	6063      	str	r3, [r4, #4]
 8019cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cdc:	3301      	adds	r3, #1
 8019cde:	9321      	str	r3, [sp, #132]	; 0x84
 8019ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	2b07      	cmp	r3, #7
 8019ce6:	9320      	str	r3, [sp, #128]	; 0x80
 8019ce8:	dc44      	bgt.n	8019d74 <_svfprintf_r+0xba4>
 8019cea:	3408      	adds	r4, #8
 8019cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019cee:	b923      	cbnz	r3, 8019cfa <_svfprintf_r+0xb2a>
 8019cf0:	9b03      	ldr	r3, [sp, #12]
 8019cf2:	b913      	cbnz	r3, 8019cfa <_svfprintf_r+0xb2a>
 8019cf4:	07e8      	lsls	r0, r5, #31
 8019cf6:	f57f ad9c 	bpl.w	8019832 <_svfprintf_r+0x662>
 8019cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cfc:	6023      	str	r3, [r4, #0]
 8019cfe:	9b08      	ldr	r3, [sp, #32]
 8019d00:	6063      	str	r3, [r4, #4]
 8019d02:	9a08      	ldr	r2, [sp, #32]
 8019d04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d06:	4413      	add	r3, r2
 8019d08:	9321      	str	r3, [sp, #132]	; 0x84
 8019d0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	2b07      	cmp	r3, #7
 8019d10:	9320      	str	r3, [sp, #128]	; 0x80
 8019d12:	dc39      	bgt.n	8019d88 <_svfprintf_r+0xbb8>
 8019d14:	f104 0308 	add.w	r3, r4, #8
 8019d18:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8019d1a:	2e00      	cmp	r6, #0
 8019d1c:	da19      	bge.n	8019d52 <_svfprintf_r+0xb82>
 8019d1e:	4f89      	ldr	r7, [pc, #548]	; (8019f44 <_svfprintf_r+0xd74>)
 8019d20:	4276      	negs	r6, r6
 8019d22:	2410      	movs	r4, #16
 8019d24:	2e10      	cmp	r6, #16
 8019d26:	601f      	str	r7, [r3, #0]
 8019d28:	dc38      	bgt.n	8019d9c <_svfprintf_r+0xbcc>
 8019d2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019d2c:	605e      	str	r6, [r3, #4]
 8019d2e:	4416      	add	r6, r2
 8019d30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019d32:	9621      	str	r6, [sp, #132]	; 0x84
 8019d34:	3201      	adds	r2, #1
 8019d36:	2a07      	cmp	r2, #7
 8019d38:	f103 0308 	add.w	r3, r3, #8
 8019d3c:	9220      	str	r2, [sp, #128]	; 0x80
 8019d3e:	dd08      	ble.n	8019d52 <_svfprintf_r+0xb82>
 8019d40:	aa1f      	add	r2, sp, #124	; 0x7c
 8019d42:	4651      	mov	r1, sl
 8019d44:	4658      	mov	r0, fp
 8019d46:	f001 fe2b 	bl	801b9a0 <__ssprint_r>
 8019d4a:	2800      	cmp	r0, #0
 8019d4c:	f040 81a1 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019d50:	ab2c      	add	r3, sp, #176	; 0xb0
 8019d52:	9a03      	ldr	r2, [sp, #12]
 8019d54:	605a      	str	r2, [r3, #4]
 8019d56:	9903      	ldr	r1, [sp, #12]
 8019d58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019d5a:	f8c3 8000 	str.w	r8, [r3]
 8019d5e:	440a      	add	r2, r1
 8019d60:	9221      	str	r2, [sp, #132]	; 0x84
 8019d62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019d64:	3201      	adds	r2, #1
 8019d66:	2a07      	cmp	r2, #7
 8019d68:	9220      	str	r2, [sp, #128]	; 0x80
 8019d6a:	f73f ad59 	bgt.w	8019820 <_svfprintf_r+0x650>
 8019d6e:	f103 0408 	add.w	r4, r3, #8
 8019d72:	e55e      	b.n	8019832 <_svfprintf_r+0x662>
 8019d74:	aa1f      	add	r2, sp, #124	; 0x7c
 8019d76:	4651      	mov	r1, sl
 8019d78:	4658      	mov	r0, fp
 8019d7a:	f001 fe11 	bl	801b9a0 <__ssprint_r>
 8019d7e:	2800      	cmp	r0, #0
 8019d80:	f040 8187 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019d84:	ac2c      	add	r4, sp, #176	; 0xb0
 8019d86:	e7b1      	b.n	8019cec <_svfprintf_r+0xb1c>
 8019d88:	aa1f      	add	r2, sp, #124	; 0x7c
 8019d8a:	4651      	mov	r1, sl
 8019d8c:	4658      	mov	r0, fp
 8019d8e:	f001 fe07 	bl	801b9a0 <__ssprint_r>
 8019d92:	2800      	cmp	r0, #0
 8019d94:	f040 817d 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019d98:	ab2c      	add	r3, sp, #176	; 0xb0
 8019d9a:	e7bd      	b.n	8019d18 <_svfprintf_r+0xb48>
 8019d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019d9e:	605c      	str	r4, [r3, #4]
 8019da0:	3210      	adds	r2, #16
 8019da2:	9221      	str	r2, [sp, #132]	; 0x84
 8019da4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019da6:	3201      	adds	r2, #1
 8019da8:	2a07      	cmp	r2, #7
 8019daa:	9220      	str	r2, [sp, #128]	; 0x80
 8019dac:	dc02      	bgt.n	8019db4 <_svfprintf_r+0xbe4>
 8019dae:	3308      	adds	r3, #8
 8019db0:	3e10      	subs	r6, #16
 8019db2:	e7b7      	b.n	8019d24 <_svfprintf_r+0xb54>
 8019db4:	aa1f      	add	r2, sp, #124	; 0x7c
 8019db6:	4651      	mov	r1, sl
 8019db8:	4658      	mov	r0, fp
 8019dba:	f001 fdf1 	bl	801b9a0 <__ssprint_r>
 8019dbe:	2800      	cmp	r0, #0
 8019dc0:	f040 8167 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019dc4:	ab2c      	add	r3, sp, #176	; 0xb0
 8019dc6:	e7f3      	b.n	8019db0 <_svfprintf_r+0xbe0>
 8019dc8:	9b03      	ldr	r3, [sp, #12]
 8019dca:	42bb      	cmp	r3, r7
 8019dcc:	bfa8      	it	ge
 8019dce:	463b      	movge	r3, r7
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	461e      	mov	r6, r3
 8019dd4:	dd0b      	ble.n	8019dee <_svfprintf_r+0xc1e>
 8019dd6:	6063      	str	r3, [r4, #4]
 8019dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019dda:	f8c4 8000 	str.w	r8, [r4]
 8019dde:	4433      	add	r3, r6
 8019de0:	9321      	str	r3, [sp, #132]	; 0x84
 8019de2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019de4:	3301      	adds	r3, #1
 8019de6:	2b07      	cmp	r3, #7
 8019de8:	9320      	str	r3, [sp, #128]	; 0x80
 8019dea:	dc5f      	bgt.n	8019eac <_svfprintf_r+0xcdc>
 8019dec:	3408      	adds	r4, #8
 8019dee:	2e00      	cmp	r6, #0
 8019df0:	bfac      	ite	ge
 8019df2:	1bbe      	subge	r6, r7, r6
 8019df4:	463e      	movlt	r6, r7
 8019df6:	2e00      	cmp	r6, #0
 8019df8:	dd0f      	ble.n	8019e1a <_svfprintf_r+0xc4a>
 8019dfa:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8019f44 <_svfprintf_r+0xd74>
 8019dfe:	f8c4 9000 	str.w	r9, [r4]
 8019e02:	2e10      	cmp	r6, #16
 8019e04:	dc5c      	bgt.n	8019ec0 <_svfprintf_r+0xcf0>
 8019e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e08:	6066      	str	r6, [r4, #4]
 8019e0a:	441e      	add	r6, r3
 8019e0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e0e:	9621      	str	r6, [sp, #132]	; 0x84
 8019e10:	3301      	adds	r3, #1
 8019e12:	2b07      	cmp	r3, #7
 8019e14:	9320      	str	r3, [sp, #128]	; 0x80
 8019e16:	dc6a      	bgt.n	8019eee <_svfprintf_r+0xd1e>
 8019e18:	3408      	adds	r4, #8
 8019e1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e1c:	9a03      	ldr	r2, [sp, #12]
 8019e1e:	4293      	cmp	r3, r2
 8019e20:	db01      	blt.n	8019e26 <_svfprintf_r+0xc56>
 8019e22:	07e9      	lsls	r1, r5, #31
 8019e24:	d50d      	bpl.n	8019e42 <_svfprintf_r+0xc72>
 8019e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e28:	6023      	str	r3, [r4, #0]
 8019e2a:	9b08      	ldr	r3, [sp, #32]
 8019e2c:	6063      	str	r3, [r4, #4]
 8019e2e:	9a08      	ldr	r2, [sp, #32]
 8019e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e32:	4413      	add	r3, r2
 8019e34:	9321      	str	r3, [sp, #132]	; 0x84
 8019e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e38:	3301      	adds	r3, #1
 8019e3a:	2b07      	cmp	r3, #7
 8019e3c:	9320      	str	r3, [sp, #128]	; 0x80
 8019e3e:	dc60      	bgt.n	8019f02 <_svfprintf_r+0xd32>
 8019e40:	3408      	adds	r4, #8
 8019e42:	9b03      	ldr	r3, [sp, #12]
 8019e44:	9a03      	ldr	r2, [sp, #12]
 8019e46:	1bde      	subs	r6, r3, r7
 8019e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e4a:	1ad3      	subs	r3, r2, r3
 8019e4c:	429e      	cmp	r6, r3
 8019e4e:	bfa8      	it	ge
 8019e50:	461e      	movge	r6, r3
 8019e52:	2e00      	cmp	r6, #0
 8019e54:	dd0b      	ble.n	8019e6e <_svfprintf_r+0xc9e>
 8019e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e58:	6066      	str	r6, [r4, #4]
 8019e5a:	4433      	add	r3, r6
 8019e5c:	9321      	str	r3, [sp, #132]	; 0x84
 8019e5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e60:	3301      	adds	r3, #1
 8019e62:	4447      	add	r7, r8
 8019e64:	2b07      	cmp	r3, #7
 8019e66:	6027      	str	r7, [r4, #0]
 8019e68:	9320      	str	r3, [sp, #128]	; 0x80
 8019e6a:	dc54      	bgt.n	8019f16 <_svfprintf_r+0xd46>
 8019e6c:	3408      	adds	r4, #8
 8019e6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e70:	9a03      	ldr	r2, [sp, #12]
 8019e72:	2e00      	cmp	r6, #0
 8019e74:	eba2 0303 	sub.w	r3, r2, r3
 8019e78:	bfac      	ite	ge
 8019e7a:	1b9e      	subge	r6, r3, r6
 8019e7c:	461e      	movlt	r6, r3
 8019e7e:	2e00      	cmp	r6, #0
 8019e80:	f77f acd7 	ble.w	8019832 <_svfprintf_r+0x662>
 8019e84:	4f2f      	ldr	r7, [pc, #188]	; (8019f44 <_svfprintf_r+0xd74>)
 8019e86:	f04f 0810 	mov.w	r8, #16
 8019e8a:	2e10      	cmp	r6, #16
 8019e8c:	6027      	str	r7, [r4, #0]
 8019e8e:	f77f aee7 	ble.w	8019c60 <_svfprintf_r+0xa90>
 8019e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e94:	f8c4 8004 	str.w	r8, [r4, #4]
 8019e98:	3310      	adds	r3, #16
 8019e9a:	9321      	str	r3, [sp, #132]	; 0x84
 8019e9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e9e:	3301      	adds	r3, #1
 8019ea0:	2b07      	cmp	r3, #7
 8019ea2:	9320      	str	r3, [sp, #128]	; 0x80
 8019ea4:	dc41      	bgt.n	8019f2a <_svfprintf_r+0xd5a>
 8019ea6:	3408      	adds	r4, #8
 8019ea8:	3e10      	subs	r6, #16
 8019eaa:	e7ee      	b.n	8019e8a <_svfprintf_r+0xcba>
 8019eac:	aa1f      	add	r2, sp, #124	; 0x7c
 8019eae:	4651      	mov	r1, sl
 8019eb0:	4658      	mov	r0, fp
 8019eb2:	f001 fd75 	bl	801b9a0 <__ssprint_r>
 8019eb6:	2800      	cmp	r0, #0
 8019eb8:	f040 80eb 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019ebc:	ac2c      	add	r4, sp, #176	; 0xb0
 8019ebe:	e796      	b.n	8019dee <_svfprintf_r+0xc1e>
 8019ec0:	2310      	movs	r3, #16
 8019ec2:	6063      	str	r3, [r4, #4]
 8019ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019ec6:	3310      	adds	r3, #16
 8019ec8:	9321      	str	r3, [sp, #132]	; 0x84
 8019eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019ecc:	3301      	adds	r3, #1
 8019ece:	2b07      	cmp	r3, #7
 8019ed0:	9320      	str	r3, [sp, #128]	; 0x80
 8019ed2:	dc02      	bgt.n	8019eda <_svfprintf_r+0xd0a>
 8019ed4:	3408      	adds	r4, #8
 8019ed6:	3e10      	subs	r6, #16
 8019ed8:	e791      	b.n	8019dfe <_svfprintf_r+0xc2e>
 8019eda:	aa1f      	add	r2, sp, #124	; 0x7c
 8019edc:	4651      	mov	r1, sl
 8019ede:	4658      	mov	r0, fp
 8019ee0:	f001 fd5e 	bl	801b9a0 <__ssprint_r>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	f040 80d4 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019eea:	ac2c      	add	r4, sp, #176	; 0xb0
 8019eec:	e7f3      	b.n	8019ed6 <_svfprintf_r+0xd06>
 8019eee:	aa1f      	add	r2, sp, #124	; 0x7c
 8019ef0:	4651      	mov	r1, sl
 8019ef2:	4658      	mov	r0, fp
 8019ef4:	f001 fd54 	bl	801b9a0 <__ssprint_r>
 8019ef8:	2800      	cmp	r0, #0
 8019efa:	f040 80ca 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019efe:	ac2c      	add	r4, sp, #176	; 0xb0
 8019f00:	e78b      	b.n	8019e1a <_svfprintf_r+0xc4a>
 8019f02:	aa1f      	add	r2, sp, #124	; 0x7c
 8019f04:	4651      	mov	r1, sl
 8019f06:	4658      	mov	r0, fp
 8019f08:	f001 fd4a 	bl	801b9a0 <__ssprint_r>
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	f040 80c0 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019f12:	ac2c      	add	r4, sp, #176	; 0xb0
 8019f14:	e795      	b.n	8019e42 <_svfprintf_r+0xc72>
 8019f16:	aa1f      	add	r2, sp, #124	; 0x7c
 8019f18:	4651      	mov	r1, sl
 8019f1a:	4658      	mov	r0, fp
 8019f1c:	f001 fd40 	bl	801b9a0 <__ssprint_r>
 8019f20:	2800      	cmp	r0, #0
 8019f22:	f040 80b6 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019f26:	ac2c      	add	r4, sp, #176	; 0xb0
 8019f28:	e7a1      	b.n	8019e6e <_svfprintf_r+0xc9e>
 8019f2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8019f2c:	4651      	mov	r1, sl
 8019f2e:	4658      	mov	r0, fp
 8019f30:	f001 fd36 	bl	801b9a0 <__ssprint_r>
 8019f34:	2800      	cmp	r0, #0
 8019f36:	f040 80ac 	bne.w	801a092 <_svfprintf_r+0xec2>
 8019f3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8019f3c:	e7b4      	b.n	8019ea8 <_svfprintf_r+0xcd8>
 8019f3e:	bf00      	nop
 8019f40:	0801cf86 	.word	0x0801cf86
 8019f44:	0801cf98 	.word	0x0801cf98
 8019f48:	9b03      	ldr	r3, [sp, #12]
 8019f4a:	2b01      	cmp	r3, #1
 8019f4c:	dc01      	bgt.n	8019f52 <_svfprintf_r+0xd82>
 8019f4e:	07ea      	lsls	r2, r5, #31
 8019f50:	d576      	bpl.n	801a040 <_svfprintf_r+0xe70>
 8019f52:	2301      	movs	r3, #1
 8019f54:	6063      	str	r3, [r4, #4]
 8019f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019f58:	f8c4 8000 	str.w	r8, [r4]
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	9321      	str	r3, [sp, #132]	; 0x84
 8019f60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019f62:	3301      	adds	r3, #1
 8019f64:	2b07      	cmp	r3, #7
 8019f66:	9320      	str	r3, [sp, #128]	; 0x80
 8019f68:	dc36      	bgt.n	8019fd8 <_svfprintf_r+0xe08>
 8019f6a:	3408      	adds	r4, #8
 8019f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	9b08      	ldr	r3, [sp, #32]
 8019f72:	6063      	str	r3, [r4, #4]
 8019f74:	9a08      	ldr	r2, [sp, #32]
 8019f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019f78:	4413      	add	r3, r2
 8019f7a:	9321      	str	r3, [sp, #132]	; 0x84
 8019f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019f7e:	3301      	adds	r3, #1
 8019f80:	2b07      	cmp	r3, #7
 8019f82:	9320      	str	r3, [sp, #128]	; 0x80
 8019f84:	dc31      	bgt.n	8019fea <_svfprintf_r+0xe1a>
 8019f86:	3408      	adds	r4, #8
 8019f88:	2300      	movs	r3, #0
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f90:	f7fe fbe8 	bl	8018764 <__aeabi_dcmpeq>
 8019f94:	9b03      	ldr	r3, [sp, #12]
 8019f96:	1e5e      	subs	r6, r3, #1
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	d12f      	bne.n	8019ffc <_svfprintf_r+0xe2c>
 8019f9c:	f108 0301 	add.w	r3, r8, #1
 8019fa0:	e884 0048 	stmia.w	r4, {r3, r6}
 8019fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019fa6:	9a03      	ldr	r2, [sp, #12]
 8019fa8:	3b01      	subs	r3, #1
 8019faa:	4413      	add	r3, r2
 8019fac:	9321      	str	r3, [sp, #132]	; 0x84
 8019fae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019fb0:	3301      	adds	r3, #1
 8019fb2:	2b07      	cmp	r3, #7
 8019fb4:	9320      	str	r3, [sp, #128]	; 0x80
 8019fb6:	dd4a      	ble.n	801a04e <_svfprintf_r+0xe7e>
 8019fb8:	aa1f      	add	r2, sp, #124	; 0x7c
 8019fba:	4651      	mov	r1, sl
 8019fbc:	4658      	mov	r0, fp
 8019fbe:	f001 fcef 	bl	801b9a0 <__ssprint_r>
 8019fc2:	2800      	cmp	r0, #0
 8019fc4:	d165      	bne.n	801a092 <_svfprintf_r+0xec2>
 8019fc6:	ac2c      	add	r4, sp, #176	; 0xb0
 8019fc8:	ab1b      	add	r3, sp, #108	; 0x6c
 8019fca:	6023      	str	r3, [r4, #0]
 8019fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019fce:	6063      	str	r3, [r4, #4]
 8019fd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019fd4:	4413      	add	r3, r2
 8019fd6:	e41c      	b.n	8019812 <_svfprintf_r+0x642>
 8019fd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8019fda:	4651      	mov	r1, sl
 8019fdc:	4658      	mov	r0, fp
 8019fde:	f001 fcdf 	bl	801b9a0 <__ssprint_r>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	d155      	bne.n	801a092 <_svfprintf_r+0xec2>
 8019fe6:	ac2c      	add	r4, sp, #176	; 0xb0
 8019fe8:	e7c0      	b.n	8019f6c <_svfprintf_r+0xd9c>
 8019fea:	aa1f      	add	r2, sp, #124	; 0x7c
 8019fec:	4651      	mov	r1, sl
 8019fee:	4658      	mov	r0, fp
 8019ff0:	f001 fcd6 	bl	801b9a0 <__ssprint_r>
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	d14c      	bne.n	801a092 <_svfprintf_r+0xec2>
 8019ff8:	ac2c      	add	r4, sp, #176	; 0xb0
 8019ffa:	e7c5      	b.n	8019f88 <_svfprintf_r+0xdb8>
 8019ffc:	2e00      	cmp	r6, #0
 8019ffe:	dde3      	ble.n	8019fc8 <_svfprintf_r+0xdf8>
 801a000:	4f59      	ldr	r7, [pc, #356]	; (801a168 <_svfprintf_r+0xf98>)
 801a002:	f04f 0810 	mov.w	r8, #16
 801a006:	2e10      	cmp	r6, #16
 801a008:	6027      	str	r7, [r4, #0]
 801a00a:	dc04      	bgt.n	801a016 <_svfprintf_r+0xe46>
 801a00c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a00e:	6066      	str	r6, [r4, #4]
 801a010:	441e      	add	r6, r3
 801a012:	9621      	str	r6, [sp, #132]	; 0x84
 801a014:	e7cb      	b.n	8019fae <_svfprintf_r+0xdde>
 801a016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a018:	f8c4 8004 	str.w	r8, [r4, #4]
 801a01c:	3310      	adds	r3, #16
 801a01e:	9321      	str	r3, [sp, #132]	; 0x84
 801a020:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a022:	3301      	adds	r3, #1
 801a024:	2b07      	cmp	r3, #7
 801a026:	9320      	str	r3, [sp, #128]	; 0x80
 801a028:	dc02      	bgt.n	801a030 <_svfprintf_r+0xe60>
 801a02a:	3408      	adds	r4, #8
 801a02c:	3e10      	subs	r6, #16
 801a02e:	e7ea      	b.n	801a006 <_svfprintf_r+0xe36>
 801a030:	aa1f      	add	r2, sp, #124	; 0x7c
 801a032:	4651      	mov	r1, sl
 801a034:	4658      	mov	r0, fp
 801a036:	f001 fcb3 	bl	801b9a0 <__ssprint_r>
 801a03a:	bb50      	cbnz	r0, 801a092 <_svfprintf_r+0xec2>
 801a03c:	ac2c      	add	r4, sp, #176	; 0xb0
 801a03e:	e7f5      	b.n	801a02c <_svfprintf_r+0xe5c>
 801a040:	2301      	movs	r3, #1
 801a042:	6063      	str	r3, [r4, #4]
 801a044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a046:	f8c4 8000 	str.w	r8, [r4]
 801a04a:	3301      	adds	r3, #1
 801a04c:	e7ae      	b.n	8019fac <_svfprintf_r+0xddc>
 801a04e:	3408      	adds	r4, #8
 801a050:	e7ba      	b.n	8019fc8 <_svfprintf_r+0xdf8>
 801a052:	3408      	adds	r4, #8
 801a054:	f7ff bbed 	b.w	8019832 <_svfprintf_r+0x662>
 801a058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a05a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a05c:	1a9d      	subs	r5, r3, r2
 801a05e:	2d00      	cmp	r5, #0
 801a060:	f77f abea 	ble.w	8019838 <_svfprintf_r+0x668>
 801a064:	2610      	movs	r6, #16
 801a066:	4b41      	ldr	r3, [pc, #260]	; (801a16c <_svfprintf_r+0xf9c>)
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	2d10      	cmp	r5, #16
 801a06c:	dc1b      	bgt.n	801a0a6 <_svfprintf_r+0xed6>
 801a06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a070:	6065      	str	r5, [r4, #4]
 801a072:	441d      	add	r5, r3
 801a074:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a076:	9521      	str	r5, [sp, #132]	; 0x84
 801a078:	3301      	adds	r3, #1
 801a07a:	2b07      	cmp	r3, #7
 801a07c:	9320      	str	r3, [sp, #128]	; 0x80
 801a07e:	f77f abdb 	ble.w	8019838 <_svfprintf_r+0x668>
 801a082:	aa1f      	add	r2, sp, #124	; 0x7c
 801a084:	4651      	mov	r1, sl
 801a086:	4658      	mov	r0, fp
 801a088:	f001 fc8a 	bl	801b9a0 <__ssprint_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	f43f abd3 	beq.w	8019838 <_svfprintf_r+0x668>
 801a092:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a096:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a09c:	bf18      	it	ne
 801a09e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801a0a2:	f7ff b8b9 	b.w	8019218 <_svfprintf_r+0x48>
 801a0a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0a8:	6066      	str	r6, [r4, #4]
 801a0aa:	3310      	adds	r3, #16
 801a0ac:	9321      	str	r3, [sp, #132]	; 0x84
 801a0ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	2b07      	cmp	r3, #7
 801a0b4:	9320      	str	r3, [sp, #128]	; 0x80
 801a0b6:	dc02      	bgt.n	801a0be <_svfprintf_r+0xeee>
 801a0b8:	3408      	adds	r4, #8
 801a0ba:	3d10      	subs	r5, #16
 801a0bc:	e7d3      	b.n	801a066 <_svfprintf_r+0xe96>
 801a0be:	aa1f      	add	r2, sp, #124	; 0x7c
 801a0c0:	4651      	mov	r1, sl
 801a0c2:	4658      	mov	r0, fp
 801a0c4:	f001 fc6c 	bl	801b9a0 <__ssprint_r>
 801a0c8:	2800      	cmp	r0, #0
 801a0ca:	d1e2      	bne.n	801a092 <_svfprintf_r+0xec2>
 801a0cc:	ac2c      	add	r4, sp, #176	; 0xb0
 801a0ce:	e7f4      	b.n	801a0ba <_svfprintf_r+0xeea>
 801a0d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d0dd      	beq.n	801a092 <_svfprintf_r+0xec2>
 801a0d6:	aa1f      	add	r2, sp, #124	; 0x7c
 801a0d8:	4651      	mov	r1, sl
 801a0da:	4658      	mov	r0, fp
 801a0dc:	f001 fc60 	bl	801b9a0 <__ssprint_r>
 801a0e0:	e7d7      	b.n	801a092 <_svfprintf_r+0xec2>
 801a0e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a0e6:	4610      	mov	r0, r2
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	f7fe fb6d 	bl	80187c8 <__aeabi_dcmpun>
 801a0ee:	2800      	cmp	r0, #0
 801a0f0:	f43f aa44 	beq.w	801957c <_svfprintf_r+0x3ac>
 801a0f4:	4b1e      	ldr	r3, [pc, #120]	; (801a170 <_svfprintf_r+0xfa0>)
 801a0f6:	4a1f      	ldr	r2, [pc, #124]	; (801a174 <_svfprintf_r+0xfa4>)
 801a0f8:	f7ff ba34 	b.w	8019564 <_svfprintf_r+0x394>
 801a0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a0fe:	eba3 0308 	sub.w	r3, r3, r8
 801a102:	9303      	str	r3, [sp, #12]
 801a104:	f7ff bab5 	b.w	8019672 <_svfprintf_r+0x4a2>
 801a108:	ea56 0207 	orrs.w	r2, r6, r7
 801a10c:	950b      	str	r5, [sp, #44]	; 0x2c
 801a10e:	f43f ac2b 	beq.w	8019968 <_svfprintf_r+0x798>
 801a112:	2b01      	cmp	r3, #1
 801a114:	f43f ac9d 	beq.w	8019a52 <_svfprintf_r+0x882>
 801a118:	2b02      	cmp	r3, #2
 801a11a:	f43f acbd 	beq.w	8019a98 <_svfprintf_r+0x8c8>
 801a11e:	ab2c      	add	r3, sp, #176	; 0xb0
 801a120:	08f1      	lsrs	r1, r6, #3
 801a122:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801a126:	08f8      	lsrs	r0, r7, #3
 801a128:	f006 0207 	and.w	r2, r6, #7
 801a12c:	4607      	mov	r7, r0
 801a12e:	460e      	mov	r6, r1
 801a130:	3230      	adds	r2, #48	; 0x30
 801a132:	ea56 0107 	orrs.w	r1, r6, r7
 801a136:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801a13a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a13e:	f47f ac86 	bne.w	8019a4e <_svfprintf_r+0x87e>
 801a142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a144:	07c9      	lsls	r1, r1, #31
 801a146:	d506      	bpl.n	801a156 <_svfprintf_r+0xf86>
 801a148:	2a30      	cmp	r2, #48	; 0x30
 801a14a:	d004      	beq.n	801a156 <_svfprintf_r+0xf86>
 801a14c:	2230      	movs	r2, #48	; 0x30
 801a14e:	f808 2c01 	strb.w	r2, [r8, #-1]
 801a152:	f1a3 0802 	sub.w	r8, r3, #2
 801a156:	464e      	mov	r6, r9
 801a158:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801a15c:	eba9 0908 	sub.w	r9, r9, r8
 801a160:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a162:	2700      	movs	r7, #0
 801a164:	f7ff bad1 	b.w	801970a <_svfprintf_r+0x53a>
 801a168:	0801cf98 	.word	0x0801cf98
 801a16c:	0801cf88 	.word	0x0801cf88
 801a170:	0801cf5c 	.word	0x0801cf5c
 801a174:	0801cf60 	.word	0x0801cf60

0801a178 <quorem>:
 801a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	6903      	ldr	r3, [r0, #16]
 801a17e:	690c      	ldr	r4, [r1, #16]
 801a180:	429c      	cmp	r4, r3
 801a182:	4680      	mov	r8, r0
 801a184:	f300 8082 	bgt.w	801a28c <quorem+0x114>
 801a188:	3c01      	subs	r4, #1
 801a18a:	f101 0714 	add.w	r7, r1, #20
 801a18e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801a192:	f100 0614 	add.w	r6, r0, #20
 801a196:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a19a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a19e:	eb06 030e 	add.w	r3, r6, lr
 801a1a2:	3501      	adds	r5, #1
 801a1a4:	eb07 090e 	add.w	r9, r7, lr
 801a1a8:	9301      	str	r3, [sp, #4]
 801a1aa:	fbb0 f5f5 	udiv	r5, r0, r5
 801a1ae:	b395      	cbz	r5, 801a216 <quorem+0x9e>
 801a1b0:	f04f 0a00 	mov.w	sl, #0
 801a1b4:	4638      	mov	r0, r7
 801a1b6:	46b4      	mov	ip, r6
 801a1b8:	46d3      	mov	fp, sl
 801a1ba:	f850 2b04 	ldr.w	r2, [r0], #4
 801a1be:	b293      	uxth	r3, r2
 801a1c0:	fb05 a303 	mla	r3, r5, r3, sl
 801a1c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a1c8:	b29b      	uxth	r3, r3
 801a1ca:	ebab 0303 	sub.w	r3, fp, r3
 801a1ce:	0c12      	lsrs	r2, r2, #16
 801a1d0:	f8bc b000 	ldrh.w	fp, [ip]
 801a1d4:	fb05 a202 	mla	r2, r5, r2, sl
 801a1d8:	fa13 f38b 	uxtah	r3, r3, fp
 801a1dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a1e0:	fa1f fb82 	uxth.w	fp, r2
 801a1e4:	f8dc 2000 	ldr.w	r2, [ip]
 801a1e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1f6:	4581      	cmp	r9, r0
 801a1f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a1fc:	f84c 3b04 	str.w	r3, [ip], #4
 801a200:	d2db      	bcs.n	801a1ba <quorem+0x42>
 801a202:	f856 300e 	ldr.w	r3, [r6, lr]
 801a206:	b933      	cbnz	r3, 801a216 <quorem+0x9e>
 801a208:	9b01      	ldr	r3, [sp, #4]
 801a20a:	3b04      	subs	r3, #4
 801a20c:	429e      	cmp	r6, r3
 801a20e:	461a      	mov	r2, r3
 801a210:	d330      	bcc.n	801a274 <quorem+0xfc>
 801a212:	f8c8 4010 	str.w	r4, [r8, #16]
 801a216:	4640      	mov	r0, r8
 801a218:	f001 f98b 	bl	801b532 <__mcmp>
 801a21c:	2800      	cmp	r0, #0
 801a21e:	db25      	blt.n	801a26c <quorem+0xf4>
 801a220:	3501      	adds	r5, #1
 801a222:	4630      	mov	r0, r6
 801a224:	f04f 0e00 	mov.w	lr, #0
 801a228:	f857 2b04 	ldr.w	r2, [r7], #4
 801a22c:	f8d0 c000 	ldr.w	ip, [r0]
 801a230:	b293      	uxth	r3, r2
 801a232:	ebae 0303 	sub.w	r3, lr, r3
 801a236:	0c12      	lsrs	r2, r2, #16
 801a238:	fa13 f38c 	uxtah	r3, r3, ip
 801a23c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a244:	b29b      	uxth	r3, r3
 801a246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a24a:	45b9      	cmp	r9, r7
 801a24c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a250:	f840 3b04 	str.w	r3, [r0], #4
 801a254:	d2e8      	bcs.n	801a228 <quorem+0xb0>
 801a256:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a25a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a25e:	b92a      	cbnz	r2, 801a26c <quorem+0xf4>
 801a260:	3b04      	subs	r3, #4
 801a262:	429e      	cmp	r6, r3
 801a264:	461a      	mov	r2, r3
 801a266:	d30b      	bcc.n	801a280 <quorem+0x108>
 801a268:	f8c8 4010 	str.w	r4, [r8, #16]
 801a26c:	4628      	mov	r0, r5
 801a26e:	b003      	add	sp, #12
 801a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a274:	6812      	ldr	r2, [r2, #0]
 801a276:	3b04      	subs	r3, #4
 801a278:	2a00      	cmp	r2, #0
 801a27a:	d1ca      	bne.n	801a212 <quorem+0x9a>
 801a27c:	3c01      	subs	r4, #1
 801a27e:	e7c5      	b.n	801a20c <quorem+0x94>
 801a280:	6812      	ldr	r2, [r2, #0]
 801a282:	3b04      	subs	r3, #4
 801a284:	2a00      	cmp	r2, #0
 801a286:	d1ef      	bne.n	801a268 <quorem+0xf0>
 801a288:	3c01      	subs	r4, #1
 801a28a:	e7ea      	b.n	801a262 <quorem+0xea>
 801a28c:	2000      	movs	r0, #0
 801a28e:	e7ee      	b.n	801a26e <quorem+0xf6>

0801a290 <_dtoa_r>:
 801a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a294:	ec57 6b10 	vmov	r6, r7, d0
 801a298:	b097      	sub	sp, #92	; 0x5c
 801a29a:	e9cd 6700 	strd	r6, r7, [sp]
 801a29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a2a0:	9107      	str	r1, [sp, #28]
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	920a      	str	r2, [sp, #40]	; 0x28
 801a2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a2aa:	b93e      	cbnz	r6, 801a2bc <_dtoa_r+0x2c>
 801a2ac:	2010      	movs	r0, #16
 801a2ae:	f7fe fcf5 	bl	8018c9c <malloc>
 801a2b2:	6260      	str	r0, [r4, #36]	; 0x24
 801a2b4:	6046      	str	r6, [r0, #4]
 801a2b6:	6086      	str	r6, [r0, #8]
 801a2b8:	6006      	str	r6, [r0, #0]
 801a2ba:	60c6      	str	r6, [r0, #12]
 801a2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2be:	6819      	ldr	r1, [r3, #0]
 801a2c0:	b151      	cbz	r1, 801a2d8 <_dtoa_r+0x48>
 801a2c2:	685a      	ldr	r2, [r3, #4]
 801a2c4:	604a      	str	r2, [r1, #4]
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	4093      	lsls	r3, r2
 801a2ca:	608b      	str	r3, [r1, #8]
 801a2cc:	4620      	mov	r0, r4
 801a2ce:	f000 ff1d 	bl	801b10c <_Bfree>
 801a2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	601a      	str	r2, [r3, #0]
 801a2d8:	9b01      	ldr	r3, [sp, #4]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	bfbf      	itttt	lt
 801a2de:	2301      	movlt	r3, #1
 801a2e0:	602b      	strlt	r3, [r5, #0]
 801a2e2:	9b01      	ldrlt	r3, [sp, #4]
 801a2e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a2e8:	bfb2      	itee	lt
 801a2ea:	9301      	strlt	r3, [sp, #4]
 801a2ec:	2300      	movge	r3, #0
 801a2ee:	602b      	strge	r3, [r5, #0]
 801a2f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a2f4:	4ba8      	ldr	r3, [pc, #672]	; (801a598 <_dtoa_r+0x308>)
 801a2f6:	ea33 0308 	bics.w	r3, r3, r8
 801a2fa:	d11b      	bne.n	801a334 <_dtoa_r+0xa4>
 801a2fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a2fe:	f242 730f 	movw	r3, #9999	; 0x270f
 801a302:	6013      	str	r3, [r2, #0]
 801a304:	9b00      	ldr	r3, [sp, #0]
 801a306:	b923      	cbnz	r3, 801a312 <_dtoa_r+0x82>
 801a308:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a30c:	2800      	cmp	r0, #0
 801a30e:	f000 8578 	beq.w	801ae02 <_dtoa_r+0xb72>
 801a312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a314:	b953      	cbnz	r3, 801a32c <_dtoa_r+0x9c>
 801a316:	4ba1      	ldr	r3, [pc, #644]	; (801a59c <_dtoa_r+0x30c>)
 801a318:	e021      	b.n	801a35e <_dtoa_r+0xce>
 801a31a:	4ba1      	ldr	r3, [pc, #644]	; (801a5a0 <_dtoa_r+0x310>)
 801a31c:	9302      	str	r3, [sp, #8]
 801a31e:	3308      	adds	r3, #8
 801a320:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a322:	6013      	str	r3, [r2, #0]
 801a324:	9802      	ldr	r0, [sp, #8]
 801a326:	b017      	add	sp, #92	; 0x5c
 801a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32c:	4b9b      	ldr	r3, [pc, #620]	; (801a59c <_dtoa_r+0x30c>)
 801a32e:	9302      	str	r3, [sp, #8]
 801a330:	3303      	adds	r3, #3
 801a332:	e7f5      	b.n	801a320 <_dtoa_r+0x90>
 801a334:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a338:	2200      	movs	r2, #0
 801a33a:	2300      	movs	r3, #0
 801a33c:	4630      	mov	r0, r6
 801a33e:	4639      	mov	r1, r7
 801a340:	f7fe fa10 	bl	8018764 <__aeabi_dcmpeq>
 801a344:	4681      	mov	r9, r0
 801a346:	b160      	cbz	r0, 801a362 <_dtoa_r+0xd2>
 801a348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a34a:	2301      	movs	r3, #1
 801a34c:	6013      	str	r3, [r2, #0]
 801a34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a350:	2b00      	cmp	r3, #0
 801a352:	f000 8553 	beq.w	801adfc <_dtoa_r+0xb6c>
 801a356:	4b93      	ldr	r3, [pc, #588]	; (801a5a4 <_dtoa_r+0x314>)
 801a358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a35a:	6013      	str	r3, [r2, #0]
 801a35c:	3b01      	subs	r3, #1
 801a35e:	9302      	str	r3, [sp, #8]
 801a360:	e7e0      	b.n	801a324 <_dtoa_r+0x94>
 801a362:	aa14      	add	r2, sp, #80	; 0x50
 801a364:	a915      	add	r1, sp, #84	; 0x54
 801a366:	ec47 6b10 	vmov	d0, r6, r7
 801a36a:	4620      	mov	r0, r4
 801a36c:	f001 f9d0 	bl	801b710 <__d2b>
 801a370:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a374:	4682      	mov	sl, r0
 801a376:	2d00      	cmp	r5, #0
 801a378:	d07e      	beq.n	801a478 <_dtoa_r+0x1e8>
 801a37a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a37e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801a382:	4630      	mov	r0, r6
 801a384:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a388:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a38c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801a390:	2200      	movs	r2, #0
 801a392:	4b85      	ldr	r3, [pc, #532]	; (801a5a8 <_dtoa_r+0x318>)
 801a394:	f7fd fdca 	bl	8017f2c <__aeabi_dsub>
 801a398:	a379      	add	r3, pc, #484	; (adr r3, 801a580 <_dtoa_r+0x2f0>)
 801a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39e:	f7fd ff79 	bl	8018294 <__aeabi_dmul>
 801a3a2:	a379      	add	r3, pc, #484	; (adr r3, 801a588 <_dtoa_r+0x2f8>)
 801a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a8:	f7fd fdc2 	bl	8017f30 <__adddf3>
 801a3ac:	4606      	mov	r6, r0
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	460f      	mov	r7, r1
 801a3b2:	f7fd ff09 	bl	80181c8 <__aeabi_i2d>
 801a3b6:	a376      	add	r3, pc, #472	; (adr r3, 801a590 <_dtoa_r+0x300>)
 801a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3bc:	f7fd ff6a 	bl	8018294 <__aeabi_dmul>
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	460b      	mov	r3, r1
 801a3c4:	4630      	mov	r0, r6
 801a3c6:	4639      	mov	r1, r7
 801a3c8:	f7fd fdb2 	bl	8017f30 <__adddf3>
 801a3cc:	4606      	mov	r6, r0
 801a3ce:	460f      	mov	r7, r1
 801a3d0:	f7fe fa10 	bl	80187f4 <__aeabi_d2iz>
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	4683      	mov	fp, r0
 801a3d8:	2300      	movs	r3, #0
 801a3da:	4630      	mov	r0, r6
 801a3dc:	4639      	mov	r1, r7
 801a3de:	f7fe f9cb 	bl	8018778 <__aeabi_dcmplt>
 801a3e2:	b158      	cbz	r0, 801a3fc <_dtoa_r+0x16c>
 801a3e4:	4658      	mov	r0, fp
 801a3e6:	f7fd feef 	bl	80181c8 <__aeabi_i2d>
 801a3ea:	4602      	mov	r2, r0
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	4639      	mov	r1, r7
 801a3f2:	f7fe f9b7 	bl	8018764 <__aeabi_dcmpeq>
 801a3f6:	b908      	cbnz	r0, 801a3fc <_dtoa_r+0x16c>
 801a3f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a3fc:	f1bb 0f16 	cmp.w	fp, #22
 801a400:	d859      	bhi.n	801a4b6 <_dtoa_r+0x226>
 801a402:	496a      	ldr	r1, [pc, #424]	; (801a5ac <_dtoa_r+0x31c>)
 801a404:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a408:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a40c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a410:	f7fe f9d0 	bl	80187b4 <__aeabi_dcmpgt>
 801a414:	2800      	cmp	r0, #0
 801a416:	d050      	beq.n	801a4ba <_dtoa_r+0x22a>
 801a418:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a41c:	2300      	movs	r3, #0
 801a41e:	930e      	str	r3, [sp, #56]	; 0x38
 801a420:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a422:	1b5d      	subs	r5, r3, r5
 801a424:	1e6b      	subs	r3, r5, #1
 801a426:	9306      	str	r3, [sp, #24]
 801a428:	bf45      	ittet	mi
 801a42a:	f1c5 0301 	rsbmi	r3, r5, #1
 801a42e:	9305      	strmi	r3, [sp, #20]
 801a430:	2300      	movpl	r3, #0
 801a432:	2300      	movmi	r3, #0
 801a434:	bf4c      	ite	mi
 801a436:	9306      	strmi	r3, [sp, #24]
 801a438:	9305      	strpl	r3, [sp, #20]
 801a43a:	f1bb 0f00 	cmp.w	fp, #0
 801a43e:	db3e      	blt.n	801a4be <_dtoa_r+0x22e>
 801a440:	9b06      	ldr	r3, [sp, #24]
 801a442:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801a446:	445b      	add	r3, fp
 801a448:	9306      	str	r3, [sp, #24]
 801a44a:	2300      	movs	r3, #0
 801a44c:	9308      	str	r3, [sp, #32]
 801a44e:	9b07      	ldr	r3, [sp, #28]
 801a450:	2b09      	cmp	r3, #9
 801a452:	f200 80af 	bhi.w	801a5b4 <_dtoa_r+0x324>
 801a456:	2b05      	cmp	r3, #5
 801a458:	bfc4      	itt	gt
 801a45a:	3b04      	subgt	r3, #4
 801a45c:	9307      	strgt	r3, [sp, #28]
 801a45e:	9b07      	ldr	r3, [sp, #28]
 801a460:	f1a3 0302 	sub.w	r3, r3, #2
 801a464:	bfcc      	ite	gt
 801a466:	2600      	movgt	r6, #0
 801a468:	2601      	movle	r6, #1
 801a46a:	2b03      	cmp	r3, #3
 801a46c:	f200 80ae 	bhi.w	801a5cc <_dtoa_r+0x33c>
 801a470:	e8df f003 	tbb	[pc, r3]
 801a474:	772f8482 	.word	0x772f8482
 801a478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a47a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a47c:	441d      	add	r5, r3
 801a47e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a482:	2b20      	cmp	r3, #32
 801a484:	dd11      	ble.n	801a4aa <_dtoa_r+0x21a>
 801a486:	9a00      	ldr	r2, [sp, #0]
 801a488:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801a48c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801a490:	fa22 f000 	lsr.w	r0, r2, r0
 801a494:	fa08 f303 	lsl.w	r3, r8, r3
 801a498:	4318      	orrs	r0, r3
 801a49a:	f7fd fe85 	bl	80181a8 <__aeabi_ui2d>
 801a49e:	2301      	movs	r3, #1
 801a4a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a4a4:	3d01      	subs	r5, #1
 801a4a6:	9312      	str	r3, [sp, #72]	; 0x48
 801a4a8:	e772      	b.n	801a390 <_dtoa_r+0x100>
 801a4aa:	f1c3 0020 	rsb	r0, r3, #32
 801a4ae:	9b00      	ldr	r3, [sp, #0]
 801a4b0:	fa03 f000 	lsl.w	r0, r3, r0
 801a4b4:	e7f1      	b.n	801a49a <_dtoa_r+0x20a>
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	e7b1      	b.n	801a41e <_dtoa_r+0x18e>
 801a4ba:	900e      	str	r0, [sp, #56]	; 0x38
 801a4bc:	e7b0      	b.n	801a420 <_dtoa_r+0x190>
 801a4be:	9b05      	ldr	r3, [sp, #20]
 801a4c0:	eba3 030b 	sub.w	r3, r3, fp
 801a4c4:	9305      	str	r3, [sp, #20]
 801a4c6:	f1cb 0300 	rsb	r3, fp, #0
 801a4ca:	9308      	str	r3, [sp, #32]
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801a4d0:	e7bd      	b.n	801a44e <_dtoa_r+0x1be>
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 801a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	dd7a      	ble.n	801a5d2 <_dtoa_r+0x342>
 801a4dc:	9304      	str	r3, [sp, #16]
 801a4de:	9303      	str	r3, [sp, #12]
 801a4e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	606a      	str	r2, [r5, #4]
 801a4e6:	2104      	movs	r1, #4
 801a4e8:	f101 0214 	add.w	r2, r1, #20
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d975      	bls.n	801a5dc <_dtoa_r+0x34c>
 801a4f0:	6869      	ldr	r1, [r5, #4]
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	f000 fdd6 	bl	801b0a4 <_Balloc>
 801a4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4fa:	6028      	str	r0, [r5, #0]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	9302      	str	r3, [sp, #8]
 801a500:	9b03      	ldr	r3, [sp, #12]
 801a502:	2b0e      	cmp	r3, #14
 801a504:	f200 80e5 	bhi.w	801a6d2 <_dtoa_r+0x442>
 801a508:	2e00      	cmp	r6, #0
 801a50a:	f000 80e2 	beq.w	801a6d2 <_dtoa_r+0x442>
 801a50e:	ed9d 7b00 	vldr	d7, [sp]
 801a512:	f1bb 0f00 	cmp.w	fp, #0
 801a516:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801a51a:	dd74      	ble.n	801a606 <_dtoa_r+0x376>
 801a51c:	4a23      	ldr	r2, [pc, #140]	; (801a5ac <_dtoa_r+0x31c>)
 801a51e:	f00b 030f 	and.w	r3, fp, #15
 801a522:	ea4f 162b 	mov.w	r6, fp, asr #4
 801a526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a52a:	06f0      	lsls	r0, r6, #27
 801a52c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a530:	d559      	bpl.n	801a5e6 <_dtoa_r+0x356>
 801a532:	4b1f      	ldr	r3, [pc, #124]	; (801a5b0 <_dtoa_r+0x320>)
 801a534:	ec51 0b17 	vmov	r0, r1, d7
 801a538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a53c:	f7fd ffd4 	bl	80184e8 <__aeabi_ddiv>
 801a540:	e9cd 0100 	strd	r0, r1, [sp]
 801a544:	f006 060f 	and.w	r6, r6, #15
 801a548:	2503      	movs	r5, #3
 801a54a:	4f19      	ldr	r7, [pc, #100]	; (801a5b0 <_dtoa_r+0x320>)
 801a54c:	2e00      	cmp	r6, #0
 801a54e:	d14c      	bne.n	801a5ea <_dtoa_r+0x35a>
 801a550:	4642      	mov	r2, r8
 801a552:	464b      	mov	r3, r9
 801a554:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a558:	f7fd ffc6 	bl	80184e8 <__aeabi_ddiv>
 801a55c:	e9cd 0100 	strd	r0, r1, [sp]
 801a560:	e06a      	b.n	801a638 <_dtoa_r+0x3a8>
 801a562:	2301      	movs	r3, #1
 801a564:	9309      	str	r3, [sp, #36]	; 0x24
 801a566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a568:	445b      	add	r3, fp
 801a56a:	9304      	str	r3, [sp, #16]
 801a56c:	3301      	adds	r3, #1
 801a56e:	2b01      	cmp	r3, #1
 801a570:	9303      	str	r3, [sp, #12]
 801a572:	bfb8      	it	lt
 801a574:	2301      	movlt	r3, #1
 801a576:	e7b3      	b.n	801a4e0 <_dtoa_r+0x250>
 801a578:	2300      	movs	r3, #0
 801a57a:	e7ab      	b.n	801a4d4 <_dtoa_r+0x244>
 801a57c:	2300      	movs	r3, #0
 801a57e:	e7f1      	b.n	801a564 <_dtoa_r+0x2d4>
 801a580:	636f4361 	.word	0x636f4361
 801a584:	3fd287a7 	.word	0x3fd287a7
 801a588:	8b60c8b3 	.word	0x8b60c8b3
 801a58c:	3fc68a28 	.word	0x3fc68a28
 801a590:	509f79fb 	.word	0x509f79fb
 801a594:	3fd34413 	.word	0x3fd34413
 801a598:	7ff00000 	.word	0x7ff00000
 801a59c:	0801cfb1 	.word	0x0801cfb1
 801a5a0:	0801cfa8 	.word	0x0801cfa8
 801a5a4:	0801cf87 	.word	0x0801cf87
 801a5a8:	3ff80000 	.word	0x3ff80000
 801a5ac:	0801cfe0 	.word	0x0801cfe0
 801a5b0:	0801cfb8 	.word	0x0801cfb8
 801a5b4:	2601      	movs	r6, #1
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	9307      	str	r3, [sp, #28]
 801a5ba:	9609      	str	r6, [sp, #36]	; 0x24
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5c0:	9304      	str	r3, [sp, #16]
 801a5c2:	9303      	str	r3, [sp, #12]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	2312      	movs	r3, #18
 801a5c8:	920a      	str	r2, [sp, #40]	; 0x28
 801a5ca:	e789      	b.n	801a4e0 <_dtoa_r+0x250>
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	9309      	str	r3, [sp, #36]	; 0x24
 801a5d0:	e7f4      	b.n	801a5bc <_dtoa_r+0x32c>
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	9304      	str	r3, [sp, #16]
 801a5d6:	9303      	str	r3, [sp, #12]
 801a5d8:	461a      	mov	r2, r3
 801a5da:	e7f5      	b.n	801a5c8 <_dtoa_r+0x338>
 801a5dc:	686a      	ldr	r2, [r5, #4]
 801a5de:	3201      	adds	r2, #1
 801a5e0:	606a      	str	r2, [r5, #4]
 801a5e2:	0049      	lsls	r1, r1, #1
 801a5e4:	e780      	b.n	801a4e8 <_dtoa_r+0x258>
 801a5e6:	2502      	movs	r5, #2
 801a5e8:	e7af      	b.n	801a54a <_dtoa_r+0x2ba>
 801a5ea:	07f1      	lsls	r1, r6, #31
 801a5ec:	d508      	bpl.n	801a600 <_dtoa_r+0x370>
 801a5ee:	4640      	mov	r0, r8
 801a5f0:	4649      	mov	r1, r9
 801a5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a5f6:	f7fd fe4d 	bl	8018294 <__aeabi_dmul>
 801a5fa:	3501      	adds	r5, #1
 801a5fc:	4680      	mov	r8, r0
 801a5fe:	4689      	mov	r9, r1
 801a600:	1076      	asrs	r6, r6, #1
 801a602:	3708      	adds	r7, #8
 801a604:	e7a2      	b.n	801a54c <_dtoa_r+0x2bc>
 801a606:	f000 809d 	beq.w	801a744 <_dtoa_r+0x4b4>
 801a60a:	f1cb 0600 	rsb	r6, fp, #0
 801a60e:	4b9f      	ldr	r3, [pc, #636]	; (801a88c <_dtoa_r+0x5fc>)
 801a610:	4f9f      	ldr	r7, [pc, #636]	; (801a890 <_dtoa_r+0x600>)
 801a612:	f006 020f 	and.w	r2, r6, #15
 801a616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a622:	f7fd fe37 	bl	8018294 <__aeabi_dmul>
 801a626:	e9cd 0100 	strd	r0, r1, [sp]
 801a62a:	1136      	asrs	r6, r6, #4
 801a62c:	2300      	movs	r3, #0
 801a62e:	2502      	movs	r5, #2
 801a630:	2e00      	cmp	r6, #0
 801a632:	d17c      	bne.n	801a72e <_dtoa_r+0x49e>
 801a634:	2b00      	cmp	r3, #0
 801a636:	d191      	bne.n	801a55c <_dtoa_r+0x2cc>
 801a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	f000 8084 	beq.w	801a748 <_dtoa_r+0x4b8>
 801a640:	e9dd 8900 	ldrd	r8, r9, [sp]
 801a644:	2200      	movs	r2, #0
 801a646:	4b93      	ldr	r3, [pc, #588]	; (801a894 <_dtoa_r+0x604>)
 801a648:	4640      	mov	r0, r8
 801a64a:	4649      	mov	r1, r9
 801a64c:	f7fe f894 	bl	8018778 <__aeabi_dcmplt>
 801a650:	2800      	cmp	r0, #0
 801a652:	d079      	beq.n	801a748 <_dtoa_r+0x4b8>
 801a654:	9b03      	ldr	r3, [sp, #12]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d076      	beq.n	801a748 <_dtoa_r+0x4b8>
 801a65a:	9b04      	ldr	r3, [sp, #16]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	dd34      	ble.n	801a6ca <_dtoa_r+0x43a>
 801a660:	2200      	movs	r2, #0
 801a662:	4b8d      	ldr	r3, [pc, #564]	; (801a898 <_dtoa_r+0x608>)
 801a664:	4640      	mov	r0, r8
 801a666:	4649      	mov	r1, r9
 801a668:	f7fd fe14 	bl	8018294 <__aeabi_dmul>
 801a66c:	e9cd 0100 	strd	r0, r1, [sp]
 801a670:	9e04      	ldr	r6, [sp, #16]
 801a672:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801a676:	3501      	adds	r5, #1
 801a678:	4628      	mov	r0, r5
 801a67a:	f7fd fda5 	bl	80181c8 <__aeabi_i2d>
 801a67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a682:	f7fd fe07 	bl	8018294 <__aeabi_dmul>
 801a686:	2200      	movs	r2, #0
 801a688:	4b84      	ldr	r3, [pc, #528]	; (801a89c <_dtoa_r+0x60c>)
 801a68a:	f7fd fc51 	bl	8017f30 <__adddf3>
 801a68e:	4680      	mov	r8, r0
 801a690:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801a694:	2e00      	cmp	r6, #0
 801a696:	d15a      	bne.n	801a74e <_dtoa_r+0x4be>
 801a698:	2200      	movs	r2, #0
 801a69a:	4b81      	ldr	r3, [pc, #516]	; (801a8a0 <_dtoa_r+0x610>)
 801a69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a6a0:	f7fd fc44 	bl	8017f2c <__aeabi_dsub>
 801a6a4:	4642      	mov	r2, r8
 801a6a6:	464b      	mov	r3, r9
 801a6a8:	e9cd 0100 	strd	r0, r1, [sp]
 801a6ac:	f7fe f882 	bl	80187b4 <__aeabi_dcmpgt>
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	f040 829b 	bne.w	801abec <_dtoa_r+0x95c>
 801a6b6:	4642      	mov	r2, r8
 801a6b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a6bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a6c0:	f7fe f85a 	bl	8018778 <__aeabi_dcmplt>
 801a6c4:	2800      	cmp	r0, #0
 801a6c6:	f040 828f 	bne.w	801abe8 <_dtoa_r+0x958>
 801a6ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a6ce:	e9cd 2300 	strd	r2, r3, [sp]
 801a6d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	f2c0 8150 	blt.w	801a97a <_dtoa_r+0x6ea>
 801a6da:	f1bb 0f0e 	cmp.w	fp, #14
 801a6de:	f300 814c 	bgt.w	801a97a <_dtoa_r+0x6ea>
 801a6e2:	4b6a      	ldr	r3, [pc, #424]	; (801a88c <_dtoa_r+0x5fc>)
 801a6e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a6e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	f280 80da 	bge.w	801a8a8 <_dtoa_r+0x618>
 801a6f4:	9b03      	ldr	r3, [sp, #12]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	f300 80d6 	bgt.w	801a8a8 <_dtoa_r+0x618>
 801a6fc:	f040 8273 	bne.w	801abe6 <_dtoa_r+0x956>
 801a700:	2200      	movs	r2, #0
 801a702:	4b67      	ldr	r3, [pc, #412]	; (801a8a0 <_dtoa_r+0x610>)
 801a704:	4640      	mov	r0, r8
 801a706:	4649      	mov	r1, r9
 801a708:	f7fd fdc4 	bl	8018294 <__aeabi_dmul>
 801a70c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a710:	f7fe f846 	bl	80187a0 <__aeabi_dcmpge>
 801a714:	9e03      	ldr	r6, [sp, #12]
 801a716:	4637      	mov	r7, r6
 801a718:	2800      	cmp	r0, #0
 801a71a:	f040 824a 	bne.w	801abb2 <_dtoa_r+0x922>
 801a71e:	9b02      	ldr	r3, [sp, #8]
 801a720:	9a02      	ldr	r2, [sp, #8]
 801a722:	1c5d      	adds	r5, r3, #1
 801a724:	2331      	movs	r3, #49	; 0x31
 801a726:	7013      	strb	r3, [r2, #0]
 801a728:	f10b 0b01 	add.w	fp, fp, #1
 801a72c:	e245      	b.n	801abba <_dtoa_r+0x92a>
 801a72e:	07f2      	lsls	r2, r6, #31
 801a730:	d505      	bpl.n	801a73e <_dtoa_r+0x4ae>
 801a732:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a736:	f7fd fdad 	bl	8018294 <__aeabi_dmul>
 801a73a:	3501      	adds	r5, #1
 801a73c:	2301      	movs	r3, #1
 801a73e:	1076      	asrs	r6, r6, #1
 801a740:	3708      	adds	r7, #8
 801a742:	e775      	b.n	801a630 <_dtoa_r+0x3a0>
 801a744:	2502      	movs	r5, #2
 801a746:	e777      	b.n	801a638 <_dtoa_r+0x3a8>
 801a748:	465f      	mov	r7, fp
 801a74a:	9e03      	ldr	r6, [sp, #12]
 801a74c:	e794      	b.n	801a678 <_dtoa_r+0x3e8>
 801a74e:	9a02      	ldr	r2, [sp, #8]
 801a750:	4b4e      	ldr	r3, [pc, #312]	; (801a88c <_dtoa_r+0x5fc>)
 801a752:	4432      	add	r2, r6
 801a754:	9213      	str	r2, [sp, #76]	; 0x4c
 801a756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a758:	1e71      	subs	r1, r6, #1
 801a75a:	2a00      	cmp	r2, #0
 801a75c:	d048      	beq.n	801a7f0 <_dtoa_r+0x560>
 801a75e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a766:	2000      	movs	r0, #0
 801a768:	494e      	ldr	r1, [pc, #312]	; (801a8a4 <_dtoa_r+0x614>)
 801a76a:	f7fd febd 	bl	80184e8 <__aeabi_ddiv>
 801a76e:	4642      	mov	r2, r8
 801a770:	464b      	mov	r3, r9
 801a772:	f7fd fbdb 	bl	8017f2c <__aeabi_dsub>
 801a776:	9d02      	ldr	r5, [sp, #8]
 801a778:	4680      	mov	r8, r0
 801a77a:	4689      	mov	r9, r1
 801a77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a780:	f7fe f838 	bl	80187f4 <__aeabi_d2iz>
 801a784:	4606      	mov	r6, r0
 801a786:	f7fd fd1f 	bl	80181c8 <__aeabi_i2d>
 801a78a:	4602      	mov	r2, r0
 801a78c:	460b      	mov	r3, r1
 801a78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a792:	f7fd fbcb 	bl	8017f2c <__aeabi_dsub>
 801a796:	3630      	adds	r6, #48	; 0x30
 801a798:	f805 6b01 	strb.w	r6, [r5], #1
 801a79c:	4642      	mov	r2, r8
 801a79e:	464b      	mov	r3, r9
 801a7a0:	e9cd 0100 	strd	r0, r1, [sp]
 801a7a4:	f7fd ffe8 	bl	8018778 <__aeabi_dcmplt>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	d165      	bne.n	801a878 <_dtoa_r+0x5e8>
 801a7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a7b0:	2000      	movs	r0, #0
 801a7b2:	4938      	ldr	r1, [pc, #224]	; (801a894 <_dtoa_r+0x604>)
 801a7b4:	f7fd fbba 	bl	8017f2c <__aeabi_dsub>
 801a7b8:	4642      	mov	r2, r8
 801a7ba:	464b      	mov	r3, r9
 801a7bc:	f7fd ffdc 	bl	8018778 <__aeabi_dcmplt>
 801a7c0:	2800      	cmp	r0, #0
 801a7c2:	f040 80ba 	bne.w	801a93a <_dtoa_r+0x6aa>
 801a7c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7c8:	429d      	cmp	r5, r3
 801a7ca:	f43f af7e 	beq.w	801a6ca <_dtoa_r+0x43a>
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	4b31      	ldr	r3, [pc, #196]	; (801a898 <_dtoa_r+0x608>)
 801a7d2:	4640      	mov	r0, r8
 801a7d4:	4649      	mov	r1, r9
 801a7d6:	f7fd fd5d 	bl	8018294 <__aeabi_dmul>
 801a7da:	2200      	movs	r2, #0
 801a7dc:	4680      	mov	r8, r0
 801a7de:	4689      	mov	r9, r1
 801a7e0:	4b2d      	ldr	r3, [pc, #180]	; (801a898 <_dtoa_r+0x608>)
 801a7e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7e6:	f7fd fd55 	bl	8018294 <__aeabi_dmul>
 801a7ea:	e9cd 0100 	strd	r0, r1, [sp]
 801a7ee:	e7c5      	b.n	801a77c <_dtoa_r+0x4ec>
 801a7f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a7f4:	4642      	mov	r2, r8
 801a7f6:	464b      	mov	r3, r9
 801a7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7fc:	f7fd fd4a 	bl	8018294 <__aeabi_dmul>
 801a800:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801a804:	9d02      	ldr	r5, [sp, #8]
 801a806:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a80a:	f7fd fff3 	bl	80187f4 <__aeabi_d2iz>
 801a80e:	4606      	mov	r6, r0
 801a810:	f7fd fcda 	bl	80181c8 <__aeabi_i2d>
 801a814:	3630      	adds	r6, #48	; 0x30
 801a816:	4602      	mov	r2, r0
 801a818:	460b      	mov	r3, r1
 801a81a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a81e:	f7fd fb85 	bl	8017f2c <__aeabi_dsub>
 801a822:	f805 6b01 	strb.w	r6, [r5], #1
 801a826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a828:	42ab      	cmp	r3, r5
 801a82a:	4680      	mov	r8, r0
 801a82c:	4689      	mov	r9, r1
 801a82e:	f04f 0200 	mov.w	r2, #0
 801a832:	d125      	bne.n	801a880 <_dtoa_r+0x5f0>
 801a834:	4b1b      	ldr	r3, [pc, #108]	; (801a8a4 <_dtoa_r+0x614>)
 801a836:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a83a:	f7fd fb79 	bl	8017f30 <__adddf3>
 801a83e:	4602      	mov	r2, r0
 801a840:	460b      	mov	r3, r1
 801a842:	4640      	mov	r0, r8
 801a844:	4649      	mov	r1, r9
 801a846:	f7fd ffb5 	bl	80187b4 <__aeabi_dcmpgt>
 801a84a:	2800      	cmp	r0, #0
 801a84c:	d175      	bne.n	801a93a <_dtoa_r+0x6aa>
 801a84e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a852:	2000      	movs	r0, #0
 801a854:	4913      	ldr	r1, [pc, #76]	; (801a8a4 <_dtoa_r+0x614>)
 801a856:	f7fd fb69 	bl	8017f2c <__aeabi_dsub>
 801a85a:	4602      	mov	r2, r0
 801a85c:	460b      	mov	r3, r1
 801a85e:	4640      	mov	r0, r8
 801a860:	4649      	mov	r1, r9
 801a862:	f7fd ff89 	bl	8018778 <__aeabi_dcmplt>
 801a866:	2800      	cmp	r0, #0
 801a868:	f43f af2f 	beq.w	801a6ca <_dtoa_r+0x43a>
 801a86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a870:	2b30      	cmp	r3, #48	; 0x30
 801a872:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801a876:	d001      	beq.n	801a87c <_dtoa_r+0x5ec>
 801a878:	46bb      	mov	fp, r7
 801a87a:	e04d      	b.n	801a918 <_dtoa_r+0x688>
 801a87c:	4615      	mov	r5, r2
 801a87e:	e7f5      	b.n	801a86c <_dtoa_r+0x5dc>
 801a880:	4b05      	ldr	r3, [pc, #20]	; (801a898 <_dtoa_r+0x608>)
 801a882:	f7fd fd07 	bl	8018294 <__aeabi_dmul>
 801a886:	e9cd 0100 	strd	r0, r1, [sp]
 801a88a:	e7bc      	b.n	801a806 <_dtoa_r+0x576>
 801a88c:	0801cfe0 	.word	0x0801cfe0
 801a890:	0801cfb8 	.word	0x0801cfb8
 801a894:	3ff00000 	.word	0x3ff00000
 801a898:	40240000 	.word	0x40240000
 801a89c:	401c0000 	.word	0x401c0000
 801a8a0:	40140000 	.word	0x40140000
 801a8a4:	3fe00000 	.word	0x3fe00000
 801a8a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a8ac:	9d02      	ldr	r5, [sp, #8]
 801a8ae:	4642      	mov	r2, r8
 801a8b0:	464b      	mov	r3, r9
 801a8b2:	4630      	mov	r0, r6
 801a8b4:	4639      	mov	r1, r7
 801a8b6:	f7fd fe17 	bl	80184e8 <__aeabi_ddiv>
 801a8ba:	f7fd ff9b 	bl	80187f4 <__aeabi_d2iz>
 801a8be:	9000      	str	r0, [sp, #0]
 801a8c0:	f7fd fc82 	bl	80181c8 <__aeabi_i2d>
 801a8c4:	4642      	mov	r2, r8
 801a8c6:	464b      	mov	r3, r9
 801a8c8:	f7fd fce4 	bl	8018294 <__aeabi_dmul>
 801a8cc:	4602      	mov	r2, r0
 801a8ce:	460b      	mov	r3, r1
 801a8d0:	4630      	mov	r0, r6
 801a8d2:	4639      	mov	r1, r7
 801a8d4:	f7fd fb2a 	bl	8017f2c <__aeabi_dsub>
 801a8d8:	9e00      	ldr	r6, [sp, #0]
 801a8da:	9f03      	ldr	r7, [sp, #12]
 801a8dc:	3630      	adds	r6, #48	; 0x30
 801a8de:	f805 6b01 	strb.w	r6, [r5], #1
 801a8e2:	9e02      	ldr	r6, [sp, #8]
 801a8e4:	1bae      	subs	r6, r5, r6
 801a8e6:	42b7      	cmp	r7, r6
 801a8e8:	4602      	mov	r2, r0
 801a8ea:	460b      	mov	r3, r1
 801a8ec:	d138      	bne.n	801a960 <_dtoa_r+0x6d0>
 801a8ee:	f7fd fb1f 	bl	8017f30 <__adddf3>
 801a8f2:	4606      	mov	r6, r0
 801a8f4:	460f      	mov	r7, r1
 801a8f6:	4602      	mov	r2, r0
 801a8f8:	460b      	mov	r3, r1
 801a8fa:	4640      	mov	r0, r8
 801a8fc:	4649      	mov	r1, r9
 801a8fe:	f7fd ff3b 	bl	8018778 <__aeabi_dcmplt>
 801a902:	b9c8      	cbnz	r0, 801a938 <_dtoa_r+0x6a8>
 801a904:	4632      	mov	r2, r6
 801a906:	463b      	mov	r3, r7
 801a908:	4640      	mov	r0, r8
 801a90a:	4649      	mov	r1, r9
 801a90c:	f7fd ff2a 	bl	8018764 <__aeabi_dcmpeq>
 801a910:	b110      	cbz	r0, 801a918 <_dtoa_r+0x688>
 801a912:	9b00      	ldr	r3, [sp, #0]
 801a914:	07db      	lsls	r3, r3, #31
 801a916:	d40f      	bmi.n	801a938 <_dtoa_r+0x6a8>
 801a918:	4651      	mov	r1, sl
 801a91a:	4620      	mov	r0, r4
 801a91c:	f000 fbf6 	bl	801b10c <_Bfree>
 801a920:	2300      	movs	r3, #0
 801a922:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a924:	702b      	strb	r3, [r5, #0]
 801a926:	f10b 0301 	add.w	r3, fp, #1
 801a92a:	6013      	str	r3, [r2, #0]
 801a92c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a92e:	2b00      	cmp	r3, #0
 801a930:	f43f acf8 	beq.w	801a324 <_dtoa_r+0x94>
 801a934:	601d      	str	r5, [r3, #0]
 801a936:	e4f5      	b.n	801a324 <_dtoa_r+0x94>
 801a938:	465f      	mov	r7, fp
 801a93a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a93e:	2a39      	cmp	r2, #57	; 0x39
 801a940:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801a944:	d106      	bne.n	801a954 <_dtoa_r+0x6c4>
 801a946:	9a02      	ldr	r2, [sp, #8]
 801a948:	429a      	cmp	r2, r3
 801a94a:	d107      	bne.n	801a95c <_dtoa_r+0x6cc>
 801a94c:	2330      	movs	r3, #48	; 0x30
 801a94e:	7013      	strb	r3, [r2, #0]
 801a950:	3701      	adds	r7, #1
 801a952:	4613      	mov	r3, r2
 801a954:	781a      	ldrb	r2, [r3, #0]
 801a956:	3201      	adds	r2, #1
 801a958:	701a      	strb	r2, [r3, #0]
 801a95a:	e78d      	b.n	801a878 <_dtoa_r+0x5e8>
 801a95c:	461d      	mov	r5, r3
 801a95e:	e7ec      	b.n	801a93a <_dtoa_r+0x6aa>
 801a960:	2200      	movs	r2, #0
 801a962:	4ba4      	ldr	r3, [pc, #656]	; (801abf4 <_dtoa_r+0x964>)
 801a964:	f7fd fc96 	bl	8018294 <__aeabi_dmul>
 801a968:	2200      	movs	r2, #0
 801a96a:	2300      	movs	r3, #0
 801a96c:	4606      	mov	r6, r0
 801a96e:	460f      	mov	r7, r1
 801a970:	f7fd fef8 	bl	8018764 <__aeabi_dcmpeq>
 801a974:	2800      	cmp	r0, #0
 801a976:	d09a      	beq.n	801a8ae <_dtoa_r+0x61e>
 801a978:	e7ce      	b.n	801a918 <_dtoa_r+0x688>
 801a97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a97c:	2a00      	cmp	r2, #0
 801a97e:	f000 80cd 	beq.w	801ab1c <_dtoa_r+0x88c>
 801a982:	9a07      	ldr	r2, [sp, #28]
 801a984:	2a01      	cmp	r2, #1
 801a986:	f300 80af 	bgt.w	801aae8 <_dtoa_r+0x858>
 801a98a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a98c:	2a00      	cmp	r2, #0
 801a98e:	f000 80a7 	beq.w	801aae0 <_dtoa_r+0x850>
 801a992:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a996:	9e08      	ldr	r6, [sp, #32]
 801a998:	9d05      	ldr	r5, [sp, #20]
 801a99a:	9a05      	ldr	r2, [sp, #20]
 801a99c:	441a      	add	r2, r3
 801a99e:	9205      	str	r2, [sp, #20]
 801a9a0:	9a06      	ldr	r2, [sp, #24]
 801a9a2:	2101      	movs	r1, #1
 801a9a4:	441a      	add	r2, r3
 801a9a6:	4620      	mov	r0, r4
 801a9a8:	9206      	str	r2, [sp, #24]
 801a9aa:	f000 fc8d 	bl	801b2c8 <__i2b>
 801a9ae:	4607      	mov	r7, r0
 801a9b0:	2d00      	cmp	r5, #0
 801a9b2:	dd0c      	ble.n	801a9ce <_dtoa_r+0x73e>
 801a9b4:	9b06      	ldr	r3, [sp, #24]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	dd09      	ble.n	801a9ce <_dtoa_r+0x73e>
 801a9ba:	42ab      	cmp	r3, r5
 801a9bc:	9a05      	ldr	r2, [sp, #20]
 801a9be:	bfa8      	it	ge
 801a9c0:	462b      	movge	r3, r5
 801a9c2:	1ad2      	subs	r2, r2, r3
 801a9c4:	9205      	str	r2, [sp, #20]
 801a9c6:	9a06      	ldr	r2, [sp, #24]
 801a9c8:	1aed      	subs	r5, r5, r3
 801a9ca:	1ad3      	subs	r3, r2, r3
 801a9cc:	9306      	str	r3, [sp, #24]
 801a9ce:	9b08      	ldr	r3, [sp, #32]
 801a9d0:	b1f3      	cbz	r3, 801aa10 <_dtoa_r+0x780>
 801a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	f000 80a5 	beq.w	801ab24 <_dtoa_r+0x894>
 801a9da:	2e00      	cmp	r6, #0
 801a9dc:	dd10      	ble.n	801aa00 <_dtoa_r+0x770>
 801a9de:	4639      	mov	r1, r7
 801a9e0:	4632      	mov	r2, r6
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	f000 fd06 	bl	801b3f4 <__pow5mult>
 801a9e8:	4652      	mov	r2, sl
 801a9ea:	4601      	mov	r1, r0
 801a9ec:	4607      	mov	r7, r0
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	f000 fc73 	bl	801b2da <__multiply>
 801a9f4:	4651      	mov	r1, sl
 801a9f6:	4680      	mov	r8, r0
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	f000 fb87 	bl	801b10c <_Bfree>
 801a9fe:	46c2      	mov	sl, r8
 801aa00:	9b08      	ldr	r3, [sp, #32]
 801aa02:	1b9a      	subs	r2, r3, r6
 801aa04:	d004      	beq.n	801aa10 <_dtoa_r+0x780>
 801aa06:	4651      	mov	r1, sl
 801aa08:	4620      	mov	r0, r4
 801aa0a:	f000 fcf3 	bl	801b3f4 <__pow5mult>
 801aa0e:	4682      	mov	sl, r0
 801aa10:	2101      	movs	r1, #1
 801aa12:	4620      	mov	r0, r4
 801aa14:	f000 fc58 	bl	801b2c8 <__i2b>
 801aa18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	4606      	mov	r6, r0
 801aa1e:	f340 8083 	ble.w	801ab28 <_dtoa_r+0x898>
 801aa22:	461a      	mov	r2, r3
 801aa24:	4601      	mov	r1, r0
 801aa26:	4620      	mov	r0, r4
 801aa28:	f000 fce4 	bl	801b3f4 <__pow5mult>
 801aa2c:	9b07      	ldr	r3, [sp, #28]
 801aa2e:	2b01      	cmp	r3, #1
 801aa30:	4606      	mov	r6, r0
 801aa32:	dd7c      	ble.n	801ab2e <_dtoa_r+0x89e>
 801aa34:	f04f 0800 	mov.w	r8, #0
 801aa38:	6933      	ldr	r3, [r6, #16]
 801aa3a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801aa3e:	6918      	ldr	r0, [r3, #16]
 801aa40:	f000 fbf4 	bl	801b22c <__hi0bits>
 801aa44:	f1c0 0020 	rsb	r0, r0, #32
 801aa48:	9b06      	ldr	r3, [sp, #24]
 801aa4a:	4418      	add	r0, r3
 801aa4c:	f010 001f 	ands.w	r0, r0, #31
 801aa50:	f000 8096 	beq.w	801ab80 <_dtoa_r+0x8f0>
 801aa54:	f1c0 0320 	rsb	r3, r0, #32
 801aa58:	2b04      	cmp	r3, #4
 801aa5a:	f340 8087 	ble.w	801ab6c <_dtoa_r+0x8dc>
 801aa5e:	9b05      	ldr	r3, [sp, #20]
 801aa60:	f1c0 001c 	rsb	r0, r0, #28
 801aa64:	4403      	add	r3, r0
 801aa66:	9305      	str	r3, [sp, #20]
 801aa68:	9b06      	ldr	r3, [sp, #24]
 801aa6a:	4405      	add	r5, r0
 801aa6c:	4403      	add	r3, r0
 801aa6e:	9306      	str	r3, [sp, #24]
 801aa70:	9b05      	ldr	r3, [sp, #20]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	dd05      	ble.n	801aa82 <_dtoa_r+0x7f2>
 801aa76:	4651      	mov	r1, sl
 801aa78:	461a      	mov	r2, r3
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	f000 fd08 	bl	801b490 <__lshift>
 801aa80:	4682      	mov	sl, r0
 801aa82:	9b06      	ldr	r3, [sp, #24]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	dd05      	ble.n	801aa94 <_dtoa_r+0x804>
 801aa88:	4631      	mov	r1, r6
 801aa8a:	461a      	mov	r2, r3
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	f000 fcff 	bl	801b490 <__lshift>
 801aa92:	4606      	mov	r6, r0
 801aa94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d074      	beq.n	801ab84 <_dtoa_r+0x8f4>
 801aa9a:	4631      	mov	r1, r6
 801aa9c:	4650      	mov	r0, sl
 801aa9e:	f000 fd48 	bl	801b532 <__mcmp>
 801aaa2:	2800      	cmp	r0, #0
 801aaa4:	da6e      	bge.n	801ab84 <_dtoa_r+0x8f4>
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	4651      	mov	r1, sl
 801aaaa:	220a      	movs	r2, #10
 801aaac:	4620      	mov	r0, r4
 801aaae:	f000 fb44 	bl	801b13a <__multadd>
 801aab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aab4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801aab8:	4682      	mov	sl, r0
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f000 81a8 	beq.w	801ae10 <_dtoa_r+0xb80>
 801aac0:	2300      	movs	r3, #0
 801aac2:	4639      	mov	r1, r7
 801aac4:	220a      	movs	r2, #10
 801aac6:	4620      	mov	r0, r4
 801aac8:	f000 fb37 	bl	801b13a <__multadd>
 801aacc:	9b04      	ldr	r3, [sp, #16]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	4607      	mov	r7, r0
 801aad2:	f300 80c8 	bgt.w	801ac66 <_dtoa_r+0x9d6>
 801aad6:	9b07      	ldr	r3, [sp, #28]
 801aad8:	2b02      	cmp	r3, #2
 801aada:	f340 80c4 	ble.w	801ac66 <_dtoa_r+0x9d6>
 801aade:	e059      	b.n	801ab94 <_dtoa_r+0x904>
 801aae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aae2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aae6:	e756      	b.n	801a996 <_dtoa_r+0x706>
 801aae8:	9b03      	ldr	r3, [sp, #12]
 801aaea:	1e5e      	subs	r6, r3, #1
 801aaec:	9b08      	ldr	r3, [sp, #32]
 801aaee:	42b3      	cmp	r3, r6
 801aaf0:	bfbf      	itttt	lt
 801aaf2:	9b08      	ldrlt	r3, [sp, #32]
 801aaf4:	9608      	strlt	r6, [sp, #32]
 801aaf6:	1af2      	sublt	r2, r6, r3
 801aaf8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801aafa:	bfb6      	itet	lt
 801aafc:	189b      	addlt	r3, r3, r2
 801aafe:	1b9e      	subge	r6, r3, r6
 801ab00:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801ab02:	9b03      	ldr	r3, [sp, #12]
 801ab04:	bfb8      	it	lt
 801ab06:	2600      	movlt	r6, #0
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	bfb9      	ittee	lt
 801ab0c:	9b05      	ldrlt	r3, [sp, #20]
 801ab0e:	9a03      	ldrlt	r2, [sp, #12]
 801ab10:	9d05      	ldrge	r5, [sp, #20]
 801ab12:	9b03      	ldrge	r3, [sp, #12]
 801ab14:	bfbc      	itt	lt
 801ab16:	1a9d      	sublt	r5, r3, r2
 801ab18:	2300      	movlt	r3, #0
 801ab1a:	e73e      	b.n	801a99a <_dtoa_r+0x70a>
 801ab1c:	9e08      	ldr	r6, [sp, #32]
 801ab1e:	9d05      	ldr	r5, [sp, #20]
 801ab20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ab22:	e745      	b.n	801a9b0 <_dtoa_r+0x720>
 801ab24:	9a08      	ldr	r2, [sp, #32]
 801ab26:	e76e      	b.n	801aa06 <_dtoa_r+0x776>
 801ab28:	9b07      	ldr	r3, [sp, #28]
 801ab2a:	2b01      	cmp	r3, #1
 801ab2c:	dc19      	bgt.n	801ab62 <_dtoa_r+0x8d2>
 801ab2e:	9b00      	ldr	r3, [sp, #0]
 801ab30:	b9bb      	cbnz	r3, 801ab62 <_dtoa_r+0x8d2>
 801ab32:	9b01      	ldr	r3, [sp, #4]
 801ab34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ab38:	b99b      	cbnz	r3, 801ab62 <_dtoa_r+0x8d2>
 801ab3a:	9b01      	ldr	r3, [sp, #4]
 801ab3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ab40:	0d1b      	lsrs	r3, r3, #20
 801ab42:	051b      	lsls	r3, r3, #20
 801ab44:	b183      	cbz	r3, 801ab68 <_dtoa_r+0x8d8>
 801ab46:	9b05      	ldr	r3, [sp, #20]
 801ab48:	3301      	adds	r3, #1
 801ab4a:	9305      	str	r3, [sp, #20]
 801ab4c:	9b06      	ldr	r3, [sp, #24]
 801ab4e:	3301      	adds	r3, #1
 801ab50:	9306      	str	r3, [sp, #24]
 801ab52:	f04f 0801 	mov.w	r8, #1
 801ab56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	f47f af6d 	bne.w	801aa38 <_dtoa_r+0x7a8>
 801ab5e:	2001      	movs	r0, #1
 801ab60:	e772      	b.n	801aa48 <_dtoa_r+0x7b8>
 801ab62:	f04f 0800 	mov.w	r8, #0
 801ab66:	e7f6      	b.n	801ab56 <_dtoa_r+0x8c6>
 801ab68:	4698      	mov	r8, r3
 801ab6a:	e7f4      	b.n	801ab56 <_dtoa_r+0x8c6>
 801ab6c:	d080      	beq.n	801aa70 <_dtoa_r+0x7e0>
 801ab6e:	9a05      	ldr	r2, [sp, #20]
 801ab70:	331c      	adds	r3, #28
 801ab72:	441a      	add	r2, r3
 801ab74:	9205      	str	r2, [sp, #20]
 801ab76:	9a06      	ldr	r2, [sp, #24]
 801ab78:	441a      	add	r2, r3
 801ab7a:	441d      	add	r5, r3
 801ab7c:	4613      	mov	r3, r2
 801ab7e:	e776      	b.n	801aa6e <_dtoa_r+0x7de>
 801ab80:	4603      	mov	r3, r0
 801ab82:	e7f4      	b.n	801ab6e <_dtoa_r+0x8de>
 801ab84:	9b03      	ldr	r3, [sp, #12]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	dc36      	bgt.n	801abf8 <_dtoa_r+0x968>
 801ab8a:	9b07      	ldr	r3, [sp, #28]
 801ab8c:	2b02      	cmp	r3, #2
 801ab8e:	dd33      	ble.n	801abf8 <_dtoa_r+0x968>
 801ab90:	9b03      	ldr	r3, [sp, #12]
 801ab92:	9304      	str	r3, [sp, #16]
 801ab94:	9b04      	ldr	r3, [sp, #16]
 801ab96:	b963      	cbnz	r3, 801abb2 <_dtoa_r+0x922>
 801ab98:	4631      	mov	r1, r6
 801ab9a:	2205      	movs	r2, #5
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	f000 facc 	bl	801b13a <__multadd>
 801aba2:	4601      	mov	r1, r0
 801aba4:	4606      	mov	r6, r0
 801aba6:	4650      	mov	r0, sl
 801aba8:	f000 fcc3 	bl	801b532 <__mcmp>
 801abac:	2800      	cmp	r0, #0
 801abae:	f73f adb6 	bgt.w	801a71e <_dtoa_r+0x48e>
 801abb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abb4:	9d02      	ldr	r5, [sp, #8]
 801abb6:	ea6f 0b03 	mvn.w	fp, r3
 801abba:	2300      	movs	r3, #0
 801abbc:	9303      	str	r3, [sp, #12]
 801abbe:	4631      	mov	r1, r6
 801abc0:	4620      	mov	r0, r4
 801abc2:	f000 faa3 	bl	801b10c <_Bfree>
 801abc6:	2f00      	cmp	r7, #0
 801abc8:	f43f aea6 	beq.w	801a918 <_dtoa_r+0x688>
 801abcc:	9b03      	ldr	r3, [sp, #12]
 801abce:	b12b      	cbz	r3, 801abdc <_dtoa_r+0x94c>
 801abd0:	42bb      	cmp	r3, r7
 801abd2:	d003      	beq.n	801abdc <_dtoa_r+0x94c>
 801abd4:	4619      	mov	r1, r3
 801abd6:	4620      	mov	r0, r4
 801abd8:	f000 fa98 	bl	801b10c <_Bfree>
 801abdc:	4639      	mov	r1, r7
 801abde:	4620      	mov	r0, r4
 801abe0:	f000 fa94 	bl	801b10c <_Bfree>
 801abe4:	e698      	b.n	801a918 <_dtoa_r+0x688>
 801abe6:	2600      	movs	r6, #0
 801abe8:	4637      	mov	r7, r6
 801abea:	e7e2      	b.n	801abb2 <_dtoa_r+0x922>
 801abec:	46bb      	mov	fp, r7
 801abee:	4637      	mov	r7, r6
 801abf0:	e595      	b.n	801a71e <_dtoa_r+0x48e>
 801abf2:	bf00      	nop
 801abf4:	40240000 	.word	0x40240000
 801abf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abfa:	bb93      	cbnz	r3, 801ac62 <_dtoa_r+0x9d2>
 801abfc:	9b03      	ldr	r3, [sp, #12]
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	9d02      	ldr	r5, [sp, #8]
 801ac02:	4631      	mov	r1, r6
 801ac04:	4650      	mov	r0, sl
 801ac06:	f7ff fab7 	bl	801a178 <quorem>
 801ac0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ac0e:	f805 9b01 	strb.w	r9, [r5], #1
 801ac12:	9b02      	ldr	r3, [sp, #8]
 801ac14:	9a04      	ldr	r2, [sp, #16]
 801ac16:	1aeb      	subs	r3, r5, r3
 801ac18:	429a      	cmp	r2, r3
 801ac1a:	f300 80dc 	bgt.w	801add6 <_dtoa_r+0xb46>
 801ac1e:	9b02      	ldr	r3, [sp, #8]
 801ac20:	2a01      	cmp	r2, #1
 801ac22:	bfac      	ite	ge
 801ac24:	189b      	addge	r3, r3, r2
 801ac26:	3301      	addlt	r3, #1
 801ac28:	4698      	mov	r8, r3
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	9303      	str	r3, [sp, #12]
 801ac2e:	4651      	mov	r1, sl
 801ac30:	2201      	movs	r2, #1
 801ac32:	4620      	mov	r0, r4
 801ac34:	f000 fc2c 	bl	801b490 <__lshift>
 801ac38:	4631      	mov	r1, r6
 801ac3a:	4682      	mov	sl, r0
 801ac3c:	f000 fc79 	bl	801b532 <__mcmp>
 801ac40:	2800      	cmp	r0, #0
 801ac42:	f300 808d 	bgt.w	801ad60 <_dtoa_r+0xad0>
 801ac46:	d103      	bne.n	801ac50 <_dtoa_r+0x9c0>
 801ac48:	f019 0f01 	tst.w	r9, #1
 801ac4c:	f040 8088 	bne.w	801ad60 <_dtoa_r+0xad0>
 801ac50:	4645      	mov	r5, r8
 801ac52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac56:	2b30      	cmp	r3, #48	; 0x30
 801ac58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801ac5c:	d1af      	bne.n	801abbe <_dtoa_r+0x92e>
 801ac5e:	4615      	mov	r5, r2
 801ac60:	e7f7      	b.n	801ac52 <_dtoa_r+0x9c2>
 801ac62:	9b03      	ldr	r3, [sp, #12]
 801ac64:	9304      	str	r3, [sp, #16]
 801ac66:	2d00      	cmp	r5, #0
 801ac68:	dd05      	ble.n	801ac76 <_dtoa_r+0x9e6>
 801ac6a:	4639      	mov	r1, r7
 801ac6c:	462a      	mov	r2, r5
 801ac6e:	4620      	mov	r0, r4
 801ac70:	f000 fc0e 	bl	801b490 <__lshift>
 801ac74:	4607      	mov	r7, r0
 801ac76:	f1b8 0f00 	cmp.w	r8, #0
 801ac7a:	d04c      	beq.n	801ad16 <_dtoa_r+0xa86>
 801ac7c:	6879      	ldr	r1, [r7, #4]
 801ac7e:	4620      	mov	r0, r4
 801ac80:	f000 fa10 	bl	801b0a4 <_Balloc>
 801ac84:	693a      	ldr	r2, [r7, #16]
 801ac86:	3202      	adds	r2, #2
 801ac88:	4605      	mov	r5, r0
 801ac8a:	0092      	lsls	r2, r2, #2
 801ac8c:	f107 010c 	add.w	r1, r7, #12
 801ac90:	300c      	adds	r0, #12
 801ac92:	f7fe fa21 	bl	80190d8 <memcpy>
 801ac96:	2201      	movs	r2, #1
 801ac98:	4629      	mov	r1, r5
 801ac9a:	4620      	mov	r0, r4
 801ac9c:	f000 fbf8 	bl	801b490 <__lshift>
 801aca0:	9b00      	ldr	r3, [sp, #0]
 801aca2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801aca6:	9703      	str	r7, [sp, #12]
 801aca8:	f003 0301 	and.w	r3, r3, #1
 801acac:	4607      	mov	r7, r0
 801acae:	9305      	str	r3, [sp, #20]
 801acb0:	4631      	mov	r1, r6
 801acb2:	4650      	mov	r0, sl
 801acb4:	f7ff fa60 	bl	801a178 <quorem>
 801acb8:	9903      	ldr	r1, [sp, #12]
 801acba:	4605      	mov	r5, r0
 801acbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801acc0:	4650      	mov	r0, sl
 801acc2:	f000 fc36 	bl	801b532 <__mcmp>
 801acc6:	463a      	mov	r2, r7
 801acc8:	9000      	str	r0, [sp, #0]
 801acca:	4631      	mov	r1, r6
 801accc:	4620      	mov	r0, r4
 801acce:	f000 fc4a 	bl	801b566 <__mdiff>
 801acd2:	68c3      	ldr	r3, [r0, #12]
 801acd4:	4602      	mov	r2, r0
 801acd6:	bb03      	cbnz	r3, 801ad1a <_dtoa_r+0xa8a>
 801acd8:	4601      	mov	r1, r0
 801acda:	9006      	str	r0, [sp, #24]
 801acdc:	4650      	mov	r0, sl
 801acde:	f000 fc28 	bl	801b532 <__mcmp>
 801ace2:	9a06      	ldr	r2, [sp, #24]
 801ace4:	4603      	mov	r3, r0
 801ace6:	4611      	mov	r1, r2
 801ace8:	4620      	mov	r0, r4
 801acea:	9306      	str	r3, [sp, #24]
 801acec:	f000 fa0e 	bl	801b10c <_Bfree>
 801acf0:	9b06      	ldr	r3, [sp, #24]
 801acf2:	b9a3      	cbnz	r3, 801ad1e <_dtoa_r+0xa8e>
 801acf4:	9a07      	ldr	r2, [sp, #28]
 801acf6:	b992      	cbnz	r2, 801ad1e <_dtoa_r+0xa8e>
 801acf8:	9a05      	ldr	r2, [sp, #20]
 801acfa:	b982      	cbnz	r2, 801ad1e <_dtoa_r+0xa8e>
 801acfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ad00:	d029      	beq.n	801ad56 <_dtoa_r+0xac6>
 801ad02:	9b00      	ldr	r3, [sp, #0]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	dd01      	ble.n	801ad0c <_dtoa_r+0xa7c>
 801ad08:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801ad0c:	f108 0501 	add.w	r5, r8, #1
 801ad10:	f888 9000 	strb.w	r9, [r8]
 801ad14:	e753      	b.n	801abbe <_dtoa_r+0x92e>
 801ad16:	4638      	mov	r0, r7
 801ad18:	e7c2      	b.n	801aca0 <_dtoa_r+0xa10>
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	e7e3      	b.n	801ace6 <_dtoa_r+0xa56>
 801ad1e:	9a00      	ldr	r2, [sp, #0]
 801ad20:	2a00      	cmp	r2, #0
 801ad22:	db04      	blt.n	801ad2e <_dtoa_r+0xa9e>
 801ad24:	d125      	bne.n	801ad72 <_dtoa_r+0xae2>
 801ad26:	9a07      	ldr	r2, [sp, #28]
 801ad28:	bb1a      	cbnz	r2, 801ad72 <_dtoa_r+0xae2>
 801ad2a:	9a05      	ldr	r2, [sp, #20]
 801ad2c:	bb0a      	cbnz	r2, 801ad72 <_dtoa_r+0xae2>
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	ddec      	ble.n	801ad0c <_dtoa_r+0xa7c>
 801ad32:	4651      	mov	r1, sl
 801ad34:	2201      	movs	r2, #1
 801ad36:	4620      	mov	r0, r4
 801ad38:	f000 fbaa 	bl	801b490 <__lshift>
 801ad3c:	4631      	mov	r1, r6
 801ad3e:	4682      	mov	sl, r0
 801ad40:	f000 fbf7 	bl	801b532 <__mcmp>
 801ad44:	2800      	cmp	r0, #0
 801ad46:	dc03      	bgt.n	801ad50 <_dtoa_r+0xac0>
 801ad48:	d1e0      	bne.n	801ad0c <_dtoa_r+0xa7c>
 801ad4a:	f019 0f01 	tst.w	r9, #1
 801ad4e:	d0dd      	beq.n	801ad0c <_dtoa_r+0xa7c>
 801ad50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ad54:	d1d8      	bne.n	801ad08 <_dtoa_r+0xa78>
 801ad56:	2339      	movs	r3, #57	; 0x39
 801ad58:	f888 3000 	strb.w	r3, [r8]
 801ad5c:	f108 0801 	add.w	r8, r8, #1
 801ad60:	4645      	mov	r5, r8
 801ad62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ad66:	2b39      	cmp	r3, #57	; 0x39
 801ad68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801ad6c:	d03b      	beq.n	801ade6 <_dtoa_r+0xb56>
 801ad6e:	3301      	adds	r3, #1
 801ad70:	e040      	b.n	801adf4 <_dtoa_r+0xb64>
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	f108 0501 	add.w	r5, r8, #1
 801ad78:	dd05      	ble.n	801ad86 <_dtoa_r+0xaf6>
 801ad7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ad7e:	d0ea      	beq.n	801ad56 <_dtoa_r+0xac6>
 801ad80:	f109 0901 	add.w	r9, r9, #1
 801ad84:	e7c4      	b.n	801ad10 <_dtoa_r+0xa80>
 801ad86:	9b02      	ldr	r3, [sp, #8]
 801ad88:	9a04      	ldr	r2, [sp, #16]
 801ad8a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801ad8e:	1aeb      	subs	r3, r5, r3
 801ad90:	4293      	cmp	r3, r2
 801ad92:	46a8      	mov	r8, r5
 801ad94:	f43f af4b 	beq.w	801ac2e <_dtoa_r+0x99e>
 801ad98:	4651      	mov	r1, sl
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	220a      	movs	r2, #10
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f000 f9cb 	bl	801b13a <__multadd>
 801ada4:	9b03      	ldr	r3, [sp, #12]
 801ada6:	9903      	ldr	r1, [sp, #12]
 801ada8:	42bb      	cmp	r3, r7
 801adaa:	4682      	mov	sl, r0
 801adac:	f04f 0300 	mov.w	r3, #0
 801adb0:	f04f 020a 	mov.w	r2, #10
 801adb4:	4620      	mov	r0, r4
 801adb6:	d104      	bne.n	801adc2 <_dtoa_r+0xb32>
 801adb8:	f000 f9bf 	bl	801b13a <__multadd>
 801adbc:	9003      	str	r0, [sp, #12]
 801adbe:	4607      	mov	r7, r0
 801adc0:	e776      	b.n	801acb0 <_dtoa_r+0xa20>
 801adc2:	f000 f9ba 	bl	801b13a <__multadd>
 801adc6:	2300      	movs	r3, #0
 801adc8:	9003      	str	r0, [sp, #12]
 801adca:	220a      	movs	r2, #10
 801adcc:	4639      	mov	r1, r7
 801adce:	4620      	mov	r0, r4
 801add0:	f000 f9b3 	bl	801b13a <__multadd>
 801add4:	e7f3      	b.n	801adbe <_dtoa_r+0xb2e>
 801add6:	4651      	mov	r1, sl
 801add8:	2300      	movs	r3, #0
 801adda:	220a      	movs	r2, #10
 801addc:	4620      	mov	r0, r4
 801adde:	f000 f9ac 	bl	801b13a <__multadd>
 801ade2:	4682      	mov	sl, r0
 801ade4:	e70d      	b.n	801ac02 <_dtoa_r+0x972>
 801ade6:	9b02      	ldr	r3, [sp, #8]
 801ade8:	4293      	cmp	r3, r2
 801adea:	d105      	bne.n	801adf8 <_dtoa_r+0xb68>
 801adec:	9a02      	ldr	r2, [sp, #8]
 801adee:	f10b 0b01 	add.w	fp, fp, #1
 801adf2:	2331      	movs	r3, #49	; 0x31
 801adf4:	7013      	strb	r3, [r2, #0]
 801adf6:	e6e2      	b.n	801abbe <_dtoa_r+0x92e>
 801adf8:	4615      	mov	r5, r2
 801adfa:	e7b2      	b.n	801ad62 <_dtoa_r+0xad2>
 801adfc:	4b09      	ldr	r3, [pc, #36]	; (801ae24 <_dtoa_r+0xb94>)
 801adfe:	f7ff baae 	b.w	801a35e <_dtoa_r+0xce>
 801ae02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	f47f aa88 	bne.w	801a31a <_dtoa_r+0x8a>
 801ae0a:	4b07      	ldr	r3, [pc, #28]	; (801ae28 <_dtoa_r+0xb98>)
 801ae0c:	f7ff baa7 	b.w	801a35e <_dtoa_r+0xce>
 801ae10:	9b04      	ldr	r3, [sp, #16]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f73f aef4 	bgt.w	801ac00 <_dtoa_r+0x970>
 801ae18:	9b07      	ldr	r3, [sp, #28]
 801ae1a:	2b02      	cmp	r3, #2
 801ae1c:	f77f aef0 	ble.w	801ac00 <_dtoa_r+0x970>
 801ae20:	e6b8      	b.n	801ab94 <_dtoa_r+0x904>
 801ae22:	bf00      	nop
 801ae24:	0801cf86 	.word	0x0801cf86
 801ae28:	0801cfa8 	.word	0x0801cfa8

0801ae2c <_malloc_trim_r>:
 801ae2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae30:	4f25      	ldr	r7, [pc, #148]	; (801aec8 <_malloc_trim_r+0x9c>)
 801ae32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801aed4 <_malloc_trim_r+0xa8>
 801ae36:	4689      	mov	r9, r1
 801ae38:	4606      	mov	r6, r0
 801ae3a:	f7fe f961 	bl	8019100 <__malloc_lock>
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	685d      	ldr	r5, [r3, #4]
 801ae42:	f1a8 0411 	sub.w	r4, r8, #17
 801ae46:	f025 0503 	bic.w	r5, r5, #3
 801ae4a:	eba4 0409 	sub.w	r4, r4, r9
 801ae4e:	442c      	add	r4, r5
 801ae50:	fbb4 f4f8 	udiv	r4, r4, r8
 801ae54:	3c01      	subs	r4, #1
 801ae56:	fb08 f404 	mul.w	r4, r8, r4
 801ae5a:	4544      	cmp	r4, r8
 801ae5c:	da05      	bge.n	801ae6a <_malloc_trim_r+0x3e>
 801ae5e:	4630      	mov	r0, r6
 801ae60:	f7fe f954 	bl	801910c <__malloc_unlock>
 801ae64:	2000      	movs	r0, #0
 801ae66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae6a:	2100      	movs	r1, #0
 801ae6c:	4630      	mov	r0, r6
 801ae6e:	f7fe f953 	bl	8019118 <_sbrk_r>
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	442b      	add	r3, r5
 801ae76:	4298      	cmp	r0, r3
 801ae78:	d1f1      	bne.n	801ae5e <_malloc_trim_r+0x32>
 801ae7a:	4261      	negs	r1, r4
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	f7fe f94b 	bl	8019118 <_sbrk_r>
 801ae82:	3001      	adds	r0, #1
 801ae84:	d110      	bne.n	801aea8 <_malloc_trim_r+0x7c>
 801ae86:	2100      	movs	r1, #0
 801ae88:	4630      	mov	r0, r6
 801ae8a:	f7fe f945 	bl	8019118 <_sbrk_r>
 801ae8e:	68ba      	ldr	r2, [r7, #8]
 801ae90:	1a83      	subs	r3, r0, r2
 801ae92:	2b0f      	cmp	r3, #15
 801ae94:	dde3      	ble.n	801ae5e <_malloc_trim_r+0x32>
 801ae96:	490d      	ldr	r1, [pc, #52]	; (801aecc <_malloc_trim_r+0xa0>)
 801ae98:	6809      	ldr	r1, [r1, #0]
 801ae9a:	1a40      	subs	r0, r0, r1
 801ae9c:	490c      	ldr	r1, [pc, #48]	; (801aed0 <_malloc_trim_r+0xa4>)
 801ae9e:	f043 0301 	orr.w	r3, r3, #1
 801aea2:	6008      	str	r0, [r1, #0]
 801aea4:	6053      	str	r3, [r2, #4]
 801aea6:	e7da      	b.n	801ae5e <_malloc_trim_r+0x32>
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	4a09      	ldr	r2, [pc, #36]	; (801aed0 <_malloc_trim_r+0xa4>)
 801aeac:	1b2d      	subs	r5, r5, r4
 801aeae:	f045 0501 	orr.w	r5, r5, #1
 801aeb2:	605d      	str	r5, [r3, #4]
 801aeb4:	6813      	ldr	r3, [r2, #0]
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	1b1c      	subs	r4, r3, r4
 801aeba:	6014      	str	r4, [r2, #0]
 801aebc:	f7fe f926 	bl	801910c <__malloc_unlock>
 801aec0:	2001      	movs	r0, #1
 801aec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aec6:	bf00      	nop
 801aec8:	2000027c 	.word	0x2000027c
 801aecc:	20000684 	.word	0x20000684
 801aed0:	20005b40 	.word	0x20005b40
 801aed4:	00000080 	.word	0x00000080

0801aed8 <_free_r>:
 801aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aedc:	4604      	mov	r4, r0
 801aede:	4688      	mov	r8, r1
 801aee0:	2900      	cmp	r1, #0
 801aee2:	f000 80ab 	beq.w	801b03c <_free_r+0x164>
 801aee6:	f7fe f90b 	bl	8019100 <__malloc_lock>
 801aeea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801aeee:	4d54      	ldr	r5, [pc, #336]	; (801b040 <_free_r+0x168>)
 801aef0:	f022 0001 	bic.w	r0, r2, #1
 801aef4:	f1a8 0308 	sub.w	r3, r8, #8
 801aef8:	181f      	adds	r7, r3, r0
 801aefa:	68a9      	ldr	r1, [r5, #8]
 801aefc:	687e      	ldr	r6, [r7, #4]
 801aefe:	428f      	cmp	r7, r1
 801af00:	f026 0603 	bic.w	r6, r6, #3
 801af04:	f002 0201 	and.w	r2, r2, #1
 801af08:	d11b      	bne.n	801af42 <_free_r+0x6a>
 801af0a:	4430      	add	r0, r6
 801af0c:	b93a      	cbnz	r2, 801af1e <_free_r+0x46>
 801af0e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801af12:	1a9b      	subs	r3, r3, r2
 801af14:	4410      	add	r0, r2
 801af16:	6899      	ldr	r1, [r3, #8]
 801af18:	68da      	ldr	r2, [r3, #12]
 801af1a:	60ca      	str	r2, [r1, #12]
 801af1c:	6091      	str	r1, [r2, #8]
 801af1e:	f040 0201 	orr.w	r2, r0, #1
 801af22:	605a      	str	r2, [r3, #4]
 801af24:	60ab      	str	r3, [r5, #8]
 801af26:	4b47      	ldr	r3, [pc, #284]	; (801b044 <_free_r+0x16c>)
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	4298      	cmp	r0, r3
 801af2c:	d304      	bcc.n	801af38 <_free_r+0x60>
 801af2e:	4b46      	ldr	r3, [pc, #280]	; (801b048 <_free_r+0x170>)
 801af30:	4620      	mov	r0, r4
 801af32:	6819      	ldr	r1, [r3, #0]
 801af34:	f7ff ff7a 	bl	801ae2c <_malloc_trim_r>
 801af38:	4620      	mov	r0, r4
 801af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af3e:	f7fe b8e5 	b.w	801910c <__malloc_unlock>
 801af42:	607e      	str	r6, [r7, #4]
 801af44:	2a00      	cmp	r2, #0
 801af46:	d139      	bne.n	801afbc <_free_r+0xe4>
 801af48:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801af4c:	1a5b      	subs	r3, r3, r1
 801af4e:	4408      	add	r0, r1
 801af50:	6899      	ldr	r1, [r3, #8]
 801af52:	f105 0e08 	add.w	lr, r5, #8
 801af56:	4571      	cmp	r1, lr
 801af58:	d032      	beq.n	801afc0 <_free_r+0xe8>
 801af5a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801af5e:	f8c1 e00c 	str.w	lr, [r1, #12]
 801af62:	f8ce 1008 	str.w	r1, [lr, #8]
 801af66:	19b9      	adds	r1, r7, r6
 801af68:	6849      	ldr	r1, [r1, #4]
 801af6a:	07c9      	lsls	r1, r1, #31
 801af6c:	d40a      	bmi.n	801af84 <_free_r+0xac>
 801af6e:	4430      	add	r0, r6
 801af70:	68b9      	ldr	r1, [r7, #8]
 801af72:	bb3a      	cbnz	r2, 801afc4 <_free_r+0xec>
 801af74:	4e35      	ldr	r6, [pc, #212]	; (801b04c <_free_r+0x174>)
 801af76:	42b1      	cmp	r1, r6
 801af78:	d124      	bne.n	801afc4 <_free_r+0xec>
 801af7a:	616b      	str	r3, [r5, #20]
 801af7c:	612b      	str	r3, [r5, #16]
 801af7e:	2201      	movs	r2, #1
 801af80:	60d9      	str	r1, [r3, #12]
 801af82:	6099      	str	r1, [r3, #8]
 801af84:	f040 0101 	orr.w	r1, r0, #1
 801af88:	6059      	str	r1, [r3, #4]
 801af8a:	5018      	str	r0, [r3, r0]
 801af8c:	2a00      	cmp	r2, #0
 801af8e:	d1d3      	bne.n	801af38 <_free_r+0x60>
 801af90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801af94:	d21a      	bcs.n	801afcc <_free_r+0xf4>
 801af96:	08c0      	lsrs	r0, r0, #3
 801af98:	1081      	asrs	r1, r0, #2
 801af9a:	2201      	movs	r2, #1
 801af9c:	408a      	lsls	r2, r1
 801af9e:	6869      	ldr	r1, [r5, #4]
 801afa0:	3001      	adds	r0, #1
 801afa2:	430a      	orrs	r2, r1
 801afa4:	606a      	str	r2, [r5, #4]
 801afa6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801afaa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801afae:	6099      	str	r1, [r3, #8]
 801afb0:	3a08      	subs	r2, #8
 801afb2:	60da      	str	r2, [r3, #12]
 801afb4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801afb8:	60cb      	str	r3, [r1, #12]
 801afba:	e7bd      	b.n	801af38 <_free_r+0x60>
 801afbc:	2200      	movs	r2, #0
 801afbe:	e7d2      	b.n	801af66 <_free_r+0x8e>
 801afc0:	2201      	movs	r2, #1
 801afc2:	e7d0      	b.n	801af66 <_free_r+0x8e>
 801afc4:	68fe      	ldr	r6, [r7, #12]
 801afc6:	60ce      	str	r6, [r1, #12]
 801afc8:	60b1      	str	r1, [r6, #8]
 801afca:	e7db      	b.n	801af84 <_free_r+0xac>
 801afcc:	0a42      	lsrs	r2, r0, #9
 801afce:	2a04      	cmp	r2, #4
 801afd0:	d813      	bhi.n	801affa <_free_r+0x122>
 801afd2:	0982      	lsrs	r2, r0, #6
 801afd4:	3238      	adds	r2, #56	; 0x38
 801afd6:	1c51      	adds	r1, r2, #1
 801afd8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801afdc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801afe0:	428e      	cmp	r6, r1
 801afe2:	d124      	bne.n	801b02e <_free_r+0x156>
 801afe4:	2001      	movs	r0, #1
 801afe6:	1092      	asrs	r2, r2, #2
 801afe8:	fa00 f202 	lsl.w	r2, r0, r2
 801afec:	6868      	ldr	r0, [r5, #4]
 801afee:	4302      	orrs	r2, r0
 801aff0:	606a      	str	r2, [r5, #4]
 801aff2:	60de      	str	r6, [r3, #12]
 801aff4:	6099      	str	r1, [r3, #8]
 801aff6:	60b3      	str	r3, [r6, #8]
 801aff8:	e7de      	b.n	801afb8 <_free_r+0xe0>
 801affa:	2a14      	cmp	r2, #20
 801affc:	d801      	bhi.n	801b002 <_free_r+0x12a>
 801affe:	325b      	adds	r2, #91	; 0x5b
 801b000:	e7e9      	b.n	801afd6 <_free_r+0xfe>
 801b002:	2a54      	cmp	r2, #84	; 0x54
 801b004:	d802      	bhi.n	801b00c <_free_r+0x134>
 801b006:	0b02      	lsrs	r2, r0, #12
 801b008:	326e      	adds	r2, #110	; 0x6e
 801b00a:	e7e4      	b.n	801afd6 <_free_r+0xfe>
 801b00c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801b010:	d802      	bhi.n	801b018 <_free_r+0x140>
 801b012:	0bc2      	lsrs	r2, r0, #15
 801b014:	3277      	adds	r2, #119	; 0x77
 801b016:	e7de      	b.n	801afd6 <_free_r+0xfe>
 801b018:	f240 5154 	movw	r1, #1364	; 0x554
 801b01c:	428a      	cmp	r2, r1
 801b01e:	bf9a      	itte	ls
 801b020:	0c82      	lsrls	r2, r0, #18
 801b022:	327c      	addls	r2, #124	; 0x7c
 801b024:	227e      	movhi	r2, #126	; 0x7e
 801b026:	e7d6      	b.n	801afd6 <_free_r+0xfe>
 801b028:	6889      	ldr	r1, [r1, #8]
 801b02a:	428e      	cmp	r6, r1
 801b02c:	d004      	beq.n	801b038 <_free_r+0x160>
 801b02e:	684a      	ldr	r2, [r1, #4]
 801b030:	f022 0203 	bic.w	r2, r2, #3
 801b034:	4290      	cmp	r0, r2
 801b036:	d3f7      	bcc.n	801b028 <_free_r+0x150>
 801b038:	68ce      	ldr	r6, [r1, #12]
 801b03a:	e7da      	b.n	801aff2 <_free_r+0x11a>
 801b03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b040:	2000027c 	.word	0x2000027c
 801b044:	20000688 	.word	0x20000688
 801b048:	20005b70 	.word	0x20005b70
 801b04c:	20000284 	.word	0x20000284

0801b050 <__localeconv_l>:
 801b050:	30f0      	adds	r0, #240	; 0xf0
 801b052:	4770      	bx	lr

0801b054 <_localeconv_r>:
 801b054:	4b04      	ldr	r3, [pc, #16]	; (801b068 <_localeconv_r+0x14>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	6a18      	ldr	r0, [r3, #32]
 801b05a:	4b04      	ldr	r3, [pc, #16]	; (801b06c <_localeconv_r+0x18>)
 801b05c:	2800      	cmp	r0, #0
 801b05e:	bf08      	it	eq
 801b060:	4618      	moveq	r0, r3
 801b062:	30f0      	adds	r0, #240	; 0xf0
 801b064:	4770      	bx	lr
 801b066:	bf00      	nop
 801b068:	20000188 	.word	0x20000188
 801b06c:	2000068c 	.word	0x2000068c

0801b070 <localeconv>:
 801b070:	4b04      	ldr	r3, [pc, #16]	; (801b084 <localeconv+0x14>)
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	6a18      	ldr	r0, [r3, #32]
 801b076:	4b04      	ldr	r3, [pc, #16]	; (801b088 <localeconv+0x18>)
 801b078:	2800      	cmp	r0, #0
 801b07a:	bf08      	it	eq
 801b07c:	4618      	moveq	r0, r3
 801b07e:	30f0      	adds	r0, #240	; 0xf0
 801b080:	4770      	bx	lr
 801b082:	bf00      	nop
 801b084:	20000188 	.word	0x20000188
 801b088:	2000068c 	.word	0x2000068c

0801b08c <__retarget_lock_init>:
 801b08c:	4770      	bx	lr

0801b08e <__retarget_lock_init_recursive>:
 801b08e:	4770      	bx	lr

0801b090 <__retarget_lock_close>:
 801b090:	4770      	bx	lr

0801b092 <__retarget_lock_close_recursive>:
 801b092:	4770      	bx	lr

0801b094 <__retarget_lock_acquire>:
 801b094:	4770      	bx	lr

0801b096 <__retarget_lock_acquire_recursive>:
 801b096:	4770      	bx	lr

0801b098 <__retarget_lock_try_acquire>:
 801b098:	2001      	movs	r0, #1
 801b09a:	4770      	bx	lr

0801b09c <__retarget_lock_try_acquire_recursive>:
 801b09c:	2001      	movs	r0, #1
 801b09e:	4770      	bx	lr

0801b0a0 <__retarget_lock_release>:
 801b0a0:	4770      	bx	lr

0801b0a2 <__retarget_lock_release_recursive>:
 801b0a2:	4770      	bx	lr

0801b0a4 <_Balloc>:
 801b0a4:	b570      	push	{r4, r5, r6, lr}
 801b0a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	460e      	mov	r6, r1
 801b0ac:	b93d      	cbnz	r5, 801b0be <_Balloc+0x1a>
 801b0ae:	2010      	movs	r0, #16
 801b0b0:	f7fd fdf4 	bl	8018c9c <malloc>
 801b0b4:	6260      	str	r0, [r4, #36]	; 0x24
 801b0b6:	6045      	str	r5, [r0, #4]
 801b0b8:	6085      	str	r5, [r0, #8]
 801b0ba:	6005      	str	r5, [r0, #0]
 801b0bc:	60c5      	str	r5, [r0, #12]
 801b0be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b0c0:	68eb      	ldr	r3, [r5, #12]
 801b0c2:	b183      	cbz	r3, 801b0e6 <_Balloc+0x42>
 801b0c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b0cc:	b9b8      	cbnz	r0, 801b0fe <_Balloc+0x5a>
 801b0ce:	2101      	movs	r1, #1
 801b0d0:	fa01 f506 	lsl.w	r5, r1, r6
 801b0d4:	1d6a      	adds	r2, r5, #5
 801b0d6:	0092      	lsls	r2, r2, #2
 801b0d8:	4620      	mov	r0, r4
 801b0da:	f001 f8c3 	bl	801c264 <_calloc_r>
 801b0de:	b160      	cbz	r0, 801b0fa <_Balloc+0x56>
 801b0e0:	6046      	str	r6, [r0, #4]
 801b0e2:	6085      	str	r5, [r0, #8]
 801b0e4:	e00e      	b.n	801b104 <_Balloc+0x60>
 801b0e6:	2221      	movs	r2, #33	; 0x21
 801b0e8:	2104      	movs	r1, #4
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f001 f8ba 	bl	801c264 <_calloc_r>
 801b0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b0f2:	60e8      	str	r0, [r5, #12]
 801b0f4:	68db      	ldr	r3, [r3, #12]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d1e4      	bne.n	801b0c4 <_Balloc+0x20>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	bd70      	pop	{r4, r5, r6, pc}
 801b0fe:	6802      	ldr	r2, [r0, #0]
 801b100:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801b104:	2300      	movs	r3, #0
 801b106:	6103      	str	r3, [r0, #16]
 801b108:	60c3      	str	r3, [r0, #12]
 801b10a:	bd70      	pop	{r4, r5, r6, pc}

0801b10c <_Bfree>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801b110:	4606      	mov	r6, r0
 801b112:	460d      	mov	r5, r1
 801b114:	b93c      	cbnz	r4, 801b126 <_Bfree+0x1a>
 801b116:	2010      	movs	r0, #16
 801b118:	f7fd fdc0 	bl	8018c9c <malloc>
 801b11c:	6270      	str	r0, [r6, #36]	; 0x24
 801b11e:	6044      	str	r4, [r0, #4]
 801b120:	6084      	str	r4, [r0, #8]
 801b122:	6004      	str	r4, [r0, #0]
 801b124:	60c4      	str	r4, [r0, #12]
 801b126:	b13d      	cbz	r5, 801b138 <_Bfree+0x2c>
 801b128:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b12a:	686a      	ldr	r2, [r5, #4]
 801b12c:	68db      	ldr	r3, [r3, #12]
 801b12e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b132:	6029      	str	r1, [r5, #0]
 801b134:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801b138:	bd70      	pop	{r4, r5, r6, pc}

0801b13a <__multadd>:
 801b13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b13e:	690d      	ldr	r5, [r1, #16]
 801b140:	461f      	mov	r7, r3
 801b142:	4606      	mov	r6, r0
 801b144:	460c      	mov	r4, r1
 801b146:	f101 0e14 	add.w	lr, r1, #20
 801b14a:	2300      	movs	r3, #0
 801b14c:	f8de 0000 	ldr.w	r0, [lr]
 801b150:	b281      	uxth	r1, r0
 801b152:	fb02 7101 	mla	r1, r2, r1, r7
 801b156:	0c0f      	lsrs	r7, r1, #16
 801b158:	0c00      	lsrs	r0, r0, #16
 801b15a:	fb02 7000 	mla	r0, r2, r0, r7
 801b15e:	b289      	uxth	r1, r1
 801b160:	3301      	adds	r3, #1
 801b162:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801b166:	429d      	cmp	r5, r3
 801b168:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801b16c:	f84e 1b04 	str.w	r1, [lr], #4
 801b170:	dcec      	bgt.n	801b14c <__multadd+0x12>
 801b172:	b1d7      	cbz	r7, 801b1aa <__multadd+0x70>
 801b174:	68a3      	ldr	r3, [r4, #8]
 801b176:	429d      	cmp	r5, r3
 801b178:	db12      	blt.n	801b1a0 <__multadd+0x66>
 801b17a:	6861      	ldr	r1, [r4, #4]
 801b17c:	4630      	mov	r0, r6
 801b17e:	3101      	adds	r1, #1
 801b180:	f7ff ff90 	bl	801b0a4 <_Balloc>
 801b184:	6922      	ldr	r2, [r4, #16]
 801b186:	3202      	adds	r2, #2
 801b188:	f104 010c 	add.w	r1, r4, #12
 801b18c:	4680      	mov	r8, r0
 801b18e:	0092      	lsls	r2, r2, #2
 801b190:	300c      	adds	r0, #12
 801b192:	f7fd ffa1 	bl	80190d8 <memcpy>
 801b196:	4621      	mov	r1, r4
 801b198:	4630      	mov	r0, r6
 801b19a:	f7ff ffb7 	bl	801b10c <_Bfree>
 801b19e:	4644      	mov	r4, r8
 801b1a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b1a4:	3501      	adds	r5, #1
 801b1a6:	615f      	str	r7, [r3, #20]
 801b1a8:	6125      	str	r5, [r4, #16]
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1b0 <__s2b>:
 801b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1b4:	460c      	mov	r4, r1
 801b1b6:	4615      	mov	r5, r2
 801b1b8:	461f      	mov	r7, r3
 801b1ba:	2209      	movs	r2, #9
 801b1bc:	3308      	adds	r3, #8
 801b1be:	4606      	mov	r6, r0
 801b1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 801b1c4:	2100      	movs	r1, #0
 801b1c6:	2201      	movs	r2, #1
 801b1c8:	429a      	cmp	r2, r3
 801b1ca:	db20      	blt.n	801b20e <__s2b+0x5e>
 801b1cc:	4630      	mov	r0, r6
 801b1ce:	f7ff ff69 	bl	801b0a4 <_Balloc>
 801b1d2:	9b08      	ldr	r3, [sp, #32]
 801b1d4:	6143      	str	r3, [r0, #20]
 801b1d6:	2d09      	cmp	r5, #9
 801b1d8:	f04f 0301 	mov.w	r3, #1
 801b1dc:	6103      	str	r3, [r0, #16]
 801b1de:	dd19      	ble.n	801b214 <__s2b+0x64>
 801b1e0:	f104 0909 	add.w	r9, r4, #9
 801b1e4:	46c8      	mov	r8, r9
 801b1e6:	442c      	add	r4, r5
 801b1e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b1ec:	4601      	mov	r1, r0
 801b1ee:	3b30      	subs	r3, #48	; 0x30
 801b1f0:	220a      	movs	r2, #10
 801b1f2:	4630      	mov	r0, r6
 801b1f4:	f7ff ffa1 	bl	801b13a <__multadd>
 801b1f8:	45a0      	cmp	r8, r4
 801b1fa:	d1f5      	bne.n	801b1e8 <__s2b+0x38>
 801b1fc:	f1a5 0408 	sub.w	r4, r5, #8
 801b200:	444c      	add	r4, r9
 801b202:	1b2d      	subs	r5, r5, r4
 801b204:	1963      	adds	r3, r4, r5
 801b206:	42bb      	cmp	r3, r7
 801b208:	db07      	blt.n	801b21a <__s2b+0x6a>
 801b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b20e:	0052      	lsls	r2, r2, #1
 801b210:	3101      	adds	r1, #1
 801b212:	e7d9      	b.n	801b1c8 <__s2b+0x18>
 801b214:	340a      	adds	r4, #10
 801b216:	2509      	movs	r5, #9
 801b218:	e7f3      	b.n	801b202 <__s2b+0x52>
 801b21a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b21e:	4601      	mov	r1, r0
 801b220:	3b30      	subs	r3, #48	; 0x30
 801b222:	220a      	movs	r2, #10
 801b224:	4630      	mov	r0, r6
 801b226:	f7ff ff88 	bl	801b13a <__multadd>
 801b22a:	e7eb      	b.n	801b204 <__s2b+0x54>

0801b22c <__hi0bits>:
 801b22c:	0c02      	lsrs	r2, r0, #16
 801b22e:	0412      	lsls	r2, r2, #16
 801b230:	4603      	mov	r3, r0
 801b232:	b9b2      	cbnz	r2, 801b262 <__hi0bits+0x36>
 801b234:	0403      	lsls	r3, r0, #16
 801b236:	2010      	movs	r0, #16
 801b238:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b23c:	bf04      	itt	eq
 801b23e:	021b      	lsleq	r3, r3, #8
 801b240:	3008      	addeq	r0, #8
 801b242:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b246:	bf04      	itt	eq
 801b248:	011b      	lsleq	r3, r3, #4
 801b24a:	3004      	addeq	r0, #4
 801b24c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b250:	bf04      	itt	eq
 801b252:	009b      	lsleq	r3, r3, #2
 801b254:	3002      	addeq	r0, #2
 801b256:	2b00      	cmp	r3, #0
 801b258:	db06      	blt.n	801b268 <__hi0bits+0x3c>
 801b25a:	005b      	lsls	r3, r3, #1
 801b25c:	d503      	bpl.n	801b266 <__hi0bits+0x3a>
 801b25e:	3001      	adds	r0, #1
 801b260:	4770      	bx	lr
 801b262:	2000      	movs	r0, #0
 801b264:	e7e8      	b.n	801b238 <__hi0bits+0xc>
 801b266:	2020      	movs	r0, #32
 801b268:	4770      	bx	lr

0801b26a <__lo0bits>:
 801b26a:	6803      	ldr	r3, [r0, #0]
 801b26c:	f013 0207 	ands.w	r2, r3, #7
 801b270:	4601      	mov	r1, r0
 801b272:	d00b      	beq.n	801b28c <__lo0bits+0x22>
 801b274:	07da      	lsls	r2, r3, #31
 801b276:	d423      	bmi.n	801b2c0 <__lo0bits+0x56>
 801b278:	0798      	lsls	r0, r3, #30
 801b27a:	bf49      	itett	mi
 801b27c:	085b      	lsrmi	r3, r3, #1
 801b27e:	089b      	lsrpl	r3, r3, #2
 801b280:	2001      	movmi	r0, #1
 801b282:	600b      	strmi	r3, [r1, #0]
 801b284:	bf5c      	itt	pl
 801b286:	600b      	strpl	r3, [r1, #0]
 801b288:	2002      	movpl	r0, #2
 801b28a:	4770      	bx	lr
 801b28c:	b298      	uxth	r0, r3
 801b28e:	b9a8      	cbnz	r0, 801b2bc <__lo0bits+0x52>
 801b290:	0c1b      	lsrs	r3, r3, #16
 801b292:	2010      	movs	r0, #16
 801b294:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b298:	bf04      	itt	eq
 801b29a:	0a1b      	lsreq	r3, r3, #8
 801b29c:	3008      	addeq	r0, #8
 801b29e:	071a      	lsls	r2, r3, #28
 801b2a0:	bf04      	itt	eq
 801b2a2:	091b      	lsreq	r3, r3, #4
 801b2a4:	3004      	addeq	r0, #4
 801b2a6:	079a      	lsls	r2, r3, #30
 801b2a8:	bf04      	itt	eq
 801b2aa:	089b      	lsreq	r3, r3, #2
 801b2ac:	3002      	addeq	r0, #2
 801b2ae:	07da      	lsls	r2, r3, #31
 801b2b0:	d402      	bmi.n	801b2b8 <__lo0bits+0x4e>
 801b2b2:	085b      	lsrs	r3, r3, #1
 801b2b4:	d006      	beq.n	801b2c4 <__lo0bits+0x5a>
 801b2b6:	3001      	adds	r0, #1
 801b2b8:	600b      	str	r3, [r1, #0]
 801b2ba:	4770      	bx	lr
 801b2bc:	4610      	mov	r0, r2
 801b2be:	e7e9      	b.n	801b294 <__lo0bits+0x2a>
 801b2c0:	2000      	movs	r0, #0
 801b2c2:	4770      	bx	lr
 801b2c4:	2020      	movs	r0, #32
 801b2c6:	4770      	bx	lr

0801b2c8 <__i2b>:
 801b2c8:	b510      	push	{r4, lr}
 801b2ca:	460c      	mov	r4, r1
 801b2cc:	2101      	movs	r1, #1
 801b2ce:	f7ff fee9 	bl	801b0a4 <_Balloc>
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	6144      	str	r4, [r0, #20]
 801b2d6:	6102      	str	r2, [r0, #16]
 801b2d8:	bd10      	pop	{r4, pc}

0801b2da <__multiply>:
 801b2da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2de:	4614      	mov	r4, r2
 801b2e0:	690a      	ldr	r2, [r1, #16]
 801b2e2:	6923      	ldr	r3, [r4, #16]
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	bfb8      	it	lt
 801b2e8:	460b      	movlt	r3, r1
 801b2ea:	4689      	mov	r9, r1
 801b2ec:	bfbc      	itt	lt
 801b2ee:	46a1      	movlt	r9, r4
 801b2f0:	461c      	movlt	r4, r3
 801b2f2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b2f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b2fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b2fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b302:	eb07 060a 	add.w	r6, r7, sl
 801b306:	429e      	cmp	r6, r3
 801b308:	bfc8      	it	gt
 801b30a:	3101      	addgt	r1, #1
 801b30c:	f7ff feca 	bl	801b0a4 <_Balloc>
 801b310:	f100 0514 	add.w	r5, r0, #20
 801b314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b318:	462b      	mov	r3, r5
 801b31a:	2200      	movs	r2, #0
 801b31c:	4543      	cmp	r3, r8
 801b31e:	d316      	bcc.n	801b34e <__multiply+0x74>
 801b320:	f104 0214 	add.w	r2, r4, #20
 801b324:	f109 0114 	add.w	r1, r9, #20
 801b328:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801b32c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801b330:	9301      	str	r3, [sp, #4]
 801b332:	9c01      	ldr	r4, [sp, #4]
 801b334:	4294      	cmp	r4, r2
 801b336:	4613      	mov	r3, r2
 801b338:	d80c      	bhi.n	801b354 <__multiply+0x7a>
 801b33a:	2e00      	cmp	r6, #0
 801b33c:	dd03      	ble.n	801b346 <__multiply+0x6c>
 801b33e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b342:	2b00      	cmp	r3, #0
 801b344:	d054      	beq.n	801b3f0 <__multiply+0x116>
 801b346:	6106      	str	r6, [r0, #16]
 801b348:	b003      	add	sp, #12
 801b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34e:	f843 2b04 	str.w	r2, [r3], #4
 801b352:	e7e3      	b.n	801b31c <__multiply+0x42>
 801b354:	f8b3 a000 	ldrh.w	sl, [r3]
 801b358:	3204      	adds	r2, #4
 801b35a:	f1ba 0f00 	cmp.w	sl, #0
 801b35e:	d020      	beq.n	801b3a2 <__multiply+0xc8>
 801b360:	46ae      	mov	lr, r5
 801b362:	4689      	mov	r9, r1
 801b364:	f04f 0c00 	mov.w	ip, #0
 801b368:	f859 4b04 	ldr.w	r4, [r9], #4
 801b36c:	f8be b000 	ldrh.w	fp, [lr]
 801b370:	b2a3      	uxth	r3, r4
 801b372:	fb0a b303 	mla	r3, sl, r3, fp
 801b376:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801b37a:	f8de 4000 	ldr.w	r4, [lr]
 801b37e:	4463      	add	r3, ip
 801b380:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801b384:	fb0a c40b 	mla	r4, sl, fp, ip
 801b388:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801b38c:	b29b      	uxth	r3, r3
 801b38e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b392:	454f      	cmp	r7, r9
 801b394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801b398:	f84e 3b04 	str.w	r3, [lr], #4
 801b39c:	d8e4      	bhi.n	801b368 <__multiply+0x8e>
 801b39e:	f8ce c000 	str.w	ip, [lr]
 801b3a2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801b3a6:	f1b9 0f00 	cmp.w	r9, #0
 801b3aa:	d01f      	beq.n	801b3ec <__multiply+0x112>
 801b3ac:	682b      	ldr	r3, [r5, #0]
 801b3ae:	46ae      	mov	lr, r5
 801b3b0:	468c      	mov	ip, r1
 801b3b2:	f04f 0a00 	mov.w	sl, #0
 801b3b6:	f8bc 4000 	ldrh.w	r4, [ip]
 801b3ba:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b3be:	fb09 b404 	mla	r4, r9, r4, fp
 801b3c2:	44a2      	add	sl, r4
 801b3c4:	b29b      	uxth	r3, r3
 801b3c6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801b3ca:	f84e 3b04 	str.w	r3, [lr], #4
 801b3ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b3d2:	f8be 4000 	ldrh.w	r4, [lr]
 801b3d6:	0c1b      	lsrs	r3, r3, #16
 801b3d8:	fb09 4303 	mla	r3, r9, r3, r4
 801b3dc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801b3e0:	4567      	cmp	r7, ip
 801b3e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b3e6:	d8e6      	bhi.n	801b3b6 <__multiply+0xdc>
 801b3e8:	f8ce 3000 	str.w	r3, [lr]
 801b3ec:	3504      	adds	r5, #4
 801b3ee:	e7a0      	b.n	801b332 <__multiply+0x58>
 801b3f0:	3e01      	subs	r6, #1
 801b3f2:	e7a2      	b.n	801b33a <__multiply+0x60>

0801b3f4 <__pow5mult>:
 801b3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3f8:	4615      	mov	r5, r2
 801b3fa:	f012 0203 	ands.w	r2, r2, #3
 801b3fe:	4606      	mov	r6, r0
 801b400:	460f      	mov	r7, r1
 801b402:	d007      	beq.n	801b414 <__pow5mult+0x20>
 801b404:	3a01      	subs	r2, #1
 801b406:	4c21      	ldr	r4, [pc, #132]	; (801b48c <__pow5mult+0x98>)
 801b408:	2300      	movs	r3, #0
 801b40a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b40e:	f7ff fe94 	bl	801b13a <__multadd>
 801b412:	4607      	mov	r7, r0
 801b414:	10ad      	asrs	r5, r5, #2
 801b416:	d035      	beq.n	801b484 <__pow5mult+0x90>
 801b418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b41a:	b93c      	cbnz	r4, 801b42c <__pow5mult+0x38>
 801b41c:	2010      	movs	r0, #16
 801b41e:	f7fd fc3d 	bl	8018c9c <malloc>
 801b422:	6270      	str	r0, [r6, #36]	; 0x24
 801b424:	6044      	str	r4, [r0, #4]
 801b426:	6084      	str	r4, [r0, #8]
 801b428:	6004      	str	r4, [r0, #0]
 801b42a:	60c4      	str	r4, [r0, #12]
 801b42c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b434:	b94c      	cbnz	r4, 801b44a <__pow5mult+0x56>
 801b436:	f240 2171 	movw	r1, #625	; 0x271
 801b43a:	4630      	mov	r0, r6
 801b43c:	f7ff ff44 	bl	801b2c8 <__i2b>
 801b440:	2300      	movs	r3, #0
 801b442:	f8c8 0008 	str.w	r0, [r8, #8]
 801b446:	4604      	mov	r4, r0
 801b448:	6003      	str	r3, [r0, #0]
 801b44a:	f04f 0800 	mov.w	r8, #0
 801b44e:	07eb      	lsls	r3, r5, #31
 801b450:	d50a      	bpl.n	801b468 <__pow5mult+0x74>
 801b452:	4639      	mov	r1, r7
 801b454:	4622      	mov	r2, r4
 801b456:	4630      	mov	r0, r6
 801b458:	f7ff ff3f 	bl	801b2da <__multiply>
 801b45c:	4639      	mov	r1, r7
 801b45e:	4681      	mov	r9, r0
 801b460:	4630      	mov	r0, r6
 801b462:	f7ff fe53 	bl	801b10c <_Bfree>
 801b466:	464f      	mov	r7, r9
 801b468:	106d      	asrs	r5, r5, #1
 801b46a:	d00b      	beq.n	801b484 <__pow5mult+0x90>
 801b46c:	6820      	ldr	r0, [r4, #0]
 801b46e:	b938      	cbnz	r0, 801b480 <__pow5mult+0x8c>
 801b470:	4622      	mov	r2, r4
 801b472:	4621      	mov	r1, r4
 801b474:	4630      	mov	r0, r6
 801b476:	f7ff ff30 	bl	801b2da <__multiply>
 801b47a:	6020      	str	r0, [r4, #0]
 801b47c:	f8c0 8000 	str.w	r8, [r0]
 801b480:	4604      	mov	r4, r0
 801b482:	e7e4      	b.n	801b44e <__pow5mult+0x5a>
 801b484:	4638      	mov	r0, r7
 801b486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b48a:	bf00      	nop
 801b48c:	0801d0d0 	.word	0x0801d0d0

0801b490 <__lshift>:
 801b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b494:	460c      	mov	r4, r1
 801b496:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b49a:	6923      	ldr	r3, [r4, #16]
 801b49c:	6849      	ldr	r1, [r1, #4]
 801b49e:	eb0a 0903 	add.w	r9, sl, r3
 801b4a2:	68a3      	ldr	r3, [r4, #8]
 801b4a4:	4607      	mov	r7, r0
 801b4a6:	4616      	mov	r6, r2
 801b4a8:	f109 0501 	add.w	r5, r9, #1
 801b4ac:	42ab      	cmp	r3, r5
 801b4ae:	db31      	blt.n	801b514 <__lshift+0x84>
 801b4b0:	4638      	mov	r0, r7
 801b4b2:	f7ff fdf7 	bl	801b0a4 <_Balloc>
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	4680      	mov	r8, r0
 801b4ba:	f100 0314 	add.w	r3, r0, #20
 801b4be:	4611      	mov	r1, r2
 801b4c0:	4552      	cmp	r2, sl
 801b4c2:	db2a      	blt.n	801b51a <__lshift+0x8a>
 801b4c4:	6920      	ldr	r0, [r4, #16]
 801b4c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b4ca:	f104 0114 	add.w	r1, r4, #20
 801b4ce:	f016 021f 	ands.w	r2, r6, #31
 801b4d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801b4d6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801b4da:	d022      	beq.n	801b522 <__lshift+0x92>
 801b4dc:	f1c2 0c20 	rsb	ip, r2, #32
 801b4e0:	2000      	movs	r0, #0
 801b4e2:	680e      	ldr	r6, [r1, #0]
 801b4e4:	4096      	lsls	r6, r2
 801b4e6:	4330      	orrs	r0, r6
 801b4e8:	f843 0b04 	str.w	r0, [r3], #4
 801b4ec:	f851 0b04 	ldr.w	r0, [r1], #4
 801b4f0:	458e      	cmp	lr, r1
 801b4f2:	fa20 f00c 	lsr.w	r0, r0, ip
 801b4f6:	d8f4      	bhi.n	801b4e2 <__lshift+0x52>
 801b4f8:	6018      	str	r0, [r3, #0]
 801b4fa:	b108      	cbz	r0, 801b500 <__lshift+0x70>
 801b4fc:	f109 0502 	add.w	r5, r9, #2
 801b500:	3d01      	subs	r5, #1
 801b502:	4638      	mov	r0, r7
 801b504:	f8c8 5010 	str.w	r5, [r8, #16]
 801b508:	4621      	mov	r1, r4
 801b50a:	f7ff fdff 	bl	801b10c <_Bfree>
 801b50e:	4640      	mov	r0, r8
 801b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b514:	3101      	adds	r1, #1
 801b516:	005b      	lsls	r3, r3, #1
 801b518:	e7c8      	b.n	801b4ac <__lshift+0x1c>
 801b51a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b51e:	3201      	adds	r2, #1
 801b520:	e7ce      	b.n	801b4c0 <__lshift+0x30>
 801b522:	3b04      	subs	r3, #4
 801b524:	f851 2b04 	ldr.w	r2, [r1], #4
 801b528:	f843 2f04 	str.w	r2, [r3, #4]!
 801b52c:	458e      	cmp	lr, r1
 801b52e:	d8f9      	bhi.n	801b524 <__lshift+0x94>
 801b530:	e7e6      	b.n	801b500 <__lshift+0x70>

0801b532 <__mcmp>:
 801b532:	6903      	ldr	r3, [r0, #16]
 801b534:	690a      	ldr	r2, [r1, #16]
 801b536:	1a9b      	subs	r3, r3, r2
 801b538:	b530      	push	{r4, r5, lr}
 801b53a:	d10c      	bne.n	801b556 <__mcmp+0x24>
 801b53c:	0092      	lsls	r2, r2, #2
 801b53e:	3014      	adds	r0, #20
 801b540:	3114      	adds	r1, #20
 801b542:	1884      	adds	r4, r0, r2
 801b544:	4411      	add	r1, r2
 801b546:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b54a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b54e:	4295      	cmp	r5, r2
 801b550:	d003      	beq.n	801b55a <__mcmp+0x28>
 801b552:	d305      	bcc.n	801b560 <__mcmp+0x2e>
 801b554:	2301      	movs	r3, #1
 801b556:	4618      	mov	r0, r3
 801b558:	bd30      	pop	{r4, r5, pc}
 801b55a:	42a0      	cmp	r0, r4
 801b55c:	d3f3      	bcc.n	801b546 <__mcmp+0x14>
 801b55e:	e7fa      	b.n	801b556 <__mcmp+0x24>
 801b560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b564:	e7f7      	b.n	801b556 <__mcmp+0x24>

0801b566 <__mdiff>:
 801b566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b56a:	460d      	mov	r5, r1
 801b56c:	4607      	mov	r7, r0
 801b56e:	4611      	mov	r1, r2
 801b570:	4628      	mov	r0, r5
 801b572:	4614      	mov	r4, r2
 801b574:	f7ff ffdd 	bl	801b532 <__mcmp>
 801b578:	1e06      	subs	r6, r0, #0
 801b57a:	d108      	bne.n	801b58e <__mdiff+0x28>
 801b57c:	4631      	mov	r1, r6
 801b57e:	4638      	mov	r0, r7
 801b580:	f7ff fd90 	bl	801b0a4 <_Balloc>
 801b584:	2301      	movs	r3, #1
 801b586:	6103      	str	r3, [r0, #16]
 801b588:	6146      	str	r6, [r0, #20]
 801b58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b58e:	bfa4      	itt	ge
 801b590:	4623      	movge	r3, r4
 801b592:	462c      	movge	r4, r5
 801b594:	4638      	mov	r0, r7
 801b596:	6861      	ldr	r1, [r4, #4]
 801b598:	bfa6      	itte	ge
 801b59a:	461d      	movge	r5, r3
 801b59c:	2600      	movge	r6, #0
 801b59e:	2601      	movlt	r6, #1
 801b5a0:	f7ff fd80 	bl	801b0a4 <_Balloc>
 801b5a4:	692b      	ldr	r3, [r5, #16]
 801b5a6:	60c6      	str	r6, [r0, #12]
 801b5a8:	6926      	ldr	r6, [r4, #16]
 801b5aa:	f105 0914 	add.w	r9, r5, #20
 801b5ae:	f104 0214 	add.w	r2, r4, #20
 801b5b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801b5b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801b5ba:	f100 0514 	add.w	r5, r0, #20
 801b5be:	f04f 0c00 	mov.w	ip, #0
 801b5c2:	f852 ab04 	ldr.w	sl, [r2], #4
 801b5c6:	f859 4b04 	ldr.w	r4, [r9], #4
 801b5ca:	fa1c f18a 	uxtah	r1, ip, sl
 801b5ce:	b2a3      	uxth	r3, r4
 801b5d0:	1ac9      	subs	r1, r1, r3
 801b5d2:	0c23      	lsrs	r3, r4, #16
 801b5d4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801b5d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801b5dc:	b289      	uxth	r1, r1
 801b5de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801b5e2:	45c8      	cmp	r8, r9
 801b5e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801b5e8:	4696      	mov	lr, r2
 801b5ea:	f845 3b04 	str.w	r3, [r5], #4
 801b5ee:	d8e8      	bhi.n	801b5c2 <__mdiff+0x5c>
 801b5f0:	45be      	cmp	lr, r7
 801b5f2:	d305      	bcc.n	801b600 <__mdiff+0x9a>
 801b5f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801b5f8:	b18b      	cbz	r3, 801b61e <__mdiff+0xb8>
 801b5fa:	6106      	str	r6, [r0, #16]
 801b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b600:	f85e 1b04 	ldr.w	r1, [lr], #4
 801b604:	fa1c f381 	uxtah	r3, ip, r1
 801b608:	141a      	asrs	r2, r3, #16
 801b60a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b60e:	b29b      	uxth	r3, r3
 801b610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b614:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b618:	f845 3b04 	str.w	r3, [r5], #4
 801b61c:	e7e8      	b.n	801b5f0 <__mdiff+0x8a>
 801b61e:	3e01      	subs	r6, #1
 801b620:	e7e8      	b.n	801b5f4 <__mdiff+0x8e>
	...

0801b624 <__ulp>:
 801b624:	4b12      	ldr	r3, [pc, #72]	; (801b670 <__ulp+0x4c>)
 801b626:	ee10 2a90 	vmov	r2, s1
 801b62a:	401a      	ands	r2, r3
 801b62c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801b630:	2b00      	cmp	r3, #0
 801b632:	dd04      	ble.n	801b63e <__ulp+0x1a>
 801b634:	2000      	movs	r0, #0
 801b636:	4619      	mov	r1, r3
 801b638:	ec41 0b10 	vmov	d0, r0, r1
 801b63c:	4770      	bx	lr
 801b63e:	425b      	negs	r3, r3
 801b640:	151b      	asrs	r3, r3, #20
 801b642:	2b13      	cmp	r3, #19
 801b644:	f04f 0000 	mov.w	r0, #0
 801b648:	f04f 0100 	mov.w	r1, #0
 801b64c:	dc04      	bgt.n	801b658 <__ulp+0x34>
 801b64e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801b652:	fa42 f103 	asr.w	r1, r2, r3
 801b656:	e7ef      	b.n	801b638 <__ulp+0x14>
 801b658:	3b14      	subs	r3, #20
 801b65a:	2b1e      	cmp	r3, #30
 801b65c:	f04f 0201 	mov.w	r2, #1
 801b660:	bfda      	itte	le
 801b662:	f1c3 031f 	rsble	r3, r3, #31
 801b666:	fa02 f303 	lslle.w	r3, r2, r3
 801b66a:	4613      	movgt	r3, r2
 801b66c:	4618      	mov	r0, r3
 801b66e:	e7e3      	b.n	801b638 <__ulp+0x14>
 801b670:	7ff00000 	.word	0x7ff00000

0801b674 <__b2d>:
 801b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b676:	6905      	ldr	r5, [r0, #16]
 801b678:	f100 0714 	add.w	r7, r0, #20
 801b67c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b680:	1f2e      	subs	r6, r5, #4
 801b682:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b686:	4620      	mov	r0, r4
 801b688:	f7ff fdd0 	bl	801b22c <__hi0bits>
 801b68c:	f1c0 0320 	rsb	r3, r0, #32
 801b690:	280a      	cmp	r0, #10
 801b692:	600b      	str	r3, [r1, #0]
 801b694:	f8df e074 	ldr.w	lr, [pc, #116]	; 801b70c <__b2d+0x98>
 801b698:	dc14      	bgt.n	801b6c4 <__b2d+0x50>
 801b69a:	f1c0 0c0b 	rsb	ip, r0, #11
 801b69e:	fa24 f10c 	lsr.w	r1, r4, ip
 801b6a2:	42b7      	cmp	r7, r6
 801b6a4:	ea41 030e 	orr.w	r3, r1, lr
 801b6a8:	bf34      	ite	cc
 801b6aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6ae:	2100      	movcs	r1, #0
 801b6b0:	3015      	adds	r0, #21
 801b6b2:	fa04 f000 	lsl.w	r0, r4, r0
 801b6b6:	fa21 f10c 	lsr.w	r1, r1, ip
 801b6ba:	ea40 0201 	orr.w	r2, r0, r1
 801b6be:	ec43 2b10 	vmov	d0, r2, r3
 801b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6c4:	42b7      	cmp	r7, r6
 801b6c6:	bf3a      	itte	cc
 801b6c8:	f1a5 0608 	subcc.w	r6, r5, #8
 801b6cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6d0:	2100      	movcs	r1, #0
 801b6d2:	380b      	subs	r0, #11
 801b6d4:	d015      	beq.n	801b702 <__b2d+0x8e>
 801b6d6:	4084      	lsls	r4, r0
 801b6d8:	f1c0 0520 	rsb	r5, r0, #32
 801b6dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801b6e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801b6e4:	42be      	cmp	r6, r7
 801b6e6:	fa21 fe05 	lsr.w	lr, r1, r5
 801b6ea:	ea44 030e 	orr.w	r3, r4, lr
 801b6ee:	bf8c      	ite	hi
 801b6f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b6f4:	2400      	movls	r4, #0
 801b6f6:	fa01 f000 	lsl.w	r0, r1, r0
 801b6fa:	40ec      	lsrs	r4, r5
 801b6fc:	ea40 0204 	orr.w	r2, r0, r4
 801b700:	e7dd      	b.n	801b6be <__b2d+0x4a>
 801b702:	ea44 030e 	orr.w	r3, r4, lr
 801b706:	460a      	mov	r2, r1
 801b708:	e7d9      	b.n	801b6be <__b2d+0x4a>
 801b70a:	bf00      	nop
 801b70c:	3ff00000 	.word	0x3ff00000

0801b710 <__d2b>:
 801b710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b714:	460e      	mov	r6, r1
 801b716:	2101      	movs	r1, #1
 801b718:	ec59 8b10 	vmov	r8, r9, d0
 801b71c:	4615      	mov	r5, r2
 801b71e:	f7ff fcc1 	bl	801b0a4 <_Balloc>
 801b722:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801b726:	4607      	mov	r7, r0
 801b728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b72c:	bb34      	cbnz	r4, 801b77c <__d2b+0x6c>
 801b72e:	9301      	str	r3, [sp, #4]
 801b730:	f1b8 0f00 	cmp.w	r8, #0
 801b734:	d027      	beq.n	801b786 <__d2b+0x76>
 801b736:	a802      	add	r0, sp, #8
 801b738:	f840 8d08 	str.w	r8, [r0, #-8]!
 801b73c:	f7ff fd95 	bl	801b26a <__lo0bits>
 801b740:	9900      	ldr	r1, [sp, #0]
 801b742:	b1f0      	cbz	r0, 801b782 <__d2b+0x72>
 801b744:	9a01      	ldr	r2, [sp, #4]
 801b746:	f1c0 0320 	rsb	r3, r0, #32
 801b74a:	fa02 f303 	lsl.w	r3, r2, r3
 801b74e:	430b      	orrs	r3, r1
 801b750:	40c2      	lsrs	r2, r0
 801b752:	617b      	str	r3, [r7, #20]
 801b754:	9201      	str	r2, [sp, #4]
 801b756:	9b01      	ldr	r3, [sp, #4]
 801b758:	61bb      	str	r3, [r7, #24]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	bf14      	ite	ne
 801b75e:	2102      	movne	r1, #2
 801b760:	2101      	moveq	r1, #1
 801b762:	6139      	str	r1, [r7, #16]
 801b764:	b1c4      	cbz	r4, 801b798 <__d2b+0x88>
 801b766:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801b76a:	4404      	add	r4, r0
 801b76c:	6034      	str	r4, [r6, #0]
 801b76e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b772:	6028      	str	r0, [r5, #0]
 801b774:	4638      	mov	r0, r7
 801b776:	b003      	add	sp, #12
 801b778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b77c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b780:	e7d5      	b.n	801b72e <__d2b+0x1e>
 801b782:	6179      	str	r1, [r7, #20]
 801b784:	e7e7      	b.n	801b756 <__d2b+0x46>
 801b786:	a801      	add	r0, sp, #4
 801b788:	f7ff fd6f 	bl	801b26a <__lo0bits>
 801b78c:	9b01      	ldr	r3, [sp, #4]
 801b78e:	617b      	str	r3, [r7, #20]
 801b790:	2101      	movs	r1, #1
 801b792:	6139      	str	r1, [r7, #16]
 801b794:	3020      	adds	r0, #32
 801b796:	e7e5      	b.n	801b764 <__d2b+0x54>
 801b798:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801b79c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b7a0:	6030      	str	r0, [r6, #0]
 801b7a2:	6918      	ldr	r0, [r3, #16]
 801b7a4:	f7ff fd42 	bl	801b22c <__hi0bits>
 801b7a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801b7ac:	e7e1      	b.n	801b772 <__d2b+0x62>

0801b7ae <__ratio>:
 801b7ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b7b2:	4688      	mov	r8, r1
 801b7b4:	4669      	mov	r1, sp
 801b7b6:	4681      	mov	r9, r0
 801b7b8:	f7ff ff5c 	bl	801b674 <__b2d>
 801b7bc:	a901      	add	r1, sp, #4
 801b7be:	4640      	mov	r0, r8
 801b7c0:	ec55 4b10 	vmov	r4, r5, d0
 801b7c4:	f7ff ff56 	bl	801b674 <__b2d>
 801b7c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b7cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b7d0:	1a9a      	subs	r2, r3, r2
 801b7d2:	e89d 000a 	ldmia.w	sp, {r1, r3}
 801b7d6:	1acb      	subs	r3, r1, r3
 801b7d8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b7dc:	ec57 6b10 	vmov	r6, r7, d0
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	bfd6      	itet	le
 801b7e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b7e8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 801b7ec:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 801b7f0:	4632      	mov	r2, r6
 801b7f2:	463b      	mov	r3, r7
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	4629      	mov	r1, r5
 801b7f8:	f7fc fe76 	bl	80184e8 <__aeabi_ddiv>
 801b7fc:	ec41 0b10 	vmov	d0, r0, r1
 801b800:	b003      	add	sp, #12
 801b802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801b808 <_mprec_log10>:
 801b808:	2817      	cmp	r0, #23
 801b80a:	b5d0      	push	{r4, r6, r7, lr}
 801b80c:	4604      	mov	r4, r0
 801b80e:	dc07      	bgt.n	801b820 <_mprec_log10+0x18>
 801b810:	4b09      	ldr	r3, [pc, #36]	; (801b838 <_mprec_log10+0x30>)
 801b812:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 801b816:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b81a:	ec41 0b10 	vmov	d0, r0, r1
 801b81e:	bdd0      	pop	{r4, r6, r7, pc}
 801b820:	4906      	ldr	r1, [pc, #24]	; (801b83c <_mprec_log10+0x34>)
 801b822:	4f07      	ldr	r7, [pc, #28]	; (801b840 <_mprec_log10+0x38>)
 801b824:	2000      	movs	r0, #0
 801b826:	2600      	movs	r6, #0
 801b828:	4632      	mov	r2, r6
 801b82a:	463b      	mov	r3, r7
 801b82c:	f7fc fd32 	bl	8018294 <__aeabi_dmul>
 801b830:	3c01      	subs	r4, #1
 801b832:	d1f9      	bne.n	801b828 <_mprec_log10+0x20>
 801b834:	e7f1      	b.n	801b81a <_mprec_log10+0x12>
 801b836:	bf00      	nop
 801b838:	0801cfe0 	.word	0x0801cfe0
 801b83c:	3ff00000 	.word	0x3ff00000
 801b840:	40240000 	.word	0x40240000

0801b844 <__copybits>:
 801b844:	3901      	subs	r1, #1
 801b846:	b510      	push	{r4, lr}
 801b848:	1149      	asrs	r1, r1, #5
 801b84a:	6914      	ldr	r4, [r2, #16]
 801b84c:	3101      	adds	r1, #1
 801b84e:	f102 0314 	add.w	r3, r2, #20
 801b852:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b85a:	42a3      	cmp	r3, r4
 801b85c:	4602      	mov	r2, r0
 801b85e:	d303      	bcc.n	801b868 <__copybits+0x24>
 801b860:	2300      	movs	r3, #0
 801b862:	428a      	cmp	r2, r1
 801b864:	d305      	bcc.n	801b872 <__copybits+0x2e>
 801b866:	bd10      	pop	{r4, pc}
 801b868:	f853 2b04 	ldr.w	r2, [r3], #4
 801b86c:	f840 2b04 	str.w	r2, [r0], #4
 801b870:	e7f3      	b.n	801b85a <__copybits+0x16>
 801b872:	f842 3b04 	str.w	r3, [r2], #4
 801b876:	e7f4      	b.n	801b862 <__copybits+0x1e>

0801b878 <__any_on>:
 801b878:	f100 0214 	add.w	r2, r0, #20
 801b87c:	6900      	ldr	r0, [r0, #16]
 801b87e:	114b      	asrs	r3, r1, #5
 801b880:	4298      	cmp	r0, r3
 801b882:	b510      	push	{r4, lr}
 801b884:	db11      	blt.n	801b8aa <__any_on+0x32>
 801b886:	dd0a      	ble.n	801b89e <__any_on+0x26>
 801b888:	f011 011f 	ands.w	r1, r1, #31
 801b88c:	d007      	beq.n	801b89e <__any_on+0x26>
 801b88e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b892:	fa24 f001 	lsr.w	r0, r4, r1
 801b896:	fa00 f101 	lsl.w	r1, r0, r1
 801b89a:	428c      	cmp	r4, r1
 801b89c:	d10b      	bne.n	801b8b6 <__any_on+0x3e>
 801b89e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	d803      	bhi.n	801b8ae <__any_on+0x36>
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	bd10      	pop	{r4, pc}
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	e7f7      	b.n	801b89e <__any_on+0x26>
 801b8ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b8b2:	2900      	cmp	r1, #0
 801b8b4:	d0f5      	beq.n	801b8a2 <__any_on+0x2a>
 801b8b6:	2001      	movs	r0, #1
 801b8b8:	bd10      	pop	{r4, pc}

0801b8ba <cleanup_glue>:
 801b8ba:	b538      	push	{r3, r4, r5, lr}
 801b8bc:	460c      	mov	r4, r1
 801b8be:	6809      	ldr	r1, [r1, #0]
 801b8c0:	4605      	mov	r5, r0
 801b8c2:	b109      	cbz	r1, 801b8c8 <cleanup_glue+0xe>
 801b8c4:	f7ff fff9 	bl	801b8ba <cleanup_glue>
 801b8c8:	4621      	mov	r1, r4
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8d0:	f7ff bb02 	b.w	801aed8 <_free_r>

0801b8d4 <_reclaim_reent>:
 801b8d4:	4b31      	ldr	r3, [pc, #196]	; (801b99c <_reclaim_reent+0xc8>)
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	4283      	cmp	r3, r0
 801b8da:	b570      	push	{r4, r5, r6, lr}
 801b8dc:	4604      	mov	r4, r0
 801b8de:	d05c      	beq.n	801b99a <_reclaim_reent+0xc6>
 801b8e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b8e2:	b1ab      	cbz	r3, 801b910 <_reclaim_reent+0x3c>
 801b8e4:	68db      	ldr	r3, [r3, #12]
 801b8e6:	b16b      	cbz	r3, 801b904 <_reclaim_reent+0x30>
 801b8e8:	2500      	movs	r5, #0
 801b8ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8ec:	68db      	ldr	r3, [r3, #12]
 801b8ee:	5959      	ldr	r1, [r3, r5]
 801b8f0:	2900      	cmp	r1, #0
 801b8f2:	d14c      	bne.n	801b98e <_reclaim_reent+0xba>
 801b8f4:	3504      	adds	r5, #4
 801b8f6:	2d80      	cmp	r5, #128	; 0x80
 801b8f8:	d1f7      	bne.n	801b8ea <_reclaim_reent+0x16>
 801b8fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	68d9      	ldr	r1, [r3, #12]
 801b900:	f7ff faea 	bl	801aed8 <_free_r>
 801b904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b906:	6819      	ldr	r1, [r3, #0]
 801b908:	b111      	cbz	r1, 801b910 <_reclaim_reent+0x3c>
 801b90a:	4620      	mov	r0, r4
 801b90c:	f7ff fae4 	bl	801aed8 <_free_r>
 801b910:	6961      	ldr	r1, [r4, #20]
 801b912:	b111      	cbz	r1, 801b91a <_reclaim_reent+0x46>
 801b914:	4620      	mov	r0, r4
 801b916:	f7ff fadf 	bl	801aed8 <_free_r>
 801b91a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b91c:	b111      	cbz	r1, 801b924 <_reclaim_reent+0x50>
 801b91e:	4620      	mov	r0, r4
 801b920:	f7ff fada 	bl	801aed8 <_free_r>
 801b924:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b926:	b111      	cbz	r1, 801b92e <_reclaim_reent+0x5a>
 801b928:	4620      	mov	r0, r4
 801b92a:	f7ff fad5 	bl	801aed8 <_free_r>
 801b92e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b930:	b111      	cbz	r1, 801b938 <_reclaim_reent+0x64>
 801b932:	4620      	mov	r0, r4
 801b934:	f7ff fad0 	bl	801aed8 <_free_r>
 801b938:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b93a:	b111      	cbz	r1, 801b942 <_reclaim_reent+0x6e>
 801b93c:	4620      	mov	r0, r4
 801b93e:	f7ff facb 	bl	801aed8 <_free_r>
 801b942:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 801b946:	b111      	cbz	r1, 801b94e <_reclaim_reent+0x7a>
 801b948:	4620      	mov	r0, r4
 801b94a:	f7ff fac5 	bl	801aed8 <_free_r>
 801b94e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 801b952:	b111      	cbz	r1, 801b95a <_reclaim_reent+0x86>
 801b954:	4620      	mov	r0, r4
 801b956:	f7ff fabf 	bl	801aed8 <_free_r>
 801b95a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801b95c:	b12b      	cbz	r3, 801b96a <_reclaim_reent+0x96>
 801b95e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 801b962:	b111      	cbz	r1, 801b96a <_reclaim_reent+0x96>
 801b964:	4620      	mov	r0, r4
 801b966:	f7ff fab7 	bl	801aed8 <_free_r>
 801b96a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b96c:	b111      	cbz	r1, 801b974 <_reclaim_reent+0xa0>
 801b96e:	4620      	mov	r0, r4
 801b970:	f7ff fab2 	bl	801aed8 <_free_r>
 801b974:	69a3      	ldr	r3, [r4, #24]
 801b976:	b183      	cbz	r3, 801b99a <_reclaim_reent+0xc6>
 801b978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b97a:	4620      	mov	r0, r4
 801b97c:	4798      	blx	r3
 801b97e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 801b982:	b151      	cbz	r1, 801b99a <_reclaim_reent+0xc6>
 801b984:	4620      	mov	r0, r4
 801b986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b98a:	f7ff bf96 	b.w	801b8ba <cleanup_glue>
 801b98e:	680e      	ldr	r6, [r1, #0]
 801b990:	4620      	mov	r0, r4
 801b992:	f7ff faa1 	bl	801aed8 <_free_r>
 801b996:	4631      	mov	r1, r6
 801b998:	e7aa      	b.n	801b8f0 <_reclaim_reent+0x1c>
 801b99a:	bd70      	pop	{r4, r5, r6, pc}
 801b99c:	20000188 	.word	0x20000188

0801b9a0 <__ssprint_r>:
 801b9a0:	6893      	ldr	r3, [r2, #8]
 801b9a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a6:	4681      	mov	r9, r0
 801b9a8:	460c      	mov	r4, r1
 801b9aa:	4617      	mov	r7, r2
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d060      	beq.n	801ba72 <__ssprint_r+0xd2>
 801b9b0:	f04f 0b00 	mov.w	fp, #0
 801b9b4:	f8d2 a000 	ldr.w	sl, [r2]
 801b9b8:	465e      	mov	r6, fp
 801b9ba:	b356      	cbz	r6, 801ba12 <__ssprint_r+0x72>
 801b9bc:	68a3      	ldr	r3, [r4, #8]
 801b9be:	429e      	cmp	r6, r3
 801b9c0:	d344      	bcc.n	801ba4c <__ssprint_r+0xac>
 801b9c2:	89a2      	ldrh	r2, [r4, #12]
 801b9c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b9c8:	d03e      	beq.n	801ba48 <__ssprint_r+0xa8>
 801b9ca:	6825      	ldr	r5, [r4, #0]
 801b9cc:	6921      	ldr	r1, [r4, #16]
 801b9ce:	eba5 0801 	sub.w	r8, r5, r1
 801b9d2:	6965      	ldr	r5, [r4, #20]
 801b9d4:	2302      	movs	r3, #2
 801b9d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b9da:	fb95 f5f3 	sdiv	r5, r5, r3
 801b9de:	f108 0301 	add.w	r3, r8, #1
 801b9e2:	4433      	add	r3, r6
 801b9e4:	429d      	cmp	r5, r3
 801b9e6:	bf38      	it	cc
 801b9e8:	461d      	movcc	r5, r3
 801b9ea:	0553      	lsls	r3, r2, #21
 801b9ec:	d546      	bpl.n	801ba7c <__ssprint_r+0xdc>
 801b9ee:	4629      	mov	r1, r5
 801b9f0:	4648      	mov	r0, r9
 801b9f2:	f7fd f963 	bl	8018cbc <_malloc_r>
 801b9f6:	b998      	cbnz	r0, 801ba20 <__ssprint_r+0x80>
 801b9f8:	230c      	movs	r3, #12
 801b9fa:	f8c9 3000 	str.w	r3, [r9]
 801b9fe:	89a3      	ldrh	r3, [r4, #12]
 801ba00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba04:	81a3      	strh	r3, [r4, #12]
 801ba06:	2300      	movs	r3, #0
 801ba08:	60bb      	str	r3, [r7, #8]
 801ba0a:	607b      	str	r3, [r7, #4]
 801ba0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba10:	e031      	b.n	801ba76 <__ssprint_r+0xd6>
 801ba12:	f8da b000 	ldr.w	fp, [sl]
 801ba16:	f8da 6004 	ldr.w	r6, [sl, #4]
 801ba1a:	f10a 0a08 	add.w	sl, sl, #8
 801ba1e:	e7cc      	b.n	801b9ba <__ssprint_r+0x1a>
 801ba20:	4642      	mov	r2, r8
 801ba22:	6921      	ldr	r1, [r4, #16]
 801ba24:	9001      	str	r0, [sp, #4]
 801ba26:	f7fd fb57 	bl	80190d8 <memcpy>
 801ba2a:	89a2      	ldrh	r2, [r4, #12]
 801ba2c:	9b01      	ldr	r3, [sp, #4]
 801ba2e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801ba32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801ba36:	81a2      	strh	r2, [r4, #12]
 801ba38:	6123      	str	r3, [r4, #16]
 801ba3a:	6165      	str	r5, [r4, #20]
 801ba3c:	4443      	add	r3, r8
 801ba3e:	eba5 0508 	sub.w	r5, r5, r8
 801ba42:	6023      	str	r3, [r4, #0]
 801ba44:	60a5      	str	r5, [r4, #8]
 801ba46:	4633      	mov	r3, r6
 801ba48:	429e      	cmp	r6, r3
 801ba4a:	d200      	bcs.n	801ba4e <__ssprint_r+0xae>
 801ba4c:	4633      	mov	r3, r6
 801ba4e:	461a      	mov	r2, r3
 801ba50:	4659      	mov	r1, fp
 801ba52:	6820      	ldr	r0, [r4, #0]
 801ba54:	9301      	str	r3, [sp, #4]
 801ba56:	f000 fc9b 	bl	801c390 <memmove>
 801ba5a:	68a2      	ldr	r2, [r4, #8]
 801ba5c:	9b01      	ldr	r3, [sp, #4]
 801ba5e:	1ad2      	subs	r2, r2, r3
 801ba60:	60a2      	str	r2, [r4, #8]
 801ba62:	6822      	ldr	r2, [r4, #0]
 801ba64:	4413      	add	r3, r2
 801ba66:	6023      	str	r3, [r4, #0]
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	1b9e      	subs	r6, r3, r6
 801ba6c:	60be      	str	r6, [r7, #8]
 801ba6e:	2e00      	cmp	r6, #0
 801ba70:	d1cf      	bne.n	801ba12 <__ssprint_r+0x72>
 801ba72:	2000      	movs	r0, #0
 801ba74:	6078      	str	r0, [r7, #4]
 801ba76:	b003      	add	sp, #12
 801ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7c:	462a      	mov	r2, r5
 801ba7e:	4648      	mov	r0, r9
 801ba80:	f000 fca0 	bl	801c3c4 <_realloc_r>
 801ba84:	4603      	mov	r3, r0
 801ba86:	2800      	cmp	r0, #0
 801ba88:	d1d6      	bne.n	801ba38 <__ssprint_r+0x98>
 801ba8a:	6921      	ldr	r1, [r4, #16]
 801ba8c:	4648      	mov	r0, r9
 801ba8e:	f7ff fa23 	bl	801aed8 <_free_r>
 801ba92:	e7b1      	b.n	801b9f8 <__ssprint_r+0x58>

0801ba94 <_svfiprintf_r>:
 801ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba98:	461c      	mov	r4, r3
 801ba9a:	898b      	ldrh	r3, [r1, #12]
 801ba9c:	b0ab      	sub	sp, #172	; 0xac
 801ba9e:	4615      	mov	r5, r2
 801baa0:	061a      	lsls	r2, r3, #24
 801baa2:	9002      	str	r0, [sp, #8]
 801baa4:	468a      	mov	sl, r1
 801baa6:	d516      	bpl.n	801bad6 <_svfiprintf_r+0x42>
 801baa8:	690b      	ldr	r3, [r1, #16]
 801baaa:	b9a3      	cbnz	r3, 801bad6 <_svfiprintf_r+0x42>
 801baac:	2140      	movs	r1, #64	; 0x40
 801baae:	f7fd f905 	bl	8018cbc <_malloc_r>
 801bab2:	f8ca 0000 	str.w	r0, [sl]
 801bab6:	f8ca 0010 	str.w	r0, [sl, #16]
 801baba:	b948      	cbnz	r0, 801bad0 <_svfiprintf_r+0x3c>
 801babc:	9a02      	ldr	r2, [sp, #8]
 801babe:	230c      	movs	r3, #12
 801bac0:	6013      	str	r3, [r2, #0]
 801bac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bac6:	9303      	str	r3, [sp, #12]
 801bac8:	9803      	ldr	r0, [sp, #12]
 801baca:	b02b      	add	sp, #172	; 0xac
 801bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad0:	2340      	movs	r3, #64	; 0x40
 801bad2:	f8ca 3014 	str.w	r3, [sl, #20]
 801bad6:	2300      	movs	r3, #0
 801bad8:	ae1a      	add	r6, sp, #104	; 0x68
 801bada:	960d      	str	r6, [sp, #52]	; 0x34
 801badc:	930f      	str	r3, [sp, #60]	; 0x3c
 801bade:	930e      	str	r3, [sp, #56]	; 0x38
 801bae0:	9501      	str	r5, [sp, #4]
 801bae2:	9306      	str	r3, [sp, #24]
 801bae4:	9303      	str	r3, [sp, #12]
 801bae6:	9f01      	ldr	r7, [sp, #4]
 801bae8:	463d      	mov	r5, r7
 801baea:	f815 3b01 	ldrb.w	r3, [r5], #1
 801baee:	b10b      	cbz	r3, 801baf4 <_svfiprintf_r+0x60>
 801baf0:	2b25      	cmp	r3, #37	; 0x25
 801baf2:	d143      	bne.n	801bb7c <_svfiprintf_r+0xe8>
 801baf4:	9b01      	ldr	r3, [sp, #4]
 801baf6:	ebb7 0803 	subs.w	r8, r7, r3
 801bafa:	d00d      	beq.n	801bb18 <_svfiprintf_r+0x84>
 801bafc:	e886 0108 	stmia.w	r6, {r3, r8}
 801bb00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb02:	4443      	add	r3, r8
 801bb04:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb08:	3301      	adds	r3, #1
 801bb0a:	2b07      	cmp	r3, #7
 801bb0c:	930e      	str	r3, [sp, #56]	; 0x38
 801bb0e:	dc37      	bgt.n	801bb80 <_svfiprintf_r+0xec>
 801bb10:	3608      	adds	r6, #8
 801bb12:	9b03      	ldr	r3, [sp, #12]
 801bb14:	4443      	add	r3, r8
 801bb16:	9303      	str	r3, [sp, #12]
 801bb18:	783b      	ldrb	r3, [r7, #0]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	f000 8367 	beq.w	801c1ee <_svfiprintf_r+0x75a>
 801bb20:	f04f 0300 	mov.w	r3, #0
 801bb24:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801bb28:	2300      	movs	r3, #0
 801bb2a:	461a      	mov	r2, r3
 801bb2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801bb30:	9304      	str	r3, [sp, #16]
 801bb32:	461f      	mov	r7, r3
 801bb34:	200a      	movs	r0, #10
 801bb36:	1c69      	adds	r1, r5, #1
 801bb38:	9101      	str	r1, [sp, #4]
 801bb3a:	7829      	ldrb	r1, [r5, #0]
 801bb3c:	2958      	cmp	r1, #88	; 0x58
 801bb3e:	f000 8158 	beq.w	801bdf2 <_svfiprintf_r+0x35e>
 801bb42:	dc49      	bgt.n	801bbd8 <_svfiprintf_r+0x144>
 801bb44:	292e      	cmp	r1, #46	; 0x2e
 801bb46:	f000 8183 	beq.w	801be50 <_svfiprintf_r+0x3bc>
 801bb4a:	dc2d      	bgt.n	801bba8 <_svfiprintf_r+0x114>
 801bb4c:	292a      	cmp	r1, #42	; 0x2a
 801bb4e:	f000 8175 	beq.w	801be3c <_svfiprintf_r+0x3a8>
 801bb52:	dc21      	bgt.n	801bb98 <_svfiprintf_r+0x104>
 801bb54:	2920      	cmp	r1, #32
 801bb56:	f000 8169 	beq.w	801be2c <_svfiprintf_r+0x398>
 801bb5a:	2923      	cmp	r1, #35	; 0x23
 801bb5c:	f000 816b 	beq.w	801be36 <_svfiprintf_r+0x3a2>
 801bb60:	b10b      	cbz	r3, 801bb66 <_svfiprintf_r+0xd2>
 801bb62:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bb66:	2900      	cmp	r1, #0
 801bb68:	f000 8341 	beq.w	801c1ee <_svfiprintf_r+0x75a>
 801bb6c:	f04f 0300 	mov.w	r3, #0
 801bb70:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 801bb74:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801bb78:	46a0      	mov	r8, r4
 801bb7a:	e1a1      	b.n	801bec0 <_svfiprintf_r+0x42c>
 801bb7c:	462f      	mov	r7, r5
 801bb7e:	e7b3      	b.n	801bae8 <_svfiprintf_r+0x54>
 801bb80:	aa0d      	add	r2, sp, #52	; 0x34
 801bb82:	4651      	mov	r1, sl
 801bb84:	9802      	ldr	r0, [sp, #8]
 801bb86:	f7ff ff0b 	bl	801b9a0 <__ssprint_r>
 801bb8a:	2800      	cmp	r0, #0
 801bb8c:	f040 8313 	bne.w	801c1b6 <_svfiprintf_r+0x722>
 801bb90:	ae1a      	add	r6, sp, #104	; 0x68
 801bb92:	e7be      	b.n	801bb12 <_svfiprintf_r+0x7e>
 801bb94:	460c      	mov	r4, r1
 801bb96:	e14c      	b.n	801be32 <_svfiprintf_r+0x39e>
 801bb98:	292b      	cmp	r1, #43	; 0x2b
 801bb9a:	f000 8148 	beq.w	801be2e <_svfiprintf_r+0x39a>
 801bb9e:	292d      	cmp	r1, #45	; 0x2d
 801bba0:	d1de      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bba2:	f047 0704 	orr.w	r7, r7, #4
 801bba6:	e144      	b.n	801be32 <_svfiprintf_r+0x39e>
 801bba8:	2939      	cmp	r1, #57	; 0x39
 801bbaa:	dc07      	bgt.n	801bbbc <_svfiprintf_r+0x128>
 801bbac:	2931      	cmp	r1, #49	; 0x31
 801bbae:	f280 8168 	bge.w	801be82 <_svfiprintf_r+0x3ee>
 801bbb2:	2930      	cmp	r1, #48	; 0x30
 801bbb4:	d1d4      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bbb6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 801bbba:	e13a      	b.n	801be32 <_svfiprintf_r+0x39e>
 801bbbc:	294f      	cmp	r1, #79	; 0x4f
 801bbbe:	f000 81ba 	beq.w	801bf36 <_svfiprintf_r+0x4a2>
 801bbc2:	2955      	cmp	r1, #85	; 0x55
 801bbc4:	f000 81f0 	beq.w	801bfa8 <_svfiprintf_r+0x514>
 801bbc8:	2944      	cmp	r1, #68	; 0x44
 801bbca:	d1c9      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bbcc:	b10b      	cbz	r3, 801bbd2 <_svfiprintf_r+0x13e>
 801bbce:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bbd2:	f047 0710 	orr.w	r7, r7, #16
 801bbd6:	e00f      	b.n	801bbf8 <_svfiprintf_r+0x164>
 801bbd8:	296e      	cmp	r1, #110	; 0x6e
 801bbda:	f000 8185 	beq.w	801bee8 <_svfiprintf_r+0x454>
 801bbde:	dc31      	bgt.n	801bc44 <_svfiprintf_r+0x1b0>
 801bbe0:	2968      	cmp	r1, #104	; 0x68
 801bbe2:	f000 815e 	beq.w	801bea2 <_svfiprintf_r+0x40e>
 801bbe6:	dc1e      	bgt.n	801bc26 <_svfiprintf_r+0x192>
 801bbe8:	2963      	cmp	r1, #99	; 0x63
 801bbea:	f000 8160 	beq.w	801beae <_svfiprintf_r+0x41a>
 801bbee:	2964      	cmp	r1, #100	; 0x64
 801bbf0:	d1b6      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bbf2:	b10b      	cbz	r3, 801bbf8 <_svfiprintf_r+0x164>
 801bbf4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bbf8:	06bb      	lsls	r3, r7, #26
 801bbfa:	f140 8167 	bpl.w	801becc <_svfiprintf_r+0x438>
 801bbfe:	3407      	adds	r4, #7
 801bc00:	f024 0407 	bic.w	r4, r4, #7
 801bc04:	f104 0808 	add.w	r8, r4, #8
 801bc08:	e9d4 4500 	ldrd	r4, r5, [r4]
 801bc0c:	2c00      	cmp	r4, #0
 801bc0e:	f175 0300 	sbcs.w	r3, r5, #0
 801bc12:	da06      	bge.n	801bc22 <_svfiprintf_r+0x18e>
 801bc14:	4264      	negs	r4, r4
 801bc16:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801bc1a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801bc1e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801bc22:	2301      	movs	r3, #1
 801bc24:	e198      	b.n	801bf58 <_svfiprintf_r+0x4c4>
 801bc26:	2969      	cmp	r1, #105	; 0x69
 801bc28:	d0e3      	beq.n	801bbf2 <_svfiprintf_r+0x15e>
 801bc2a:	296c      	cmp	r1, #108	; 0x6c
 801bc2c:	d198      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bc2e:	9901      	ldr	r1, [sp, #4]
 801bc30:	7809      	ldrb	r1, [r1, #0]
 801bc32:	296c      	cmp	r1, #108	; 0x6c
 801bc34:	f040 8138 	bne.w	801bea8 <_svfiprintf_r+0x414>
 801bc38:	9901      	ldr	r1, [sp, #4]
 801bc3a:	3101      	adds	r1, #1
 801bc3c:	9101      	str	r1, [sp, #4]
 801bc3e:	f047 0720 	orr.w	r7, r7, #32
 801bc42:	e0f6      	b.n	801be32 <_svfiprintf_r+0x39e>
 801bc44:	2971      	cmp	r1, #113	; 0x71
 801bc46:	d0fa      	beq.n	801bc3e <_svfiprintf_r+0x1aa>
 801bc48:	dc14      	bgt.n	801bc74 <_svfiprintf_r+0x1e0>
 801bc4a:	296f      	cmp	r1, #111	; 0x6f
 801bc4c:	f000 8175 	beq.w	801bf3a <_svfiprintf_r+0x4a6>
 801bc50:	2970      	cmp	r1, #112	; 0x70
 801bc52:	d185      	bne.n	801bb60 <_svfiprintf_r+0xcc>
 801bc54:	2330      	movs	r3, #48	; 0x30
 801bc56:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 801bc5a:	2378      	movs	r3, #120	; 0x78
 801bc5c:	f104 0804 	add.w	r8, r4, #4
 801bc60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801bc64:	6824      	ldr	r4, [r4, #0]
 801bc66:	4bac      	ldr	r3, [pc, #688]	; (801bf18 <_svfiprintf_r+0x484>)
 801bc68:	9306      	str	r3, [sp, #24]
 801bc6a:	2500      	movs	r5, #0
 801bc6c:	f047 0702 	orr.w	r7, r7, #2
 801bc70:	2302      	movs	r3, #2
 801bc72:	e16d      	b.n	801bf50 <_svfiprintf_r+0x4bc>
 801bc74:	2975      	cmp	r1, #117	; 0x75
 801bc76:	f000 8199 	beq.w	801bfac <_svfiprintf_r+0x518>
 801bc7a:	2978      	cmp	r1, #120	; 0x78
 801bc7c:	f000 81ad 	beq.w	801bfda <_svfiprintf_r+0x546>
 801bc80:	2973      	cmp	r1, #115	; 0x73
 801bc82:	f47f af6d 	bne.w	801bb60 <_svfiprintf_r+0xcc>
 801bc86:	f04f 0300 	mov.w	r3, #0
 801bc8a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 801bc8e:	f104 0804 	add.w	r8, r4, #4
 801bc92:	f8d4 9000 	ldr.w	r9, [r4]
 801bc96:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801bc9a:	f000 8180 	beq.w	801bf9e <_svfiprintf_r+0x50a>
 801bc9e:	465a      	mov	r2, fp
 801bca0:	2100      	movs	r1, #0
 801bca2:	4648      	mov	r0, r9
 801bca4:	f7fc f8e4 	bl	8017e70 <memchr>
 801bca8:	2800      	cmp	r0, #0
 801bcaa:	f000 81ea 	beq.w	801c082 <_svfiprintf_r+0x5ee>
 801bcae:	eba0 0b09 	sub.w	fp, r0, r9
 801bcb2:	2400      	movs	r4, #0
 801bcb4:	455c      	cmp	r4, fp
 801bcb6:	4623      	mov	r3, r4
 801bcb8:	bfb8      	it	lt
 801bcba:	465b      	movlt	r3, fp
 801bcbc:	9305      	str	r3, [sp, #20]
 801bcbe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801bcc2:	b113      	cbz	r3, 801bcca <_svfiprintf_r+0x236>
 801bcc4:	9b05      	ldr	r3, [sp, #20]
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	9305      	str	r3, [sp, #20]
 801bcca:	f017 0302 	ands.w	r3, r7, #2
 801bcce:	9307      	str	r3, [sp, #28]
 801bcd0:	bf1e      	ittt	ne
 801bcd2:	9b05      	ldrne	r3, [sp, #20]
 801bcd4:	3302      	addne	r3, #2
 801bcd6:	9305      	strne	r3, [sp, #20]
 801bcd8:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 801bcdc:	9308      	str	r3, [sp, #32]
 801bcde:	d114      	bne.n	801bd0a <_svfiprintf_r+0x276>
 801bce0:	9b04      	ldr	r3, [sp, #16]
 801bce2:	9a05      	ldr	r2, [sp, #20]
 801bce4:	1a9d      	subs	r5, r3, r2
 801bce6:	2d00      	cmp	r5, #0
 801bce8:	dd0f      	ble.n	801bd0a <_svfiprintf_r+0x276>
 801bcea:	4b8c      	ldr	r3, [pc, #560]	; (801bf1c <_svfiprintf_r+0x488>)
 801bcec:	6033      	str	r3, [r6, #0]
 801bcee:	2d10      	cmp	r5, #16
 801bcf0:	f300 81c9 	bgt.w	801c086 <_svfiprintf_r+0x5f2>
 801bcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bcf6:	6075      	str	r5, [r6, #4]
 801bcf8:	441d      	add	r5, r3
 801bcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcfc:	950f      	str	r5, [sp, #60]	; 0x3c
 801bcfe:	3301      	adds	r3, #1
 801bd00:	2b07      	cmp	r3, #7
 801bd02:	930e      	str	r3, [sp, #56]	; 0x38
 801bd04:	f300 81d8 	bgt.w	801c0b8 <_svfiprintf_r+0x624>
 801bd08:	3608      	adds	r6, #8
 801bd0a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801bd0e:	b173      	cbz	r3, 801bd2e <_svfiprintf_r+0x29a>
 801bd10:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801bd14:	6033      	str	r3, [r6, #0]
 801bd16:	2301      	movs	r3, #1
 801bd18:	6073      	str	r3, [r6, #4]
 801bd1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd1c:	3301      	adds	r3, #1
 801bd1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd22:	3301      	adds	r3, #1
 801bd24:	2b07      	cmp	r3, #7
 801bd26:	930e      	str	r3, [sp, #56]	; 0x38
 801bd28:	f300 81cf 	bgt.w	801c0ca <_svfiprintf_r+0x636>
 801bd2c:	3608      	adds	r6, #8
 801bd2e:	9b07      	ldr	r3, [sp, #28]
 801bd30:	b16b      	cbz	r3, 801bd4e <_svfiprintf_r+0x2ba>
 801bd32:	ab0c      	add	r3, sp, #48	; 0x30
 801bd34:	6033      	str	r3, [r6, #0]
 801bd36:	2302      	movs	r3, #2
 801bd38:	6073      	str	r3, [r6, #4]
 801bd3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd3c:	3302      	adds	r3, #2
 801bd3e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd42:	3301      	adds	r3, #1
 801bd44:	2b07      	cmp	r3, #7
 801bd46:	930e      	str	r3, [sp, #56]	; 0x38
 801bd48:	f300 81c8 	bgt.w	801c0dc <_svfiprintf_r+0x648>
 801bd4c:	3608      	adds	r6, #8
 801bd4e:	9b08      	ldr	r3, [sp, #32]
 801bd50:	2b80      	cmp	r3, #128	; 0x80
 801bd52:	d114      	bne.n	801bd7e <_svfiprintf_r+0x2ea>
 801bd54:	9b04      	ldr	r3, [sp, #16]
 801bd56:	9a05      	ldr	r2, [sp, #20]
 801bd58:	1a9d      	subs	r5, r3, r2
 801bd5a:	2d00      	cmp	r5, #0
 801bd5c:	dd0f      	ble.n	801bd7e <_svfiprintf_r+0x2ea>
 801bd5e:	4b70      	ldr	r3, [pc, #448]	; (801bf20 <_svfiprintf_r+0x48c>)
 801bd60:	6033      	str	r3, [r6, #0]
 801bd62:	2d10      	cmp	r5, #16
 801bd64:	f300 81c3 	bgt.w	801c0ee <_svfiprintf_r+0x65a>
 801bd68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd6a:	6075      	str	r5, [r6, #4]
 801bd6c:	441d      	add	r5, r3
 801bd6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd70:	950f      	str	r5, [sp, #60]	; 0x3c
 801bd72:	3301      	adds	r3, #1
 801bd74:	2b07      	cmp	r3, #7
 801bd76:	930e      	str	r3, [sp, #56]	; 0x38
 801bd78:	f300 81d1 	bgt.w	801c11e <_svfiprintf_r+0x68a>
 801bd7c:	3608      	adds	r6, #8
 801bd7e:	eba4 040b 	sub.w	r4, r4, fp
 801bd82:	2c00      	cmp	r4, #0
 801bd84:	dd0f      	ble.n	801bda6 <_svfiprintf_r+0x312>
 801bd86:	4d66      	ldr	r5, [pc, #408]	; (801bf20 <_svfiprintf_r+0x48c>)
 801bd88:	6035      	str	r5, [r6, #0]
 801bd8a:	2c10      	cmp	r4, #16
 801bd8c:	f300 81d0 	bgt.w	801c130 <_svfiprintf_r+0x69c>
 801bd90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bd94:	6074      	str	r4, [r6, #4]
 801bd96:	3301      	adds	r3, #1
 801bd98:	4404      	add	r4, r0
 801bd9a:	2b07      	cmp	r3, #7
 801bd9c:	940f      	str	r4, [sp, #60]	; 0x3c
 801bd9e:	930e      	str	r3, [sp, #56]	; 0x38
 801bda0:	f300 81dc 	bgt.w	801c15c <_svfiprintf_r+0x6c8>
 801bda4:	3608      	adds	r6, #8
 801bda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bda8:	445b      	add	r3, fp
 801bdaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801bdac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdae:	3301      	adds	r3, #1
 801bdb0:	2b07      	cmp	r3, #7
 801bdb2:	e886 0a00 	stmia.w	r6, {r9, fp}
 801bdb6:	930e      	str	r3, [sp, #56]	; 0x38
 801bdb8:	f300 81d8 	bgt.w	801c16c <_svfiprintf_r+0x6d8>
 801bdbc:	3608      	adds	r6, #8
 801bdbe:	077b      	lsls	r3, r7, #29
 801bdc0:	f100 81dc 	bmi.w	801c17c <_svfiprintf_r+0x6e8>
 801bdc4:	9b03      	ldr	r3, [sp, #12]
 801bdc6:	9a04      	ldr	r2, [sp, #16]
 801bdc8:	9905      	ldr	r1, [sp, #20]
 801bdca:	428a      	cmp	r2, r1
 801bdcc:	bfac      	ite	ge
 801bdce:	189b      	addge	r3, r3, r2
 801bdd0:	185b      	addlt	r3, r3, r1
 801bdd2:	9303      	str	r3, [sp, #12]
 801bdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdd6:	b13b      	cbz	r3, 801bde8 <_svfiprintf_r+0x354>
 801bdd8:	aa0d      	add	r2, sp, #52	; 0x34
 801bdda:	4651      	mov	r1, sl
 801bddc:	9802      	ldr	r0, [sp, #8]
 801bdde:	f7ff fddf 	bl	801b9a0 <__ssprint_r>
 801bde2:	2800      	cmp	r0, #0
 801bde4:	f040 81e7 	bne.w	801c1b6 <_svfiprintf_r+0x722>
 801bde8:	2300      	movs	r3, #0
 801bdea:	930e      	str	r3, [sp, #56]	; 0x38
 801bdec:	4644      	mov	r4, r8
 801bdee:	ae1a      	add	r6, sp, #104	; 0x68
 801bdf0:	e679      	b.n	801bae6 <_svfiprintf_r+0x52>
 801bdf2:	b10b      	cbz	r3, 801bdf8 <_svfiprintf_r+0x364>
 801bdf4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bdf8:	4b4a      	ldr	r3, [pc, #296]	; (801bf24 <_svfiprintf_r+0x490>)
 801bdfa:	9306      	str	r3, [sp, #24]
 801bdfc:	06bb      	lsls	r3, r7, #26
 801bdfe:	f140 80f1 	bpl.w	801bfe4 <_svfiprintf_r+0x550>
 801be02:	3407      	adds	r4, #7
 801be04:	f024 0407 	bic.w	r4, r4, #7
 801be08:	f104 0808 	add.w	r8, r4, #8
 801be0c:	e9d4 4500 	ldrd	r4, r5, [r4]
 801be10:	07f8      	lsls	r0, r7, #31
 801be12:	f57f af2d 	bpl.w	801bc70 <_svfiprintf_r+0x1dc>
 801be16:	ea54 0305 	orrs.w	r3, r4, r5
 801be1a:	bf1f      	itttt	ne
 801be1c:	2330      	movne	r3, #48	; 0x30
 801be1e:	f88d 3030 	strbne.w	r3, [sp, #48]	; 0x30
 801be22:	f88d 1031 	strbne.w	r1, [sp, #49]	; 0x31
 801be26:	f047 0702 	orrne.w	r7, r7, #2
 801be2a:	e721      	b.n	801bc70 <_svfiprintf_r+0x1dc>
 801be2c:	b90a      	cbnz	r2, 801be32 <_svfiprintf_r+0x39e>
 801be2e:	2301      	movs	r3, #1
 801be30:	460a      	mov	r2, r1
 801be32:	9d01      	ldr	r5, [sp, #4]
 801be34:	e67f      	b.n	801bb36 <_svfiprintf_r+0xa2>
 801be36:	f047 0701 	orr.w	r7, r7, #1
 801be3a:	e7fa      	b.n	801be32 <_svfiprintf_r+0x39e>
 801be3c:	1d21      	adds	r1, r4, #4
 801be3e:	6824      	ldr	r4, [r4, #0]
 801be40:	9404      	str	r4, [sp, #16]
 801be42:	2c00      	cmp	r4, #0
 801be44:	f6bf aea6 	bge.w	801bb94 <_svfiprintf_r+0x100>
 801be48:	4264      	negs	r4, r4
 801be4a:	9404      	str	r4, [sp, #16]
 801be4c:	460c      	mov	r4, r1
 801be4e:	e6a8      	b.n	801bba2 <_svfiprintf_r+0x10e>
 801be50:	9901      	ldr	r1, [sp, #4]
 801be52:	1c4d      	adds	r5, r1, #1
 801be54:	7809      	ldrb	r1, [r1, #0]
 801be56:	292a      	cmp	r1, #42	; 0x2a
 801be58:	d00d      	beq.n	801be76 <_svfiprintf_r+0x3e2>
 801be5a:	f04f 0b00 	mov.w	fp, #0
 801be5e:	9501      	str	r5, [sp, #4]
 801be60:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 801be64:	2d09      	cmp	r5, #9
 801be66:	f63f ae69 	bhi.w	801bb3c <_svfiprintf_r+0xa8>
 801be6a:	fb00 5b0b 	mla	fp, r0, fp, r5
 801be6e:	9d01      	ldr	r5, [sp, #4]
 801be70:	f815 1b01 	ldrb.w	r1, [r5], #1
 801be74:	e7f3      	b.n	801be5e <_svfiprintf_r+0x3ca>
 801be76:	6821      	ldr	r1, [r4, #0]
 801be78:	9501      	str	r5, [sp, #4]
 801be7a:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 801be7e:	3404      	adds	r4, #4
 801be80:	e7d7      	b.n	801be32 <_svfiprintf_r+0x39e>
 801be82:	2500      	movs	r5, #0
 801be84:	9504      	str	r5, [sp, #16]
 801be86:	9d04      	ldr	r5, [sp, #16]
 801be88:	3930      	subs	r1, #48	; 0x30
 801be8a:	fb00 1105 	mla	r1, r0, r5, r1
 801be8e:	9d01      	ldr	r5, [sp, #4]
 801be90:	9104      	str	r1, [sp, #16]
 801be92:	f815 1b01 	ldrb.w	r1, [r5], #1
 801be96:	9501      	str	r5, [sp, #4]
 801be98:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 801be9c:	2d09      	cmp	r5, #9
 801be9e:	d9f2      	bls.n	801be86 <_svfiprintf_r+0x3f2>
 801bea0:	e64c      	b.n	801bb3c <_svfiprintf_r+0xa8>
 801bea2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 801bea6:	e7c4      	b.n	801be32 <_svfiprintf_r+0x39e>
 801bea8:	f047 0710 	orr.w	r7, r7, #16
 801beac:	e7c1      	b.n	801be32 <_svfiprintf_r+0x39e>
 801beae:	6823      	ldr	r3, [r4, #0]
 801beb0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801beb4:	f04f 0300 	mov.w	r3, #0
 801beb8:	f104 0804 	add.w	r8, r4, #4
 801bebc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801bec0:	f04f 0b01 	mov.w	fp, #1
 801bec4:	2400      	movs	r4, #0
 801bec6:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 801beca:	e6f3      	b.n	801bcb4 <_svfiprintf_r+0x220>
 801becc:	f017 0f10 	tst.w	r7, #16
 801bed0:	f104 0804 	add.w	r8, r4, #4
 801bed4:	d002      	beq.n	801bedc <_svfiprintf_r+0x448>
 801bed6:	6824      	ldr	r4, [r4, #0]
 801bed8:	17e5      	asrs	r5, r4, #31
 801beda:	e697      	b.n	801bc0c <_svfiprintf_r+0x178>
 801bedc:	6824      	ldr	r4, [r4, #0]
 801bede:	f017 0f40 	tst.w	r7, #64	; 0x40
 801bee2:	bf18      	it	ne
 801bee4:	b224      	sxthne	r4, r4
 801bee6:	e7f7      	b.n	801bed8 <_svfiprintf_r+0x444>
 801bee8:	b10b      	cbz	r3, 801beee <_svfiprintf_r+0x45a>
 801beea:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801beee:	f017 0f20 	tst.w	r7, #32
 801bef2:	f104 0304 	add.w	r3, r4, #4
 801bef6:	d008      	beq.n	801bf0a <_svfiprintf_r+0x476>
 801bef8:	9903      	ldr	r1, [sp, #12]
 801befa:	6822      	ldr	r2, [r4, #0]
 801befc:	17cd      	asrs	r5, r1, #31
 801befe:	4608      	mov	r0, r1
 801bf00:	4629      	mov	r1, r5
 801bf02:	e9c2 0100 	strd	r0, r1, [r2]
 801bf06:	461c      	mov	r4, r3
 801bf08:	e5ed      	b.n	801bae6 <_svfiprintf_r+0x52>
 801bf0a:	06fd      	lsls	r5, r7, #27
 801bf0c:	d50c      	bpl.n	801bf28 <_svfiprintf_r+0x494>
 801bf0e:	6822      	ldr	r2, [r4, #0]
 801bf10:	9903      	ldr	r1, [sp, #12]
 801bf12:	6011      	str	r1, [r2, #0]
 801bf14:	e7f7      	b.n	801bf06 <_svfiprintf_r+0x472>
 801bf16:	bf00      	nop
 801bf18:	0801cf75 	.word	0x0801cf75
 801bf1c:	0801d0dc 	.word	0x0801d0dc
 801bf20:	0801d0ec 	.word	0x0801d0ec
 801bf24:	0801cf64 	.word	0x0801cf64
 801bf28:	0678      	lsls	r0, r7, #25
 801bf2a:	d5f0      	bpl.n	801bf0e <_svfiprintf_r+0x47a>
 801bf2c:	6822      	ldr	r2, [r4, #0]
 801bf2e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801bf32:	8011      	strh	r1, [r2, #0]
 801bf34:	e7e7      	b.n	801bf06 <_svfiprintf_r+0x472>
 801bf36:	f047 0710 	orr.w	r7, r7, #16
 801bf3a:	f017 0320 	ands.w	r3, r7, #32
 801bf3e:	d020      	beq.n	801bf82 <_svfiprintf_r+0x4ee>
 801bf40:	3407      	adds	r4, #7
 801bf42:	f024 0407 	bic.w	r4, r4, #7
 801bf46:	f104 0808 	add.w	r8, r4, #8
 801bf4a:	e9d4 4500 	ldrd	r4, r5, [r4]
 801bf4e:	2300      	movs	r3, #0
 801bf50:	f04f 0200 	mov.w	r2, #0
 801bf54:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bf58:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 801bf5c:	f000 8150 	beq.w	801c200 <_svfiprintf_r+0x76c>
 801bf60:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 801bf64:	9205      	str	r2, [sp, #20]
 801bf66:	ea54 0205 	orrs.w	r2, r4, r5
 801bf6a:	f040 814e 	bne.w	801c20a <_svfiprintf_r+0x776>
 801bf6e:	f1bb 0f00 	cmp.w	fp, #0
 801bf72:	d07a      	beq.n	801c06a <_svfiprintf_r+0x5d6>
 801bf74:	2b01      	cmp	r3, #1
 801bf76:	d047      	beq.n	801c008 <_svfiprintf_r+0x574>
 801bf78:	2b02      	cmp	r3, #2
 801bf7a:	d062      	beq.n	801c042 <_svfiprintf_r+0x5ae>
 801bf7c:	2400      	movs	r4, #0
 801bf7e:	2500      	movs	r5, #0
 801bf80:	e149      	b.n	801c216 <_svfiprintf_r+0x782>
 801bf82:	f017 0210 	ands.w	r2, r7, #16
 801bf86:	f104 0804 	add.w	r8, r4, #4
 801bf8a:	d002      	beq.n	801bf92 <_svfiprintf_r+0x4fe>
 801bf8c:	6824      	ldr	r4, [r4, #0]
 801bf8e:	2500      	movs	r5, #0
 801bf90:	e7de      	b.n	801bf50 <_svfiprintf_r+0x4bc>
 801bf92:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 801bf96:	d0f9      	beq.n	801bf8c <_svfiprintf_r+0x4f8>
 801bf98:	8824      	ldrh	r4, [r4, #0]
 801bf9a:	2500      	movs	r5, #0
 801bf9c:	e7d7      	b.n	801bf4e <_svfiprintf_r+0x4ba>
 801bf9e:	4648      	mov	r0, r9
 801bfa0:	f7fb ff5a 	bl	8017e58 <strlen>
 801bfa4:	4683      	mov	fp, r0
 801bfa6:	e684      	b.n	801bcb2 <_svfiprintf_r+0x21e>
 801bfa8:	f047 0710 	orr.w	r7, r7, #16
 801bfac:	06b9      	lsls	r1, r7, #26
 801bfae:	d508      	bpl.n	801bfc2 <_svfiprintf_r+0x52e>
 801bfb0:	3407      	adds	r4, #7
 801bfb2:	f024 0407 	bic.w	r4, r4, #7
 801bfb6:	f104 0808 	add.w	r8, r4, #8
 801bfba:	e9d4 4500 	ldrd	r4, r5, [r4]
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	e7c6      	b.n	801bf50 <_svfiprintf_r+0x4bc>
 801bfc2:	f017 0f10 	tst.w	r7, #16
 801bfc6:	f104 0804 	add.w	r8, r4, #4
 801bfca:	d001      	beq.n	801bfd0 <_svfiprintf_r+0x53c>
 801bfcc:	6824      	ldr	r4, [r4, #0]
 801bfce:	e002      	b.n	801bfd6 <_svfiprintf_r+0x542>
 801bfd0:	067a      	lsls	r2, r7, #25
 801bfd2:	d5fb      	bpl.n	801bfcc <_svfiprintf_r+0x538>
 801bfd4:	8824      	ldrh	r4, [r4, #0]
 801bfd6:	2500      	movs	r5, #0
 801bfd8:	e7f1      	b.n	801bfbe <_svfiprintf_r+0x52a>
 801bfda:	b10b      	cbz	r3, 801bfe0 <_svfiprintf_r+0x54c>
 801bfdc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801bfe0:	4b9e      	ldr	r3, [pc, #632]	; (801c25c <_svfiprintf_r+0x7c8>)
 801bfe2:	e70a      	b.n	801bdfa <_svfiprintf_r+0x366>
 801bfe4:	f017 0f10 	tst.w	r7, #16
 801bfe8:	f104 0804 	add.w	r8, r4, #4
 801bfec:	d001      	beq.n	801bff2 <_svfiprintf_r+0x55e>
 801bfee:	6824      	ldr	r4, [r4, #0]
 801bff0:	e002      	b.n	801bff8 <_svfiprintf_r+0x564>
 801bff2:	067d      	lsls	r5, r7, #25
 801bff4:	d5fb      	bpl.n	801bfee <_svfiprintf_r+0x55a>
 801bff6:	8824      	ldrh	r4, [r4, #0]
 801bff8:	2500      	movs	r5, #0
 801bffa:	e709      	b.n	801be10 <_svfiprintf_r+0x37c>
 801bffc:	464b      	mov	r3, r9
 801bffe:	e10b      	b.n	801c218 <_svfiprintf_r+0x784>
 801c000:	2d00      	cmp	r5, #0
 801c002:	bf08      	it	eq
 801c004:	2c0a      	cmpeq	r4, #10
 801c006:	d205      	bcs.n	801c014 <_svfiprintf_r+0x580>
 801c008:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 801c00c:	3430      	adds	r4, #48	; 0x30
 801c00e:	f809 4d41 	strb.w	r4, [r9, #-65]!
 801c012:	e11c      	b.n	801c24e <_svfiprintf_r+0x7ba>
 801c014:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801c018:	4620      	mov	r0, r4
 801c01a:	4629      	mov	r1, r5
 801c01c:	220a      	movs	r2, #10
 801c01e:	2300      	movs	r3, #0
 801c020:	f7fc fc60 	bl	80188e4 <__aeabi_uldivmod>
 801c024:	3230      	adds	r2, #48	; 0x30
 801c026:	f809 2d01 	strb.w	r2, [r9, #-1]!
 801c02a:	2300      	movs	r3, #0
 801c02c:	4620      	mov	r0, r4
 801c02e:	4629      	mov	r1, r5
 801c030:	220a      	movs	r2, #10
 801c032:	f7fc fc57 	bl	80188e4 <__aeabi_uldivmod>
 801c036:	4604      	mov	r4, r0
 801c038:	460d      	mov	r5, r1
 801c03a:	ea54 0305 	orrs.w	r3, r4, r5
 801c03e:	d1eb      	bne.n	801c018 <_svfiprintf_r+0x584>
 801c040:	e105      	b.n	801c24e <_svfiprintf_r+0x7ba>
 801c042:	2400      	movs	r4, #0
 801c044:	2500      	movs	r5, #0
 801c046:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801c04a:	f004 030f 	and.w	r3, r4, #15
 801c04e:	9a06      	ldr	r2, [sp, #24]
 801c050:	5cd3      	ldrb	r3, [r2, r3]
 801c052:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801c056:	0923      	lsrs	r3, r4, #4
 801c058:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801c05c:	092a      	lsrs	r2, r5, #4
 801c05e:	461c      	mov	r4, r3
 801c060:	4615      	mov	r5, r2
 801c062:	ea54 0305 	orrs.w	r3, r4, r5
 801c066:	d1f0      	bne.n	801c04a <_svfiprintf_r+0x5b6>
 801c068:	e0f1      	b.n	801c24e <_svfiprintf_r+0x7ba>
 801c06a:	b93b      	cbnz	r3, 801c07c <_svfiprintf_r+0x5e8>
 801c06c:	07fa      	lsls	r2, r7, #31
 801c06e:	d505      	bpl.n	801c07c <_svfiprintf_r+0x5e8>
 801c070:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 801c074:	2330      	movs	r3, #48	; 0x30
 801c076:	f809 3d41 	strb.w	r3, [r9, #-65]!
 801c07a:	e0e8      	b.n	801c24e <_svfiprintf_r+0x7ba>
 801c07c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801c080:	e0e5      	b.n	801c24e <_svfiprintf_r+0x7ba>
 801c082:	4604      	mov	r4, r0
 801c084:	e616      	b.n	801bcb4 <_svfiprintf_r+0x220>
 801c086:	2210      	movs	r2, #16
 801c088:	6072      	str	r2, [r6, #4]
 801c08a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c08c:	3210      	adds	r2, #16
 801c08e:	920f      	str	r2, [sp, #60]	; 0x3c
 801c090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c092:	3201      	adds	r2, #1
 801c094:	2a07      	cmp	r2, #7
 801c096:	920e      	str	r2, [sp, #56]	; 0x38
 801c098:	dc02      	bgt.n	801c0a0 <_svfiprintf_r+0x60c>
 801c09a:	3608      	adds	r6, #8
 801c09c:	3d10      	subs	r5, #16
 801c09e:	e625      	b.n	801bcec <_svfiprintf_r+0x258>
 801c0a0:	aa0d      	add	r2, sp, #52	; 0x34
 801c0a2:	4651      	mov	r1, sl
 801c0a4:	9802      	ldr	r0, [sp, #8]
 801c0a6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0a8:	f7ff fc7a 	bl	801b9a0 <__ssprint_r>
 801c0ac:	2800      	cmp	r0, #0
 801c0ae:	f040 8082 	bne.w	801c1b6 <_svfiprintf_r+0x722>
 801c0b2:	ae1a      	add	r6, sp, #104	; 0x68
 801c0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0b6:	e7f1      	b.n	801c09c <_svfiprintf_r+0x608>
 801c0b8:	aa0d      	add	r2, sp, #52	; 0x34
 801c0ba:	4651      	mov	r1, sl
 801c0bc:	9802      	ldr	r0, [sp, #8]
 801c0be:	f7ff fc6f 	bl	801b9a0 <__ssprint_r>
 801c0c2:	2800      	cmp	r0, #0
 801c0c4:	d177      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c0c6:	ae1a      	add	r6, sp, #104	; 0x68
 801c0c8:	e61f      	b.n	801bd0a <_svfiprintf_r+0x276>
 801c0ca:	aa0d      	add	r2, sp, #52	; 0x34
 801c0cc:	4651      	mov	r1, sl
 801c0ce:	9802      	ldr	r0, [sp, #8]
 801c0d0:	f7ff fc66 	bl	801b9a0 <__ssprint_r>
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	d16e      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c0d8:	ae1a      	add	r6, sp, #104	; 0x68
 801c0da:	e628      	b.n	801bd2e <_svfiprintf_r+0x29a>
 801c0dc:	aa0d      	add	r2, sp, #52	; 0x34
 801c0de:	4651      	mov	r1, sl
 801c0e0:	9802      	ldr	r0, [sp, #8]
 801c0e2:	f7ff fc5d 	bl	801b9a0 <__ssprint_r>
 801c0e6:	2800      	cmp	r0, #0
 801c0e8:	d165      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c0ea:	ae1a      	add	r6, sp, #104	; 0x68
 801c0ec:	e62f      	b.n	801bd4e <_svfiprintf_r+0x2ba>
 801c0ee:	2210      	movs	r2, #16
 801c0f0:	6072      	str	r2, [r6, #4]
 801c0f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c0f4:	3210      	adds	r2, #16
 801c0f6:	920f      	str	r2, [sp, #60]	; 0x3c
 801c0f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c0fa:	3201      	adds	r2, #1
 801c0fc:	2a07      	cmp	r2, #7
 801c0fe:	920e      	str	r2, [sp, #56]	; 0x38
 801c100:	dc02      	bgt.n	801c108 <_svfiprintf_r+0x674>
 801c102:	3608      	adds	r6, #8
 801c104:	3d10      	subs	r5, #16
 801c106:	e62b      	b.n	801bd60 <_svfiprintf_r+0x2cc>
 801c108:	aa0d      	add	r2, sp, #52	; 0x34
 801c10a:	4651      	mov	r1, sl
 801c10c:	9802      	ldr	r0, [sp, #8]
 801c10e:	9307      	str	r3, [sp, #28]
 801c110:	f7ff fc46 	bl	801b9a0 <__ssprint_r>
 801c114:	2800      	cmp	r0, #0
 801c116:	d14e      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c118:	ae1a      	add	r6, sp, #104	; 0x68
 801c11a:	9b07      	ldr	r3, [sp, #28]
 801c11c:	e7f2      	b.n	801c104 <_svfiprintf_r+0x670>
 801c11e:	aa0d      	add	r2, sp, #52	; 0x34
 801c120:	4651      	mov	r1, sl
 801c122:	9802      	ldr	r0, [sp, #8]
 801c124:	f7ff fc3c 	bl	801b9a0 <__ssprint_r>
 801c128:	2800      	cmp	r0, #0
 801c12a:	d144      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c12c:	ae1a      	add	r6, sp, #104	; 0x68
 801c12e:	e626      	b.n	801bd7e <_svfiprintf_r+0x2ea>
 801c130:	2310      	movs	r3, #16
 801c132:	6073      	str	r3, [r6, #4]
 801c134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c136:	3310      	adds	r3, #16
 801c138:	930f      	str	r3, [sp, #60]	; 0x3c
 801c13a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c13c:	3301      	adds	r3, #1
 801c13e:	2b07      	cmp	r3, #7
 801c140:	930e      	str	r3, [sp, #56]	; 0x38
 801c142:	dc02      	bgt.n	801c14a <_svfiprintf_r+0x6b6>
 801c144:	3608      	adds	r6, #8
 801c146:	3c10      	subs	r4, #16
 801c148:	e61e      	b.n	801bd88 <_svfiprintf_r+0x2f4>
 801c14a:	aa0d      	add	r2, sp, #52	; 0x34
 801c14c:	4651      	mov	r1, sl
 801c14e:	9802      	ldr	r0, [sp, #8]
 801c150:	f7ff fc26 	bl	801b9a0 <__ssprint_r>
 801c154:	2800      	cmp	r0, #0
 801c156:	d12e      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c158:	ae1a      	add	r6, sp, #104	; 0x68
 801c15a:	e7f4      	b.n	801c146 <_svfiprintf_r+0x6b2>
 801c15c:	aa0d      	add	r2, sp, #52	; 0x34
 801c15e:	4651      	mov	r1, sl
 801c160:	9802      	ldr	r0, [sp, #8]
 801c162:	f7ff fc1d 	bl	801b9a0 <__ssprint_r>
 801c166:	bb30      	cbnz	r0, 801c1b6 <_svfiprintf_r+0x722>
 801c168:	ae1a      	add	r6, sp, #104	; 0x68
 801c16a:	e61c      	b.n	801bda6 <_svfiprintf_r+0x312>
 801c16c:	aa0d      	add	r2, sp, #52	; 0x34
 801c16e:	4651      	mov	r1, sl
 801c170:	9802      	ldr	r0, [sp, #8]
 801c172:	f7ff fc15 	bl	801b9a0 <__ssprint_r>
 801c176:	b9f0      	cbnz	r0, 801c1b6 <_svfiprintf_r+0x722>
 801c178:	ae1a      	add	r6, sp, #104	; 0x68
 801c17a:	e620      	b.n	801bdbe <_svfiprintf_r+0x32a>
 801c17c:	9b04      	ldr	r3, [sp, #16]
 801c17e:	9a05      	ldr	r2, [sp, #20]
 801c180:	1a9c      	subs	r4, r3, r2
 801c182:	2c00      	cmp	r4, #0
 801c184:	f77f ae1e 	ble.w	801bdc4 <_svfiprintf_r+0x330>
 801c188:	4d35      	ldr	r5, [pc, #212]	; (801c260 <_svfiprintf_r+0x7cc>)
 801c18a:	2710      	movs	r7, #16
 801c18c:	2c10      	cmp	r4, #16
 801c18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c192:	6035      	str	r5, [r6, #0]
 801c194:	dc18      	bgt.n	801c1c8 <_svfiprintf_r+0x734>
 801c196:	3301      	adds	r3, #1
 801c198:	6074      	str	r4, [r6, #4]
 801c19a:	2b07      	cmp	r3, #7
 801c19c:	4414      	add	r4, r2
 801c19e:	940f      	str	r4, [sp, #60]	; 0x3c
 801c1a0:	930e      	str	r3, [sp, #56]	; 0x38
 801c1a2:	f77f ae0f 	ble.w	801bdc4 <_svfiprintf_r+0x330>
 801c1a6:	aa0d      	add	r2, sp, #52	; 0x34
 801c1a8:	4651      	mov	r1, sl
 801c1aa:	9802      	ldr	r0, [sp, #8]
 801c1ac:	f7ff fbf8 	bl	801b9a0 <__ssprint_r>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	f43f ae07 	beq.w	801bdc4 <_svfiprintf_r+0x330>
 801c1b6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801c1ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c1be:	9b03      	ldr	r3, [sp, #12]
 801c1c0:	bf18      	it	ne
 801c1c2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801c1c6:	e47e      	b.n	801bac6 <_svfiprintf_r+0x32>
 801c1c8:	3301      	adds	r3, #1
 801c1ca:	3210      	adds	r2, #16
 801c1cc:	2b07      	cmp	r3, #7
 801c1ce:	6077      	str	r7, [r6, #4]
 801c1d0:	920f      	str	r2, [sp, #60]	; 0x3c
 801c1d2:	930e      	str	r3, [sp, #56]	; 0x38
 801c1d4:	dc02      	bgt.n	801c1dc <_svfiprintf_r+0x748>
 801c1d6:	3608      	adds	r6, #8
 801c1d8:	3c10      	subs	r4, #16
 801c1da:	e7d7      	b.n	801c18c <_svfiprintf_r+0x6f8>
 801c1dc:	aa0d      	add	r2, sp, #52	; 0x34
 801c1de:	4651      	mov	r1, sl
 801c1e0:	9802      	ldr	r0, [sp, #8]
 801c1e2:	f7ff fbdd 	bl	801b9a0 <__ssprint_r>
 801c1e6:	2800      	cmp	r0, #0
 801c1e8:	d1e5      	bne.n	801c1b6 <_svfiprintf_r+0x722>
 801c1ea:	ae1a      	add	r6, sp, #104	; 0x68
 801c1ec:	e7f4      	b.n	801c1d8 <_svfiprintf_r+0x744>
 801c1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d0e0      	beq.n	801c1b6 <_svfiprintf_r+0x722>
 801c1f4:	aa0d      	add	r2, sp, #52	; 0x34
 801c1f6:	4651      	mov	r1, sl
 801c1f8:	9802      	ldr	r0, [sp, #8]
 801c1fa:	f7ff fbd1 	bl	801b9a0 <__ssprint_r>
 801c1fe:	e7da      	b.n	801c1b6 <_svfiprintf_r+0x722>
 801c200:	ea54 0205 	orrs.w	r2, r4, r5
 801c204:	9705      	str	r7, [sp, #20]
 801c206:	f43f aeb5 	beq.w	801bf74 <_svfiprintf_r+0x4e0>
 801c20a:	2b01      	cmp	r3, #1
 801c20c:	f43f aef8 	beq.w	801c000 <_svfiprintf_r+0x56c>
 801c210:	2b02      	cmp	r3, #2
 801c212:	f43f af18 	beq.w	801c046 <_svfiprintf_r+0x5b2>
 801c216:	ab1a      	add	r3, sp, #104	; 0x68
 801c218:	08e1      	lsrs	r1, r4, #3
 801c21a:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 801c21e:	08e8      	lsrs	r0, r5, #3
 801c220:	f004 0207 	and.w	r2, r4, #7
 801c224:	4605      	mov	r5, r0
 801c226:	460c      	mov	r4, r1
 801c228:	3230      	adds	r2, #48	; 0x30
 801c22a:	ea54 0105 	orrs.w	r1, r4, r5
 801c22e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 801c232:	f803 2c01 	strb.w	r2, [r3, #-1]
 801c236:	f47f aee1 	bne.w	801bffc <_svfiprintf_r+0x568>
 801c23a:	9905      	ldr	r1, [sp, #20]
 801c23c:	07c9      	lsls	r1, r1, #31
 801c23e:	d506      	bpl.n	801c24e <_svfiprintf_r+0x7ba>
 801c240:	2a30      	cmp	r2, #48	; 0x30
 801c242:	d004      	beq.n	801c24e <_svfiprintf_r+0x7ba>
 801c244:	2230      	movs	r2, #48	; 0x30
 801c246:	f809 2c01 	strb.w	r2, [r9, #-1]
 801c24a:	f1a3 0902 	sub.w	r9, r3, #2
 801c24e:	ab1a      	add	r3, sp, #104	; 0x68
 801c250:	465c      	mov	r4, fp
 801c252:	9f05      	ldr	r7, [sp, #20]
 801c254:	eba3 0b09 	sub.w	fp, r3, r9
 801c258:	e52c      	b.n	801bcb4 <_svfiprintf_r+0x220>
 801c25a:	bf00      	nop
 801c25c:	0801cf75 	.word	0x0801cf75
 801c260:	0801d0dc 	.word	0x0801d0dc

0801c264 <_calloc_r>:
 801c264:	b510      	push	{r4, lr}
 801c266:	4351      	muls	r1, r2
 801c268:	f7fc fd28 	bl	8018cbc <_malloc_r>
 801c26c:	4604      	mov	r4, r0
 801c26e:	b198      	cbz	r0, 801c298 <_calloc_r+0x34>
 801c270:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c274:	f022 0203 	bic.w	r2, r2, #3
 801c278:	3a04      	subs	r2, #4
 801c27a:	2a24      	cmp	r2, #36	; 0x24
 801c27c:	d81b      	bhi.n	801c2b6 <_calloc_r+0x52>
 801c27e:	2a13      	cmp	r2, #19
 801c280:	d917      	bls.n	801c2b2 <_calloc_r+0x4e>
 801c282:	2100      	movs	r1, #0
 801c284:	2a1b      	cmp	r2, #27
 801c286:	6001      	str	r1, [r0, #0]
 801c288:	6041      	str	r1, [r0, #4]
 801c28a:	d807      	bhi.n	801c29c <_calloc_r+0x38>
 801c28c:	f100 0308 	add.w	r3, r0, #8
 801c290:	2200      	movs	r2, #0
 801c292:	601a      	str	r2, [r3, #0]
 801c294:	605a      	str	r2, [r3, #4]
 801c296:	609a      	str	r2, [r3, #8]
 801c298:	4620      	mov	r0, r4
 801c29a:	bd10      	pop	{r4, pc}
 801c29c:	2a24      	cmp	r2, #36	; 0x24
 801c29e:	6081      	str	r1, [r0, #8]
 801c2a0:	60c1      	str	r1, [r0, #12]
 801c2a2:	bf11      	iteee	ne
 801c2a4:	f100 0310 	addne.w	r3, r0, #16
 801c2a8:	6101      	streq	r1, [r0, #16]
 801c2aa:	f100 0318 	addeq.w	r3, r0, #24
 801c2ae:	6141      	streq	r1, [r0, #20]
 801c2b0:	e7ee      	b.n	801c290 <_calloc_r+0x2c>
 801c2b2:	4603      	mov	r3, r0
 801c2b4:	e7ec      	b.n	801c290 <_calloc_r+0x2c>
 801c2b6:	2100      	movs	r1, #0
 801c2b8:	f7fc ff19 	bl	80190ee <memset>
 801c2bc:	e7ec      	b.n	801c298 <_calloc_r+0x34>
	...

0801c2c0 <_setlocale_r>:
 801c2c0:	b510      	push	{r4, lr}
 801c2c2:	4614      	mov	r4, r2
 801c2c4:	b172      	cbz	r2, 801c2e4 <_setlocale_r+0x24>
 801c2c6:	4909      	ldr	r1, [pc, #36]	; (801c2ec <_setlocale_r+0x2c>)
 801c2c8:	4610      	mov	r0, r2
 801c2ca:	f7fb fe21 	bl	8017f10 <strcmp>
 801c2ce:	b148      	cbz	r0, 801c2e4 <_setlocale_r+0x24>
 801c2d0:	4907      	ldr	r1, [pc, #28]	; (801c2f0 <_setlocale_r+0x30>)
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f7fb fe1c 	bl	8017f10 <strcmp>
 801c2d8:	b120      	cbz	r0, 801c2e4 <_setlocale_r+0x24>
 801c2da:	4906      	ldr	r1, [pc, #24]	; (801c2f4 <_setlocale_r+0x34>)
 801c2dc:	4620      	mov	r0, r4
 801c2de:	f7fb fe17 	bl	8017f10 <strcmp>
 801c2e2:	b908      	cbnz	r0, 801c2e8 <_setlocale_r+0x28>
 801c2e4:	4802      	ldr	r0, [pc, #8]	; (801c2f0 <_setlocale_r+0x30>)
 801c2e6:	bd10      	pop	{r4, pc}
 801c2e8:	2000      	movs	r0, #0
 801c2ea:	bd10      	pop	{r4, pc}
 801c2ec:	0801d0fe 	.word	0x0801d0fe
 801c2f0:	0801d0fc 	.word	0x0801d0fc
 801c2f4:	0801d105 	.word	0x0801d105

0801c2f8 <__locale_mb_cur_max>:
 801c2f8:	4b04      	ldr	r3, [pc, #16]	; (801c30c <__locale_mb_cur_max+0x14>)
 801c2fa:	4a05      	ldr	r2, [pc, #20]	; (801c310 <__locale_mb_cur_max+0x18>)
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	6a1b      	ldr	r3, [r3, #32]
 801c300:	2b00      	cmp	r3, #0
 801c302:	bf08      	it	eq
 801c304:	4613      	moveq	r3, r2
 801c306:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801c30a:	4770      	bx	lr
 801c30c:	20000188 	.word	0x20000188
 801c310:	2000068c 	.word	0x2000068c

0801c314 <__locale_ctype_ptr_l>:
 801c314:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801c318:	4770      	bx	lr
	...

0801c31c <__locale_ctype_ptr>:
 801c31c:	4b04      	ldr	r3, [pc, #16]	; (801c330 <__locale_ctype_ptr+0x14>)
 801c31e:	4a05      	ldr	r2, [pc, #20]	; (801c334 <__locale_ctype_ptr+0x18>)
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	6a1b      	ldr	r3, [r3, #32]
 801c324:	2b00      	cmp	r3, #0
 801c326:	bf08      	it	eq
 801c328:	4613      	moveq	r3, r2
 801c32a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801c32e:	4770      	bx	lr
 801c330:	20000188 	.word	0x20000188
 801c334:	2000068c 	.word	0x2000068c

0801c338 <setlocale>:
 801c338:	4b02      	ldr	r3, [pc, #8]	; (801c344 <setlocale+0xc>)
 801c33a:	460a      	mov	r2, r1
 801c33c:	4601      	mov	r1, r0
 801c33e:	6818      	ldr	r0, [r3, #0]
 801c340:	f7ff bfbe 	b.w	801c2c0 <_setlocale_r>
 801c344:	20000188 	.word	0x20000188

0801c348 <_mbtowc_r>:
 801c348:	b430      	push	{r4, r5}
 801c34a:	4c06      	ldr	r4, [pc, #24]	; (801c364 <_mbtowc_r+0x1c>)
 801c34c:	4d06      	ldr	r5, [pc, #24]	; (801c368 <_mbtowc_r+0x20>)
 801c34e:	6824      	ldr	r4, [r4, #0]
 801c350:	6a24      	ldr	r4, [r4, #32]
 801c352:	2c00      	cmp	r4, #0
 801c354:	bf08      	it	eq
 801c356:	462c      	moveq	r4, r5
 801c358:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 801c35c:	46a4      	mov	ip, r4
 801c35e:	bc30      	pop	{r4, r5}
 801c360:	4760      	bx	ip
 801c362:	bf00      	nop
 801c364:	20000188 	.word	0x20000188
 801c368:	2000068c 	.word	0x2000068c

0801c36c <__ascii_mbtowc>:
 801c36c:	b082      	sub	sp, #8
 801c36e:	b901      	cbnz	r1, 801c372 <__ascii_mbtowc+0x6>
 801c370:	a901      	add	r1, sp, #4
 801c372:	b142      	cbz	r2, 801c386 <__ascii_mbtowc+0x1a>
 801c374:	b14b      	cbz	r3, 801c38a <__ascii_mbtowc+0x1e>
 801c376:	7813      	ldrb	r3, [r2, #0]
 801c378:	600b      	str	r3, [r1, #0]
 801c37a:	7812      	ldrb	r2, [r2, #0]
 801c37c:	1c10      	adds	r0, r2, #0
 801c37e:	bf18      	it	ne
 801c380:	2001      	movne	r0, #1
 801c382:	b002      	add	sp, #8
 801c384:	4770      	bx	lr
 801c386:	4610      	mov	r0, r2
 801c388:	e7fb      	b.n	801c382 <__ascii_mbtowc+0x16>
 801c38a:	f06f 0001 	mvn.w	r0, #1
 801c38e:	e7f8      	b.n	801c382 <__ascii_mbtowc+0x16>

0801c390 <memmove>:
 801c390:	4288      	cmp	r0, r1
 801c392:	b510      	push	{r4, lr}
 801c394:	eb01 0302 	add.w	r3, r1, r2
 801c398:	d803      	bhi.n	801c3a2 <memmove+0x12>
 801c39a:	1e42      	subs	r2, r0, #1
 801c39c:	4299      	cmp	r1, r3
 801c39e:	d10c      	bne.n	801c3ba <memmove+0x2a>
 801c3a0:	bd10      	pop	{r4, pc}
 801c3a2:	4298      	cmp	r0, r3
 801c3a4:	d2f9      	bcs.n	801c39a <memmove+0xa>
 801c3a6:	1881      	adds	r1, r0, r2
 801c3a8:	1ad2      	subs	r2, r2, r3
 801c3aa:	42d3      	cmn	r3, r2
 801c3ac:	d100      	bne.n	801c3b0 <memmove+0x20>
 801c3ae:	bd10      	pop	{r4, pc}
 801c3b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c3b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801c3b8:	e7f7      	b.n	801c3aa <memmove+0x1a>
 801c3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3be:	f802 4f01 	strb.w	r4, [r2, #1]!
 801c3c2:	e7eb      	b.n	801c39c <memmove+0xc>

0801c3c4 <_realloc_r>:
 801c3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c8:	4682      	mov	sl, r0
 801c3ca:	460c      	mov	r4, r1
 801c3cc:	b929      	cbnz	r1, 801c3da <_realloc_r+0x16>
 801c3ce:	4611      	mov	r1, r2
 801c3d0:	b003      	add	sp, #12
 801c3d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3d6:	f7fc bc71 	b.w	8018cbc <_malloc_r>
 801c3da:	9201      	str	r2, [sp, #4]
 801c3dc:	f7fc fe90 	bl	8019100 <__malloc_lock>
 801c3e0:	9a01      	ldr	r2, [sp, #4]
 801c3e2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c3e6:	f102 080b 	add.w	r8, r2, #11
 801c3ea:	f1b8 0f16 	cmp.w	r8, #22
 801c3ee:	f1a4 0908 	sub.w	r9, r4, #8
 801c3f2:	f025 0603 	bic.w	r6, r5, #3
 801c3f6:	d90a      	bls.n	801c40e <_realloc_r+0x4a>
 801c3f8:	f038 0807 	bics.w	r8, r8, #7
 801c3fc:	d509      	bpl.n	801c412 <_realloc_r+0x4e>
 801c3fe:	230c      	movs	r3, #12
 801c400:	f8ca 3000 	str.w	r3, [sl]
 801c404:	2700      	movs	r7, #0
 801c406:	4638      	mov	r0, r7
 801c408:	b003      	add	sp, #12
 801c40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40e:	f04f 0810 	mov.w	r8, #16
 801c412:	4590      	cmp	r8, r2
 801c414:	d3f3      	bcc.n	801c3fe <_realloc_r+0x3a>
 801c416:	45b0      	cmp	r8, r6
 801c418:	f340 8145 	ble.w	801c6a6 <_realloc_r+0x2e2>
 801c41c:	4ba8      	ldr	r3, [pc, #672]	; (801c6c0 <_realloc_r+0x2fc>)
 801c41e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801c422:	eb09 0106 	add.w	r1, r9, r6
 801c426:	4571      	cmp	r1, lr
 801c428:	469b      	mov	fp, r3
 801c42a:	684b      	ldr	r3, [r1, #4]
 801c42c:	d005      	beq.n	801c43a <_realloc_r+0x76>
 801c42e:	f023 0001 	bic.w	r0, r3, #1
 801c432:	4408      	add	r0, r1
 801c434:	6840      	ldr	r0, [r0, #4]
 801c436:	07c7      	lsls	r7, r0, #31
 801c438:	d447      	bmi.n	801c4ca <_realloc_r+0x106>
 801c43a:	f023 0303 	bic.w	r3, r3, #3
 801c43e:	4571      	cmp	r1, lr
 801c440:	eb06 0703 	add.w	r7, r6, r3
 801c444:	d119      	bne.n	801c47a <_realloc_r+0xb6>
 801c446:	f108 0010 	add.w	r0, r8, #16
 801c44a:	4287      	cmp	r7, r0
 801c44c:	db3f      	blt.n	801c4ce <_realloc_r+0x10a>
 801c44e:	eb09 0308 	add.w	r3, r9, r8
 801c452:	eba7 0708 	sub.w	r7, r7, r8
 801c456:	f047 0701 	orr.w	r7, r7, #1
 801c45a:	f8cb 3008 	str.w	r3, [fp, #8]
 801c45e:	605f      	str	r7, [r3, #4]
 801c460:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c464:	f003 0301 	and.w	r3, r3, #1
 801c468:	ea43 0308 	orr.w	r3, r3, r8
 801c46c:	f844 3c04 	str.w	r3, [r4, #-4]
 801c470:	4650      	mov	r0, sl
 801c472:	f7fc fe4b 	bl	801910c <__malloc_unlock>
 801c476:	4627      	mov	r7, r4
 801c478:	e7c5      	b.n	801c406 <_realloc_r+0x42>
 801c47a:	45b8      	cmp	r8, r7
 801c47c:	dc27      	bgt.n	801c4ce <_realloc_r+0x10a>
 801c47e:	68cb      	ldr	r3, [r1, #12]
 801c480:	688a      	ldr	r2, [r1, #8]
 801c482:	60d3      	str	r3, [r2, #12]
 801c484:	609a      	str	r2, [r3, #8]
 801c486:	eba7 0008 	sub.w	r0, r7, r8
 801c48a:	280f      	cmp	r0, #15
 801c48c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c490:	eb09 0207 	add.w	r2, r9, r7
 801c494:	f240 8109 	bls.w	801c6aa <_realloc_r+0x2e6>
 801c498:	eb09 0108 	add.w	r1, r9, r8
 801c49c:	f003 0301 	and.w	r3, r3, #1
 801c4a0:	ea43 0308 	orr.w	r3, r3, r8
 801c4a4:	f040 0001 	orr.w	r0, r0, #1
 801c4a8:	f8c9 3004 	str.w	r3, [r9, #4]
 801c4ac:	6048      	str	r0, [r1, #4]
 801c4ae:	6853      	ldr	r3, [r2, #4]
 801c4b0:	f043 0301 	orr.w	r3, r3, #1
 801c4b4:	6053      	str	r3, [r2, #4]
 801c4b6:	3108      	adds	r1, #8
 801c4b8:	4650      	mov	r0, sl
 801c4ba:	f7fe fd0d 	bl	801aed8 <_free_r>
 801c4be:	4650      	mov	r0, sl
 801c4c0:	f7fc fe24 	bl	801910c <__malloc_unlock>
 801c4c4:	f109 0708 	add.w	r7, r9, #8
 801c4c8:	e79d      	b.n	801c406 <_realloc_r+0x42>
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	07e8      	lsls	r0, r5, #31
 801c4d0:	f100 8084 	bmi.w	801c5dc <_realloc_r+0x218>
 801c4d4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801c4d8:	eba9 0505 	sub.w	r5, r9, r5
 801c4dc:	6868      	ldr	r0, [r5, #4]
 801c4de:	f020 0003 	bic.w	r0, r0, #3
 801c4e2:	4430      	add	r0, r6
 801c4e4:	2900      	cmp	r1, #0
 801c4e6:	d076      	beq.n	801c5d6 <_realloc_r+0x212>
 801c4e8:	4571      	cmp	r1, lr
 801c4ea:	d150      	bne.n	801c58e <_realloc_r+0x1ca>
 801c4ec:	4403      	add	r3, r0
 801c4ee:	f108 0110 	add.w	r1, r8, #16
 801c4f2:	428b      	cmp	r3, r1
 801c4f4:	db6f      	blt.n	801c5d6 <_realloc_r+0x212>
 801c4f6:	462f      	mov	r7, r5
 801c4f8:	68ea      	ldr	r2, [r5, #12]
 801c4fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801c4fe:	60ca      	str	r2, [r1, #12]
 801c500:	6091      	str	r1, [r2, #8]
 801c502:	1f32      	subs	r2, r6, #4
 801c504:	2a24      	cmp	r2, #36	; 0x24
 801c506:	d83b      	bhi.n	801c580 <_realloc_r+0x1bc>
 801c508:	2a13      	cmp	r2, #19
 801c50a:	d936      	bls.n	801c57a <_realloc_r+0x1b6>
 801c50c:	6821      	ldr	r1, [r4, #0]
 801c50e:	60a9      	str	r1, [r5, #8]
 801c510:	6861      	ldr	r1, [r4, #4]
 801c512:	60e9      	str	r1, [r5, #12]
 801c514:	2a1b      	cmp	r2, #27
 801c516:	d81c      	bhi.n	801c552 <_realloc_r+0x18e>
 801c518:	f105 0210 	add.w	r2, r5, #16
 801c51c:	f104 0108 	add.w	r1, r4, #8
 801c520:	6808      	ldr	r0, [r1, #0]
 801c522:	6010      	str	r0, [r2, #0]
 801c524:	6848      	ldr	r0, [r1, #4]
 801c526:	6050      	str	r0, [r2, #4]
 801c528:	6889      	ldr	r1, [r1, #8]
 801c52a:	6091      	str	r1, [r2, #8]
 801c52c:	eb05 0208 	add.w	r2, r5, r8
 801c530:	eba3 0308 	sub.w	r3, r3, r8
 801c534:	f043 0301 	orr.w	r3, r3, #1
 801c538:	f8cb 2008 	str.w	r2, [fp, #8]
 801c53c:	6053      	str	r3, [r2, #4]
 801c53e:	686b      	ldr	r3, [r5, #4]
 801c540:	f003 0301 	and.w	r3, r3, #1
 801c544:	ea43 0308 	orr.w	r3, r3, r8
 801c548:	606b      	str	r3, [r5, #4]
 801c54a:	4650      	mov	r0, sl
 801c54c:	f7fc fdde 	bl	801910c <__malloc_unlock>
 801c550:	e759      	b.n	801c406 <_realloc_r+0x42>
 801c552:	68a1      	ldr	r1, [r4, #8]
 801c554:	6129      	str	r1, [r5, #16]
 801c556:	68e1      	ldr	r1, [r4, #12]
 801c558:	6169      	str	r1, [r5, #20]
 801c55a:	2a24      	cmp	r2, #36	; 0x24
 801c55c:	bf01      	itttt	eq
 801c55e:	6922      	ldreq	r2, [r4, #16]
 801c560:	61aa      	streq	r2, [r5, #24]
 801c562:	6960      	ldreq	r0, [r4, #20]
 801c564:	61e8      	streq	r0, [r5, #28]
 801c566:	bf19      	ittee	ne
 801c568:	f105 0218 	addne.w	r2, r5, #24
 801c56c:	f104 0110 	addne.w	r1, r4, #16
 801c570:	f105 0220 	addeq.w	r2, r5, #32
 801c574:	f104 0118 	addeq.w	r1, r4, #24
 801c578:	e7d2      	b.n	801c520 <_realloc_r+0x15c>
 801c57a:	463a      	mov	r2, r7
 801c57c:	4621      	mov	r1, r4
 801c57e:	e7cf      	b.n	801c520 <_realloc_r+0x15c>
 801c580:	4621      	mov	r1, r4
 801c582:	4638      	mov	r0, r7
 801c584:	9301      	str	r3, [sp, #4]
 801c586:	f7ff ff03 	bl	801c390 <memmove>
 801c58a:	9b01      	ldr	r3, [sp, #4]
 801c58c:	e7ce      	b.n	801c52c <_realloc_r+0x168>
 801c58e:	18c7      	adds	r7, r0, r3
 801c590:	45b8      	cmp	r8, r7
 801c592:	dc20      	bgt.n	801c5d6 <_realloc_r+0x212>
 801c594:	68cb      	ldr	r3, [r1, #12]
 801c596:	688a      	ldr	r2, [r1, #8]
 801c598:	60d3      	str	r3, [r2, #12]
 801c59a:	609a      	str	r2, [r3, #8]
 801c59c:	4628      	mov	r0, r5
 801c59e:	68eb      	ldr	r3, [r5, #12]
 801c5a0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801c5a4:	60d3      	str	r3, [r2, #12]
 801c5a6:	609a      	str	r2, [r3, #8]
 801c5a8:	1f32      	subs	r2, r6, #4
 801c5aa:	2a24      	cmp	r2, #36	; 0x24
 801c5ac:	d842      	bhi.n	801c634 <_realloc_r+0x270>
 801c5ae:	2a13      	cmp	r2, #19
 801c5b0:	d93e      	bls.n	801c630 <_realloc_r+0x26c>
 801c5b2:	6823      	ldr	r3, [r4, #0]
 801c5b4:	60ab      	str	r3, [r5, #8]
 801c5b6:	6863      	ldr	r3, [r4, #4]
 801c5b8:	60eb      	str	r3, [r5, #12]
 801c5ba:	2a1b      	cmp	r2, #27
 801c5bc:	d824      	bhi.n	801c608 <_realloc_r+0x244>
 801c5be:	f105 0010 	add.w	r0, r5, #16
 801c5c2:	f104 0308 	add.w	r3, r4, #8
 801c5c6:	681a      	ldr	r2, [r3, #0]
 801c5c8:	6002      	str	r2, [r0, #0]
 801c5ca:	685a      	ldr	r2, [r3, #4]
 801c5cc:	6042      	str	r2, [r0, #4]
 801c5ce:	689b      	ldr	r3, [r3, #8]
 801c5d0:	6083      	str	r3, [r0, #8]
 801c5d2:	46a9      	mov	r9, r5
 801c5d4:	e757      	b.n	801c486 <_realloc_r+0xc2>
 801c5d6:	4580      	cmp	r8, r0
 801c5d8:	4607      	mov	r7, r0
 801c5da:	dddf      	ble.n	801c59c <_realloc_r+0x1d8>
 801c5dc:	4611      	mov	r1, r2
 801c5de:	4650      	mov	r0, sl
 801c5e0:	f7fc fb6c 	bl	8018cbc <_malloc_r>
 801c5e4:	4607      	mov	r7, r0
 801c5e6:	2800      	cmp	r0, #0
 801c5e8:	d0af      	beq.n	801c54a <_realloc_r+0x186>
 801c5ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c5ee:	f023 0301 	bic.w	r3, r3, #1
 801c5f2:	f1a0 0208 	sub.w	r2, r0, #8
 801c5f6:	444b      	add	r3, r9
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d11f      	bne.n	801c63c <_realloc_r+0x278>
 801c5fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801c600:	f027 0703 	bic.w	r7, r7, #3
 801c604:	4437      	add	r7, r6
 801c606:	e73e      	b.n	801c486 <_realloc_r+0xc2>
 801c608:	68a3      	ldr	r3, [r4, #8]
 801c60a:	612b      	str	r3, [r5, #16]
 801c60c:	68e3      	ldr	r3, [r4, #12]
 801c60e:	616b      	str	r3, [r5, #20]
 801c610:	2a24      	cmp	r2, #36	; 0x24
 801c612:	bf01      	itttt	eq
 801c614:	6923      	ldreq	r3, [r4, #16]
 801c616:	61ab      	streq	r3, [r5, #24]
 801c618:	6962      	ldreq	r2, [r4, #20]
 801c61a:	61ea      	streq	r2, [r5, #28]
 801c61c:	bf19      	ittee	ne
 801c61e:	f105 0018 	addne.w	r0, r5, #24
 801c622:	f104 0310 	addne.w	r3, r4, #16
 801c626:	f105 0020 	addeq.w	r0, r5, #32
 801c62a:	f104 0318 	addeq.w	r3, r4, #24
 801c62e:	e7ca      	b.n	801c5c6 <_realloc_r+0x202>
 801c630:	4623      	mov	r3, r4
 801c632:	e7c8      	b.n	801c5c6 <_realloc_r+0x202>
 801c634:	4621      	mov	r1, r4
 801c636:	f7ff feab 	bl	801c390 <memmove>
 801c63a:	e7ca      	b.n	801c5d2 <_realloc_r+0x20e>
 801c63c:	1f32      	subs	r2, r6, #4
 801c63e:	2a24      	cmp	r2, #36	; 0x24
 801c640:	d82d      	bhi.n	801c69e <_realloc_r+0x2da>
 801c642:	2a13      	cmp	r2, #19
 801c644:	d928      	bls.n	801c698 <_realloc_r+0x2d4>
 801c646:	6823      	ldr	r3, [r4, #0]
 801c648:	6003      	str	r3, [r0, #0]
 801c64a:	6863      	ldr	r3, [r4, #4]
 801c64c:	6043      	str	r3, [r0, #4]
 801c64e:	2a1b      	cmp	r2, #27
 801c650:	d80e      	bhi.n	801c670 <_realloc_r+0x2ac>
 801c652:	f100 0308 	add.w	r3, r0, #8
 801c656:	f104 0208 	add.w	r2, r4, #8
 801c65a:	6811      	ldr	r1, [r2, #0]
 801c65c:	6019      	str	r1, [r3, #0]
 801c65e:	6851      	ldr	r1, [r2, #4]
 801c660:	6059      	str	r1, [r3, #4]
 801c662:	6892      	ldr	r2, [r2, #8]
 801c664:	609a      	str	r2, [r3, #8]
 801c666:	4621      	mov	r1, r4
 801c668:	4650      	mov	r0, sl
 801c66a:	f7fe fc35 	bl	801aed8 <_free_r>
 801c66e:	e76c      	b.n	801c54a <_realloc_r+0x186>
 801c670:	68a3      	ldr	r3, [r4, #8]
 801c672:	6083      	str	r3, [r0, #8]
 801c674:	68e3      	ldr	r3, [r4, #12]
 801c676:	60c3      	str	r3, [r0, #12]
 801c678:	2a24      	cmp	r2, #36	; 0x24
 801c67a:	bf01      	itttt	eq
 801c67c:	6923      	ldreq	r3, [r4, #16]
 801c67e:	6103      	streq	r3, [r0, #16]
 801c680:	6961      	ldreq	r1, [r4, #20]
 801c682:	6141      	streq	r1, [r0, #20]
 801c684:	bf19      	ittee	ne
 801c686:	f100 0310 	addne.w	r3, r0, #16
 801c68a:	f104 0210 	addne.w	r2, r4, #16
 801c68e:	f100 0318 	addeq.w	r3, r0, #24
 801c692:	f104 0218 	addeq.w	r2, r4, #24
 801c696:	e7e0      	b.n	801c65a <_realloc_r+0x296>
 801c698:	4603      	mov	r3, r0
 801c69a:	4622      	mov	r2, r4
 801c69c:	e7dd      	b.n	801c65a <_realloc_r+0x296>
 801c69e:	4621      	mov	r1, r4
 801c6a0:	f7ff fe76 	bl	801c390 <memmove>
 801c6a4:	e7df      	b.n	801c666 <_realloc_r+0x2a2>
 801c6a6:	4637      	mov	r7, r6
 801c6a8:	e6ed      	b.n	801c486 <_realloc_r+0xc2>
 801c6aa:	f003 0301 	and.w	r3, r3, #1
 801c6ae:	431f      	orrs	r7, r3
 801c6b0:	f8c9 7004 	str.w	r7, [r9, #4]
 801c6b4:	6853      	ldr	r3, [r2, #4]
 801c6b6:	f043 0301 	orr.w	r3, r3, #1
 801c6ba:	6053      	str	r3, [r2, #4]
 801c6bc:	e6ff      	b.n	801c4be <_realloc_r+0xfa>
 801c6be:	bf00      	nop
 801c6c0:	2000027c 	.word	0x2000027c

0801c6c4 <_wctomb_r>:
 801c6c4:	b430      	push	{r4, r5}
 801c6c6:	4c06      	ldr	r4, [pc, #24]	; (801c6e0 <_wctomb_r+0x1c>)
 801c6c8:	4d06      	ldr	r5, [pc, #24]	; (801c6e4 <_wctomb_r+0x20>)
 801c6ca:	6824      	ldr	r4, [r4, #0]
 801c6cc:	6a24      	ldr	r4, [r4, #32]
 801c6ce:	2c00      	cmp	r4, #0
 801c6d0:	bf08      	it	eq
 801c6d2:	462c      	moveq	r4, r5
 801c6d4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801c6d8:	46a4      	mov	ip, r4
 801c6da:	bc30      	pop	{r4, r5}
 801c6dc:	4760      	bx	ip
 801c6de:	bf00      	nop
 801c6e0:	20000188 	.word	0x20000188
 801c6e4:	2000068c 	.word	0x2000068c

0801c6e8 <__ascii_wctomb>:
 801c6e8:	b149      	cbz	r1, 801c6fe <__ascii_wctomb+0x16>
 801c6ea:	2aff      	cmp	r2, #255	; 0xff
 801c6ec:	bf85      	ittet	hi
 801c6ee:	238a      	movhi	r3, #138	; 0x8a
 801c6f0:	6003      	strhi	r3, [r0, #0]
 801c6f2:	700a      	strbls	r2, [r1, #0]
 801c6f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c6f8:	bf98      	it	ls
 801c6fa:	2001      	movls	r0, #1
 801c6fc:	4770      	bx	lr
 801c6fe:	4608      	mov	r0, r1
 801c700:	4770      	bx	lr
	...

0801c704 <sqrt>:
 801c704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c708:	ed2d 8b02 	vpush	{d8}
 801c70c:	b08b      	sub	sp, #44	; 0x2c
 801c70e:	ec55 4b10 	vmov	r4, r5, d0
 801c712:	f000 f851 	bl	801c7b8 <__ieee754_sqrt>
 801c716:	4b26      	ldr	r3, [pc, #152]	; (801c7b0 <sqrt+0xac>)
 801c718:	eeb0 8a40 	vmov.f32	s16, s0
 801c71c:	eef0 8a60 	vmov.f32	s17, s1
 801c720:	f993 6000 	ldrsb.w	r6, [r3]
 801c724:	1c73      	adds	r3, r6, #1
 801c726:	d02a      	beq.n	801c77e <sqrt+0x7a>
 801c728:	4622      	mov	r2, r4
 801c72a:	462b      	mov	r3, r5
 801c72c:	4620      	mov	r0, r4
 801c72e:	4629      	mov	r1, r5
 801c730:	f7fc f84a 	bl	80187c8 <__aeabi_dcmpun>
 801c734:	4607      	mov	r7, r0
 801c736:	bb10      	cbnz	r0, 801c77e <sqrt+0x7a>
 801c738:	f04f 0800 	mov.w	r8, #0
 801c73c:	f04f 0900 	mov.w	r9, #0
 801c740:	4642      	mov	r2, r8
 801c742:	464b      	mov	r3, r9
 801c744:	4620      	mov	r0, r4
 801c746:	4629      	mov	r1, r5
 801c748:	f7fc f816 	bl	8018778 <__aeabi_dcmplt>
 801c74c:	b1b8      	cbz	r0, 801c77e <sqrt+0x7a>
 801c74e:	2301      	movs	r3, #1
 801c750:	9300      	str	r3, [sp, #0]
 801c752:	4b18      	ldr	r3, [pc, #96]	; (801c7b4 <sqrt+0xb0>)
 801c754:	9301      	str	r3, [sp, #4]
 801c756:	9708      	str	r7, [sp, #32]
 801c758:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c75c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c760:	b9b6      	cbnz	r6, 801c790 <sqrt+0x8c>
 801c762:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801c766:	4668      	mov	r0, sp
 801c768:	f000 f8d6 	bl	801c918 <matherr>
 801c76c:	b1d0      	cbz	r0, 801c7a4 <sqrt+0xa0>
 801c76e:	9b08      	ldr	r3, [sp, #32]
 801c770:	b11b      	cbz	r3, 801c77a <sqrt+0x76>
 801c772:	f7fc fa69 	bl	8018c48 <__errno>
 801c776:	9b08      	ldr	r3, [sp, #32]
 801c778:	6003      	str	r3, [r0, #0]
 801c77a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c77e:	eeb0 0a48 	vmov.f32	s0, s16
 801c782:	eef0 0a68 	vmov.f32	s1, s17
 801c786:	b00b      	add	sp, #44	; 0x2c
 801c788:	ecbd 8b02 	vpop	{d8}
 801c78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c790:	4642      	mov	r2, r8
 801c792:	464b      	mov	r3, r9
 801c794:	4640      	mov	r0, r8
 801c796:	4649      	mov	r1, r9
 801c798:	f7fb fea6 	bl	80184e8 <__aeabi_ddiv>
 801c79c:	2e02      	cmp	r6, #2
 801c79e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c7a2:	d1e0      	bne.n	801c766 <sqrt+0x62>
 801c7a4:	f7fc fa50 	bl	8018c48 <__errno>
 801c7a8:	2321      	movs	r3, #33	; 0x21
 801c7aa:	6003      	str	r3, [r0, #0]
 801c7ac:	e7df      	b.n	801c76e <sqrt+0x6a>
 801c7ae:	bf00      	nop
 801c7b0:	200007f8 	.word	0x200007f8
 801c7b4:	0801d207 	.word	0x0801d207

0801c7b8 <__ieee754_sqrt>:
 801c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7bc:	ec55 4b10 	vmov	r4, r5, d0
 801c7c0:	4e54      	ldr	r6, [pc, #336]	; (801c914 <__ieee754_sqrt+0x15c>)
 801c7c2:	43ae      	bics	r6, r5
 801c7c4:	ee10 0a10 	vmov	r0, s0
 801c7c8:	462b      	mov	r3, r5
 801c7ca:	462a      	mov	r2, r5
 801c7cc:	4621      	mov	r1, r4
 801c7ce:	d113      	bne.n	801c7f8 <__ieee754_sqrt+0x40>
 801c7d0:	ee10 2a10 	vmov	r2, s0
 801c7d4:	462b      	mov	r3, r5
 801c7d6:	ee10 0a10 	vmov	r0, s0
 801c7da:	4629      	mov	r1, r5
 801c7dc:	f7fb fd5a 	bl	8018294 <__aeabi_dmul>
 801c7e0:	4602      	mov	r2, r0
 801c7e2:	460b      	mov	r3, r1
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	4629      	mov	r1, r5
 801c7e8:	f7fb fba2 	bl	8017f30 <__adddf3>
 801c7ec:	4604      	mov	r4, r0
 801c7ee:	460d      	mov	r5, r1
 801c7f0:	ec45 4b10 	vmov	d0, r4, r5
 801c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7f8:	2d00      	cmp	r5, #0
 801c7fa:	dc10      	bgt.n	801c81e <__ieee754_sqrt+0x66>
 801c7fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c800:	4330      	orrs	r0, r6
 801c802:	d0f5      	beq.n	801c7f0 <__ieee754_sqrt+0x38>
 801c804:	b15d      	cbz	r5, 801c81e <__ieee754_sqrt+0x66>
 801c806:	ee10 2a10 	vmov	r2, s0
 801c80a:	462b      	mov	r3, r5
 801c80c:	4620      	mov	r0, r4
 801c80e:	4629      	mov	r1, r5
 801c810:	f7fb fb8c 	bl	8017f2c <__aeabi_dsub>
 801c814:	4602      	mov	r2, r0
 801c816:	460b      	mov	r3, r1
 801c818:	f7fb fe66 	bl	80184e8 <__aeabi_ddiv>
 801c81c:	e7e6      	b.n	801c7ec <__ieee754_sqrt+0x34>
 801c81e:	151b      	asrs	r3, r3, #20
 801c820:	d10c      	bne.n	801c83c <__ieee754_sqrt+0x84>
 801c822:	2a00      	cmp	r2, #0
 801c824:	d06d      	beq.n	801c902 <__ieee754_sqrt+0x14a>
 801c826:	2000      	movs	r0, #0
 801c828:	02d6      	lsls	r6, r2, #11
 801c82a:	d56e      	bpl.n	801c90a <__ieee754_sqrt+0x152>
 801c82c:	1e44      	subs	r4, r0, #1
 801c82e:	1b1b      	subs	r3, r3, r4
 801c830:	f1c0 0420 	rsb	r4, r0, #32
 801c834:	fa21 f404 	lsr.w	r4, r1, r4
 801c838:	4322      	orrs	r2, r4
 801c83a:	4081      	lsls	r1, r0
 801c83c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c840:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c844:	07dd      	lsls	r5, r3, #31
 801c846:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c84a:	bf42      	ittt	mi
 801c84c:	0052      	lslmi	r2, r2, #1
 801c84e:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 801c852:	0049      	lslmi	r1, r1, #1
 801c854:	1058      	asrs	r0, r3, #1
 801c856:	2500      	movs	r5, #0
 801c858:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 801c85c:	441a      	add	r2, r3
 801c85e:	0049      	lsls	r1, r1, #1
 801c860:	2316      	movs	r3, #22
 801c862:	462c      	mov	r4, r5
 801c864:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c868:	19a7      	adds	r7, r4, r6
 801c86a:	4297      	cmp	r7, r2
 801c86c:	bfde      	ittt	le
 801c86e:	1bd2      	suble	r2, r2, r7
 801c870:	19bc      	addle	r4, r7, r6
 801c872:	19ad      	addle	r5, r5, r6
 801c874:	0052      	lsls	r2, r2, #1
 801c876:	3b01      	subs	r3, #1
 801c878:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c87c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c880:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c884:	d1f0      	bne.n	801c868 <__ieee754_sqrt+0xb0>
 801c886:	f04f 0e20 	mov.w	lr, #32
 801c88a:	469c      	mov	ip, r3
 801c88c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c890:	42a2      	cmp	r2, r4
 801c892:	eb06 070c 	add.w	r7, r6, ip
 801c896:	dc02      	bgt.n	801c89e <__ieee754_sqrt+0xe6>
 801c898:	d112      	bne.n	801c8c0 <__ieee754_sqrt+0x108>
 801c89a:	428f      	cmp	r7, r1
 801c89c:	d810      	bhi.n	801c8c0 <__ieee754_sqrt+0x108>
 801c89e:	2f00      	cmp	r7, #0
 801c8a0:	eb07 0c06 	add.w	ip, r7, r6
 801c8a4:	da34      	bge.n	801c910 <__ieee754_sqrt+0x158>
 801c8a6:	f1bc 0f00 	cmp.w	ip, #0
 801c8aa:	db31      	blt.n	801c910 <__ieee754_sqrt+0x158>
 801c8ac:	f104 0801 	add.w	r8, r4, #1
 801c8b0:	1b12      	subs	r2, r2, r4
 801c8b2:	428f      	cmp	r7, r1
 801c8b4:	bf88      	it	hi
 801c8b6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801c8ba:	1bc9      	subs	r1, r1, r7
 801c8bc:	4433      	add	r3, r6
 801c8be:	4644      	mov	r4, r8
 801c8c0:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 801c8c4:	f1be 0e01 	subs.w	lr, lr, #1
 801c8c8:	443a      	add	r2, r7
 801c8ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c8ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c8d2:	d1dd      	bne.n	801c890 <__ieee754_sqrt+0xd8>
 801c8d4:	430a      	orrs	r2, r1
 801c8d6:	d006      	beq.n	801c8e6 <__ieee754_sqrt+0x12e>
 801c8d8:	1c5c      	adds	r4, r3, #1
 801c8da:	bf13      	iteet	ne
 801c8dc:	3301      	addne	r3, #1
 801c8de:	3501      	addeq	r5, #1
 801c8e0:	4673      	moveq	r3, lr
 801c8e2:	f023 0301 	bicne.w	r3, r3, #1
 801c8e6:	106a      	asrs	r2, r5, #1
 801c8e8:	085b      	lsrs	r3, r3, #1
 801c8ea:	07e9      	lsls	r1, r5, #31
 801c8ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c8f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c8f4:	bf48      	it	mi
 801c8f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c8fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c8fe:	461c      	mov	r4, r3
 801c900:	e776      	b.n	801c7f0 <__ieee754_sqrt+0x38>
 801c902:	0aca      	lsrs	r2, r1, #11
 801c904:	3b15      	subs	r3, #21
 801c906:	0549      	lsls	r1, r1, #21
 801c908:	e78b      	b.n	801c822 <__ieee754_sqrt+0x6a>
 801c90a:	0052      	lsls	r2, r2, #1
 801c90c:	3001      	adds	r0, #1
 801c90e:	e78b      	b.n	801c828 <__ieee754_sqrt+0x70>
 801c910:	46a0      	mov	r8, r4
 801c912:	e7cd      	b.n	801c8b0 <__ieee754_sqrt+0xf8>
 801c914:	7ff00000 	.word	0x7ff00000

0801c918 <matherr>:
 801c918:	2000      	movs	r0, #0
 801c91a:	4770      	bx	lr

0801c91c <__EH_FRAME_BEGIN__>:
 801c91c:	0000 0000                                   ....

0801c920 <_init>:
 801c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c922:	bf00      	nop
 801c924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c926:	bc08      	pop	{r3}
 801c928:	469e      	mov	lr, r3
 801c92a:	4770      	bx	lr

0801c92c <_fini>:
 801c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c92e:	bf00      	nop
 801c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c932:	bc08      	pop	{r3}
 801c934:	469e      	mov	lr, r3
 801c936:	4770      	bx	lr
